// describe("#Zapper", function () {
//     it("should initialize the zapper with the correct parameters and have correct balances of tokens", async function () {
//         // Sanity check
//         expect(await this.Zapper.Factory()).to.equal(this.UniFactory.address);
//         expect(await this.Zapper.Router()).to.equal(this.UniRouter.address);
//         expect(await this.USDC.balanceOf(this.admin)).to.equal(
//             toBig(this.deployerUSDCBalance - this.USDCLiquidity),
//         );
//         expect(await this.krTSLA.balanceOf(this.admin)).to.equal(0);
//     });

//     it("should have created LP pair and have LP tokens", async function () {
//         const LPSupply = fromBig(await this.lpPair.totalSupply());
//         const AdminBalance = fromBig(await this.lpPair.balanceOf(this.admin));
//         expect(LPSupply).to.be.greaterThan(0);
//         // Admin should own that supply
//         expect(LPSupply).to.equal(AdminBalance);
//     });

//     it("should zap with optimal amount and send LP tokens to user if deposit = false", async function () {
//         // Deposit 500 USDC
//         const depositAmount = 500;

//         // Do not enter staking
//         const depositToIncentives = false;

//         // LP balance before zapping
//         const LPBalBefore = fromBig(await this.lpPair.balanceOf(this.admin));
//         await this.Zapper.zap(this.USDC.address, this.krTSLA.address, toBig(depositAmount), depositToIncentives);

//         // USDC in LP after zap
//         const USDCInLP = fromBig(await this.USDC.balanceOf(this.lpPair.address));

//         // It should equal liquidity + deposit amount
//         expect(USDCInLP).to.equal(this.USDCLiquidity + depositAmount);

//         // Admin should have gained more LP tokens
//         const LPBalAfter = fromBig(await this.lpPair.balanceOf(this.admin));
//         expect(LPBalAfter).to.be.greaterThan(LPBalBefore);
//     });
// });

// describe("#ZapToStaking", function () {
//     it("should deploy staking", async function () {
//         expect(this.KrStaking.address).to.not.equal(ethers.constants.AddressZero);
//     });

//     it("should zap to staking optimal one sided", async function () {
//         // Deposit 5001e18 USDC
//         const depositAmount = 500;
//         // LP goes to staking contract
//         const depositToIncentives = true;

//         // Zap
//         await this.Zapper.zap(this.USDC.address, this.krTSLA.address, toBig(depositAmount), depositToIncentives);

//         const balZapperUSDC = await this.USDC.balanceOf(this.Zapper.address);
//         const balZapperTSLA = await this.krTSLA.balanceOf(this.Zapper.address);

//         // Ensure nothing is left in zapper
//         expect(balZapperTSLA).to.equal(0);
//         expect(balZapperUSDC).to.equal(0);

//         // Get balance of LP pair in staking contract
//         const stakingBalance = fromBig(await this.lpPair.balanceOf(this.KrStaking.address));

//         // Get deposit amount of user in staking contract
//         const depositForUser = fromBig(await this.KrStaking.getDepositAmount(0));

//         // Ensure they match
//         expect(stakingBalance).to.be.equal(depositForUser);
//     });

//     it("should zap to staking with sub-optimal one sided", async function () {
//         // Deposit 5001e18 USDC
//         const depositAmount = 500;
//         // LP goes to staking contract
//         const depositToIncentives = true;

//         // Sub-optimal zap eg. depositAmount.div(2) swap.
//         await this.Zapper.zapSubOptimal(
//             this.USDC.address,
//             this.krTSLA.address,
//             toBig(depositAmount),
//             depositToIncentives,
//         );

//         const balZapperUSDC = await this.USDC.balanceOf(this.Zapper.address);
//         const balZapperTSLA = await this.krTSLA.balanceOf(this.Zapper.address);

//         // Ensure nothing is left in zapper
//         expect(balZapperTSLA).to.equal(0);
//         expect(balZapperUSDC).to.equal(0);

//         // Get balance of LP pair in staking contract
//         const stakingBalance = fromBig(await this.lpPair.balanceOf(this.KrStaking.address));

//         // Get deposit amount of user in staking contract
//         const depositForUser = fromBig(await this.KrStaking.getDepositAmount(0));

//         // Ensure they match
//         expect(stakingBalance).to.be.equal(depositForUser);
//     });
// });

// describe("#Unzap", function () {
//     beforeEach(async function () {
//         // Generate some external LP

//         // Mint 10M tokens for user one
//         await this.USDC.mint(this.userOne, toBig(10000000));
//         // Approve Kresko
//         await this.USDC.connect(this.signers.userOne).approve(this.Kresko.address, MaxUint256);
//         // Deposit 1M USDC Collateral
//         await this.Kresko.connect(this.signers.userOne).depositCollateral(
//             this.userOne,
//             this.USDC.address,
//             toBig(1000000),
//         );

//         // Mint 100 krTSLA = $90,250
//         await this.Kresko.connect(this.signers.userOne).mintKreskoAsset(
//             this.userOne,
//             this.krTSLA.address,
//             toBig(100),
//         );

//         // Approve zapper
//         await this.krTSLA.connect(this.signers.userOne).approve(this.Zapper.address, MaxUint256);

//         // Zap 4 krTSLA
//         await this.Zapper.connect(this.signers.userOne).zap(
//             this.krTSLA.address,
//             this.USDC.address,
//             toBig(100),
//             false,
//         );

//         // Zap into the staking contract before each test with 500 USDC
//         const depositAmount = 5000;
//         const depositToIncentives = true;

//         await this.Zapper.zap(this.USDC.address, this.krTSLA.address, toBig(depositAmount), depositToIncentives);

//         // Set the deposit amount for reuse
//         this.depositForUser = await this.KrStaking.getDepositAmount(0);
//     });

//     it("should unzap 100% of token A to user wallet with rewards", async function () {
//         // Record balance before unzap
//         const TSLABalBefore = await this.krTSLA.balanceOf(this.admin);

//         // Unzap
//         await this.Zapper.unzap(this.lpPair.address, this.krTSLA.address, this.depositForUser, true);

//         const balZapperUSDC = await this.USDC.balanceOf(this.Zapper.address);
//         const balZapperTSLA = await this.krTSLA.balanceOf(this.Zapper.address);

//         // Ensure nothing is left in zapper
//         expect(balZapperTSLA).to.equal(0);
//         expect(balZapperUSDC).to.equal(0);

//         // Ensure user received tokens
//         const TSLABalAfter = await this.krTSLA.balanceOf(this.admin);
//         expect(Number(TSLABalAfter)).to.be.greaterThan(Number(TSLABalBefore));

//         const balStaking = await this.KrStaking.getDepositAmount(0);
//         expect(balStaking).to.equal(0);

//         const rewardBalTKN1 = await this.RewardTKN1.balanceOf(this.admin);
//         const rewardBalTKN2 = await this.RewardTKN2.balanceOf(this.admin);

//         expect(Number(rewardBalTKN1)).to.be.greaterThan(0);
//         expect(Number(rewardBalTKN2)).to.be.greaterThan(0);
//     });

//     it("should unzap 100% of token B to user wallet with rewards", async function () {
//         // Record balance before unzap
//         const USDCBalBefore = await this.USDC.balanceOf(this.admin);

//         // Unzap
//         await this.Zapper.unzap(this.lpPair.address, this.USDC.address, this.depositForUser, true);

//         const balZapperUSDC = await this.USDC.balanceOf(this.Zapper.address);
//         const balZapperTSLA = await this.krTSLA.balanceOf(this.Zapper.address);

//         // Ensure nothing is left in zapper
//         expect(balZapperTSLA).to.equal(0);
//         expect(balZapperUSDC).to.equal(0);

//         // Ensure user received tokens
//         const USDCBalAfter = await this.USDC.balanceOf(this.admin);
//         expect(Number(USDCBalAfter)).to.be.greaterThan(Number(USDCBalBefore));

//         // Ensure balance is zero in staking contract
//         const balStaking = await this.KrStaking.getDepositAmount(0);
//         expect(balStaking).to.equal(0);

//         // Ensure user gets rewards
//         const rewardBalTKN1 = await this.RewardTKN1.balanceOf(this.admin);
//         const rewardBalTKN2 = await this.RewardTKN2.balanceOf(this.admin);

//         expect(Number(rewardBalTKN1)).to.be.greaterThan(0);
//         expect(Number(rewardBalTKN2)).to.be.greaterThan(0);
//     });

//     it("should unzap 100% of krAsset and repay debt", async function () {
//         // Record balance before unzap
//         const values: Record<string, number> = {};
//         values.debtBefore = fromBig(await this.Kresko.kreskoAssetDebt(this.admin, this.krTSLA.address));
//         values.kreskoAssetValueBefore = fromBig(await this.Kresko.getAccountKrAssetValue(this.admin));

//         // Unzap all krTSLA
//         await this.Zapper.unzap(this.lpPair.address, this.krTSLA.address, this.depositForUser, false);

//         // Ensure nothing is left in zapper
//         const balZapperUSDC = await this.USDC.balanceOf(this.Zapper.address);
//         const balZapperTSLA = await this.krTSLA.balanceOf(this.Zapper.address);
//         expect(balZapperTSLA).to.equal(0);
//         expect(balZapperUSDC).to.equal(0);

//         // Record values after
//         values.debtAfter = fromBig(await this.Kresko.kreskoAssetDebt(this.admin, this.krTSLA.address));
//         values.kreskoAssetValueAfter = fromBig(await this.Kresko.getAccountKrAssetValue(this.admin));

//         // Ensure debt is reduced
//         expect(values.debtAfter).to.be.lessThan(values.debtBefore);
//         expect(values.kreskoAssetValueAfter).to.be.lessThan(values.kreskoAssetValueBefore);
//     });

//     it("should unzap 100% of krAsset and deposit collateral", async function () {
//         // Record balance before unzap
//         const values: Record<string, number> = {};
//         values.collateralDepositsBefore = fromBig(
//             await this.Kresko.collateralDeposits(this.admin, this.USDC.address),
//         );
//         values.collateralValueBefore = fromBig(await this.Kresko.getAccountCollateralValue(this.admin));

//         await this.Zapper.unzap(this.lpPair.address, this.USDC.address, this.depositForUser, false);

//         // Ensure nothing is left in zapper
//         const balZapperUSDC = await this.USDC.balanceOf(this.Zapper.address);
//         const balZapperTSLA = await this.krTSLA.balanceOf(this.Zapper.address);
//         expect(balZapperTSLA).to.equal(0);
//         expect(balZapperUSDC).to.equal(0);

//         // Get collateral values after redepositing with unzap
//         values.collateralDepositsAfter = fromBig(
//             await this.Kresko.collateralDeposits(this.admin, this.USDC.address),
//         );
//         values.collateralValueAfter = fromBig(await this.Kresko.getAccountCollateralValue(this.admin));

//         // Ensure collateral is increased
//         expect(values.collateralDepositsAfter).to.be.greaterThan(values.collateralDepositsBefore);
//         expect(values.collateralValueAfter).to.be.greaterThan(values.collateralValueBefore);
//     });

//     it("should allow multiple unzappings and repayments/deposits", async function () {
//         // Record values before unzapping
//         const values: Record<string, number> = {};
//         values.collateralDepositsBefore = fromBig(
//             await this.Kresko.collateralDeposits(this.admin, this.USDC.address),
//         );
//         values.collateralValueBefore = fromBig(await this.Kresko.getAccountCollateralValue(this.admin));
//         values.debtBefore = fromBig(await this.Kresko.kreskoAssetDebt(this.admin, this.krTSLA.address));
//         values.kreskoAssetValueBefore = fromBig(await this.Kresko.getAccountKrAssetValue(this.admin));
//         values.USDCBalanceBefore = fromBig(await this.USDC.balanceOf(this.admin));

//         const depositForUser = this.depositForUser as BigNumber;

//         // Split the initial LP balance in half
//         const halfOfDeposit = depositForUser.div(2);

//         const quarterOfDeposit = halfOfDeposit.div(2);

//         // Unzap thrice, once for repaying debt, once for collateral deposit, once just to send tokens back
//         await this.Zapper.unzap(this.lpPair.address, this.USDC.address, halfOfDeposit, false);
//         await this.Zapper.unzap(this.lpPair.address, this.krTSLA.address, quarterOfDeposit, false);
//         await this.Zapper.unzap(this.lpPair.address, this.USDC.address, quarterOfDeposit, true);

//         // Ensure nothing is left in zapper
//         const balZapperUSDC = await this.USDC.balanceOf(this.Zapper.address);
//         const balZapperTSLA = await this.krTSLA.balanceOf(this.Zapper.address);
//         expect(balZapperTSLA).to.equal(0);
//         expect(balZapperUSDC).to.equal(0);

//         // Record USDC balance since quarter should be sent to wallet
//         values.USDCBalanceAfter = fromBig(await this.USDC.balanceOf(this.admin));

//         // Ensure user gets more tokens
//         expect(values.USDCBalanceAfter).to.be.greaterThan(values.USDCBalanceBefore);

//         // Record debt values after
//         values.debtAfter = fromBig(await this.Kresko.kreskoAssetDebt(this.admin, this.krTSLA.address));
//         values.kreskoAssetValueAfter = fromBig(await this.Kresko.getAccountKrAssetValue(this.admin));

//         // Ensure debt is reduced
//         expect(values.debtAfter).to.be.lessThan(values.debtBefore);
//         expect(values.kreskoAssetValueAfter).to.be.lessThan(values.kreskoAssetValueBefore);

//         // Record collateral values after
//         values.collateralDepositsAfter = fromBig(
//             await this.Kresko.collateralDeposits(this.admin, this.USDC.address),
//         );
//         values.collateralValueAfter = fromBig(await this.Kresko.getAccountCollateralValue(this.admin));

//         // Ensure collateral gets increased
//         expect(values.collateralDepositsAfter).to.be.greaterThan(values.collateralDepositsBefore);
//         expect(values.collateralValueAfter).to.be.greaterThan(values.collateralValueBefore);
//     });
// });
