/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common";

export interface FluxPriceAggregatorInterface extends utils.Interface {
    functions: {
        "ADMIN_ROLE()": FunctionFragment;
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "decimals()": FunctionFragment;
        "description()": FunctionFragment;
        "getAnswer(uint256)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getRoundData(uint80)": FunctionFragment;
        "getTimestamp(uint256)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "latestAggregatorRoundId()": FunctionFragment;
        "latestAnswer()": FunctionFragment;
        "latestRound()": FunctionFragment;
        "latestRoundData()": FunctionFragment;
        "latestTimestamp()": FunctionFragment;
        "minDelay()": FunctionFragment;
        "oracles(uint256)": FunctionFragment;
        "pause(bool)": FunctionFragment;
        "paused()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDelay(uint256)": FunctionFragment;
        "setManualAnswer(int192)": FunctionFragment;
        "setOracles(address[])": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "typeAndVersion()": FunctionFragment;
        "updatePrices()": FunctionFragment;
        "version()": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "ADMIN_ROLE"
            | "DEFAULT_ADMIN_ROLE"
            | "decimals"
            | "description"
            | "getAnswer"
            | "getRoleAdmin"
            | "getRoundData"
            | "getTimestamp"
            | "grantRole"
            | "hasRole"
            | "latestAggregatorRoundId"
            | "latestAnswer"
            | "latestRound"
            | "latestRoundData"
            | "latestTimestamp"
            | "minDelay"
            | "oracles"
            | "pause"
            | "paused"
            | "renounceRole"
            | "revokeRole"
            | "setDelay"
            | "setManualAnswer"
            | "setOracles"
            | "supportsInterface"
            | "typeAndVersion"
            | "updatePrices"
            | "version",
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "description", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAnswer", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getRoundData", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getTimestamp", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "latestAggregatorRoundId", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestAnswer", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestRound", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestRoundData", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "minDelay", values?: undefined): string;
    encodeFunctionData(functionFragment: "oracles", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "pause", values: [boolean]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "setDelay", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setManualAnswer", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setOracles", values: [string[]]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "typeAndVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "updatePrices", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;

    decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "description", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoundData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestAggregatorRoundId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestRoundData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minDelay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setManualAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOracles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "typeAndVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePrices", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

    events: {
        "AnswerUpdated(int256,uint256,uint256)": EventFragment;
        "NewRound(uint256,address,uint256)": EventFragment;
        "Paused(address)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "Unpaused(address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "AnswerUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewRound"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AnswerUpdatedEventObject {
    current: BigNumber;
    roundId: BigNumber;
    updatedAt: BigNumber;
}
export type AnswerUpdatedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], AnswerUpdatedEventObject>;

export type AnswerUpdatedEventFilter = TypedEventFilter<AnswerUpdatedEvent>;

export interface NewRoundEventObject {
    roundId: BigNumber;
    startedBy: string;
    startedAt: BigNumber;
}
export type NewRoundEvent = TypedEvent<[BigNumber, string, BigNumber], NewRoundEventObject>;

export type NewRoundEventFilter = TypedEventFilter<NewRoundEvent>;

export interface PausedEventObject {
    account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
    account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface FluxPriceAggregator extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: FluxPriceAggregatorInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        decimals(overrides?: CallOverrides): Promise<[number]>;

        description(overrides?: CallOverrides): Promise<[string]>;

        getAnswer(_roundId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

        getRoundData(
            _roundId: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        getTimestamp(_roundId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

        latestAggregatorRoundId(overrides?: CallOverrides): Promise<[number]>;

        latestAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

        latestRound(overrides?: CallOverrides): Promise<[BigNumber]>;

        latestRoundData(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        latestTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

        minDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

        oracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

        pause(
            __pause: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        paused(overrides?: CallOverrides): Promise<[boolean]>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setDelay(
            _minDelay: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setManualAnswer(
            _answer: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        setOracles(
            _oracles: string[],
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

        typeAndVersion(overrides?: CallOverrides): Promise<[string]>;

        updatePrices(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        version(overrides?: CallOverrides): Promise<[BigNumber]>;
    };

    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    description(overrides?: CallOverrides): Promise<string>;

    getAnswer(_roundId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoundData(
        _roundId: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            roundId: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }
    >;

    getTimestamp(_roundId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    latestAggregatorRoundId(overrides?: CallOverrides): Promise<number>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            roundId: BigNumber;
            answer: BigNumber;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }
    >;

    latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    minDelay(overrides?: CallOverrides): Promise<BigNumber>;

    oracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(__pause: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDelay(
        _minDelay: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setManualAnswer(
        _answer: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOracles(
        _oracles: string[],
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    typeAndVersion(overrides?: CallOverrides): Promise<string>;

    updatePrices(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    callStatic: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        decimals(overrides?: CallOverrides): Promise<number>;

        description(overrides?: CallOverrides): Promise<string>;

        getAnswer(_roundId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

        getRoundData(
            _roundId: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        getTimestamp(_roundId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

        latestAggregatorRoundId(overrides?: CallOverrides): Promise<number>;

        latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

        latestRound(overrides?: CallOverrides): Promise<BigNumber>;

        latestRoundData(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

        minDelay(overrides?: CallOverrides): Promise<BigNumber>;

        oracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

        pause(__pause: boolean, overrides?: CallOverrides): Promise<void>;

        paused(overrides?: CallOverrides): Promise<boolean>;

        renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

        setDelay(_minDelay: BigNumberish, overrides?: CallOverrides): Promise<void>;

        setManualAnswer(_answer: BigNumberish, overrides?: CallOverrides): Promise<void>;

        setOracles(_oracles: string[], overrides?: CallOverrides): Promise<void>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

        typeAndVersion(overrides?: CallOverrides): Promise<string>;

        updatePrices(overrides?: CallOverrides): Promise<void>;

        version(overrides?: CallOverrides): Promise<BigNumber>;
    };

    filters: {
        "AnswerUpdated(int256,uint256,uint256)"(
            current?: BigNumberish | null,
            roundId?: BigNumberish | null,
            updatedAt?: null,
        ): AnswerUpdatedEventFilter;
        AnswerUpdated(
            current?: BigNumberish | null,
            roundId?: BigNumberish | null,
            updatedAt?: null,
        ): AnswerUpdatedEventFilter;

        "NewRound(uint256,address,uint256)"(
            roundId?: BigNumberish | null,
            startedBy?: string | null,
            startedAt?: null,
        ): NewRoundEventFilter;
        NewRound(roundId?: BigNumberish | null, startedBy?: string | null, startedAt?: null): NewRoundEventFilter;

        "Paused(address)"(account?: null): PausedEventFilter;
        Paused(account?: null): PausedEventFilter;

        "RoleAdminChanged(bytes32,bytes32,bytes32)"(
            role?: BytesLike | null,
            previousAdminRole?: BytesLike | null,
            newAdminRole?: BytesLike | null,
        ): RoleAdminChangedEventFilter;
        RoleAdminChanged(
            role?: BytesLike | null,
            previousAdminRole?: BytesLike | null,
            newAdminRole?: BytesLike | null,
        ): RoleAdminChangedEventFilter;

        "RoleGranted(bytes32,address,address)"(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null,
        ): RoleGrantedEventFilter;
        RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

        "RoleRevoked(bytes32,address,address)"(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null,
        ): RoleRevokedEventFilter;
        RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;

        "Unpaused(address)"(account?: null): UnpausedEventFilter;
        Unpaused(account?: null): UnpausedEventFilter;
    };

    estimateGas: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<BigNumber>;

        description(overrides?: CallOverrides): Promise<BigNumber>;

        getAnswer(_roundId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        getRoundData(_roundId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        getTimestamp(_roundId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

        latestAggregatorRoundId(overrides?: CallOverrides): Promise<BigNumber>;

        latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

        latestRound(overrides?: CallOverrides): Promise<BigNumber>;

        latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

        latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

        minDelay(overrides?: CallOverrides): Promise<BigNumber>;

        oracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        pause(__pause: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        paused(overrides?: CallOverrides): Promise<BigNumber>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setDelay(
            _minDelay: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setManualAnswer(
            _answer: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        setOracles(_oracles: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;

        updatePrices(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        version(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getAnswer(_roundId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRoundData(_roundId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getTimestamp(_roundId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        latestAggregatorRoundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        latestAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        latestRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        latestTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        minDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        oracles(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pause(
            __pause: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setDelay(
            _minDelay: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setManualAnswer(
            _answer: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        setOracles(
            _oracles: string[],
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        updatePrices(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
