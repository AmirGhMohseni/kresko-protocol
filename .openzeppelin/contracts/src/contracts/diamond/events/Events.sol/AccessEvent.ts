/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../../../common";

export interface AccessEventInterface extends utils.Interface {
    functions: {};

    events: {
        "OperatorToggled(address,address,bool)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PendingOwnershipTransfer(address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "OperatorToggled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PendingOwnershipTransfer"): EventFragment;
}

export interface OperatorToggledEventObject {
    contractAddress: string;
    targetContract: string;
    allowed: boolean;
}
export type OperatorToggledEvent = TypedEvent<[string, string, boolean], OperatorToggledEventObject>;

export type OperatorToggledEventFilter = TypedEventFilter<OperatorToggledEvent>;

export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PendingOwnershipTransferEventObject {
    previousOwner: string;
    newOwner: string;
}
export type PendingOwnershipTransferEvent = TypedEvent<[string, string], PendingOwnershipTransferEventObject>;

export type PendingOwnershipTransferEventFilter = TypedEventFilter<PendingOwnershipTransferEvent>;

export interface AccessEvent extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: AccessEventInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {};

    callStatic: {};

    filters: {
        "OperatorToggled(address,address,bool)"(
            contractAddress?: string | null,
            targetContract?: string | null,
            allowed?: boolean | null,
        ): OperatorToggledEventFilter;
        OperatorToggled(
            contractAddress?: string | null,
            targetContract?: string | null,
            allowed?: boolean | null,
        ): OperatorToggledEventFilter;

        "OwnershipTransferred(address,address)"(
            previousOwner?: string | null,
            newOwner?: string | null,
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

        "PendingOwnershipTransfer(address,address)"(
            previousOwner?: string | null,
            newOwner?: string | null,
        ): PendingOwnershipTransferEventFilter;
        PendingOwnershipTransfer(
            previousOwner?: string | null,
            newOwner?: string | null,
        ): PendingOwnershipTransferEventFilter;
    };

    estimateGas: {};

    populateTransaction: {};
}
