/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../../../common";

export interface DiamondOwnershipFacetInterface extends utils.Interface {
    functions: {
        "acceptOwnership()": FunctionFragment;
        "owner()": FunctionFragment;
        "pendingOwner()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic: "acceptOwnership" | "owner" | "pendingOwner" | "transferOwnership",
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "acceptOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pendingOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;

    decodeFunctionResult(functionFragment: "acceptOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;

    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "PendingOwnershipTransfer(address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PendingOwnershipTransfer"): EventFragment;
}

export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PendingOwnershipTransferEventObject {
    previousOwner: string;
    newOwner: string;
}
export type PendingOwnershipTransferEvent = TypedEvent<[string, string], PendingOwnershipTransferEventObject>;

export type PendingOwnershipTransferEventFilter = TypedEventFilter<PendingOwnershipTransferEvent>;

export interface DiamondOwnershipFacet extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: DiamondOwnershipFacetInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        pendingOwner(overrides?: CallOverrides): Promise<[string]>;

        transferOwnership(
            _newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
        _newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        acceptOwnership(overrides?: CallOverrides): Promise<void>;

        owner(overrides?: CallOverrides): Promise<string>;

        pendingOwner(overrides?: CallOverrides): Promise<string>;

        transferOwnership(_newOwner: string, overrides?: CallOverrides): Promise<void>;
    };

    filters: {
        "OwnershipTransferred(address,address)"(
            previousOwner?: string | null,
            newOwner?: string | null,
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

        "PendingOwnershipTransfer(address,address)"(
            previousOwner?: string | null,
            newOwner?: string | null,
        ): PendingOwnershipTransferEventFilter;
        PendingOwnershipTransfer(
            previousOwner?: string | null,
            newOwner?: string | null,
        ): PendingOwnershipTransferEventFilter;
    };

    estimateGas: {
        acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(
            _newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transferOwnership(
            _newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
