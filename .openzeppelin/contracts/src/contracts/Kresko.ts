/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";

export declare namespace FixedPoint {
    export type UnsignedStruct = { rawValue: BigNumberish };

    export type UnsignedStructOutput = [BigNumber] & { rawValue: BigNumber };
}

export interface KreskoInterface extends utils.Interface {
    functions: {
        "MAX_BURN_FEE()": FunctionFragment;
        "MAX_DEBT_VALUE()": FunctionFragment;
        "MAX_LIQUIDATION_INCENTIVE_MULTIPLIER()": FunctionFragment;
        "MIN_COLLATERALIZATION_RATIO()": FunctionFragment;
        "MIN_LIQUIDATION_INCENTIVE_MULTIPLIER()": FunctionFragment;
        "ONE_HUNDRED_PERCENT()": FunctionFragment;
        "addCollateralAsset(address,uint256,address,bool)": FunctionFragment;
        "addKreskoAsset(address,string,uint256,address,uint256)": FunctionFragment;
        "burnFee()": FunctionFragment;
        "burnKreskoAsset(address,address,uint256,uint256)": FunctionFragment;
        "calculateMaxLiquidatableValueForAssets(address,address,address)": FunctionFragment;
        "claimOwnership()": FunctionFragment;
        "collateralAssets(address)": FunctionFragment;
        "collateralDeposits(address,address)": FunctionFragment;
        "collateralExists(address)": FunctionFragment;
        "depositCollateral(address,address,uint256)": FunctionFragment;
        "depositRebasingCollateral(address,address,uint256)": FunctionFragment;
        "depositedCollateralAssets(address,uint256)": FunctionFragment;
        "feeRecipient()": FunctionFragment;
        "getAccountCollateralValue(address)": FunctionFragment;
        "getAccountKrAssetValue(address)": FunctionFragment;
        "getAccountMinimumCollateralValue(address)": FunctionFragment;
        "getCollateralValueAndOraclePrice(address,uint256,bool)": FunctionFragment;
        "getDepositedCollateralAssetIndex(address,address)": FunctionFragment;
        "getDepositedCollateralAssets(address)": FunctionFragment;
        "getKrAssetValue(address,uint256,bool)": FunctionFragment;
        "getMinimumCollateralValue(address,uint256)": FunctionFragment;
        "getMintedKreskoAssets(address)": FunctionFragment;
        "getMintedKreskoAssetsIndex(address,address)": FunctionFragment;
        "initialize(uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
        "isAccountLiquidatable(address)": FunctionFragment;
        "krAssetExists(address)": FunctionFragment;
        "kreskoAssetDebt(address,address)": FunctionFragment;
        "kreskoAssetSymbols(string)": FunctionFragment;
        "kreskoAssets(address)": FunctionFragment;
        "liquidate(address,address,uint256,address,uint256,uint256,bool)": FunctionFragment;
        "liquidationIncentiveMultiplier()": FunctionFragment;
        "minimumCollateralizationRatio()": FunctionFragment;
        "minimumDebtValue()": FunctionFragment;
        "mintKreskoAsset(address,address,uint256)": FunctionFragment;
        "mintedKreskoAssets(address,uint256)": FunctionFragment;
        "owner()": FunctionFragment;
        "pendingOwner()": FunctionFragment;
        "secondsUntilStalePrice()": FunctionFragment;
        "toggleTrustedContract(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "trustedContracts(address)": FunctionFragment;
        "updateBurnFee(uint256)": FunctionFragment;
        "updateCollateralAsset(address,uint256,address)": FunctionFragment;
        "updateFeeRecipient(address)": FunctionFragment;
        "updateKreskoAsset(address,uint256,address,bool,uint256)": FunctionFragment;
        "updateLiquidationIncentiveMultiplier(uint256)": FunctionFragment;
        "updateMinimumCollateralizationRatio(uint256)": FunctionFragment;
        "updateMinimumDebtValue(uint256)": FunctionFragment;
        "updateSecondsUntilStalePrice(uint256)": FunctionFragment;
        "withdrawCollateral(address,address,uint256,uint256)": FunctionFragment;
        "withdrawRebasingCollateral(address,address,uint256,uint256)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "MAX_BURN_FEE"
            | "MAX_DEBT_VALUE"
            | "MAX_LIQUIDATION_INCENTIVE_MULTIPLIER"
            | "MIN_COLLATERALIZATION_RATIO"
            | "MIN_LIQUIDATION_INCENTIVE_MULTIPLIER"
            | "ONE_HUNDRED_PERCENT"
            | "addCollateralAsset"
            | "addKreskoAsset"
            | "burnFee"
            | "burnKreskoAsset"
            | "calculateMaxLiquidatableValueForAssets"
            | "claimOwnership"
            | "collateralAssets"
            | "collateralDeposits"
            | "collateralExists"
            | "depositCollateral"
            | "depositRebasingCollateral"
            | "depositedCollateralAssets"
            | "feeRecipient"
            | "getAccountCollateralValue"
            | "getAccountKrAssetValue"
            | "getAccountMinimumCollateralValue"
            | "getCollateralValueAndOraclePrice"
            | "getDepositedCollateralAssetIndex"
            | "getDepositedCollateralAssets"
            | "getKrAssetValue"
            | "getMinimumCollateralValue"
            | "getMintedKreskoAssets"
            | "getMintedKreskoAssetsIndex"
            | "initialize"
            | "isAccountLiquidatable"
            | "krAssetExists"
            | "kreskoAssetDebt"
            | "kreskoAssetSymbols"
            | "kreskoAssets"
            | "liquidate"
            | "liquidationIncentiveMultiplier"
            | "minimumCollateralizationRatio"
            | "minimumDebtValue"
            | "mintKreskoAsset"
            | "mintedKreskoAssets"
            | "owner"
            | "pendingOwner"
            | "secondsUntilStalePrice"
            | "toggleTrustedContract"
            | "transferOwnership"
            | "trustedContracts"
            | "updateBurnFee"
            | "updateCollateralAsset"
            | "updateFeeRecipient"
            | "updateKreskoAsset"
            | "updateLiquidationIncentiveMultiplier"
            | "updateMinimumCollateralizationRatio"
            | "updateMinimumDebtValue"
            | "updateSecondsUntilStalePrice"
            | "withdrawCollateral"
            | "withdrawRebasingCollateral",
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "MAX_BURN_FEE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_DEBT_VALUE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_LIQUIDATION_INCENTIVE_MULTIPLIER", values?: undefined): string;
    encodeFunctionData(functionFragment: "MIN_COLLATERALIZATION_RATIO", values?: undefined): string;
    encodeFunctionData(functionFragment: "MIN_LIQUIDATION_INCENTIVE_MULTIPLIER", values?: undefined): string;
    encodeFunctionData(functionFragment: "ONE_HUNDRED_PERCENT", values?: undefined): string;
    encodeFunctionData(functionFragment: "addCollateralAsset", values: [string, BigNumberish, string, boolean]): string;
    encodeFunctionData(
        functionFragment: "addKreskoAsset",
        values: [string, string, BigNumberish, string, BigNumberish],
    ): string;
    encodeFunctionData(functionFragment: "burnFee", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "burnKreskoAsset",
        values: [string, string, BigNumberish, BigNumberish],
    ): string;
    encodeFunctionData(
        functionFragment: "calculateMaxLiquidatableValueForAssets",
        values: [string, string, string],
    ): string;
    encodeFunctionData(functionFragment: "claimOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "collateralAssets", values: [string]): string;
    encodeFunctionData(functionFragment: "collateralDeposits", values: [string, string]): string;
    encodeFunctionData(functionFragment: "collateralExists", values: [string]): string;
    encodeFunctionData(functionFragment: "depositCollateral", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "depositRebasingCollateral", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "depositedCollateralAssets", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "feeRecipient", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAccountCollateralValue", values: [string]): string;
    encodeFunctionData(functionFragment: "getAccountKrAssetValue", values: [string]): string;
    encodeFunctionData(functionFragment: "getAccountMinimumCollateralValue", values: [string]): string;
    encodeFunctionData(
        functionFragment: "getCollateralValueAndOraclePrice",
        values: [string, BigNumberish, boolean],
    ): string;
    encodeFunctionData(functionFragment: "getDepositedCollateralAssetIndex", values: [string, string]): string;
    encodeFunctionData(functionFragment: "getDepositedCollateralAssets", values: [string]): string;
    encodeFunctionData(functionFragment: "getKrAssetValue", values: [string, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "getMinimumCollateralValue", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getMintedKreskoAssets", values: [string]): string;
    encodeFunctionData(functionFragment: "getMintedKreskoAssetsIndex", values: [string, string]): string;
    encodeFunctionData(
        functionFragment: "initialize",
        values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    ): string;
    encodeFunctionData(functionFragment: "isAccountLiquidatable", values: [string]): string;
    encodeFunctionData(functionFragment: "krAssetExists", values: [string]): string;
    encodeFunctionData(functionFragment: "kreskoAssetDebt", values: [string, string]): string;
    encodeFunctionData(functionFragment: "kreskoAssetSymbols", values: [string]): string;
    encodeFunctionData(functionFragment: "kreskoAssets", values: [string]): string;
    encodeFunctionData(
        functionFragment: "liquidate",
        values: [string, string, BigNumberish, string, BigNumberish, BigNumberish, boolean],
    ): string;
    encodeFunctionData(functionFragment: "liquidationIncentiveMultiplier", values?: undefined): string;
    encodeFunctionData(functionFragment: "minimumCollateralizationRatio", values?: undefined): string;
    encodeFunctionData(functionFragment: "minimumDebtValue", values?: undefined): string;
    encodeFunctionData(functionFragment: "mintKreskoAsset", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "mintedKreskoAssets", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pendingOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "secondsUntilStalePrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "toggleTrustedContract", values: [string]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "trustedContracts", values: [string]): string;
    encodeFunctionData(functionFragment: "updateBurnFee", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateCollateralAsset", values: [string, BigNumberish, string]): string;
    encodeFunctionData(functionFragment: "updateFeeRecipient", values: [string]): string;
    encodeFunctionData(
        functionFragment: "updateKreskoAsset",
        values: [string, BigNumberish, string, boolean, BigNumberish],
    ): string;
    encodeFunctionData(functionFragment: "updateLiquidationIncentiveMultiplier", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateMinimumCollateralizationRatio", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateMinimumDebtValue", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateSecondsUntilStalePrice", values: [BigNumberish]): string;
    encodeFunctionData(
        functionFragment: "withdrawCollateral",
        values: [string, string, BigNumberish, BigNumberish],
    ): string;
    encodeFunctionData(
        functionFragment: "withdrawRebasingCollateral",
        values: [string, string, BigNumberish, BigNumberish],
    ): string;

    decodeFunctionResult(functionFragment: "MAX_BURN_FEE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_DEBT_VALUE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_LIQUIDATION_INCENTIVE_MULTIPLIER", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MIN_COLLATERALIZATION_RATIO", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MIN_LIQUIDATION_INCENTIVE_MULTIPLIER", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ONE_HUNDRED_PERCENT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addCollateralAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addKreskoAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burnKreskoAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calculateMaxLiquidatableValueForAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collateralAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collateralDeposits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collateralExists", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositCollateral", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositRebasingCollateral", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositedCollateralAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "feeRecipient", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountCollateralValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountKrAssetValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountMinimumCollateralValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCollateralValueAndOraclePrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDepositedCollateralAssetIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDepositedCollateralAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getKrAssetValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMinimumCollateralValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMintedKreskoAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMintedKreskoAssetsIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAccountLiquidatable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "krAssetExists", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kreskoAssetDebt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kreskoAssetSymbols", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kreskoAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "liquidationIncentiveMultiplier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumCollateralizationRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumDebtValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintKreskoAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintedKreskoAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "secondsUntilStalePrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toggleTrustedContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "trustedContracts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateBurnFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateCollateralAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateFeeRecipient", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateKreskoAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLiquidationIncentiveMultiplier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMinimumCollateralizationRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMinimumDebtValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateSecondsUntilStalePrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawCollateral", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawRebasingCollateral", data: BytesLike): Result;

    events: {
        "BurnFeePaid(address,address,uint256,uint256)": EventFragment;
        "BurnFeeUpdated(uint256)": EventFragment;
        "CollateralAssetAdded(address,uint256,address)": EventFragment;
        "CollateralAssetUpdated(address,uint256,address)": EventFragment;
        "CollateralDeposited(address,address,uint256)": EventFragment;
        "CollateralWithdrawn(address,address,uint256)": EventFragment;
        "FeeRecipientUpdated(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "KreskoAssetAdded(address,string,uint256,address,uint256)": EventFragment;
        "KreskoAssetBurned(address,address,uint256)": EventFragment;
        "KreskoAssetMinted(address,address,uint256)": EventFragment;
        "KreskoAssetUpdated(address,uint256,address,bool,uint256)": EventFragment;
        "LiquidationIncentiveMultiplierUpdated(uint256)": EventFragment;
        "LiquidationOccurred(address,address,address,uint256,address,uint256)": EventFragment;
        "MinimumCollateralizationRatioUpdated(uint256)": EventFragment;
        "MinimumDebtValueUpdated(uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PendingOwnershipTransfer(address,address)": EventFragment;
        "SecondsUntilStalePriceUpdated(uint256)": EventFragment;
        "TrustedContract(address,bool)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "BurnFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BurnFeeUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CollateralAssetAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CollateralAssetUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CollateralDeposited"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CollateralWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FeeRecipientUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "KreskoAssetAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "KreskoAssetBurned"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "KreskoAssetMinted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "KreskoAssetUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LiquidationIncentiveMultiplierUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LiquidationOccurred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MinimumCollateralizationRatioUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MinimumDebtValueUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PendingOwnershipTransfer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SecondsUntilStalePriceUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TrustedContract"): EventFragment;
}

export interface BurnFeePaidEventObject {
    account: string;
    paymentCollateralAsset: string;
    paymentAmount: BigNumber;
    paymentValue: BigNumber;
}
export type BurnFeePaidEvent = TypedEvent<[string, string, BigNumber, BigNumber], BurnFeePaidEventObject>;

export type BurnFeePaidEventFilter = TypedEventFilter<BurnFeePaidEvent>;

export interface BurnFeeUpdatedEventObject {
    burnFee: BigNumber;
}
export type BurnFeeUpdatedEvent = TypedEvent<[BigNumber], BurnFeeUpdatedEventObject>;

export type BurnFeeUpdatedEventFilter = TypedEventFilter<BurnFeeUpdatedEvent>;

export interface CollateralAssetAddedEventObject {
    collateralAsset: string;
    factor: BigNumber;
    oracle: string;
}
export type CollateralAssetAddedEvent = TypedEvent<[string, BigNumber, string], CollateralAssetAddedEventObject>;

export type CollateralAssetAddedEventFilter = TypedEventFilter<CollateralAssetAddedEvent>;

export interface CollateralAssetUpdatedEventObject {
    collateralAsset: string;
    factor: BigNumber;
    oracle: string;
}
export type CollateralAssetUpdatedEvent = TypedEvent<[string, BigNumber, string], CollateralAssetUpdatedEventObject>;

export type CollateralAssetUpdatedEventFilter = TypedEventFilter<CollateralAssetUpdatedEvent>;

export interface CollateralDepositedEventObject {
    account: string;
    collateralAsset: string;
    amount: BigNumber;
}
export type CollateralDepositedEvent = TypedEvent<[string, string, BigNumber], CollateralDepositedEventObject>;

export type CollateralDepositedEventFilter = TypedEventFilter<CollateralDepositedEvent>;

export interface CollateralWithdrawnEventObject {
    account: string;
    collateralAsset: string;
    amount: BigNumber;
}
export type CollateralWithdrawnEvent = TypedEvent<[string, string, BigNumber], CollateralWithdrawnEventObject>;

export type CollateralWithdrawnEventFilter = TypedEventFilter<CollateralWithdrawnEvent>;

export interface FeeRecipientUpdatedEventObject {
    feeRecipient: string;
}
export type FeeRecipientUpdatedEvent = TypedEvent<[string], FeeRecipientUpdatedEventObject>;

export type FeeRecipientUpdatedEventFilter = TypedEventFilter<FeeRecipientUpdatedEvent>;

export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KreskoAssetAddedEventObject {
    kreskoAsset: string;
    symbol: string;
    kFactor: BigNumber;
    oracle: string;
    marketCapLimit: BigNumber;
}
export type KreskoAssetAddedEvent = TypedEvent<
    [string, string, BigNumber, string, BigNumber],
    KreskoAssetAddedEventObject
>;

export type KreskoAssetAddedEventFilter = TypedEventFilter<KreskoAssetAddedEvent>;

export interface KreskoAssetBurnedEventObject {
    account: string;
    kreskoAsset: string;
    amount: BigNumber;
}
export type KreskoAssetBurnedEvent = TypedEvent<[string, string, BigNumber], KreskoAssetBurnedEventObject>;

export type KreskoAssetBurnedEventFilter = TypedEventFilter<KreskoAssetBurnedEvent>;

export interface KreskoAssetMintedEventObject {
    account: string;
    kreskoAsset: string;
    amount: BigNumber;
}
export type KreskoAssetMintedEvent = TypedEvent<[string, string, BigNumber], KreskoAssetMintedEventObject>;

export type KreskoAssetMintedEventFilter = TypedEventFilter<KreskoAssetMintedEvent>;

export interface KreskoAssetUpdatedEventObject {
    kreskoAsset: string;
    kFactor: BigNumber;
    oracle: string;
    mintable: boolean;
    limit: BigNumber;
}
export type KreskoAssetUpdatedEvent = TypedEvent<
    [string, BigNumber, string, boolean, BigNumber],
    KreskoAssetUpdatedEventObject
>;

export type KreskoAssetUpdatedEventFilter = TypedEventFilter<KreskoAssetUpdatedEvent>;

export interface LiquidationIncentiveMultiplierUpdatedEventObject {
    liquidationIncentiveMultiplier: BigNumber;
}
export type LiquidationIncentiveMultiplierUpdatedEvent = TypedEvent<
    [BigNumber],
    LiquidationIncentiveMultiplierUpdatedEventObject
>;

export type LiquidationIncentiveMultiplierUpdatedEventFilter =
    TypedEventFilter<LiquidationIncentiveMultiplierUpdatedEvent>;

export interface LiquidationOccurredEventObject {
    account: string;
    liquidator: string;
    repayKreskoAsset: string;
    repayAmount: BigNumber;
    seizedCollateralAsset: string;
    collateralSent: BigNumber;
}
export type LiquidationOccurredEvent = TypedEvent<
    [string, string, string, BigNumber, string, BigNumber],
    LiquidationOccurredEventObject
>;

export type LiquidationOccurredEventFilter = TypedEventFilter<LiquidationOccurredEvent>;

export interface MinimumCollateralizationRatioUpdatedEventObject {
    minimumCollateralizationRatio: BigNumber;
}
export type MinimumCollateralizationRatioUpdatedEvent = TypedEvent<
    [BigNumber],
    MinimumCollateralizationRatioUpdatedEventObject
>;

export type MinimumCollateralizationRatioUpdatedEventFilter =
    TypedEventFilter<MinimumCollateralizationRatioUpdatedEvent>;

export interface MinimumDebtValueUpdatedEventObject {
    minimumDebtValue: BigNumber;
}
export type MinimumDebtValueUpdatedEvent = TypedEvent<[BigNumber], MinimumDebtValueUpdatedEventObject>;

export type MinimumDebtValueUpdatedEventFilter = TypedEventFilter<MinimumDebtValueUpdatedEvent>;

export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PendingOwnershipTransferEventObject {
    previousOwner: string;
    pendingOwner: string;
}
export type PendingOwnershipTransferEvent = TypedEvent<[string, string], PendingOwnershipTransferEventObject>;

export type PendingOwnershipTransferEventFilter = TypedEventFilter<PendingOwnershipTransferEvent>;

export interface SecondsUntilStalePriceUpdatedEventObject {
    secondsUntilStalePrice: BigNumber;
}
export type SecondsUntilStalePriceUpdatedEvent = TypedEvent<[BigNumber], SecondsUntilStalePriceUpdatedEventObject>;

export type SecondsUntilStalePriceUpdatedEventFilter = TypedEventFilter<SecondsUntilStalePriceUpdatedEvent>;

export interface TrustedContractEventObject {
    contractAddress: string;
    isTrusted: boolean;
}
export type TrustedContractEvent = TypedEvent<[string, boolean], TrustedContractEventObject>;

export type TrustedContractEventFilter = TypedEventFilter<TrustedContractEvent>;

export interface Kresko extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: KreskoInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        MAX_BURN_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

        MAX_DEBT_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

        MAX_LIQUIDATION_INCENTIVE_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

        MIN_COLLATERALIZATION_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

        MIN_LIQUIDATION_INCENTIVE_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

        ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

        addCollateralAsset(
            _collateralAsset: string,
            _factor: BigNumberish,
            _oracle: string,
            isNonRebasingWrapperToken: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        addKreskoAsset(
            _kreskoAsset: string,
            _symbol: string,
            _kFactor: BigNumberish,
            _oracle: string,
            _marketCapUSDLimit: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        burnFee(overrides?: CallOverrides): Promise<[BigNumber] & { rawValue: BigNumber }>;

        burnKreskoAsset(
            _account: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            _mintedKreskoAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        calculateMaxLiquidatableValueForAssets(
            _account: string,
            _repayKreskoAsset: string,
            _collateralAssetToSeize: string,
            overrides?: CallOverrides,
        ): Promise<
            [FixedPoint.UnsignedStructOutput] & {
                maxLiquidatableUSD: FixedPoint.UnsignedStructOutput;
            }
        >;

        claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        collateralAssets(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [FixedPoint.UnsignedStructOutput, string, string, number, boolean] & {
                factor: FixedPoint.UnsignedStructOutput;
                oracle: string;
                underlyingRebasingToken: string;
                decimals: number;
                exists: boolean;
            }
        >;

        collateralDeposits(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        collateralExists(_collateralAsset: string, overrides?: CallOverrides): Promise<[boolean]>;

        depositCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        depositRebasingCollateral(
            _account: string,
            _collateralAsset: string,
            _rebasingAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        depositedCollateralAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

        feeRecipient(overrides?: CallOverrides): Promise<[string]>;

        getAccountCollateralValue(
            _account: string,
            overrides?: CallOverrides,
        ): Promise<[FixedPoint.UnsignedStructOutput]>;

        getAccountKrAssetValue(_account: string, overrides?: CallOverrides): Promise<[FixedPoint.UnsignedStructOutput]>;

        getAccountMinimumCollateralValue(
            _account: string,
            overrides?: CallOverrides,
        ): Promise<[FixedPoint.UnsignedStructOutput]>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: string,
            _amount: BigNumberish,
            _ignoreCollateralFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<[FixedPoint.UnsignedStructOutput, FixedPoint.UnsignedStructOutput]>;

        getDepositedCollateralAssetIndex(
            _account: string,
            _collateralAsset: string,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { i: BigNumber }>;

        getDepositedCollateralAssets(_account: string, overrides?: CallOverrides): Promise<[string[]]>;

        getKrAssetValue(
            _kreskoAsset: string,
            _amount: BigNumberish,
            _ignoreKFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<[FixedPoint.UnsignedStructOutput]>;

        getMinimumCollateralValue(
            _krAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [FixedPoint.UnsignedStructOutput] & {
                minCollateralValue: FixedPoint.UnsignedStructOutput;
            }
        >;

        getMintedKreskoAssets(_account: string, overrides?: CallOverrides): Promise<[string[]]>;

        getMintedKreskoAssetsIndex(
            _account: string,
            _kreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { i: BigNumber }>;

        initialize(
            _burnFee: BigNumberish,
            _feeRecipient: string,
            _liquidationIncentiveMultiplier: BigNumberish,
            _minimumCollateralizationRatio: BigNumberish,
            _minimumDebtValue: BigNumberish,
            _secondsUntilStalePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        isAccountLiquidatable(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

        krAssetExists(_krAsset: string, overrides?: CallOverrides): Promise<[boolean]>;

        kreskoAssetDebt(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        kreskoAssetSymbols(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

        kreskoAssets(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [FixedPoint.UnsignedStructOutput, string, boolean, boolean, BigNumber] & {
                kFactor: FixedPoint.UnsignedStructOutput;
                oracle: string;
                exists: boolean;
                mintable: boolean;
                marketCapUSDLimit: BigNumber;
            }
        >;

        liquidate(
            _account: string,
            _repayKreskoAsset: string,
            _repayAmount: BigNumberish,
            _collateralAssetToSeize: string,
            _mintedKreskoAssetIndex: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            _keepKrAssetDebt: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        liquidationIncentiveMultiplier(overrides?: CallOverrides): Promise<[BigNumber] & { rawValue: BigNumber }>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<[BigNumber] & { rawValue: BigNumber }>;

        minimumDebtValue(overrides?: CallOverrides): Promise<[BigNumber] & { rawValue: BigNumber }>;

        mintKreskoAsset(
            _account: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        mintedKreskoAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        pendingOwner(overrides?: CallOverrides): Promise<[string]>;

        secondsUntilStalePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

        toggleTrustedContract(
            _trustedContract: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        trustedContracts(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

        updateBurnFee(
            _burnFee: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateCollateralAsset(
            _collateralAsset: string,
            _factor: BigNumberish,
            _oracle: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateFeeRecipient(
            _feeRecipient: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateKreskoAsset(
            _kreskoAsset: string,
            _kFactor: BigNumberish,
            _oracle: string,
            _mintable: boolean,
            _marketCapUSDLimit: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateLiquidationIncentiveMultiplier(
            _liquidationIncentiveMultiplier: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateMinimumCollateralizationRatio(
            _minimumCollateralizationRatio: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateMinimumDebtValue(
            _minimumDebtValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateSecondsUntilStalePrice(
            _secondsUntilStalePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        withdrawCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        withdrawRebasingCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    MAX_BURN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DEBT_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LIQUIDATION_INCENTIVE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_COLLATERALIZATION_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LIQUIDATION_INCENTIVE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateralAsset(
        _collateralAsset: string,
        _factor: BigNumberish,
        _oracle: string,
        isNonRebasingWrapperToken: boolean,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addKreskoAsset(
        _kreskoAsset: string,
        _symbol: string,
        _kFactor: BigNumberish,
        _oracle: string,
        _marketCapUSDLimit: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    burnFee(overrides?: CallOverrides): Promise<BigNumber>;

    burnKreskoAsset(
        _account: string,
        _kreskoAsset: string,
        _amount: BigNumberish,
        _mintedKreskoAssetIndex: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    calculateMaxLiquidatableValueForAssets(
        _account: string,
        _repayKreskoAsset: string,
        _collateralAssetToSeize: string,
        overrides?: CallOverrides,
    ): Promise<FixedPoint.UnsignedStructOutput>;

    claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    collateralAssets(
        arg0: string,
        overrides?: CallOverrides,
    ): Promise<
        [FixedPoint.UnsignedStructOutput, string, string, number, boolean] & {
            factor: FixedPoint.UnsignedStructOutput;
            oracle: string;
            underlyingRebasingToken: string;
            decimals: number;
            exists: boolean;
        }
    >;

    collateralDeposits(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    collateralExists(_collateralAsset: string, overrides?: CallOverrides): Promise<boolean>;

    depositCollateral(
        _account: string,
        _collateralAsset: string,
        _amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositRebasingCollateral(
        _account: string,
        _collateralAsset: string,
        _rebasingAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositedCollateralAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getAccountCollateralValue(_account: string, overrides?: CallOverrides): Promise<FixedPoint.UnsignedStructOutput>;

    getAccountKrAssetValue(_account: string, overrides?: CallOverrides): Promise<FixedPoint.UnsignedStructOutput>;

    getAccountMinimumCollateralValue(
        _account: string,
        overrides?: CallOverrides,
    ): Promise<FixedPoint.UnsignedStructOutput>;

    getCollateralValueAndOraclePrice(
        _collateralAsset: string,
        _amount: BigNumberish,
        _ignoreCollateralFactor: boolean,
        overrides?: CallOverrides,
    ): Promise<[FixedPoint.UnsignedStructOutput, FixedPoint.UnsignedStructOutput]>;

    getDepositedCollateralAssetIndex(
        _account: string,
        _collateralAsset: string,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDepositedCollateralAssets(_account: string, overrides?: CallOverrides): Promise<string[]>;

    getKrAssetValue(
        _kreskoAsset: string,
        _amount: BigNumberish,
        _ignoreKFactor: boolean,
        overrides?: CallOverrides,
    ): Promise<FixedPoint.UnsignedStructOutput>;

    getMinimumCollateralValue(
        _krAsset: string,
        _amount: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<FixedPoint.UnsignedStructOutput>;

    getMintedKreskoAssets(_account: string, overrides?: CallOverrides): Promise<string[]>;

    getMintedKreskoAssetsIndex(_account: string, _kreskoAsset: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
        _burnFee: BigNumberish,
        _feeRecipient: string,
        _liquidationIncentiveMultiplier: BigNumberish,
        _minimumCollateralizationRatio: BigNumberish,
        _minimumDebtValue: BigNumberish,
        _secondsUntilStalePrice: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isAccountLiquidatable(_account: string, overrides?: CallOverrides): Promise<boolean>;

    krAssetExists(_krAsset: string, overrides?: CallOverrides): Promise<boolean>;

    kreskoAssetDebt(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    kreskoAssetSymbols(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    kreskoAssets(
        arg0: string,
        overrides?: CallOverrides,
    ): Promise<
        [FixedPoint.UnsignedStructOutput, string, boolean, boolean, BigNumber] & {
            kFactor: FixedPoint.UnsignedStructOutput;
            oracle: string;
            exists: boolean;
            mintable: boolean;
            marketCapUSDLimit: BigNumber;
        }
    >;

    liquidate(
        _account: string,
        _repayKreskoAsset: string,
        _repayAmount: BigNumberish,
        _collateralAssetToSeize: string,
        _mintedKreskoAssetIndex: BigNumberish,
        _depositedCollateralAssetIndex: BigNumberish,
        _keepKrAssetDebt: boolean,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    liquidationIncentiveMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    minimumCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minimumDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

    mintKreskoAsset(
        _account: string,
        _kreskoAsset: string,
        _amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mintedKreskoAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    secondsUntilStalePrice(overrides?: CallOverrides): Promise<BigNumber>;

    toggleTrustedContract(
        _trustedContract: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    trustedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    updateBurnFee(
        _burnFee: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateCollateralAsset(
        _collateralAsset: string,
        _factor: BigNumberish,
        _oracle: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateFeeRecipient(
        _feeRecipient: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateKreskoAsset(
        _kreskoAsset: string,
        _kFactor: BigNumberish,
        _oracle: string,
        _mintable: boolean,
        _marketCapUSDLimit: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateLiquidationIncentiveMultiplier(
        _liquidationIncentiveMultiplier: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMinimumCollateralizationRatio(
        _minimumCollateralizationRatio: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMinimumDebtValue(
        _minimumDebtValue: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateSecondsUntilStalePrice(
        _secondsUntilStalePrice: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawCollateral(
        _account: string,
        _collateralAsset: string,
        _amount: BigNumberish,
        _depositedCollateralAssetIndex: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawRebasingCollateral(
        _account: string,
        _collateralAsset: string,
        _amount: BigNumberish,
        _depositedCollateralAssetIndex: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        MAX_BURN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

        MAX_DEBT_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

        MAX_LIQUIDATION_INCENTIVE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

        MIN_COLLATERALIZATION_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

        MIN_LIQUIDATION_INCENTIVE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

        ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

        addCollateralAsset(
            _collateralAsset: string,
            _factor: BigNumberish,
            _oracle: string,
            isNonRebasingWrapperToken: boolean,
            overrides?: CallOverrides,
        ): Promise<void>;

        addKreskoAsset(
            _kreskoAsset: string,
            _symbol: string,
            _kFactor: BigNumberish,
            _oracle: string,
            _marketCapUSDLimit: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        burnFee(overrides?: CallOverrides): Promise<BigNumber>;

        burnKreskoAsset(
            _account: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            _mintedKreskoAssetIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        calculateMaxLiquidatableValueForAssets(
            _account: string,
            _repayKreskoAsset: string,
            _collateralAssetToSeize: string,
            overrides?: CallOverrides,
        ): Promise<FixedPoint.UnsignedStructOutput>;

        claimOwnership(overrides?: CallOverrides): Promise<void>;

        collateralAssets(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [FixedPoint.UnsignedStructOutput, string, string, number, boolean] & {
                factor: FixedPoint.UnsignedStructOutput;
                oracle: string;
                underlyingRebasingToken: string;
                decimals: number;
                exists: boolean;
            }
        >;

        collateralDeposits(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

        collateralExists(_collateralAsset: string, overrides?: CallOverrides): Promise<boolean>;

        depositCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        depositRebasingCollateral(
            _account: string,
            _collateralAsset: string,
            _rebasingAmount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        depositedCollateralAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

        feeRecipient(overrides?: CallOverrides): Promise<string>;

        getAccountCollateralValue(
            _account: string,
            overrides?: CallOverrides,
        ): Promise<FixedPoint.UnsignedStructOutput>;

        getAccountKrAssetValue(_account: string, overrides?: CallOverrides): Promise<FixedPoint.UnsignedStructOutput>;

        getAccountMinimumCollateralValue(
            _account: string,
            overrides?: CallOverrides,
        ): Promise<FixedPoint.UnsignedStructOutput>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: string,
            _amount: BigNumberish,
            _ignoreCollateralFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<[FixedPoint.UnsignedStructOutput, FixedPoint.UnsignedStructOutput]>;

        getDepositedCollateralAssetIndex(
            _account: string,
            _collateralAsset: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getDepositedCollateralAssets(_account: string, overrides?: CallOverrides): Promise<string[]>;

        getKrAssetValue(
            _kreskoAsset: string,
            _amount: BigNumberish,
            _ignoreKFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<FixedPoint.UnsignedStructOutput>;

        getMinimumCollateralValue(
            _krAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<FixedPoint.UnsignedStructOutput>;

        getMintedKreskoAssets(_account: string, overrides?: CallOverrides): Promise<string[]>;

        getMintedKreskoAssetsIndex(
            _account: string,
            _kreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        initialize(
            _burnFee: BigNumberish,
            _feeRecipient: string,
            _liquidationIncentiveMultiplier: BigNumberish,
            _minimumCollateralizationRatio: BigNumberish,
            _minimumDebtValue: BigNumberish,
            _secondsUntilStalePrice: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        isAccountLiquidatable(_account: string, overrides?: CallOverrides): Promise<boolean>;

        krAssetExists(_krAsset: string, overrides?: CallOverrides): Promise<boolean>;

        kreskoAssetDebt(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

        kreskoAssetSymbols(arg0: string, overrides?: CallOverrides): Promise<boolean>;

        kreskoAssets(
            arg0: string,
            overrides?: CallOverrides,
        ): Promise<
            [FixedPoint.UnsignedStructOutput, string, boolean, boolean, BigNumber] & {
                kFactor: FixedPoint.UnsignedStructOutput;
                oracle: string;
                exists: boolean;
                mintable: boolean;
                marketCapUSDLimit: BigNumber;
            }
        >;

        liquidate(
            _account: string,
            _repayKreskoAsset: string,
            _repayAmount: BigNumberish,
            _collateralAssetToSeize: string,
            _mintedKreskoAssetIndex: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            _keepKrAssetDebt: boolean,
            overrides?: CallOverrides,
        ): Promise<void>;

        liquidationIncentiveMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

        minimumDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

        mintKreskoAsset(
            _account: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        mintedKreskoAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

        owner(overrides?: CallOverrides): Promise<string>;

        pendingOwner(overrides?: CallOverrides): Promise<string>;

        secondsUntilStalePrice(overrides?: CallOverrides): Promise<BigNumber>;

        toggleTrustedContract(_trustedContract: string, overrides?: CallOverrides): Promise<void>;

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

        trustedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

        updateBurnFee(_burnFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

        updateCollateralAsset(
            _collateralAsset: string,
            _factor: BigNumberish,
            _oracle: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateFeeRecipient(_feeRecipient: string, overrides?: CallOverrides): Promise<void>;

        updateKreskoAsset(
            _kreskoAsset: string,
            _kFactor: BigNumberish,
            _oracle: string,
            _mintable: boolean,
            _marketCapUSDLimit: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateLiquidationIncentiveMultiplier(
            _liquidationIncentiveMultiplier: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateMinimumCollateralizationRatio(
            _minimumCollateralizationRatio: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateMinimumDebtValue(_minimumDebtValue: BigNumberish, overrides?: CallOverrides): Promise<void>;

        updateSecondsUntilStalePrice(_secondsUntilStalePrice: BigNumberish, overrides?: CallOverrides): Promise<void>;

        withdrawCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        withdrawRebasingCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;
    };

    filters: {
        "BurnFeePaid(address,address,uint256,uint256)"(
            account?: string | null,
            paymentCollateralAsset?: string | null,
            paymentAmount?: BigNumberish | null,
            paymentValue?: null,
        ): BurnFeePaidEventFilter;
        BurnFeePaid(
            account?: string | null,
            paymentCollateralAsset?: string | null,
            paymentAmount?: BigNumberish | null,
            paymentValue?: null,
        ): BurnFeePaidEventFilter;

        "BurnFeeUpdated(uint256)"(burnFee?: BigNumberish | null): BurnFeeUpdatedEventFilter;
        BurnFeeUpdated(burnFee?: BigNumberish | null): BurnFeeUpdatedEventFilter;

        "CollateralAssetAdded(address,uint256,address)"(
            collateralAsset?: string | null,
            factor?: BigNumberish | null,
            oracle?: string | null,
        ): CollateralAssetAddedEventFilter;
        CollateralAssetAdded(
            collateralAsset?: string | null,
            factor?: BigNumberish | null,
            oracle?: string | null,
        ): CollateralAssetAddedEventFilter;

        "CollateralAssetUpdated(address,uint256,address)"(
            collateralAsset?: string | null,
            factor?: BigNumberish | null,
            oracle?: string | null,
        ): CollateralAssetUpdatedEventFilter;
        CollateralAssetUpdated(
            collateralAsset?: string | null,
            factor?: BigNumberish | null,
            oracle?: string | null,
        ): CollateralAssetUpdatedEventFilter;

        "CollateralDeposited(address,address,uint256)"(
            account?: string | null,
            collateralAsset?: string | null,
            amount?: BigNumberish | null,
        ): CollateralDepositedEventFilter;
        CollateralDeposited(
            account?: string | null,
            collateralAsset?: string | null,
            amount?: BigNumberish | null,
        ): CollateralDepositedEventFilter;

        "CollateralWithdrawn(address,address,uint256)"(
            account?: string | null,
            collateralAsset?: string | null,
            amount?: BigNumberish | null,
        ): CollateralWithdrawnEventFilter;
        CollateralWithdrawn(
            account?: string | null,
            collateralAsset?: string | null,
            amount?: BigNumberish | null,
        ): CollateralWithdrawnEventFilter;

        "FeeRecipientUpdated(address)"(feeRecipient?: string | null): FeeRecipientUpdatedEventFilter;
        FeeRecipientUpdated(feeRecipient?: string | null): FeeRecipientUpdatedEventFilter;

        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;

        "KreskoAssetAdded(address,string,uint256,address,uint256)"(
            kreskoAsset?: string | null,
            symbol?: string | null,
            kFactor?: BigNumberish | null,
            oracle?: null,
            marketCapLimit?: null,
        ): KreskoAssetAddedEventFilter;
        KreskoAssetAdded(
            kreskoAsset?: string | null,
            symbol?: string | null,
            kFactor?: BigNumberish | null,
            oracle?: null,
            marketCapLimit?: null,
        ): KreskoAssetAddedEventFilter;

        "KreskoAssetBurned(address,address,uint256)"(
            account?: string | null,
            kreskoAsset?: string | null,
            amount?: BigNumberish | null,
        ): KreskoAssetBurnedEventFilter;
        KreskoAssetBurned(
            account?: string | null,
            kreskoAsset?: string | null,
            amount?: BigNumberish | null,
        ): KreskoAssetBurnedEventFilter;

        "KreskoAssetMinted(address,address,uint256)"(
            account?: string | null,
            kreskoAsset?: string | null,
            amount?: BigNumberish | null,
        ): KreskoAssetMintedEventFilter;
        KreskoAssetMinted(
            account?: string | null,
            kreskoAsset?: string | null,
            amount?: BigNumberish | null,
        ): KreskoAssetMintedEventFilter;

        "KreskoAssetUpdated(address,uint256,address,bool,uint256)"(
            kreskoAsset?: string | null,
            kFactor?: BigNumberish | null,
            oracle?: string | null,
            mintable?: null,
            limit?: null,
        ): KreskoAssetUpdatedEventFilter;
        KreskoAssetUpdated(
            kreskoAsset?: string | null,
            kFactor?: BigNumberish | null,
            oracle?: string | null,
            mintable?: null,
            limit?: null,
        ): KreskoAssetUpdatedEventFilter;

        "LiquidationIncentiveMultiplierUpdated(uint256)"(
            liquidationIncentiveMultiplier?: BigNumberish | null,
        ): LiquidationIncentiveMultiplierUpdatedEventFilter;
        LiquidationIncentiveMultiplierUpdated(
            liquidationIncentiveMultiplier?: BigNumberish | null,
        ): LiquidationIncentiveMultiplierUpdatedEventFilter;

        "LiquidationOccurred(address,address,address,uint256,address,uint256)"(
            account?: string | null,
            liquidator?: string | null,
            repayKreskoAsset?: string | null,
            repayAmount?: null,
            seizedCollateralAsset?: null,
            collateralSent?: null,
        ): LiquidationOccurredEventFilter;
        LiquidationOccurred(
            account?: string | null,
            liquidator?: string | null,
            repayKreskoAsset?: string | null,
            repayAmount?: null,
            seizedCollateralAsset?: null,
            collateralSent?: null,
        ): LiquidationOccurredEventFilter;

        "MinimumCollateralizationRatioUpdated(uint256)"(
            minimumCollateralizationRatio?: BigNumberish | null,
        ): MinimumCollateralizationRatioUpdatedEventFilter;
        MinimumCollateralizationRatioUpdated(
            minimumCollateralizationRatio?: BigNumberish | null,
        ): MinimumCollateralizationRatioUpdatedEventFilter;

        "MinimumDebtValueUpdated(uint256)"(minimumDebtValue?: BigNumberish | null): MinimumDebtValueUpdatedEventFilter;
        MinimumDebtValueUpdated(minimumDebtValue?: BigNumberish | null): MinimumDebtValueUpdatedEventFilter;

        "OwnershipTransferred(address,address)"(
            previousOwner?: string | null,
            newOwner?: string | null,
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

        "PendingOwnershipTransfer(address,address)"(
            previousOwner?: string | null,
            pendingOwner?: string | null,
        ): PendingOwnershipTransferEventFilter;
        PendingOwnershipTransfer(
            previousOwner?: string | null,
            pendingOwner?: string | null,
        ): PendingOwnershipTransferEventFilter;

        "SecondsUntilStalePriceUpdated(uint256)"(
            secondsUntilStalePrice?: BigNumberish | null,
        ): SecondsUntilStalePriceUpdatedEventFilter;
        SecondsUntilStalePriceUpdated(
            secondsUntilStalePrice?: BigNumberish | null,
        ): SecondsUntilStalePriceUpdatedEventFilter;

        "TrustedContract(address,bool)"(
            contractAddress?: string | null,
            isTrusted?: boolean | null,
        ): TrustedContractEventFilter;
        TrustedContract(contractAddress?: string | null, isTrusted?: boolean | null): TrustedContractEventFilter;
    };

    estimateGas: {
        MAX_BURN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

        MAX_DEBT_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

        MAX_LIQUIDATION_INCENTIVE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

        MIN_COLLATERALIZATION_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

        MIN_LIQUIDATION_INCENTIVE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

        ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

        addCollateralAsset(
            _collateralAsset: string,
            _factor: BigNumberish,
            _oracle: string,
            isNonRebasingWrapperToken: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        addKreskoAsset(
            _kreskoAsset: string,
            _symbol: string,
            _kFactor: BigNumberish,
            _oracle: string,
            _marketCapUSDLimit: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        burnFee(overrides?: CallOverrides): Promise<BigNumber>;

        burnKreskoAsset(
            _account: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            _mintedKreskoAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        calculateMaxLiquidatableValueForAssets(
            _account: string,
            _repayKreskoAsset: string,
            _collateralAssetToSeize: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        collateralAssets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        collateralDeposits(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

        collateralExists(_collateralAsset: string, overrides?: CallOverrides): Promise<BigNumber>;

        depositCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        depositRebasingCollateral(
            _account: string,
            _collateralAsset: string,
            _rebasingAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        depositedCollateralAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

        getAccountCollateralValue(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

        getAccountKrAssetValue(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

        getAccountMinimumCollateralValue(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: string,
            _amount: BigNumberish,
            _ignoreCollateralFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getDepositedCollateralAssetIndex(
            _account: string,
            _collateralAsset: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getDepositedCollateralAssets(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

        getKrAssetValue(
            _kreskoAsset: string,
            _amount: BigNumberish,
            _ignoreKFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getMinimumCollateralValue(
            _krAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getMintedKreskoAssets(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

        getMintedKreskoAssetsIndex(
            _account: string,
            _kreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        initialize(
            _burnFee: BigNumberish,
            _feeRecipient: string,
            _liquidationIncentiveMultiplier: BigNumberish,
            _minimumCollateralizationRatio: BigNumberish,
            _minimumDebtValue: BigNumberish,
            _secondsUntilStalePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        isAccountLiquidatable(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

        krAssetExists(_krAsset: string, overrides?: CallOverrides): Promise<BigNumber>;

        kreskoAssetDebt(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

        kreskoAssetSymbols(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        kreskoAssets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        liquidate(
            _account: string,
            _repayKreskoAsset: string,
            _repayAmount: BigNumberish,
            _collateralAssetToSeize: string,
            _mintedKreskoAssetIndex: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            _keepKrAssetDebt: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        liquidationIncentiveMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

        minimumDebtValue(overrides?: CallOverrides): Promise<BigNumber>;

        mintKreskoAsset(
            _account: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        mintedKreskoAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

        secondsUntilStalePrice(overrides?: CallOverrides): Promise<BigNumber>;

        toggleTrustedContract(
            _trustedContract: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        trustedContracts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        updateBurnFee(
            _burnFee: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateCollateralAsset(
            _collateralAsset: string,
            _factor: BigNumberish,
            _oracle: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateFeeRecipient(
            _feeRecipient: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateKreskoAsset(
            _kreskoAsset: string,
            _kFactor: BigNumberish,
            _oracle: string,
            _mintable: boolean,
            _marketCapUSDLimit: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateLiquidationIncentiveMultiplier(
            _liquidationIncentiveMultiplier: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateMinimumCollateralizationRatio(
            _minimumCollateralizationRatio: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateMinimumDebtValue(
            _minimumDebtValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateSecondsUntilStalePrice(
            _secondsUntilStalePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        withdrawCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        withdrawRebasingCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        MAX_BURN_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        MAX_DEBT_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        MAX_LIQUIDATION_INCENTIVE_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        MIN_COLLATERALIZATION_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        MIN_LIQUIDATION_INCENTIVE_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        addCollateralAsset(
            _collateralAsset: string,
            _factor: BigNumberish,
            _oracle: string,
            isNonRebasingWrapperToken: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        addKreskoAsset(
            _kreskoAsset: string,
            _symbol: string,
            _kFactor: BigNumberish,
            _oracle: string,
            _marketCapUSDLimit: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        burnFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        burnKreskoAsset(
            _account: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            _mintedKreskoAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        calculateMaxLiquidatableValueForAssets(
            _account: string,
            _repayKreskoAsset: string,
            _collateralAssetToSeize: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        collateralAssets(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        collateralDeposits(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        collateralExists(_collateralAsset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        depositCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        depositRebasingCollateral(
            _account: string,
            _collateralAsset: string,
            _rebasingAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        depositedCollateralAssets(
            arg0: string,
            arg1: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getAccountCollateralValue(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getAccountKrAssetValue(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getAccountMinimumCollateralValue(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: string,
            _amount: BigNumberish,
            _ignoreCollateralFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getDepositedCollateralAssetIndex(
            _account: string,
            _collateralAsset: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getDepositedCollateralAssets(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getKrAssetValue(
            _kreskoAsset: string,
            _amount: BigNumberish,
            _ignoreKFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getMinimumCollateralValue(
            _krAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getMintedKreskoAssets(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getMintedKreskoAssetsIndex(
            _account: string,
            _kreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        initialize(
            _burnFee: BigNumberish,
            _feeRecipient: string,
            _liquidationIncentiveMultiplier: BigNumberish,
            _minimumCollateralizationRatio: BigNumberish,
            _minimumDebtValue: BigNumberish,
            _secondsUntilStalePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        isAccountLiquidatable(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        krAssetExists(_krAsset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        kreskoAssetDebt(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        kreskoAssetSymbols(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        kreskoAssets(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        liquidate(
            _account: string,
            _repayKreskoAsset: string,
            _repayAmount: BigNumberish,
            _collateralAssetToSeize: string,
            _mintedKreskoAssetIndex: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            _keepKrAssetDebt: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        liquidationIncentiveMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        minimumDebtValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        mintKreskoAsset(
            _account: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        mintedKreskoAssets(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        secondsUntilStalePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        toggleTrustedContract(
            _trustedContract: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        trustedContracts(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        updateBurnFee(
            _burnFee: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateCollateralAsset(
            _collateralAsset: string,
            _factor: BigNumberish,
            _oracle: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateFeeRecipient(
            _feeRecipient: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateKreskoAsset(
            _kreskoAsset: string,
            _kFactor: BigNumberish,
            _oracle: string,
            _mintable: boolean,
            _marketCapUSDLimit: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateLiquidationIncentiveMultiplier(
            _liquidationIncentiveMultiplier: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateMinimumCollateralizationRatio(
            _minimumCollateralizationRatio: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateMinimumDebtValue(
            _minimumDebtValue: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateSecondsUntilStalePrice(
            _secondsUntilStalePrice: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        withdrawCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        withdrawRebasingCollateral(
            _account: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
