/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common";

export interface ExampleFlashLiquidatorInterface extends utils.Interface {
    functions: {
        "CALLBACK_SUCCESS()": FunctionFragment;
        "calculateAmountToFlashLoan(address,address,address)": FunctionFragment;
        "flashBalance()": FunctionFragment;
        "flashLiquidate(address,address,address)": FunctionFragment;
        "getAssetIndexes(address,address,address)": FunctionFragment;
        "kresko()": FunctionFragment;
        "onFlashLoan(address,address,uint256,uint256,bytes)": FunctionFragment;
        "sendProfits(address)": FunctionFragment;
        "weth10()": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "CALLBACK_SUCCESS"
            | "calculateAmountToFlashLoan"
            | "flashBalance"
            | "flashLiquidate"
            | "getAssetIndexes"
            | "kresko"
            | "onFlashLoan"
            | "sendProfits"
            | "weth10",
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "CALLBACK_SUCCESS", values?: undefined): string;
    encodeFunctionData(functionFragment: "calculateAmountToFlashLoan", values: [string, string, string]): string;
    encodeFunctionData(functionFragment: "flashBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "flashLiquidate", values: [string, string, string]): string;
    encodeFunctionData(functionFragment: "getAssetIndexes", values: [string, string, string]): string;
    encodeFunctionData(functionFragment: "kresko", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "onFlashLoan",
        values: [string, string, BigNumberish, BigNumberish, BytesLike],
    ): string;
    encodeFunctionData(functionFragment: "sendProfits", values: [string]): string;
    encodeFunctionData(functionFragment: "weth10", values?: undefined): string;

    decodeFunctionResult(functionFragment: "CALLBACK_SUCCESS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calculateAmountToFlashLoan", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "flashBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "flashLiquidate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAssetIndexes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kresko", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onFlashLoan", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendProfits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "weth10", data: BytesLike): Result;

    events: {};
}

export interface ExampleFlashLiquidator extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: ExampleFlashLiquidatorInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        CALLBACK_SUCCESS(overrides?: CallOverrides): Promise<[string]>;

        calculateAmountToFlashLoan(
            _kreskoUser: string,
            _kreskoAssetToRepay: string,
            _rewardCollateral: string,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber] & {
                amountToFlashLoan: BigNumber;
                amountToRepay: BigNumber;
            }
        >;

        flashBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

        flashLiquidate(
            _kreskoUser: string,
            _kreskoAssetToRepay: string,
            _rewardCollateral: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        getAssetIndexes(
            _kreskoUser: string,
            _rewardCollateral: string,
            _repayKreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber] & {
                collateralIndex: BigNumber;
                krAssetIndex: BigNumber;
            }
        >;

        kresko(overrides?: CallOverrides): Promise<[string]>;

        onFlashLoan(
            initiator: string,
            token: string,
            amount: BigNumberish,
            fee: BigNumberish,
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        sendProfits(
            _token: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        weth10(overrides?: CallOverrides): Promise<[string]>;
    };

    CALLBACK_SUCCESS(overrides?: CallOverrides): Promise<string>;

    calculateAmountToFlashLoan(
        _kreskoUser: string,
        _kreskoAssetToRepay: string,
        _rewardCollateral: string,
        overrides?: CallOverrides,
    ): Promise<
        [BigNumber, BigNumber] & {
            amountToFlashLoan: BigNumber;
            amountToRepay: BigNumber;
        }
    >;

    flashBalance(overrides?: CallOverrides): Promise<BigNumber>;

    flashLiquidate(
        _kreskoUser: string,
        _kreskoAssetToRepay: string,
        _rewardCollateral: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getAssetIndexes(
        _kreskoUser: string,
        _rewardCollateral: string,
        _repayKreskoAsset: string,
        overrides?: CallOverrides,
    ): Promise<
        [BigNumber, BigNumber] & {
            collateralIndex: BigNumber;
            krAssetIndex: BigNumber;
        }
    >;

    kresko(overrides?: CallOverrides): Promise<string>;

    onFlashLoan(
        initiator: string,
        token: string,
        amount: BigNumberish,
        fee: BigNumberish,
        data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sendProfits(
        _token: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    weth10(overrides?: CallOverrides): Promise<string>;

    callStatic: {
        CALLBACK_SUCCESS(overrides?: CallOverrides): Promise<string>;

        calculateAmountToFlashLoan(
            _kreskoUser: string,
            _kreskoAssetToRepay: string,
            _rewardCollateral: string,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber] & {
                amountToFlashLoan: BigNumber;
                amountToRepay: BigNumber;
            }
        >;

        flashBalance(overrides?: CallOverrides): Promise<BigNumber>;

        flashLiquidate(
            _kreskoUser: string,
            _kreskoAssetToRepay: string,
            _rewardCollateral: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        getAssetIndexes(
            _kreskoUser: string,
            _rewardCollateral: string,
            _repayKreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber] & {
                collateralIndex: BigNumber;
                krAssetIndex: BigNumber;
            }
        >;

        kresko(overrides?: CallOverrides): Promise<string>;

        onFlashLoan(
            initiator: string,
            token: string,
            amount: BigNumberish,
            fee: BigNumberish,
            data: BytesLike,
            overrides?: CallOverrides,
        ): Promise<string>;

        sendProfits(_token: string, overrides?: CallOverrides): Promise<void>;

        weth10(overrides?: CallOverrides): Promise<string>;
    };

    filters: {};

    estimateGas: {
        CALLBACK_SUCCESS(overrides?: CallOverrides): Promise<BigNumber>;

        calculateAmountToFlashLoan(
            _kreskoUser: string,
            _kreskoAssetToRepay: string,
            _rewardCollateral: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        flashBalance(overrides?: CallOverrides): Promise<BigNumber>;

        flashLiquidate(
            _kreskoUser: string,
            _kreskoAssetToRepay: string,
            _rewardCollateral: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        getAssetIndexes(
            _kreskoUser: string,
            _rewardCollateral: string,
            _repayKreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        kresko(overrides?: CallOverrides): Promise<BigNumber>;

        onFlashLoan(
            initiator: string,
            token: string,
            amount: BigNumberish,
            fee: BigNumberish,
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        sendProfits(_token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        weth10(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        CALLBACK_SUCCESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        calculateAmountToFlashLoan(
            _kreskoUser: string,
            _kreskoAssetToRepay: string,
            _rewardCollateral: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        flashBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        flashLiquidate(
            _kreskoUser: string,
            _kreskoAssetToRepay: string,
            _rewardCollateral: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        getAssetIndexes(
            _kreskoUser: string,
            _rewardCollateral: string,
            _repayKreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        kresko(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        onFlashLoan(
            initiator: string,
            token: string,
            amount: BigNumberish,
            fee: BigNumberish,
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        sendProfits(
            _token: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        weth10(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
