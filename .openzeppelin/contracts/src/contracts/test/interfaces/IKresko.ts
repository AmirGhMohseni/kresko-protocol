/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../../common";

export declare namespace FixedPoint {
    export type UnsignedStruct = { rawValue: BigNumberish };

    export type UnsignedStructOutput = [BigNumber] & { rawValue: BigNumber };
}

export declare namespace IKresko {
    export type CollateralAssetStruct = {
        factor: FixedPoint.UnsignedStruct;
        oracle: string;
        underlyingRebasingToken: string;
        decimals: BigNumberish;
        exists: boolean;
    };

    export type CollateralAssetStructOutput = [FixedPoint.UnsignedStructOutput, string, string, number, boolean] & {
        factor: FixedPoint.UnsignedStructOutput;
        oracle: string;
        underlyingRebasingToken: string;
        decimals: number;
        exists: boolean;
    };

    export type KrAssetStruct = {
        kFactor: FixedPoint.UnsignedStruct;
        oracle: string;
        exists: boolean;
        mintable: boolean;
    };

    export type KrAssetStructOutput = [FixedPoint.UnsignedStructOutput, string, boolean, boolean] & {
        kFactor: FixedPoint.UnsignedStructOutput;
        oracle: string;
        exists: boolean;
        mintable: boolean;
    };
}

export interface IKreskoInterface extends utils.Interface {
    functions: {
        "calculateMaxLiquidatableValueForAssets(address,address,address)": FunctionFragment;
        "collateralAssets(address)": FunctionFragment;
        "depositCollateral(address,address,uint256)": FunctionFragment;
        "getAccountKrAssetValue(address)": FunctionFragment;
        "getAccountMinimumCollateralValue(address)": FunctionFragment;
        "getCollateralValueAndOraclePrice(address,uint256,bool)": FunctionFragment;
        "getDepositedCollateralAssets(address)": FunctionFragment;
        "getKrAssetValue(address,uint256,bool)": FunctionFragment;
        "getMinimumCollateralValue(address,uint256)": FunctionFragment;
        "getMintedKreskoAssets(address)": FunctionFragment;
        "getMintedKreskoAssetsIndex(address,address)": FunctionFragment;
        "isAccountLiquidatable(address)": FunctionFragment;
        "kreskoAssetDebt(address,address)": FunctionFragment;
        "kreskoAssets(address)": FunctionFragment;
        "liquidate(address,address,uint256,address,uint256,uint256,bool)": FunctionFragment;
        "minimumCollateralizationRatio()": FunctionFragment;
        "mintKreskoAsset(address,address,uint256)": FunctionFragment;
        "withdrawCollateral(address,address,uint256,uint256)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "calculateMaxLiquidatableValueForAssets"
            | "collateralAssets"
            | "depositCollateral"
            | "getAccountKrAssetValue"
            | "getAccountMinimumCollateralValue"
            | "getCollateralValueAndOraclePrice"
            | "getDepositedCollateralAssets"
            | "getKrAssetValue"
            | "getMinimumCollateralValue"
            | "getMintedKreskoAssets"
            | "getMintedKreskoAssetsIndex"
            | "isAccountLiquidatable"
            | "kreskoAssetDebt"
            | "kreskoAssets"
            | "liquidate"
            | "minimumCollateralizationRatio"
            | "mintKreskoAsset"
            | "withdrawCollateral",
    ): FunctionFragment;

    encodeFunctionData(
        functionFragment: "calculateMaxLiquidatableValueForAssets",
        values: [string, string, string],
    ): string;
    encodeFunctionData(functionFragment: "collateralAssets", values: [string]): string;
    encodeFunctionData(functionFragment: "depositCollateral", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getAccountKrAssetValue", values: [string]): string;
    encodeFunctionData(functionFragment: "getAccountMinimumCollateralValue", values: [string]): string;
    encodeFunctionData(
        functionFragment: "getCollateralValueAndOraclePrice",
        values: [string, BigNumberish, boolean],
    ): string;
    encodeFunctionData(functionFragment: "getDepositedCollateralAssets", values: [string]): string;
    encodeFunctionData(functionFragment: "getKrAssetValue", values: [string, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "getMinimumCollateralValue", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getMintedKreskoAssets", values: [string]): string;
    encodeFunctionData(functionFragment: "getMintedKreskoAssetsIndex", values: [string, string]): string;
    encodeFunctionData(functionFragment: "isAccountLiquidatable", values: [string]): string;
    encodeFunctionData(functionFragment: "kreskoAssetDebt", values: [string, string]): string;
    encodeFunctionData(functionFragment: "kreskoAssets", values: [string]): string;
    encodeFunctionData(
        functionFragment: "liquidate",
        values: [string, string, BigNumberish, string, BigNumberish, BigNumberish, boolean],
    ): string;
    encodeFunctionData(functionFragment: "minimumCollateralizationRatio", values?: undefined): string;
    encodeFunctionData(functionFragment: "mintKreskoAsset", values: [string, string, BigNumberish]): string;
    encodeFunctionData(
        functionFragment: "withdrawCollateral",
        values: [string, string, BigNumberish, BigNumberish],
    ): string;

    decodeFunctionResult(functionFragment: "calculateMaxLiquidatableValueForAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collateralAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositCollateral", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountKrAssetValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountMinimumCollateralValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCollateralValueAndOraclePrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDepositedCollateralAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getKrAssetValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMinimumCollateralValue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMintedKreskoAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMintedKreskoAssetsIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAccountLiquidatable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kreskoAssetDebt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kreskoAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumCollateralizationRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintKreskoAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawCollateral", data: BytesLike): Result;

    events: {};
}

export interface IKresko extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: IKreskoInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        calculateMaxLiquidatableValueForAssets(
            _account: string,
            _repayKreskoAsset: string,
            _collateralAssetToSeize: string,
            overrides?: CallOverrides,
        ): Promise<[FixedPoint.UnsignedStructOutput]>;

        collateralAssets(
            _collateralAsset: string,
            overrides?: CallOverrides,
        ): Promise<[IKresko.CollateralAssetStructOutput]>;

        depositCollateral(
            to: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        getAccountKrAssetValue(_account: string, overrides?: CallOverrides): Promise<[FixedPoint.UnsignedStructOutput]>;

        getAccountMinimumCollateralValue(
            _account: string,
            overrides?: CallOverrides,
        ): Promise<[FixedPoint.UnsignedStructOutput]>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: string,
            _amount: BigNumberish,
            _ignoreCollateralFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<[FixedPoint.UnsignedStructOutput, FixedPoint.UnsignedStructOutput]>;

        getDepositedCollateralAssets(user: string, overrides?: CallOverrides): Promise<[string[]]>;

        getKrAssetValue(
            _kreskoAsset: string,
            _amount: BigNumberish,
            _ignoreKfactor: boolean,
            overrides?: CallOverrides,
        ): Promise<[FixedPoint.UnsignedStructOutput]>;

        getMinimumCollateralValue(
            _krAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[FixedPoint.UnsignedStructOutput]>;

        getMintedKreskoAssets(user: string, overrides?: CallOverrides): Promise<[string[]]>;

        getMintedKreskoAssetsIndex(
            _account: string,
            _kreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<[BigNumber] & { i: BigNumber }>;

        isAccountLiquidatable(user: string, overrides?: CallOverrides): Promise<[boolean]>;

        kreskoAssetDebt(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        kreskoAssets(_kreskoAsset: string, overrides?: CallOverrides): Promise<[IKresko.KrAssetStructOutput]>;

        liquidate(
            _account: string,
            _repayKreskoAsset: string,
            _repayAmount: BigNumberish,
            _collateralAssetToSeize: string,
            _mintedKreskoAssetIndex: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            _keepKrAssetDebt: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<[FixedPoint.UnsignedStructOutput]>;

        mintKreskoAsset(
            to: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        withdrawCollateral(
            from: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    calculateMaxLiquidatableValueForAssets(
        _account: string,
        _repayKreskoAsset: string,
        _collateralAssetToSeize: string,
        overrides?: CallOverrides,
    ): Promise<FixedPoint.UnsignedStructOutput>;

    collateralAssets(_collateralAsset: string, overrides?: CallOverrides): Promise<IKresko.CollateralAssetStructOutput>;

    depositCollateral(
        to: string,
        _collateralAsset: string,
        _amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getAccountKrAssetValue(_account: string, overrides?: CallOverrides): Promise<FixedPoint.UnsignedStructOutput>;

    getAccountMinimumCollateralValue(
        _account: string,
        overrides?: CallOverrides,
    ): Promise<FixedPoint.UnsignedStructOutput>;

    getCollateralValueAndOraclePrice(
        _collateralAsset: string,
        _amount: BigNumberish,
        _ignoreCollateralFactor: boolean,
        overrides?: CallOverrides,
    ): Promise<[FixedPoint.UnsignedStructOutput, FixedPoint.UnsignedStructOutput]>;

    getDepositedCollateralAssets(user: string, overrides?: CallOverrides): Promise<string[]>;

    getKrAssetValue(
        _kreskoAsset: string,
        _amount: BigNumberish,
        _ignoreKfactor: boolean,
        overrides?: CallOverrides,
    ): Promise<FixedPoint.UnsignedStructOutput>;

    getMinimumCollateralValue(
        _krAsset: string,
        _amount: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<FixedPoint.UnsignedStructOutput>;

    getMintedKreskoAssets(user: string, overrides?: CallOverrides): Promise<string[]>;

    getMintedKreskoAssetsIndex(_account: string, _kreskoAsset: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAccountLiquidatable(user: string, overrides?: CallOverrides): Promise<boolean>;

    kreskoAssetDebt(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    kreskoAssets(_kreskoAsset: string, overrides?: CallOverrides): Promise<IKresko.KrAssetStructOutput>;

    liquidate(
        _account: string,
        _repayKreskoAsset: string,
        _repayAmount: BigNumberish,
        _collateralAssetToSeize: string,
        _mintedKreskoAssetIndex: BigNumberish,
        _depositedCollateralAssetIndex: BigNumberish,
        _keepKrAssetDebt: boolean,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    minimumCollateralizationRatio(overrides?: CallOverrides): Promise<FixedPoint.UnsignedStructOutput>;

    mintKreskoAsset(
        to: string,
        _kreskoAsset: string,
        _amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawCollateral(
        from: string,
        _collateralAsset: string,
        _amount: BigNumberish,
        _depositedCollateralAssetIndex: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        calculateMaxLiquidatableValueForAssets(
            _account: string,
            _repayKreskoAsset: string,
            _collateralAssetToSeize: string,
            overrides?: CallOverrides,
        ): Promise<FixedPoint.UnsignedStructOutput>;

        collateralAssets(
            _collateralAsset: string,
            overrides?: CallOverrides,
        ): Promise<IKresko.CollateralAssetStructOutput>;

        depositCollateral(
            to: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        getAccountKrAssetValue(_account: string, overrides?: CallOverrides): Promise<FixedPoint.UnsignedStructOutput>;

        getAccountMinimumCollateralValue(
            _account: string,
            overrides?: CallOverrides,
        ): Promise<FixedPoint.UnsignedStructOutput>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: string,
            _amount: BigNumberish,
            _ignoreCollateralFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<[FixedPoint.UnsignedStructOutput, FixedPoint.UnsignedStructOutput]>;

        getDepositedCollateralAssets(user: string, overrides?: CallOverrides): Promise<string[]>;

        getKrAssetValue(
            _kreskoAsset: string,
            _amount: BigNumberish,
            _ignoreKfactor: boolean,
            overrides?: CallOverrides,
        ): Promise<FixedPoint.UnsignedStructOutput>;

        getMinimumCollateralValue(
            _krAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<FixedPoint.UnsignedStructOutput>;

        getMintedKreskoAssets(user: string, overrides?: CallOverrides): Promise<string[]>;

        getMintedKreskoAssetsIndex(
            _account: string,
            _kreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        isAccountLiquidatable(user: string, overrides?: CallOverrides): Promise<boolean>;

        kreskoAssetDebt(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

        kreskoAssets(_kreskoAsset: string, overrides?: CallOverrides): Promise<IKresko.KrAssetStructOutput>;

        liquidate(
            _account: string,
            _repayKreskoAsset: string,
            _repayAmount: BigNumberish,
            _collateralAssetToSeize: string,
            _mintedKreskoAssetIndex: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            _keepKrAssetDebt: boolean,
            overrides?: CallOverrides,
        ): Promise<void>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<FixedPoint.UnsignedStructOutput>;

        mintKreskoAsset(
            to: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        withdrawCollateral(
            from: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;
    };

    filters: {};

    estimateGas: {
        calculateMaxLiquidatableValueForAssets(
            _account: string,
            _repayKreskoAsset: string,
            _collateralAssetToSeize: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        collateralAssets(_collateralAsset: string, overrides?: CallOverrides): Promise<BigNumber>;

        depositCollateral(
            to: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        getAccountKrAssetValue(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

        getAccountMinimumCollateralValue(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: string,
            _amount: BigNumberish,
            _ignoreCollateralFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getDepositedCollateralAssets(user: string, overrides?: CallOverrides): Promise<BigNumber>;

        getKrAssetValue(
            _kreskoAsset: string,
            _amount: BigNumberish,
            _ignoreKfactor: boolean,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getMinimumCollateralValue(
            _krAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getMintedKreskoAssets(user: string, overrides?: CallOverrides): Promise<BigNumber>;

        getMintedKreskoAssetsIndex(
            _account: string,
            _kreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        isAccountLiquidatable(user: string, overrides?: CallOverrides): Promise<BigNumber>;

        kreskoAssetDebt(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

        kreskoAssets(_kreskoAsset: string, overrides?: CallOverrides): Promise<BigNumber>;

        liquidate(
            _account: string,
            _repayKreskoAsset: string,
            _repayAmount: BigNumberish,
            _collateralAssetToSeize: string,
            _mintedKreskoAssetIndex: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            _keepKrAssetDebt: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

        mintKreskoAsset(
            to: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        withdrawCollateral(
            from: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        calculateMaxLiquidatableValueForAssets(
            _account: string,
            _repayKreskoAsset: string,
            _collateralAssetToSeize: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        collateralAssets(_collateralAsset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        depositCollateral(
            to: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        getAccountKrAssetValue(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getAccountMinimumCollateralValue(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getCollateralValueAndOraclePrice(
            _collateralAsset: string,
            _amount: BigNumberish,
            _ignoreCollateralFactor: boolean,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getDepositedCollateralAssets(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getKrAssetValue(
            _kreskoAsset: string,
            _amount: BigNumberish,
            _ignoreKfactor: boolean,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getMinimumCollateralValue(
            _krAsset: string,
            _amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getMintedKreskoAssets(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getMintedKreskoAssetsIndex(
            _account: string,
            _kreskoAsset: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        isAccountLiquidatable(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        kreskoAssetDebt(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        kreskoAssets(_kreskoAsset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        liquidate(
            _account: string,
            _repayKreskoAsset: string,
            _repayAmount: BigNumberish,
            _collateralAssetToSeize: string,
            _mintedKreskoAssetIndex: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            _keepKrAssetDebt: boolean,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        minimumCollateralizationRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        mintKreskoAsset(
            to: string,
            _kreskoAsset: string,
            _amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        withdrawCollateral(
            from: string,
            _collateralAsset: string,
            _amount: BigNumberish,
            _depositedCollateralAssetIndex: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
