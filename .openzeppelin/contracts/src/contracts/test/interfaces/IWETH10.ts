/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../../common";

export interface IWETH10Interface extends utils.Interface {
    functions: {
        "balanceOf(address)": FunctionFragment;
        "flashLoan(address,address,uint256,bytes)": FunctionFragment;
    };

    getFunction(nameOrSignatureOrTopic: "balanceOf" | "flashLoan"): FunctionFragment;

    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(functionFragment: "flashLoan", values: [string, string, BigNumberish, BytesLike]): string;

    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;

    events: {};
}

export interface IWETH10 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: IWETH10Interface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        flashLoan(
            receiver: string,
            token: string,
            value: BigNumberish,
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    flashLoan(
        receiver: string,
        token: string,
        value: BigNumberish,
        data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        flashLoan(
            receiver: string,
            token: string,
            value: BigNumberish,
            data: BytesLike,
            overrides?: CallOverrides,
        ): Promise<boolean>;
    };

    filters: {};

    estimateGas: {
        balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        flashLoan(
            receiver: string,
            token: string,
            value: BigNumberish,
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        balanceOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        flashLoan(
            receiver: string,
            token: string,
            value: BigNumberish,
            data: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
