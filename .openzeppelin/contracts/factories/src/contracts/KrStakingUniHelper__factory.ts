/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { KrStakingUniHelper, KrStakingUniHelperInterface } from "../../../src/contracts/KrStakingUniHelper";

const _abi = [
    {
        inputs: [
            {
                internalType: "contract IUniswapV2Router02",
                name: "_router",
                type: "address",
            },
            {
                internalType: "contract IUniswapV2Factory",
                name: "_factory",
                type: "address",
            },
            {
                internalType: "contract IKrStaking",
                name: "_staking",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address",
            },
        ],
        name: "ClaimRewardsMulti",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "pid",
                type: "uint256",
            },
        ],
        name: "LiquidityAndStakeAdded",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "pid",
                type: "uint256",
            },
        ],
        name: "LiquidityAndStakeRemoved",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amountADesired",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "amountBDesired",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "amountAMin",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "amountBMin",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
            },
        ],
        name: "addLiquidityAndStake",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
        ],
        name: "claimRewardsMulti",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "factory",
        outputs: [
            {
                internalType: "contract IUniswapV2Factory",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "router",
        outputs: [
            {
                internalType: "contract IUniswapV2Router02",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "staking",
        outputs: [
            {
                internalType: "contract IKrStaking",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "tokenA",
                type: "address",
            },
            {
                internalType: "address",
                name: "tokenB",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "liquidity",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "amountAMin",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "amountBMin",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
            },
        ],
        name: "withdrawAndRemoveLiquidity",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];

const _bytecode =
    "0x60806040523480156200001157600080fd5b506040516200193e3803806200193e83398181016040528101906200003791906200011a565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000170565b60018060a01b03811681146200011757600080fd5b50565b6000806000606084860312156200013057600080fd5b83516200013d8162000102565b809350506020840151620001518162000102565b809250506040840151620001658162000102565b809150509250925092565b6117be80620001806000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063b6842c6011610050578063b6842c60146100e1578063c45a0155146100fd578063f887ea401461011b57610072565b80632df56a3f146100775780634cf088d914610093578063b4c29b68146100b1575b600080fd5b610091600480360381019061008c91906110b8565b610139565b005b61009b610559565b6040516100a8919061112e565b60405180910390f35b6100cb60048036038101906100c69190611155565b61057f565b6040516100d891906111d5565b60405180910390f35b6100fb60048036038101906100f691906111e6565b610b47565b005b610105610d43565b604051610112919061120d565b60405180910390f35b610123610d69565b6040516101309190611234565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156101a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a09061125b565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390589896040518363ffffffff1660e01b8152600401610208929190611299565b602060405180830381865afa158015610225573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024991906112cb565b9050600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba8fc5bf846040518263ffffffff1660e01b81526004016102a991906112f2565b6040805180830381865afa1580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e99190611332565b915091508061032d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103249061135e565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343a4534b33848b896040518563ffffffff1660e01b815260040161038e949392919061139c565b600060405180830381600087803b1580156103a857600080fd5b505af11580156103bc573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a6040518363ffffffff1660e01b815260040161041b9291906113dc565b6020604051808303816000875af115801561043a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045e919061140a565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663baa2abde8b8b8b8b8b8b8b6040518863ffffffff1660e01b81526004016104c4979695949392919061142d565b60408051808303816000875af11580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190611484565b505081888673ffffffffffffffffffffffffffffffffffffffff167f27b4eb450d703cc6355f1bc733710bf45d86de95f33ef1c672786817a5c9265d60405160405180910390a450505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e79061125b565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a439058b8b6040518363ffffffff1660e01b815260040161064f929190611299565b602060405180830381865afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069091906112cb565b9050600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba8fc5bf846040518263ffffffff1660e01b81526004016106f091906112f2565b6040805180830381865afa15801561070c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107309190611332565b9150915080610774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076b9061135e565b60405180910390fd5b6107a133308c8f73ffffffffffffffffffffffffffffffffffffffff16610d8d909392919063ffffffff16565b6107ce33308b8e73ffffffffffffffffffffffffffffffffffffffff16610d8d909392919063ffffffff16565b8b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c6040518363ffffffff1660e01b81526004016108299291906113dc565b6020604051808303816000875af1158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c919061140a565b508a73ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6040518363ffffffff1660e01b81526004016108c89291906113dc565b6020604051808303816000875af11580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b919061140a565b5060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e337008e8e8e8e8e8e308e6040518963ffffffff1660e01b81526004016109769897969594939291906114a9565b6060604051808303816000875af1158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b99190611508565b925050508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610a1a9291906113dc565b6020604051808303816000875af1158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d919061140a565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630efe6a8b8885846040518463ffffffff1660e01b8152600401610abd93929190611536565b600060405180830381600087803b158015610ad757600080fd5b505af1158015610aeb573d6000803e3d6000fd5b5050505082818873ffffffffffffffffffffffffffffffffffffffff167f67153b1f92f8a4e823af8ca2fdb93c3d313b9dcb1404c5da9a9c44234a3302e960405160405180910390a48094505050505098975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bae9061125b565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081e3eda6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4a919061156b565b905060005b81811015610cfb57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf82b7b53383866040518463ffffffff1660e01b8152600401610cb693929190611587565b600060405180830381600087803b158015610cd057600080fd5b505af1158015610ce4573d6000803e3d6000fd5b505050508080610cf3906115c0565b915050610c4f565b508173ffffffffffffffffffffffffffffffffffffffff167fac4bb348f20fccad9f5419b8d566bc60a544d193931dc39efe624899e5d068b760405160405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e10846323b872dd60e01b858585604051602401610dae939291906115ec565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e16565b50505050565b6000610e78826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610edd9092919063ffffffff16565b9050600081511115610ed85780806020019051810190610e98919061140a565b610ed7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ece90611625565b60405180910390fd5b5b505050565b6060610eec8484600085610ef5565b90509392505050565b606082471015610f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3190611689565b60405180910390fd5b610f4385611009565b610f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f79906116ed565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fab919061175e565b60006040518083038185875af1925050503d8060008114610fe8576040519150601f19603f3d011682016040523d82523d6000602084013e610fed565b606091505b5091509150610ffd82828661102c565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561103c5782905061108c565b60008351111561104f5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611083919061177c565b60405180910390fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146110b557600080fd5b50565b600080600080600080600060e0888a0312156110d357600080fd5b87356110de81611093565b8097505060208801356110f081611093565b8096505060408801359450606088013593506080880135925060a088013561111781611093565b8092505060c0880135905092959891949750929550565b600060208201905073ffffffffffffffffffffffffffffffffffffffff8316825292915050565b600080600080600080600080610100898b03121561117257600080fd5b883561117d81611093565b80985050602089013561118f81611093565b8097505060408901359550606089013594506080890135935060a0890135925060c08901356111bd81611093565b8092505060e089013590509295985092959890939650565b600060208201905082825292915050565b6000602082840312156111f857600080fd5b813561120381611093565b8091505092915050565b600060208201905073ffffffffffffffffffffffffffffffffffffffff8316825292915050565b600060208201905073ffffffffffffffffffffffffffffffffffffffff8316825292915050565b60208152600c60208201527f4b523a202161646472657373000000000000000000000000000000000000000060408201526000606082019050919050565b600060408201905073ffffffffffffffffffffffffffffffffffffffff80851683528084166020840152509392505050565b6000602082840312156112dd57600080fd5b81516112e881611093565b8091505092915050565b600060208201905073ffffffffffffffffffffffffffffffffffffffff8316825292915050565b600081519050801515811461132d57600080fd5b919050565b6000806040838503121561134557600080fd5b8251915061135560208401611319565b90509250929050565b60208152600f60208201527f4b523a2021706f6f6c457869737473000000000000000000000000000000000060408201526000606082019050919050565b600060808201905073ffffffffffffffffffffffffffffffffffffffff808716835285602084015284604084015280841660608401525095945050505050565b600060408201905073ffffffffffffffffffffffffffffffffffffffff841682528260208301529392505050565b60006020828403121561141c57600080fd5b61142582611319565b905092915050565b600060e08201905073ffffffffffffffffffffffffffffffffffffffff808a168352808916602084015287604084015286606084015285608084015280851660a0840152508260c083015298975050505050505050565b6000806040838503121561149757600080fd5b82519150602083015190509250929050565b60006101008201905073ffffffffffffffffffffffffffffffffffffffff808b168352808a1660208401528860408401528760608401528660808401528560a084015280851660c0840152508260e08301529998505050505050505050565b60008060006060848603121561151d57600080fd5b8351925060208401519150604084015190509250925092565b600060608201905073ffffffffffffffffffffffffffffffffffffffff85168252836020830152826040830152949350505050565b60006020828403121561157d57600080fd5b8151905092915050565b600060608201905073ffffffffffffffffffffffffffffffffffffffff8086168352846020840152808416604084015250949350505050565b600080198214156115e157634e487b7160e01b600052601160045260246000fd5b600182019050919050565b600060608201905073ffffffffffffffffffffffffffffffffffffffff8086168352808516602084015250826040830152949350505050565b60208152602a60208201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f7420737563636565640000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152602660208201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c000000000000000000000000000000000000000000000000000060608201526000608082019050919050565b60208152601d60208201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060408201526000606082019050919050565b60005b8381101561174957808201518184015260208101905061172e565b83811115611758576000848401525b50505050565b6000825161177081846020870161172b565b80830191505092915050565b602081526000825180602084015261179b81604085016020870161172b565b6040601f19601f8301168401019150509291505056fea164736f6c634300080a000a";

type KrStakingUniHelperConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: KrStakingUniHelperConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1;

export class KrStakingUniHelper__factory extends ContractFactory {
    constructor(...args: KrStakingUniHelperConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
    }

    override deploy(
        _router: string,
        _factory: string,
        _staking: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<KrStakingUniHelper> {
        return super.deploy(_router, _factory, _staking, overrides || {}) as Promise<KrStakingUniHelper>;
    }
    override getDeployTransaction(
        _router: string,
        _factory: string,
        _staking: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): TransactionRequest {
        return super.getDeployTransaction(_router, _factory, _staking, overrides || {});
    }
    override attach(address: string): KrStakingUniHelper {
        return super.attach(address) as KrStakingUniHelper;
    }
    override connect(signer: Signer): KrStakingUniHelper__factory {
        return super.connect(signer) as KrStakingUniHelper__factory;
    }

    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): KrStakingUniHelperInterface {
        return new utils.Interface(_abi) as KrStakingUniHelperInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): KrStakingUniHelper {
        return new Contract(address, _abi, signerOrProvider) as KrStakingUniHelper;
    }
}
