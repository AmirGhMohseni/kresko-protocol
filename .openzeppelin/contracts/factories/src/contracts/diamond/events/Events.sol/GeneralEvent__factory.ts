/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
    GeneralEvent,
    GeneralEventInterface,
} from "../../../../../../src/contracts/diamond/events/Events.sol/GeneralEvent";

const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint8",
                name: "version",
                type: "uint8",
            },
        ],
        name: "Initialized",
        type: "event",
    },
];

const _bytecode =
    "0x602d6050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080a000a";

type GeneralEventConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: GeneralEventConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1;

export class GeneralEvent__factory extends ContractFactory {
    constructor(...args: GeneralEventConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
    }

    override deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<GeneralEvent> {
        return super.deploy(overrides || {}) as Promise<GeneralEvent>;
    }
    override getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {});
    }
    override attach(address: string): GeneralEvent {
        return super.attach(address) as GeneralEvent;
    }
    override connect(signer: Signer): GeneralEvent__factory {
        return super.connect(signer) as GeneralEvent__factory;
    }

    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): GeneralEventInterface {
        return new utils.Interface(_abi) as GeneralEventInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): GeneralEvent {
        return new Contract(address, _abi, signerOrProvider) as GeneralEvent;
    }
}
