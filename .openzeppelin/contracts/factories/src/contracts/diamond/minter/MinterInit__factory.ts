/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MinterInit, MinterInitInterface } from "../../../../../src/contracts/diamond/minter/MinterInit";

const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "burnFee",
                        type: "uint256",
                    },
                    {
                        internalType: "address",
                        name: "feeRecipient",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "liquidationIncentiveMultiplier",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "minimumCollateralizationRatio",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "minimumDebtValue",
                        type: "uint256",
                    },
                ],
                internalType: "struct MinterInitParams",
                name: "params",
                type: "tuple",
            },
        ],
        name: "initialize",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];

const _bytecode =
    "0x608060405234801561001057600080fd5b506104ca806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635678e71714610030575b600080fd5b61004a60048036038101906100459190610394565b61004c565b005b6100546101e1565b73ffffffffffffffffffffffffffffffffffffffff16610072610214565b73ffffffffffffffffffffffffffffffffffffffff16146100c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100bf906103af565b60405180910390fd5b60006100d26102c5565b90508060000160009054906101000a900460ff1615610126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011d906103ed565b60405180910390fd5b61019a6040518060400160405280600d81526020017f4b7265736b6f204d696e746572000000000000000000000000000000000000008152506040518060400160405280600281526020017f56310000000000000000000000000000000000000000000000000000000000008152506102f2565b816001018190555060018160000160006101000a81548160ff02191690831515021790555060018160000160016101000a81548160ff021916908360ff1602179055505050565b60006101eb61035f565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102be57600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff8183015116925050506102c2565b3390505b90565b6000807f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a97c90508091505090565b60006040518060800160405280604f815260200161046f604f9139805190602001208380519060200120838051906020012061032c61038c565b3060405160200161034195949392919061042b565b60405160208183030381529060405280519060200120905092915050565b6000807f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f0990508091505090565b600046905090565b600060a082840312156103a657600080fd5b81905092915050565b60208152601f60208201527f4469616d6f6e643a204d75737420626520636f6e7472616374206f776e65720060408201526000606082019050919050565b60208152601760208201527f4d533a20416c726561647920696e697469616c697a656400000000000000000060408201526000606082019050919050565b600060a08201905086825285602083015284604083015283606083015273ffffffffffffffffffffffffffffffffffffffff83166080830152969550505050505056fe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e743235362073616c742c6164647265737320766572696679696e67436f6e747261637429a164736f6c634300080a000a";

type MinterInitConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MinterInitConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1;

export class MinterInit__factory extends ContractFactory {
    constructor(...args: MinterInitConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
    }

    override deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MinterInit> {
        return super.deploy(overrides || {}) as Promise<MinterInit>;
    }
    override getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {});
    }
    override attach(address: string): MinterInit {
        return super.attach(address) as MinterInit;
    }
    override connect(signer: Signer): MinterInit__factory {
        return super.connect(signer) as MinterInit__factory;
    }

    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MinterInitInterface {
        return new utils.Interface(_abi) as MinterInitInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): MinterInit {
        return new Contract(address, _abi, signerOrProvider) as MinterInit;
    }
}
