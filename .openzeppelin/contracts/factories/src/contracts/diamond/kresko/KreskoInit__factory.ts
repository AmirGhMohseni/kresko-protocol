/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { KreskoInit, KreskoInitInterface } from "../../../../../src/contracts/diamond/kresko/KreskoInit";

const _abi = [
    {
        inputs: [],
        name: "initialize",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];

const _bytecode =
    "0x608060405234801561001057600080fd5b506102b3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638129fc1c14610030575b600080fd5b61003861003a565b005b6000610044610134565b90508060020160149054906101000a900460ff1615610098576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161008f906101d6565b60405180910390fd5b61010c6040518060400160405280600e81526020017f4b7265736b6f2047656e6572616c0000000000000000000000000000000000008152506040518060400160405280600281526020017f5631000000000000000000000000000000000000000000000000000000000000815250610161565b816003018190555060018160020160146101000a81548160ff02191690831515021790555050565b6000807fa1913c34ddada141a5d56c2b5b7d024a07c1db6234ef6660e64a8f3cc6c7ca9e90508091505090565b60006040518060800160405280604f8152602001610258604f9139805190602001208380519060200120838051906020012061019b6101ce565b306040516020016101b0959493929190610214565b60405160208183030381529060405280519060200120905092915050565b600046905090565b60208152601760208201527f4d533a20416c726561647920696e697469616c697a656400000000000000000060408201526000606082019050919050565b600060a08201905086825285602083015284604083015283606083015273ffffffffffffffffffffffffffffffffffffffff83166080830152969550505050505056fe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e743235362073616c742c6164647265737320766572696679696e67436f6e747261637429a164736f6c634300080a000a";

type KreskoInitConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: KreskoInitConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1;

export class KreskoInit__factory extends ContractFactory {
    constructor(...args: KreskoInitConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
    }

    override deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<KreskoInit> {
        return super.deploy(overrides || {}) as Promise<KreskoInit>;
    }
    override getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {});
    }
    override attach(address: string): KreskoInit {
        return super.attach(address) as KreskoInit;
    }
    override connect(signer: Signer): KreskoInit__factory {
        return super.connect(signer) as KreskoInit__factory;
    }

    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): KreskoInitInterface {
        return new utils.Interface(_abi) as KreskoInitInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): KreskoInit {
        return new Contract(address, _abi, signerOrProvider) as KreskoInit;
    }
}
