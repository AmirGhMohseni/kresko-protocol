/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
    ERC165Facet,
    ERC165FacetInterface,
} from "../../../../../../src/contracts/diamond/diamond/facets/ERC165Facet";

const _abi = [
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "_interfaceId",
                type: "bytes4",
            },
        ],
        name: "supportsInterface",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];

const _bytecode =
    "0x608060405234801561001057600080fd5b50610151806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806301ffc9a714610030575b600080fd5b61004a600480360381019061004591906100fe565b610060565b6040516100579190610131565b60405180910390f35b600061006a6100d1565b6007016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6000807f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f0990508091505090565b60006020828403121561011057600080fd5b813563ffffffff60e01b8116811461012757600080fd5b8091505092915050565b600060208201905082151582529291505056fea164736f6c634300080a000a";

type ERC165FacetConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: ERC165FacetConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1;

export class ERC165Facet__factory extends ContractFactory {
    constructor(...args: ERC165FacetConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
    }

    override deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ERC165Facet> {
        return super.deploy(overrides || {}) as Promise<ERC165Facet>;
    }
    override getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {});
    }
    override attach(address: string): ERC165Facet {
        return super.attach(address) as ERC165Facet;
    }
    override connect(signer: Signer): ERC165Facet__factory {
        return super.connect(signer) as ERC165Facet__factory;
    }

    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): ERC165FacetInterface {
        return new utils.Interface(_abi) as ERC165FacetInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): ERC165Facet {
        return new Contract(address, _abi, signerOrProvider) as ERC165Facet;
    }
}
