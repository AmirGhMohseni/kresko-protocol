/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, BigNumberish, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockToken, MockTokenInterface } from "../../../../src/contracts/test/MockToken";

const _abi = [
    {
        inputs: [
            {
                internalType: "uint8",
                name: "_decimals",
                type: "uint8",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "balanceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "decimals",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_account",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_value",
                type: "uint256",
            },
        ],
        name: "setBalanceOf",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_amount",
                type: "uint256",
            },
        ],
        name: "transfer",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_from",
                type: "address",
            },
            {
                internalType: "address",
                name: "_to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_amount",
                type: "uint256",
            },
        ],
        name: "transferFrom",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];

const _bytecode =
    "0x608060405234801561001057600080fd5b506040516104f43803806104f483398181016040528101906100329190610053565b80600160006101000a81548160ff021916908360ff16021790555050610080565b60006020828403121561006557600080fd5b815160ff8116811461007657600080fd5b8091505092915050565b6104658061008f6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806370a082311161005057806370a08231146100ba578063a9059cbb146100ea578063b46310f61461011a57610067565b806323b872dd1461006c578063313ce5671461009c575b600080fd5b61008660048036038101906100819190610342565b610136565b604051610093919061037e565b60405180910390f35b6100a46101ed565b6040516100b19190610391565b60405180910390f35b6100d460048036038101906100cf91906103a5565b610200565b6040516100e191906103c8565b60405180910390f35b61010460048036038101906100ff91906103d9565b610218565b604051610111919061037e565b60405180910390f35b610134600480360381019061012f91906103d9565b6102ce565b005b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610186919061041b565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101db9190610439565b92505081905550600190509392505050565b600160009054906101000a900460ff1681565b60006020528060005260406000206000915090505481565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610268919061041b565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102bd9190610439565b925050819055506001905092915050565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008135905073ffffffffffffffffffffffffffffffffffffffff8116811461033d57600080fd5b919050565b60008060006060848603121561035757600080fd5b61036084610315565b925061036e60208501610315565b9150604084013590509250925092565b6000602082019050821515825292915050565b600060208201905060ff8316825292915050565b6000602082840312156103b757600080fd5b6103c082610315565b905092915050565b600060208201905082825292915050565b600080604083850312156103ec57600080fd5b6103f583610315565b9150602083013590509250929050565b634e487b7160e01b600052601160045260246000fd5b60008282101561042e5761042d610405565b5b828203905092915050565b6000821982111561044d5761044c610405565b5b82820190509291505056fea164736f6c634300080a000a";

type MockTokenConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockTokenConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1;

export class MockToken__factory extends ContractFactory {
    constructor(...args: MockTokenConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args);
        } else {
            super(_abi, _bytecode, args[0]);
        }
    }

    override deploy(
        _decimals: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<MockToken> {
        return super.deploy(_decimals, overrides || {}) as Promise<MockToken>;
    }
    override getDeployTransaction(
        _decimals: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): TransactionRequest {
        return super.getDeployTransaction(_decimals, overrides || {});
    }
    override attach(address: string): MockToken {
        return super.attach(address) as MockToken;
    }
    override connect(signer: Signer): MockToken__factory {
        return super.connect(signer) as MockToken__factory;
    }

    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockTokenInterface {
        return new utils.Interface(_abi) as MockTokenInterface;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): MockToken {
        return new Contract(address, _abi, signerOrProvider) as MockToken;
    }
}
