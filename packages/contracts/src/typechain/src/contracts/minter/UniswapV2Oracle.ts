/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace UQ {
  export type Uq112x112Struct = { _x: PromiseOrValue<BigNumberish> };

  export type Uq112x112StructOutput = [BigNumber] & { _x: BigNumber };
}

export interface UniswapV2OracleInterface extends utils.Interface {
  functions: {
    "configurePair(address,uint256)": FunctionFragment;
    "consult(address,address,uint256)": FunctionFragment;
    "consultKrAsset(address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "initPair(address,address,uint256)": FunctionFragment;
    "krAssets(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairs(address)": FunctionFragment;
    "update(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "configurePair"
      | "consult"
      | "consultKrAsset"
      | "factory"
      | "initPair"
      | "krAssets"
      | "owner"
      | "pairs"
      | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "configurePair",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "consult",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "consultKrAsset",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initPair",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "krAssets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "configurePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consultKrAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "krAssets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export interface UniswapV2Oracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapV2OracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    configurePair(
      _pairAddress: PromiseOrValue<string>,
      _updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consult(
      _pairAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    consultKrAsset(
      _kreskoAsset: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    initPair(
      _pairAddress: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    krAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        UQ.Uq112x112StructOutput,
        UQ.Uq112x112StructOutput,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        price0Average: UQ.Uq112x112StructOutput;
        price1Average: UQ.Uq112x112StructOutput;
        token0: string;
        token1: string;
        price0CumulativeLast: BigNumber;
        price1CumulativeLast: BigNumber;
        blockTimestampLast: number;
        updatePeriod: BigNumber;
      }
    >;

    update(
      _pairAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  configurePair(
    _pairAddress: PromiseOrValue<string>,
    _updatePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consult(
    _pairAddress: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  consultKrAsset(
    _kreskoAsset: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  initPair(
    _pairAddress: PromiseOrValue<string>,
    _kreskoAsset: PromiseOrValue<string>,
    _updatePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  krAssets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      UQ.Uq112x112StructOutput,
      UQ.Uq112x112StructOutput,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      BigNumber
    ] & {
      price0Average: UQ.Uq112x112StructOutput;
      price1Average: UQ.Uq112x112StructOutput;
      token0: string;
      token1: string;
      price0CumulativeLast: BigNumber;
      price1CumulativeLast: BigNumber;
      blockTimestampLast: number;
      updatePeriod: BigNumber;
    }
  >;

  update(
    _pairAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    configurePair(
      _pairAddress: PromiseOrValue<string>,
      _updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    consult(
      _pairAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    consultKrAsset(
      _kreskoAsset: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    initPair(
      _pairAddress: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    krAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        UQ.Uq112x112StructOutput,
        UQ.Uq112x112StructOutput,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        price0Average: UQ.Uq112x112StructOutput;
        price1Average: UQ.Uq112x112StructOutput;
        token0: string;
        token1: string;
        price0CumulativeLast: BigNumber;
        price1CumulativeLast: BigNumber;
        blockTimestampLast: number;
        updatePeriod: BigNumber;
      }
    >;

    update(
      _pairAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    configurePair(
      _pairAddress: PromiseOrValue<string>,
      _updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consult(
      _pairAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    consultKrAsset(
      _kreskoAsset: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    initPair(
      _pairAddress: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    krAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      _pairAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configurePair(
      _pairAddress: PromiseOrValue<string>,
      _updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consult(
      _pairAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    consultKrAsset(
      _kreskoAsset: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initPair(
      _pairAddress: PromiseOrValue<string>,
      _kreskoAsset: PromiseOrValue<string>,
      _updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    krAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      _pairAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
