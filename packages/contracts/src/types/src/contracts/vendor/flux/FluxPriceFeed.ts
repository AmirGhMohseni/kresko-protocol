/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../../common";

export interface FluxPriceFeedInterface extends utils.Interface {
    functions: {
        "ADMIN_ROLE()": FunctionFragment;
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "VALIDATOR_ROLE()": FunctionFragment;
        "decimals()": FunctionFragment;
        "description()": FunctionFragment;
        "getAnswer(uint256)": FunctionFragment;
        "getMarketOpen(uint256)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getRoundData(uint80)": FunctionFragment;
        "getTimestamp(uint256)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "latestAggregatorRoundId()": FunctionFragment;
        "latestAnswer()": FunctionFragment;
        "latestMarketOpen()": FunctionFragment;
        "latestRound()": FunctionFragment;
        "latestRoundData()": FunctionFragment;
        "latestTimestamp()": FunctionFragment;
        "latestTransmissionDetails()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "transmit(int192,bool)": FunctionFragment;
        "typeAndVersion()": FunctionFragment;
        "version()": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "ADMIN_ROLE"
            | "ADMIN_ROLE()"
            | "DEFAULT_ADMIN_ROLE"
            | "DEFAULT_ADMIN_ROLE()"
            | "VALIDATOR_ROLE"
            | "VALIDATOR_ROLE()"
            | "decimals"
            | "decimals()"
            | "description"
            | "description()"
            | "getAnswer"
            | "getAnswer(uint256)"
            | "getMarketOpen"
            | "getMarketOpen(uint256)"
            | "getRoleAdmin"
            | "getRoleAdmin(bytes32)"
            | "getRoundData"
            | "getRoundData(uint80)"
            | "getTimestamp"
            | "getTimestamp(uint256)"
            | "grantRole"
            | "grantRole(bytes32,address)"
            | "hasRole"
            | "hasRole(bytes32,address)"
            | "latestAggregatorRoundId"
            | "latestAggregatorRoundId()"
            | "latestAnswer"
            | "latestAnswer()"
            | "latestMarketOpen"
            | "latestMarketOpen()"
            | "latestRound"
            | "latestRound()"
            | "latestRoundData"
            | "latestRoundData()"
            | "latestTimestamp"
            | "latestTimestamp()"
            | "latestTransmissionDetails"
            | "latestTransmissionDetails()"
            | "renounceRole"
            | "renounceRole(bytes32,address)"
            | "revokeRole"
            | "revokeRole(bytes32,address)"
            | "supportsInterface"
            | "supportsInterface(bytes4)"
            | "transmit"
            | "transmit(int192,bool)"
            | "typeAndVersion"
            | "typeAndVersion()"
            | "version"
            | "version()",
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "ADMIN_ROLE()", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE()", values?: undefined): string;
    encodeFunctionData(functionFragment: "VALIDATOR_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "VALIDATOR_ROLE()", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimals()", values?: undefined): string;
    encodeFunctionData(functionFragment: "description", values?: undefined): string;
    encodeFunctionData(functionFragment: "description()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAnswer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getAnswer(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getMarketOpen", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getMarketOpen(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin(bytes32)", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getRoundData", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRoundData(uint80)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getTimestamp", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getTimestamp(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(
        functionFragment: "grantRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "grantRole(bytes32,address)",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole(bytes32,address)",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "latestAggregatorRoundId", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestAggregatorRoundId()", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestAnswer", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestAnswer()", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestMarketOpen", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestMarketOpen()", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestRound", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestRound()", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestRoundData", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestRoundData()", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestTimestamp()", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestTransmissionDetails", values?: undefined): string;
    encodeFunctionData(functionFragment: "latestTransmissionDetails()", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "renounceRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "renounceRole(bytes32,address)",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole(bytes32,address)",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "supportsInterface(bytes4)", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(
        functionFragment: "transmit",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
    ): string;
    encodeFunctionData(
        functionFragment: "transmit(int192,bool)",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
    ): string;
    encodeFunctionData(functionFragment: "typeAndVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "typeAndVersion()", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "version()", values?: undefined): string;

    decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ADMIN_ROLE()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VALIDATOR_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VALIDATOR_ROLE()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "description", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "description()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAnswer(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMarketOpen", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMarketOpen(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoundData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoundData(uint80)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTimestamp(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestAggregatorRoundId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestAggregatorRoundId()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestAnswer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestAnswer()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestMarketOpen", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestMarketOpen()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestRound", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestRound()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestRoundData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestRoundData()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestTimestamp()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestTransmissionDetails", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestTransmissionDetails()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface(bytes4)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transmit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transmit(int192,bool)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "typeAndVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "typeAndVersion()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version()", data: BytesLike): Result;

    events: {
        "AnswerUpdated(int256,bool,uint256,uint256)": EventFragment;
        "NewRound(uint256,address,uint256)": EventFragment;
        "NewTransmission(uint32,int192,bool,address)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "AnswerUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AnswerUpdated(int256,bool,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewRound"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewRound(uint256,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewTransmission"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewTransmission(uint32,int192,bool,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged(bytes32,bytes32,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted(bytes32,address,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked(bytes32,address,address)"): EventFragment;
}

export interface AnswerUpdatedEventObject {
    current: BigNumber;
    marketOpen: boolean;
    roundId: BigNumber;
    updatedAt: BigNumber;
}
export type AnswerUpdatedEvent = TypedEvent<[BigNumber, boolean, BigNumber, BigNumber], AnswerUpdatedEventObject>;

export type AnswerUpdatedEventFilter = TypedEventFilter<AnswerUpdatedEvent>;

export interface NewRoundEventObject {
    roundId: BigNumber;
    startedBy: string;
    startedAt: BigNumber;
}
export type NewRoundEvent = TypedEvent<[BigNumber, string, BigNumber], NewRoundEventObject>;

export type NewRoundEventFilter = TypedEventFilter<NewRoundEvent>;

export interface NewTransmissionEventObject {
    aggregatorRoundId: number;
    answer: BigNumber;
    marketOpen: boolean;
    transmitter: string;
}
export type NewTransmissionEvent = TypedEvent<[number, BigNumber, boolean, string], NewTransmissionEventObject>;

export type NewTransmissionEventFilter = TypedEventFilter<NewTransmissionEvent>;

export interface RoleAdminChangedEventObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface FluxPriceFeed extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: FluxPriceFeedInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

        VALIDATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

        "VALIDATOR_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

        decimals(overrides?: CallOverrides): Promise<[number]>;

        "decimals()"(overrides?: CallOverrides): Promise<[number]>;

        description(overrides?: CallOverrides): Promise<[string]>;

        "description()"(overrides?: CallOverrides): Promise<[string]>;

        getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "getAnswer(uint256)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        getMarketOpen(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

        "getMarketOpen(uint256)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

        "getRoleAdmin(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

        getRoundData(
            _roundId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                marketOpen: boolean;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        "getRoundData(uint80)"(
            _roundId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                marketOpen: boolean;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "getTimestamp(uint256)"(
            _roundId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "grantRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        "hasRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        latestAggregatorRoundId(overrides?: CallOverrides): Promise<[number]>;

        "latestAggregatorRoundId()"(overrides?: CallOverrides): Promise<[number]>;

        latestAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

        "latestAnswer()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        latestMarketOpen(overrides?: CallOverrides): Promise<[boolean]>;

        "latestMarketOpen()"(overrides?: CallOverrides): Promise<[boolean]>;

        latestRound(overrides?: CallOverrides): Promise<[BigNumber]>;

        "latestRound()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        latestRoundData(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                marketOpen: boolean;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        "latestRoundData()"(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                marketOpen: boolean;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        latestTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

        "latestTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        latestTransmissionDetails(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, boolean] & {
                _latestAnswer: BigNumber;
                _latestTimestamp: BigNumber;
                _marketOpen: boolean;
            }
        >;

        "latestTransmissionDetails()"(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, boolean] & {
                _latestAnswer: BigNumber;
                _latestTimestamp: BigNumber;
                _marketOpen: boolean;
            }
        >;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "renounceRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "revokeRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

        "supportsInterface(bytes4)"(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        transmit(
            _answer: PromiseOrValue<BigNumberish>,
            _marketOpen: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "transmit(int192,bool)"(
            _answer: PromiseOrValue<BigNumberish>,
            _marketOpen: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        typeAndVersion(overrides?: CallOverrides): Promise<[string]>;

        "typeAndVersion()"(overrides?: CallOverrides): Promise<[string]>;

        version(overrides?: CallOverrides): Promise<[BigNumber]>;

        "version()"(overrides?: CallOverrides): Promise<[BigNumber]>;
    };

    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    VALIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "VALIDATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    description(overrides?: CallOverrides): Promise<string>;

    "description()"(overrides?: CallOverrides): Promise<string>;

    getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    "getAnswer(uint256)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getMarketOpen(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    "getMarketOpen(uint256)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getRoundData(
        _roundId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides,
    ): Promise<
        [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
            roundId: BigNumber;
            answer: BigNumber;
            marketOpen: boolean;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }
    >;

    "getRoundData(uint80)"(
        _roundId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides,
    ): Promise<
        [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
            roundId: BigNumber;
            answer: BigNumber;
            marketOpen: boolean;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }
    >;

    getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    "getTimestamp(uint256)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<boolean>;

    latestAggregatorRoundId(overrides?: CallOverrides): Promise<number>;

    "latestAggregatorRoundId()"(overrides?: CallOverrides): Promise<number>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    "latestAnswer()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestMarketOpen(overrides?: CallOverrides): Promise<boolean>;

    "latestMarketOpen()"(overrides?: CallOverrides): Promise<boolean>;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    "latestRound()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<
        [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
            roundId: BigNumber;
            answer: BigNumber;
            marketOpen: boolean;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }
    >;

    "latestRoundData()"(overrides?: CallOverrides): Promise<
        [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
            roundId: BigNumber;
            answer: BigNumber;
            marketOpen: boolean;
            startedAt: BigNumber;
            updatedAt: BigNumber;
            answeredInRound: BigNumber;
        }
    >;

    latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "latestTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestTransmissionDetails(overrides?: CallOverrides): Promise<
        [BigNumber, BigNumber, boolean] & {
            _latestAnswer: BigNumber;
            _latestTimestamp: BigNumber;
            _marketOpen: boolean;
        }
    >;

    "latestTransmissionDetails()"(overrides?: CallOverrides): Promise<
        [BigNumber, BigNumber, boolean] & {
            _latestAnswer: BigNumber;
            _latestTimestamp: BigNumber;
            _marketOpen: boolean;
        }
    >;

    renounceRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    "supportsInterface(bytes4)"(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    transmit(
        _answer: PromiseOrValue<BigNumberish>,
        _marketOpen: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "transmit(int192,bool)"(
        _answer: PromiseOrValue<BigNumberish>,
        _marketOpen: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    typeAndVersion(overrides?: CallOverrides): Promise<string>;

    "typeAndVersion()"(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    callStatic: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

        VALIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

        "VALIDATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

        decimals(overrides?: CallOverrides): Promise<number>;

        "decimals()"(overrides?: CallOverrides): Promise<number>;

        description(overrides?: CallOverrides): Promise<string>;

        "description()"(overrides?: CallOverrides): Promise<string>;

        getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "getAnswer(uint256)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        getMarketOpen(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

        "getMarketOpen(uint256)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

        "getRoleAdmin(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

        getRoundData(
            _roundId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                marketOpen: boolean;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        "getRoundData(uint80)"(
            _roundId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                marketOpen: boolean;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "getTimestamp(uint256)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        "grantRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        "hasRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        latestAggregatorRoundId(overrides?: CallOverrides): Promise<number>;

        "latestAggregatorRoundId()"(overrides?: CallOverrides): Promise<number>;

        latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

        "latestAnswer()"(overrides?: CallOverrides): Promise<BigNumber>;

        latestMarketOpen(overrides?: CallOverrides): Promise<boolean>;

        "latestMarketOpen()"(overrides?: CallOverrides): Promise<boolean>;

        latestRound(overrides?: CallOverrides): Promise<BigNumber>;

        "latestRound()"(overrides?: CallOverrides): Promise<BigNumber>;

        latestRoundData(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                marketOpen: boolean;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        "latestRoundData()"(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber] & {
                roundId: BigNumber;
                answer: BigNumber;
                marketOpen: boolean;
                startedAt: BigNumber;
                updatedAt: BigNumber;
                answeredInRound: BigNumber;
            }
        >;

        latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

        "latestTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

        latestTransmissionDetails(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, boolean] & {
                _latestAnswer: BigNumber;
                _latestTimestamp: BigNumber;
                _marketOpen: boolean;
            }
        >;

        "latestTransmissionDetails()"(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, boolean] & {
                _latestAnswer: BigNumber;
                _latestTimestamp: BigNumber;
                _marketOpen: boolean;
            }
        >;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        "renounceRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        "revokeRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

        "supportsInterface(bytes4)"(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        transmit(
            _answer: PromiseOrValue<BigNumberish>,
            _marketOpen: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<void>;

        "transmit(int192,bool)"(
            _answer: PromiseOrValue<BigNumberish>,
            _marketOpen: PromiseOrValue<boolean>,
            overrides?: CallOverrides,
        ): Promise<void>;

        typeAndVersion(overrides?: CallOverrides): Promise<string>;

        "typeAndVersion()"(overrides?: CallOverrides): Promise<string>;

        version(overrides?: CallOverrides): Promise<BigNumber>;

        "version()"(overrides?: CallOverrides): Promise<BigNumber>;
    };

    filters: {
        "AnswerUpdated(int256,bool,uint256,uint256)"(
            current?: PromiseOrValue<BigNumberish> | null,
            marketOpen?: null,
            roundId?: PromiseOrValue<BigNumberish> | null,
            updatedAt?: null,
        ): AnswerUpdatedEventFilter;
        AnswerUpdated(
            current?: PromiseOrValue<BigNumberish> | null,
            marketOpen?: null,
            roundId?: PromiseOrValue<BigNumberish> | null,
            updatedAt?: null,
        ): AnswerUpdatedEventFilter;

        "NewRound(uint256,address,uint256)"(
            roundId?: PromiseOrValue<BigNumberish> | null,
            startedBy?: PromiseOrValue<string> | null,
            startedAt?: null,
        ): NewRoundEventFilter;
        NewRound(
            roundId?: PromiseOrValue<BigNumberish> | null,
            startedBy?: PromiseOrValue<string> | null,
            startedAt?: null,
        ): NewRoundEventFilter;

        "NewTransmission(uint32,int192,bool,address)"(
            aggregatorRoundId?: PromiseOrValue<BigNumberish> | null,
            answer?: null,
            marketOpen?: null,
            transmitter?: null,
        ): NewTransmissionEventFilter;
        NewTransmission(
            aggregatorRoundId?: PromiseOrValue<BigNumberish> | null,
            answer?: null,
            marketOpen?: null,
            transmitter?: null,
        ): NewTransmissionEventFilter;

        "RoleAdminChanged(bytes32,bytes32,bytes32)"(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null,
        ): RoleAdminChangedEventFilter;
        RoleAdminChanged(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null,
        ): RoleAdminChangedEventFilter;

        "RoleGranted(bytes32,address,address)"(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleGrantedEventFilter;
        RoleGranted(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleGrantedEventFilter;

        "RoleRevoked(bytes32,address,address)"(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleRevokedEventFilter;
        RoleRevoked(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleRevokedEventFilter;
    };

    estimateGas: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

        VALIDATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        "VALIDATOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<BigNumber>;

        "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

        description(overrides?: CallOverrides): Promise<BigNumber>;

        "description()"(overrides?: CallOverrides): Promise<BigNumber>;

        getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "getAnswer(uint256)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        getMarketOpen(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "getMarketOpen(uint256)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        "getRoleAdmin(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        getRoundData(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "getRoundData(uint80)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "getTimestamp(uint256)"(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "grantRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "hasRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        latestAggregatorRoundId(overrides?: CallOverrides): Promise<BigNumber>;

        "latestAggregatorRoundId()"(overrides?: CallOverrides): Promise<BigNumber>;

        latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

        "latestAnswer()"(overrides?: CallOverrides): Promise<BigNumber>;

        latestMarketOpen(overrides?: CallOverrides): Promise<BigNumber>;

        "latestMarketOpen()"(overrides?: CallOverrides): Promise<BigNumber>;

        latestRound(overrides?: CallOverrides): Promise<BigNumber>;

        "latestRound()"(overrides?: CallOverrides): Promise<BigNumber>;

        latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

        "latestRoundData()"(overrides?: CallOverrides): Promise<BigNumber>;

        latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

        "latestTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

        latestTransmissionDetails(overrides?: CallOverrides): Promise<BigNumber>;

        "latestTransmissionDetails()"(overrides?: CallOverrides): Promise<BigNumber>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "renounceRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "revokeRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        "supportsInterface(bytes4)"(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        transmit(
            _answer: PromiseOrValue<BigNumberish>,
            _marketOpen: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "transmit(int192,bool)"(
            _answer: PromiseOrValue<BigNumberish>,
            _marketOpen: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;

        "typeAndVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

        version(overrides?: CallOverrides): Promise<BigNumber>;

        "version()"(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        VALIDATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "VALIDATOR_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "description()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getAnswer(uint256)"(
            _roundId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getMarketOpen(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getMarketOpen(uint256)"(
            _roundId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getRoleAdmin(bytes32)"(
            role: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getRoundData(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getRoundData(uint80)"(
            _roundId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getTimestamp(uint256)"(
            _roundId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "grantRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        "hasRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        latestAggregatorRoundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "latestAggregatorRoundId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        latestAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "latestAnswer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        latestMarketOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "latestMarketOpen()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        latestRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "latestRound()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "latestRoundData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        latestTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "latestTimestamp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        latestTransmissionDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "latestTransmissionDetails()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "renounceRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "revokeRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        "supportsInterface(bytes4)"(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        transmit(
            _answer: PromiseOrValue<BigNumberish>,
            _marketOpen: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "transmit(int192,bool)"(
            _answer: PromiseOrValue<BigNumberish>,
            _marketOpen: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "typeAndVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
