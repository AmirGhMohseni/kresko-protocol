/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../../common";

export interface FluxPriceFeedFactoryInterface extends utils.Interface {
    functions: {
        "VALIDATOR_ROLE()": FunctionFragment;
        "addressOfPricePair(string,uint8,address)": FunctionFragment;
        "addressOfPricePairId(bytes32)": FunctionFragment;
        "fluxPriceFeeds(bytes32)": FunctionFragment;
        "getId(string,uint8,address)": FunctionFragment;
        "owner()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "transmit(string[],uint8[],int192[],bool[],address)": FunctionFragment;
        "typeAndVersion()": FunctionFragment;
        "valueFor(bytes32)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "VALIDATOR_ROLE"
            | "addressOfPricePair"
            | "addressOfPricePairId"
            | "fluxPriceFeeds"
            | "getId"
            | "owner"
            | "transferOwnership"
            | "transmit"
            | "typeAndVersion"
            | "valueFor",
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "VALIDATOR_ROLE", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "addressOfPricePair",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "addressOfPricePairId", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "fluxPriceFeeds", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(
        functionFragment: "getId",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "transmit",
        values: [
            PromiseOrValue<string>[],
            PromiseOrValue<BigNumberish>[],
            PromiseOrValue<BigNumberish>[],
            PromiseOrValue<boolean>[],
            PromiseOrValue<string>,
        ],
    ): string;
    encodeFunctionData(functionFragment: "typeAndVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "valueFor", values: [PromiseOrValue<BytesLike>]): string;

    decodeFunctionResult(functionFragment: "VALIDATOR_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addressOfPricePair", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addressOfPricePairId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fluxPriceFeeds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transmit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "typeAndVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "valueFor", data: BytesLike): Result;

    events: {
        "FluxPriceFeedCreated(bytes32,address)": EventFragment;
        "Log(string)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "FluxPriceFeedCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
}

export interface FluxPriceFeedCreatedEventObject {
    id: string;
    oracle: string;
}
export type FluxPriceFeedCreatedEvent = TypedEvent<[string, string], FluxPriceFeedCreatedEventObject>;

export type FluxPriceFeedCreatedEventFilter = TypedEventFilter<FluxPriceFeedCreatedEvent>;

export interface LogEventObject {
    message: string;
}
export type LogEvent = TypedEvent<[string], LogEventObject>;

export type LogEventFilter = TypedEventFilter<LogEvent>;

export interface FluxPriceFeedFactory extends BaseContract {
    contractName: "FluxPriceFeedFactory";

    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: FluxPriceFeedFactoryInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        VALIDATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

        addressOfPricePair(
            _pricePair: PromiseOrValue<string>,
            _decimals: PromiseOrValue<BigNumberish>,
            _provider: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        addressOfPricePairId(_id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

        fluxPriceFeeds(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

        getId(
            _pricePair: PromiseOrValue<string>,
            _decimals: PromiseOrValue<BigNumberish>,
            _provider: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        transmit(
            _pricePairs: PromiseOrValue<string>[],
            _decimals: PromiseOrValue<BigNumberish>[],
            _answers: PromiseOrValue<BigNumberish>[],
            _marketStatusAnswers: PromiseOrValue<boolean>[],
            _provider: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        typeAndVersion(overrides?: CallOverrides): Promise<[string]>;

        valueFor(
            _id: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, boolean, BigNumber, BigNumber]>;
    };

    VALIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    addressOfPricePair(
        _pricePair: PromiseOrValue<string>,
        _decimals: PromiseOrValue<BigNumberish>,
        _provider: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<string>;

    addressOfPricePairId(_id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    fluxPriceFeeds(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getId(
        _pricePair: PromiseOrValue<string>,
        _decimals: PromiseOrValue<BigNumberish>,
        _provider: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transmit(
        _pricePairs: PromiseOrValue<string>[],
        _decimals: PromiseOrValue<BigNumberish>[],
        _answers: PromiseOrValue<BigNumberish>[],
        _marketStatusAnswers: PromiseOrValue<boolean>[],
        _provider: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    typeAndVersion(overrides?: CallOverrides): Promise<string>;

    valueFor(
        _id: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean, BigNumber, BigNumber]>;

    callStatic: {
        VALIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

        addressOfPricePair(
            _pricePair: PromiseOrValue<string>,
            _decimals: PromiseOrValue<BigNumberish>,
            _provider: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<string>;

        addressOfPricePairId(_id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

        fluxPriceFeeds(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

        getId(
            _pricePair: PromiseOrValue<string>,
            _decimals: PromiseOrValue<BigNumberish>,
            _provider: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<string>;

        owner(overrides?: CallOverrides): Promise<string>;

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        transmit(
            _pricePairs: PromiseOrValue<string>[],
            _decimals: PromiseOrValue<BigNumberish>[],
            _answers: PromiseOrValue<BigNumberish>[],
            _marketStatusAnswers: PromiseOrValue<boolean>[],
            _provider: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        typeAndVersion(overrides?: CallOverrides): Promise<string>;

        valueFor(
            _id: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, boolean, BigNumber, BigNumber]>;
    };

    filters: {
        "FluxPriceFeedCreated(bytes32,address)"(
            id?: PromiseOrValue<BytesLike> | null,
            oracle?: PromiseOrValue<string> | null,
        ): FluxPriceFeedCreatedEventFilter;
        FluxPriceFeedCreated(
            id?: PromiseOrValue<BytesLike> | null,
            oracle?: PromiseOrValue<string> | null,
        ): FluxPriceFeedCreatedEventFilter;

        "Log(string)"(message?: null): LogEventFilter;
        Log(message?: null): LogEventFilter;
    };

    estimateGas: {
        VALIDATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        addressOfPricePair(
            _pricePair: PromiseOrValue<string>,
            _decimals: PromiseOrValue<BigNumberish>,
            _provider: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        addressOfPricePairId(_id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        fluxPriceFeeds(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        getId(
            _pricePair: PromiseOrValue<string>,
            _decimals: PromiseOrValue<BigNumberish>,
            _provider: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        transmit(
            _pricePairs: PromiseOrValue<string>[],
            _decimals: PromiseOrValue<BigNumberish>[],
            _answers: PromiseOrValue<BigNumberish>[],
            _marketStatusAnswers: PromiseOrValue<boolean>[],
            _provider: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;

        valueFor(_id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        VALIDATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        addressOfPricePair(
            _pricePair: PromiseOrValue<string>,
            _decimals: PromiseOrValue<BigNumberish>,
            _provider: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        addressOfPricePairId(_id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        fluxPriceFeeds(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getId(
            _pricePair: PromiseOrValue<string>,
            _decimals: PromiseOrValue<BigNumberish>,
            _provider: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        transmit(
            _pricePairs: PromiseOrValue<string>[],
            _decimals: PromiseOrValue<BigNumberish>[],
            _answers: PromiseOrValue<BigNumberish>[],
            _marketStatusAnswers: PromiseOrValue<boolean>[],
            _provider: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        valueFor(_id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
