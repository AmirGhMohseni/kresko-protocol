/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../common";

export interface KreskoAssetAnchorInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "DOMAIN_SEPARATOR()": FunctionFragment;
        "allowance(address,address)": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "asset()": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "convertToAssets(uint256)": FunctionFragment;
        "convertToShares(uint256)": FunctionFragment;
        "decimals()": FunctionFragment;
        "deposit(uint256,address)": FunctionFragment;
        "destroy(uint256,address)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getRoleMember(bytes32,uint256)": FunctionFragment;
        "getRoleMemberCount(bytes32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "initialize(address,string,string,address)": FunctionFragment;
        "issue(uint256,address)": FunctionFragment;
        "maxDeposit(address)": FunctionFragment;
        "maxDestroy(address)": FunctionFragment;
        "maxIssue(address)": FunctionFragment;
        "maxMint(address)": FunctionFragment;
        "maxRedeem(address)": FunctionFragment;
        "maxWithdraw(address)": FunctionFragment;
        "mint(uint256,address)": FunctionFragment;
        "name()": FunctionFragment;
        "nonces(address)": FunctionFragment;
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
        "previewDeposit(uint256)": FunctionFragment;
        "previewDestroy(uint256)": FunctionFragment;
        "previewIssue(uint256)": FunctionFragment;
        "previewMint(uint256)": FunctionFragment;
        "previewRedeem(uint256)": FunctionFragment;
        "previewWithdraw(uint256)": FunctionFragment;
        "redeem(uint256,address,address)": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "symbol()": FunctionFragment;
        "totalAssets()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "updateMetaData(string,string,uint8)": FunctionFragment;
        "withdraw(uint256,address,address)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "DEFAULT_ADMIN_ROLE"
            | "DEFAULT_ADMIN_ROLE()"
            | "DOMAIN_SEPARATOR"
            | "DOMAIN_SEPARATOR()"
            | "allowance"
            | "allowance(address,address)"
            | "approve"
            | "approve(address,uint256)"
            | "asset"
            | "asset()"
            | "balanceOf"
            | "balanceOf(address)"
            | "convertToAssets"
            | "convertToAssets(uint256)"
            | "convertToShares"
            | "convertToShares(uint256)"
            | "decimals"
            | "decimals()"
            | "deposit"
            | "deposit(uint256,address)"
            | "destroy"
            | "destroy(uint256,address)"
            | "getRoleAdmin"
            | "getRoleAdmin(bytes32)"
            | "getRoleMember"
            | "getRoleMember(bytes32,uint256)"
            | "getRoleMemberCount"
            | "getRoleMemberCount(bytes32)"
            | "grantRole"
            | "grantRole(bytes32,address)"
            | "hasRole"
            | "hasRole(bytes32,address)"
            | "initialize"
            | "initialize(address,string,string,address)"
            | "issue"
            | "issue(uint256,address)"
            | "maxDeposit"
            | "maxDeposit(address)"
            | "maxDestroy"
            | "maxDestroy(address)"
            | "maxIssue"
            | "maxIssue(address)"
            | "maxMint"
            | "maxMint(address)"
            | "maxRedeem"
            | "maxRedeem(address)"
            | "maxWithdraw"
            | "maxWithdraw(address)"
            | "mint"
            | "mint(uint256,address)"
            | "name"
            | "name()"
            | "nonces"
            | "nonces(address)"
            | "permit"
            | "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
            | "previewDeposit"
            | "previewDeposit(uint256)"
            | "previewDestroy"
            | "previewDestroy(uint256)"
            | "previewIssue"
            | "previewIssue(uint256)"
            | "previewMint"
            | "previewMint(uint256)"
            | "previewRedeem"
            | "previewRedeem(uint256)"
            | "previewWithdraw"
            | "previewWithdraw(uint256)"
            | "redeem"
            | "redeem(uint256,address,address)"
            | "renounceRole"
            | "renounceRole(bytes32,address)"
            | "revokeRole"
            | "revokeRole(bytes32,address)"
            | "supportsInterface"
            | "supportsInterface(bytes4)"
            | "symbol"
            | "symbol()"
            | "totalAssets"
            | "totalAssets()"
            | "totalSupply"
            | "totalSupply()"
            | "transfer"
            | "transfer(address,uint256)"
            | "transferFrom"
            | "transferFrom(address,address,uint256)"
            | "updateMetaData"
            | "updateMetaData(string,string,uint8)"
            | "withdraw"
            | "withdraw(uint256,address,address)",
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE()", values?: undefined): string;
    encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
    encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR()", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowance", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "allowance(address,address)",
        values: [PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "approve",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "approve(address,uint256)",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "asset", values?: undefined): string;
    encodeFunctionData(functionFragment: "asset()", values?: undefined): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "balanceOf(address)", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "convertToAssets", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "convertToAssets(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "convertToShares", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "convertToShares(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimals()", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "deposit",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "deposit(uint256,address)",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "destroy",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "destroy(uint256,address)",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin(bytes32)", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(
        functionFragment: "getRoleMember",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleMember(bytes32,uint256)",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(functionFragment: "getRoleMemberCount", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getRoleMemberCount(bytes32)", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(
        functionFragment: "grantRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "grantRole(bytes32,address)",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole(bytes32,address)",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "initialize",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "initialize(address,string,string,address)",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "issue",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "issue(uint256,address)",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "maxDeposit", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxDeposit(address)", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxDestroy", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxDestroy(address)", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxIssue", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxIssue(address)", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxMint", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxMint(address)", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxRedeem", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxRedeem(address)", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxWithdraw", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "maxWithdraw(address)", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "mint",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "mint(uint256,address)",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "name()", values?: undefined): string;
    encodeFunctionData(functionFragment: "nonces", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "nonces(address)", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "permit",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ],
    ): string;
    encodeFunctionData(
        functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ],
    ): string;
    encodeFunctionData(functionFragment: "previewDeposit", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "previewDeposit(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "previewDestroy", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "previewDestroy(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "previewIssue", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "previewIssue(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "previewMint", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "previewMint(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "previewRedeem", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "previewRedeem(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "previewWithdraw", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "previewWithdraw(uint256)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(
        functionFragment: "redeem",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "redeem(uint256,address,address)",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "renounceRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "renounceRole(bytes32,address)",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole(bytes32,address)",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "supportsInterface(bytes4)", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalAssets", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalAssets()", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply()", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "transfer",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "transfer(address,uint256)",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "transferFrom",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "transferFrom(address,address,uint256)",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "updateMetaData",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "updateMetaData(string,string,uint8)",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
    ): string;
    encodeFunctionData(
        functionFragment: "withdraw",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;
    encodeFunctionData(
        functionFragment: "withdraw(uint256,address,address)",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
    ): string;

    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance(address,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "asset()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertToAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertToAssets(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertToShares", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "convertToShares(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit(uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "destroy(uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMember(bytes32,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMemberCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMemberCount(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize(address,string,string,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "issue(uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxDeposit(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxDestroy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxDestroy(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxIssue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxIssue(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxMint(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxRedeem(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxWithdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxWithdraw(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint(uint256,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonces(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(functionFragment: "previewDeposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "previewDeposit(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "previewDestroy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "previewDestroy(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "previewIssue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "previewIssue(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "previewMint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "previewMint(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "previewRedeem", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "previewRedeem(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "previewWithdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "previewWithdraw(uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "redeem(uint256,address,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole(bytes32,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface(bytes4)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalAssets()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer(address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom(address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMetaData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMetaData(string,string,uint8)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw(uint256,address,address)", data: BytesLike): Result;

    events: {
        "Approval(address,address,uint256)": EventFragment;
        "Deposit(address,address,uint256,uint256)": EventFragment;
        "Destroy(address,address,address,uint256,uint256)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "Issue(address,address,uint256,uint256)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
        "Withdraw(address,address,address,uint256,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Approval(address,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Deposit(address,address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Destroy"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Destroy(address,address,address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized(uint8)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Issue"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Issue(address,address,uint256,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged(bytes32,bytes32,bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted(bytes32,address,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked(bytes32,address,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer(address,address,uint256)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw(address,address,address,uint256,uint256)"): EventFragment;
}

export interface ApprovalEventObject {
    owner: string;
    spender: string;
    amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
    caller: string;
    owner: string;
    assets: BigNumber;
    shares: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DestroyEventObject {
    caller: string;
    receiver: string;
    owner: string;
    assets: BigNumber;
    shares: BigNumber;
}
export type DestroyEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], DestroyEventObject>;

export type DestroyEventFilter = TypedEventFilter<DestroyEvent>;

export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface IssueEventObject {
    caller: string;
    owner: string;
    assets: BigNumber;
    shares: BigNumber;
}
export type IssueEvent = TypedEvent<[string, string, BigNumber, BigNumber], IssueEventObject>;

export type IssueEventFilter = TypedEventFilter<IssueEvent>;

export interface RoleAdminChangedEventObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
    role: string;
    account: string;
    sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TransferEventObject {
    from: string;
    to: string;
    amount: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
    caller: string;
    receiver: string;
    owner: string;
    assets: BigNumber;
    shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface KreskoAssetAnchor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: KreskoAssetAnchorInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

        "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

        allowance(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        "allowance(address,address)"(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "approve(address,uint256)"(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        asset(overrides?: CallOverrides): Promise<[string]>;

        "asset()"(overrides?: CallOverrides): Promise<[string]>;

        balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "balanceOf(address)"(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "convertToAssets(uint256)"(
            shares: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "convertToShares(uint256)"(
            assets: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        decimals(overrides?: CallOverrides): Promise<[number]>;

        "decimals()"(overrides?: CallOverrides): Promise<[number]>;

        deposit(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "deposit(uint256,address)"(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        destroy(
            _assets: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "destroy(uint256,address)"(
            _assets: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

        "getRoleAdmin(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        "getRoleMember(bytes32,uint256)"(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "getRoleMemberCount(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "grantRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        "hasRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        initialize(
            _asset: PromiseOrValue<string>,
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "initialize(address,string,string,address)"(
            _asset: PromiseOrValue<string>,
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        issue(
            _assets: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "issue(uint256,address)"(
            _assets: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "maxDeposit(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        maxDestroy(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "maxDestroy(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        maxIssue(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "maxIssue(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "maxMint(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "maxRedeem(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "maxWithdraw(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        mint(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "mint(uint256,address)"(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        name(overrides?: CallOverrides): Promise<[string]>;

        "name()"(overrides?: CallOverrides): Promise<[string]>;

        nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "nonces(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        permit(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "previewDeposit(uint256)"(
            assets: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        previewDestroy(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "previewDestroy(uint256)"(
            shares: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        previewIssue(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "previewIssue(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "previewMint(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "previewRedeem(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

        "previewWithdraw(uint256)"(
            assets: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        redeem(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "redeem(uint256,address,address)"(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "renounceRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "revokeRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

        "supportsInterface(bytes4)"(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        symbol(overrides?: CallOverrides): Promise<[string]>;

        "symbol()"(overrides?: CallOverrides): Promise<[string]>;

        totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

        "totalAssets()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

        "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "transfer(address,uint256)"(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "transferFrom(address,address,uint256)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        updateMetaData(
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _version: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "updateMetaData(string,string,uint8)"(
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _version: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        withdraw(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;

        "withdraw(uint256,address,address)"(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<ContractTransaction>;
    };

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    allowance(
        _owner: PromiseOrValue<string>,
        _spender: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "allowance(address,address)"(
        _owner: PromiseOrValue<string>,
        _spender: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<string>;

    "asset()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    "convertToAssets(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    "convertToShares(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    deposit(
        assets: PromiseOrValue<BigNumberish>,
        receiver: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
        assets: PromiseOrValue<BigNumberish>,
        receiver: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    destroy(
        _assets: PromiseOrValue<BigNumberish>,
        _from: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "destroy(uint256,address)"(
        _assets: PromiseOrValue<BigNumberish>,
        _from: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
        role: PromiseOrValue<BytesLike>,
        index: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides,
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
        role: PromiseOrValue<BytesLike>,
        index: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
        _asset: PromiseOrValue<string>,
        _name: PromiseOrValue<string>,
        _symbol: PromiseOrValue<string>,
        _owner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "initialize(address,string,string,address)"(
        _asset: PromiseOrValue<string>,
        _name: PromiseOrValue<string>,
        _symbol: PromiseOrValue<string>,
        _owner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    issue(
        _assets: PromiseOrValue<BigNumberish>,
        _to: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "issue(uint256,address)"(
        _assets: PromiseOrValue<BigNumberish>,
        _to: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    "maxDeposit(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxDestroy(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    "maxDestroy(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxIssue(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    "maxIssue(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    "maxMint(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    "maxRedeem(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    "maxWithdraw(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
        shares: PromiseOrValue<BigNumberish>,
        receiver: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "mint(uint256,address)"(
        shares: PromiseOrValue<BigNumberish>,
        receiver: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        value: PromiseOrValue<BigNumberish>,
        deadline: PromiseOrValue<BigNumberish>,
        v: PromiseOrValue<BigNumberish>,
        r: PromiseOrValue<BytesLike>,
        s: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        value: PromiseOrValue<BigNumberish>,
        deadline: PromiseOrValue<BigNumberish>,
        v: PromiseOrValue<BigNumberish>,
        r: PromiseOrValue<BytesLike>,
        s: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    "previewDeposit(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewDestroy(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    "previewDestroy(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewIssue(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    "previewIssue(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    "previewMint(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    "previewRedeem(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    "previewWithdraw(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
        shares: PromiseOrValue<BigNumberish>,
        receiver: PromiseOrValue<string>,
        owner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "redeem(uint256,address,address)"(
        shares: PromiseOrValue<BigNumberish>,
        receiver: PromiseOrValue<string>,
        owner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    "supportsInterface(bytes4)"(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMetaData(
        _name: PromiseOrValue<string>,
        _symbol: PromiseOrValue<string>,
        _version: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "updateMetaData(string,string,uint8)"(
        _name: PromiseOrValue<string>,
        _symbol: PromiseOrValue<string>,
        _version: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
        assets: PromiseOrValue<BigNumberish>,
        receiver: PromiseOrValue<string>,
        owner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address,address)"(
        assets: PromiseOrValue<BigNumberish>,
        receiver: PromiseOrValue<string>,
        owner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

        "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

        allowance(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "allowance(address,address)"(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        "approve(address,uint256)"(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        asset(overrides?: CallOverrides): Promise<string>;

        "asset()"(overrides?: CallOverrides): Promise<string>;

        balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "balanceOf(address)"(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "convertToAssets(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "convertToShares(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<number>;

        "decimals()"(overrides?: CallOverrides): Promise<number>;

        deposit(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "deposit(uint256,address)"(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        destroy(
            _assets: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "destroy(uint256,address)"(
            _assets: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

        "getRoleAdmin(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<string>;

        "getRoleMember(bytes32,uint256)"(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<string>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        "getRoleMemberCount(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        "grantRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        "hasRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        initialize(
            _asset: PromiseOrValue<string>,
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _owner: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        "initialize(address,string,string,address)"(
            _asset: PromiseOrValue<string>,
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _owner: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        issue(
            _assets: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "issue(uint256,address)"(
            _assets: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxDeposit(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        maxDestroy(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxDestroy(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        maxIssue(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxIssue(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxMint(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxRedeem(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxWithdraw(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        mint(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "mint(uint256,address)"(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<string>;

        "name()"(overrides?: CallOverrides): Promise<string>;

        nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "nonces(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        permit(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<void>;

        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<void>;

        previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewDeposit(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        previewDestroy(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewDestroy(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        previewIssue(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewIssue(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewMint(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewRedeem(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewWithdraw(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        redeem(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "redeem(uint256,address,address)"(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        "renounceRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        "revokeRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<void>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

        "supportsInterface(bytes4)"(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        symbol(overrides?: CallOverrides): Promise<string>;

        "symbol()"(overrides?: CallOverrides): Promise<string>;

        totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

        "totalAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        "transfer(address,uint256)"(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        "transferFrom(address,address,uint256)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        updateMetaData(
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _version: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        "updateMetaData(string,string,uint8)"(
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _version: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<void>;

        withdraw(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "withdraw(uint256,address,address)"(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;
    };

    filters: {
        "Approval(address,address,uint256)"(
            owner?: PromiseOrValue<string> | null,
            spender?: PromiseOrValue<string> | null,
            amount?: null,
        ): ApprovalEventFilter;
        Approval(
            owner?: PromiseOrValue<string> | null,
            spender?: PromiseOrValue<string> | null,
            amount?: null,
        ): ApprovalEventFilter;

        "Deposit(address,address,uint256,uint256)"(
            caller?: PromiseOrValue<string> | null,
            owner?: PromiseOrValue<string> | null,
            assets?: null,
            shares?: null,
        ): DepositEventFilter;
        Deposit(
            caller?: PromiseOrValue<string> | null,
            owner?: PromiseOrValue<string> | null,
            assets?: null,
            shares?: null,
        ): DepositEventFilter;

        "Destroy(address,address,address,uint256,uint256)"(
            caller?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            owner?: PromiseOrValue<string> | null,
            assets?: null,
            shares?: null,
        ): DestroyEventFilter;
        Destroy(
            caller?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            owner?: PromiseOrValue<string> | null,
            assets?: null,
            shares?: null,
        ): DestroyEventFilter;

        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;

        "Issue(address,address,uint256,uint256)"(
            caller?: PromiseOrValue<string> | null,
            owner?: PromiseOrValue<string> | null,
            assets?: null,
            shares?: null,
        ): IssueEventFilter;
        Issue(
            caller?: PromiseOrValue<string> | null,
            owner?: PromiseOrValue<string> | null,
            assets?: null,
            shares?: null,
        ): IssueEventFilter;

        "RoleAdminChanged(bytes32,bytes32,bytes32)"(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null,
        ): RoleAdminChangedEventFilter;
        RoleAdminChanged(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null,
        ): RoleAdminChangedEventFilter;

        "RoleGranted(bytes32,address,address)"(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleGrantedEventFilter;
        RoleGranted(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleGrantedEventFilter;

        "RoleRevoked(bytes32,address,address)"(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleRevokedEventFilter;
        RoleRevoked(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
        ): RoleRevokedEventFilter;

        "Transfer(address,address,uint256)"(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            amount?: null,
        ): TransferEventFilter;
        Transfer(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            amount?: null,
        ): TransferEventFilter;

        "Withdraw(address,address,address,uint256,uint256)"(
            caller?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            owner?: PromiseOrValue<string> | null,
            assets?: null,
            shares?: null,
        ): WithdrawEventFilter;
        Withdraw(
            caller?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            owner?: PromiseOrValue<string> | null,
            assets?: null,
            shares?: null,
        ): WithdrawEventFilter;
    };

    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

        "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

        allowance(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "allowance(address,address)"(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "approve(address,uint256)"(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        asset(overrides?: CallOverrides): Promise<BigNumber>;

        "asset()"(overrides?: CallOverrides): Promise<BigNumber>;

        balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "balanceOf(address)"(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "convertToAssets(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "convertToShares(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        decimals(overrides?: CallOverrides): Promise<BigNumber>;

        "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

        deposit(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "deposit(uint256,address)"(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        destroy(
            _assets: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "destroy(uint256,address)"(
            _assets: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        "getRoleAdmin(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "getRoleMember(bytes32,uint256)"(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        "getRoleMemberCount(bytes32)"(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "grantRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "hasRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        initialize(
            _asset: PromiseOrValue<string>,
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "initialize(address,string,string,address)"(
            _asset: PromiseOrValue<string>,
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        issue(
            _assets: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "issue(uint256,address)"(
            _assets: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxDeposit(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        maxDestroy(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxDestroy(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        maxIssue(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxIssue(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxMint(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxRedeem(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "maxWithdraw(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        mint(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "mint(uint256,address)"(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        name(overrides?: CallOverrides): Promise<BigNumber>;

        "name()"(overrides?: CallOverrides): Promise<BigNumber>;

        nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        "nonces(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        permit(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewDeposit(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        previewDestroy(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewDestroy(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        previewIssue(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewIssue(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewMint(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewRedeem(uint256)"(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        "previewWithdraw(uint256)"(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

        redeem(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "redeem(uint256,address,address)"(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "renounceRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "revokeRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

        "supportsInterface(bytes4)"(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        symbol(overrides?: CallOverrides): Promise<BigNumber>;

        "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

        totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

        "totalAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

        "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "transfer(address,uint256)"(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "transferFrom(address,address,uint256)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        updateMetaData(
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _version: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "updateMetaData(string,string,uint8)"(
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _version: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        withdraw(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;

        "withdraw(uint256,address,address)"(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        allowance(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        "allowance(address,address)"(
            _owner: PromiseOrValue<string>,
            _spender: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "approve(address,uint256)"(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "asset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "balanceOf(address)"(
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "convertToAssets(uint256)"(
            shares: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "convertToShares(uint256)"(
            assets: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        deposit(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "deposit(uint256,address)"(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        destroy(
            _assets: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "destroy(uint256,address)"(
            _assets: PromiseOrValue<BigNumberish>,
            _from: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getRoleAdmin(bytes32)"(
            role: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getRoleMember(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        "getRoleMember(bytes32,uint256)"(
            role: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getRoleMemberCount(bytes32)"(
            role: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "grantRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        "hasRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        initialize(
            _asset: PromiseOrValue<string>,
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "initialize(address,string,string,address)"(
            _asset: PromiseOrValue<string>,
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        issue(
            _assets: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "issue(uint256,address)"(
            _assets: PromiseOrValue<BigNumberish>,
            _to: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "maxDeposit(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maxDestroy(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "maxDestroy(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maxIssue(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "maxIssue(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "maxMint(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "maxRedeem(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "maxWithdraw(address)"(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        mint(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "mint(uint256,address)"(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "nonces(address)"(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        permit(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "previewDeposit(uint256)"(
            assets: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        previewDestroy(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "previewDestroy(uint256)"(
            shares: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        previewIssue(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "previewIssue(uint256)"(
            assets: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "previewMint(uint256)"(
            shares: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "previewRedeem(uint256)"(
            shares: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "previewWithdraw(uint256)"(
            assets: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        redeem(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "redeem(uint256,address,address)"(
            shares: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        renounceRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "renounceRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "revokeRole(bytes32,address)"(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        "supportsInterface(bytes4)"(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "totalAssets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "transfer(address,uint256)"(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "transferFrom(address,address,uint256)"(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        updateMetaData(
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _version: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "updateMetaData(string,string,uint8)"(
            _name: PromiseOrValue<string>,
            _symbol: PromiseOrValue<string>,
            _version: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        withdraw(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;

        "withdraw(uint256,address,address)"(
            assets: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<string>,
            owner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> },
        ): Promise<PopulatedTransaction>;
    };
}
