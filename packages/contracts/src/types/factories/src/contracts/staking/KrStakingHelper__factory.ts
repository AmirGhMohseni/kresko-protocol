/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  KrStakingHelper,
  KrStakingHelperInterface,
} from "../../../../src/contracts/staking/KrStakingHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "_router",
        type: "address",
      },
      {
        internalType: "contract IUniswapV2Factory",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "contract IKrStaking",
        name: "_staking",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "ClaimRewardsMulti",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256",
      },
    ],
    name: "LiquidityAndStakeAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256",
      },
    ],
    name: "LiquidityAndStakeRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountADesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBDesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidityAndStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "claimRewardsMulti",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract IUniswapV2Factory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "staking",
    outputs: [
      {
        internalType: "contract IKrStaking",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "withdrawAndRemoveLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e03461011457601f62001617388190039182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01683019167ffffffffffffffff831184841017610119578084926060946040528339810103126101145780516100959161006d8261012f565b604060208201519161007e8361012f565b01519161008a8361012f565b60805260a05260c052565b6040516114c990816200014e82396080518181816102cc015281816107de0152818161086e0152818161096c0152610f40015260a0518181816101750152818161067a0152610ecf015260c0518181816101ed0152818161056601528181610715015281816109dd01528181610a5801528181610af60152610d3a0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116036101145756fe6040608081526004908136101561001557600080fd5b600090813560e01c9283632df56a3f146100945750505080634cf088d91461008b578063b4c29b6814610082578063b6842c6014610079578063c45a0155146100705763f887ea4014610068575b600080fd5b610063610f0b565b50610063610e9a565b50610063610cd5565b506100636105a2565b50610063610531565b346105045760e0367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0112610504578035916100cf83610508565b602435906100dc82610508565b6044359160a4356100ec81610508565b73ffffffffffffffffffffffffffffffffffffffff818116969091908890610115891515610f7c565b85517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083168a830190815290871660208281019190915291999082908b9081906040010381897f0000000000000000000000000000000000000000000000000000000000000000165afa998a156104f7575b849a6104c8575b5087517fba8fc5bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b16828201908152909a7f0000000000000000000000000000000000000000000000000000000000000000881693918a908d9081906020010381875afa80156104bb575b869c8791610488575b50610238906110c0565b833b1561048457818b610322928c9a8f8a84819a8f938f948c610294869251978896879586946343a4534b60e01b86523390860192936060929594608085019660018060a01b0380941686526020860152604085015216910152565b03925af18015610477575b61045e575b508b517f095ea7b30000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000821673ffffffffffffffffffffffffffffffffffffffff811689830190815260208101959095529a90958694859391849160400190565b0393165af18015610451575b610423575b505085517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416918101918252968316602082015260408101899052606435606082015260843560808201529190931660a082015260c43560c082015284928391829060e00103925af18015610416575b6103ea575b5051927f27b4eb450d703cc6355f1bc733710bf45d86de95f33ef1c672786817a5c9265d8585a4f35b61040990823d841161040f575b6104018183611052565b81019061142b565b506103c1565b503d6103f7565b61041e61108c565b6103bc565b8161044292903d1061044a575b61043a8183611052565b810190611126565b508c80610333565b503d610430565b61045961108c565b61032e565b8061046b61047192610ff9565b80610526565b386102a4565b61047f61108c565b61029f565b8580fd5b6102389d506104ad91508b3d8d116104b4575b6104a58183611052565b8101906110a6565b909c61022e565b503d61049b565b6104c361108c565b610225565b6104e9919a50823d84116104f0575b6104e18183611052565b810190611074565b988c6101a6565b503d6104d7565b6104ff61108c565b61019f565b8280fd5b73ffffffffffffffffffffffffffffffffffffffff81160361006357565b600091031261006357565b5034610063576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0112610063576040517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602090f35b503461006357610100367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100635760046105df8135610508565b6105ea602435610508565b6105f560c435610508565b61061860c43573ffffffffffffffffffffffffffffffffffffffff161515610f7c565b604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8335811684830190815260243591909116602082810191909152919392849182910103817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165afa918215610cc8575b600092610ca7575b50604080517fba8fc5bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416838201908152909291908390819060200103817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165afa8015610c9a575b6000928391610c75575b50610767906110c0565b803573ffffffffffffffffffffffffffffffffffffffff1661078d604435303384611155565b60243573ffffffffffffffffffffffffffffffffffffffff16906107b5606435303385611155565b604080517f095ea7b30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1685820190815260443560208281019190915291939192849291839160009183910103925af18015610c68575b610c49575b50604080517f095ea7b30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1684820190815260643560208281019190915291939192849291839160009183910103925af18015610c3c575b610c1d575b50604080517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8335811684830190815260243591909116602082015260443592810192909252606435606083810191909152608435608084015260a43560a08401523060c084015260e43560e08401529094918590819061010001038160007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af1938415610c10575b600094610bdd575b50604080517f095ea7b30000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168482019081526020818101889052919391928492918391600091839101039273ffffffffffffffffffffffffffffffffffffffff165af18015610bd0575b610bb1575b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163b1561006357604080517f0efe6a8b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff60c435169281019283526020830184905290820184905290600090829081906060010381837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af18015610ba4575b610b91575b50604051918291610b8d91908160c43573ffffffffffffffffffffffffffffffffffffffff167f67153b1f92f8a4e823af8ca2fdb93c3d313b9dcb1404c5da9a9c44234a3302e9600087a482526020820190565b0390f35b8061046b610b9e92610ff9565b38610b39565b610bac61108c565b610b34565b610bc99060203d60201161044a5761043a8183611052565b5038610a55565b610bd861108c565b610a50565b610bff91945060603d8111610c09575b610bf78183611052565b81019061113a565b91505092386109b3565b503d610bed565b610c1861108c565b6109ab565b610c359060203d60201161044a5761043a8183611052565b50386108d4565b610c4461108c565b6108cf565b610c619060203d60201161044a5761043a8183611052565b5038610844565b610c7061108c565b61083f565b6107679350610c93915060403d6040116104b4576104a58183611052565b909261075d565b610ca261108c565b610753565b610cc191925060203d6020116104f0576104e18183611052565b90386106c1565b610cd061108c565b6106b9565b5034610063576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0112610063576004803590610d1382610508565b73ffffffffffffffffffffffffffffffffffffffff8281169190610d38831515610f7c565b7f0000000000000000000000000000000000000000000000000000000000000000169260409182519163040f1f6d60e11b83526020838381895afa928315610e8d575b600093610e5d575b5060005b838110610dba576000868651907fac4bb348f20fccad9f5419b8d566bc60a544d193931dc39efe624899e5d068b78383a2f35b863b156100635784517fbf82b7b5000000000000000000000000000000000000000000000000000000008152338482019081526020810183905273ffffffffffffffffffffffffffffffffffffffff84166040820152610e38929190600090829081906060010381838d5af18015610e50575b610e3d575b50611450565b610d87565b8061046b610e4a92610ff9565b38610e32565b610e5861108c565b610e2d565b610e7f91935060203d8111610e86575b610e778183611052565b810190611441565b9138610d83565b503d610e6d565b610e9561108c565b610d7b565b5034610063576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0112610063576040517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602090f35b5034610063576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0112610063576040517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602090f35b15610f8357565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4b523a20216164647265737300000000000000000000000000000000000000006044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161100d57604052565b611015610fe2565b604052565b60a0810190811067ffffffffffffffff82111761100d57604052565b6040810190811067ffffffffffffffff82111761100d57604052565b90601f8019910116810190811067ffffffffffffffff82111761100d57604052565b90816020910312610063575161108981610508565b90565b506040513d6000823e3d90fd5b5190811515820361006357565b919082604091031261006357611089602083519301611099565b156110c757565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4b523a2021706f6f6c45786973747300000000000000000000000000000000006044820152606490fd5b908160209103126100635761108990611099565b90816060910312610063578051916040602083015192015190565b906000806112059460405194602097888701956323b872dd60e01b875260018060a01b03938480921660248a015216604488015260648701526064865261119b8661101a565b1692604051946111aa86611036565b8786527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656488870152519082855af13d1561122c573d916111e983611234565b926111f76040519485611052565b83523d60008785013e61136f565b8051908161121257505050565b8261122a93611225938301019101611126565b61127d565b565b60609161136f565b60209067ffffffffffffffff8111611270575b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b611278610fe2565b611247565b1561128457565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b1561131057565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9192901561138f5750815115611383575090565b611089903b1515611309565b8251909150156113a25750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251928360248401526000915b848310611412575050918060449311611405575b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101030190fd5b60008382840101526113d9565b81830181015186840160440152859350918201916113c5565b9190826040910312610063576020825192015190565b90816020910312610063575190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461147d5760010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220fb501b7ff293ec8b2d00d6c3c50e412d48792ba5102facae515908a8f61c0ee564736f6c634300080e0033";

type KrStakingHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KrStakingHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KrStakingHelper__factory extends ContractFactory {
  constructor(...args: KrStakingHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "KrStakingHelper";
  }

  override deploy(
    _router: PromiseOrValue<string>,
    _factory: PromiseOrValue<string>,
    _staking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<KrStakingHelper> {
    return super.deploy(
      _router,
      _factory,
      _staking,
      overrides || {}
    ) as Promise<KrStakingHelper>;
  }
  override getDeployTransaction(
    _router: PromiseOrValue<string>,
    _factory: PromiseOrValue<string>,
    _staking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _router,
      _factory,
      _staking,
      overrides || {}
    );
  }
  override attach(address: string): KrStakingHelper {
    return super.attach(address) as KrStakingHelper;
  }
  override connect(signer: Signer): KrStakingHelper__factory {
    return super.connect(signer) as KrStakingHelper__factory;
  }
  static readonly contractName: "KrStakingHelper";

  public readonly contractName: "KrStakingHelper";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KrStakingHelperInterface {
    return new utils.Interface(_abi) as KrStakingHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KrStakingHelper {
    return new Contract(address, _abi, signerOrProvider) as KrStakingHelper;
  }
}
