/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MinterEventInterface extends utils.Interface {
  contractName: "MinterEvent";
  functions: {};

  events: {
    "BurnFeePaid(address,address,uint256,uint256)": EventFragment;
    "BurnFeeUpdated(uint256)": EventFragment;
    "CollateralAssetAdded(address,uint256,address)": EventFragment;
    "CollateralAssetUpdated(address,uint256,address)": EventFragment;
    "CollateralDeposited(address,address,uint256)": EventFragment;
    "CollateralWithdrawn(address,address,uint256)": EventFragment;
    "FeeRecipientUpdated(address)": EventFragment;
    "KreskoAssetAdded(address,string,uint256,address,uint256)": EventFragment;
    "KreskoAssetBurned(address,address,uint256)": EventFragment;
    "KreskoAssetMinted(address,address,uint256)": EventFragment;
    "KreskoAssetUpdated(address,uint256,address,bool,uint256)": EventFragment;
    "LiquidationIncentiveMultiplierUpdated(uint256)": EventFragment;
    "LiquidationOccurred(address,address,address,uint256,address,uint256)": EventFragment;
    "MinimumCollateralizationRatioUpdated(uint256)": EventFragment;
    "MinimumDebtValueUpdated(uint256)": EventFragment;
    "TrustedContract(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurnFeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralAssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralAssetUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRecipientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KreskoAssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KreskoAssetBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KreskoAssetMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KreskoAssetUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationIncentiveMultiplierUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationOccurred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinimumCollateralizationRatioUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumDebtValueUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedContract"): EventFragment;
}

export type BurnFeePaidEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    account: string;
    paymentCollateralAsset: string;
    paymentAmount: BigNumber;
    paymentValue: BigNumber;
  }
>;

export type BurnFeePaidEventFilter = TypedEventFilter<BurnFeePaidEvent>;

export type BurnFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  { burnFee: BigNumber }
>;

export type BurnFeeUpdatedEventFilter = TypedEventFilter<BurnFeeUpdatedEvent>;

export type CollateralAssetAddedEvent = TypedEvent<
  [string, BigNumber, string],
  { collateralAsset: string; factor: BigNumber; oracle: string }
>;

export type CollateralAssetAddedEventFilter =
  TypedEventFilter<CollateralAssetAddedEvent>;

export type CollateralAssetUpdatedEvent = TypedEvent<
  [string, BigNumber, string],
  { collateralAsset: string; factor: BigNumber; oracle: string }
>;

export type CollateralAssetUpdatedEventFilter =
  TypedEventFilter<CollateralAssetUpdatedEvent>;

export type CollateralDepositedEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; collateralAsset: string; amount: BigNumber }
>;

export type CollateralDepositedEventFilter =
  TypedEventFilter<CollateralDepositedEvent>;

export type CollateralWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; collateralAsset: string; amount: BigNumber }
>;

export type CollateralWithdrawnEventFilter =
  TypedEventFilter<CollateralWithdrawnEvent>;

export type FeeRecipientUpdatedEvent = TypedEvent<
  [string],
  { feeRecipient: string }
>;

export type FeeRecipientUpdatedEventFilter =
  TypedEventFilter<FeeRecipientUpdatedEvent>;

export type KreskoAssetAddedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  {
    kreskoAsset: string;
    symbol: string;
    kFactor: BigNumber;
    oracle: string;
    marketCapLimit: BigNumber;
  }
>;

export type KreskoAssetAddedEventFilter =
  TypedEventFilter<KreskoAssetAddedEvent>;

export type KreskoAssetBurnedEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; kreskoAsset: string; amount: BigNumber }
>;

export type KreskoAssetBurnedEventFilter =
  TypedEventFilter<KreskoAssetBurnedEvent>;

export type KreskoAssetMintedEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; kreskoAsset: string; amount: BigNumber }
>;

export type KreskoAssetMintedEventFilter =
  TypedEventFilter<KreskoAssetMintedEvent>;

export type KreskoAssetUpdatedEvent = TypedEvent<
  [string, BigNumber, string, boolean, BigNumber],
  {
    kreskoAsset: string;
    kFactor: BigNumber;
    oracle: string;
    mintable: boolean;
    limit: BigNumber;
  }
>;

export type KreskoAssetUpdatedEventFilter =
  TypedEventFilter<KreskoAssetUpdatedEvent>;

export type LiquidationIncentiveMultiplierUpdatedEvent = TypedEvent<
  [BigNumber],
  { liquidationIncentiveMultiplier: BigNumber }
>;

export type LiquidationIncentiveMultiplierUpdatedEventFilter =
  TypedEventFilter<LiquidationIncentiveMultiplierUpdatedEvent>;

export type LiquidationOccurredEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber],
  {
    account: string;
    liquidator: string;
    repayKreskoAsset: string;
    repayAmount: BigNumber;
    seizedCollateralAsset: string;
    collateralSent: BigNumber;
  }
>;

export type LiquidationOccurredEventFilter =
  TypedEventFilter<LiquidationOccurredEvent>;

export type MinimumCollateralizationRatioUpdatedEvent = TypedEvent<
  [BigNumber],
  { minimumCollateralizationRatio: BigNumber }
>;

export type MinimumCollateralizationRatioUpdatedEventFilter =
  TypedEventFilter<MinimumCollateralizationRatioUpdatedEvent>;

export type MinimumDebtValueUpdatedEvent = TypedEvent<
  [BigNumber],
  { minimumDebtValue: BigNumber }
>;

export type MinimumDebtValueUpdatedEventFilter =
  TypedEventFilter<MinimumDebtValueUpdatedEvent>;

export type TrustedContractEvent = TypedEvent<
  [string, boolean],
  { contractAddress: string; isTrusted: boolean }
>;

export type TrustedContractEventFilter = TypedEventFilter<TrustedContractEvent>;

export interface MinterEvent extends BaseContract {
  contractName: "MinterEvent";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinterEventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BurnFeePaid(address,address,uint256,uint256)"(
      account?: string | null,
      paymentCollateralAsset?: string | null,
      paymentAmount?: BigNumberish | null,
      paymentValue?: null
    ): BurnFeePaidEventFilter;
    BurnFeePaid(
      account?: string | null,
      paymentCollateralAsset?: string | null,
      paymentAmount?: BigNumberish | null,
      paymentValue?: null
    ): BurnFeePaidEventFilter;

    "BurnFeeUpdated(uint256)"(
      burnFee?: BigNumberish | null
    ): BurnFeeUpdatedEventFilter;
    BurnFeeUpdated(burnFee?: BigNumberish | null): BurnFeeUpdatedEventFilter;

    "CollateralAssetAdded(address,uint256,address)"(
      collateralAsset?: string | null,
      factor?: BigNumberish | null,
      oracle?: string | null
    ): CollateralAssetAddedEventFilter;
    CollateralAssetAdded(
      collateralAsset?: string | null,
      factor?: BigNumberish | null,
      oracle?: string | null
    ): CollateralAssetAddedEventFilter;

    "CollateralAssetUpdated(address,uint256,address)"(
      collateralAsset?: string | null,
      factor?: BigNumberish | null,
      oracle?: string | null
    ): CollateralAssetUpdatedEventFilter;
    CollateralAssetUpdated(
      collateralAsset?: string | null,
      factor?: BigNumberish | null,
      oracle?: string | null
    ): CollateralAssetUpdatedEventFilter;

    "CollateralDeposited(address,address,uint256)"(
      account?: string | null,
      collateralAsset?: string | null,
      amount?: BigNumberish | null
    ): CollateralDepositedEventFilter;
    CollateralDeposited(
      account?: string | null,
      collateralAsset?: string | null,
      amount?: BigNumberish | null
    ): CollateralDepositedEventFilter;

    "CollateralWithdrawn(address,address,uint256)"(
      account?: string | null,
      collateralAsset?: string | null,
      amount?: BigNumberish | null
    ): CollateralWithdrawnEventFilter;
    CollateralWithdrawn(
      account?: string | null,
      collateralAsset?: string | null,
      amount?: BigNumberish | null
    ): CollateralWithdrawnEventFilter;

    "FeeRecipientUpdated(address)"(
      feeRecipient?: string | null
    ): FeeRecipientUpdatedEventFilter;
    FeeRecipientUpdated(
      feeRecipient?: string | null
    ): FeeRecipientUpdatedEventFilter;

    "KreskoAssetAdded(address,string,uint256,address,uint256)"(
      kreskoAsset?: string | null,
      symbol?: string | null,
      kFactor?: BigNumberish | null,
      oracle?: null,
      marketCapLimit?: null
    ): KreskoAssetAddedEventFilter;
    KreskoAssetAdded(
      kreskoAsset?: string | null,
      symbol?: string | null,
      kFactor?: BigNumberish | null,
      oracle?: null,
      marketCapLimit?: null
    ): KreskoAssetAddedEventFilter;

    "KreskoAssetBurned(address,address,uint256)"(
      account?: string | null,
      kreskoAsset?: string | null,
      amount?: BigNumberish | null
    ): KreskoAssetBurnedEventFilter;
    KreskoAssetBurned(
      account?: string | null,
      kreskoAsset?: string | null,
      amount?: BigNumberish | null
    ): KreskoAssetBurnedEventFilter;

    "KreskoAssetMinted(address,address,uint256)"(
      account?: string | null,
      kreskoAsset?: string | null,
      amount?: BigNumberish | null
    ): KreskoAssetMintedEventFilter;
    KreskoAssetMinted(
      account?: string | null,
      kreskoAsset?: string | null,
      amount?: BigNumberish | null
    ): KreskoAssetMintedEventFilter;

    "KreskoAssetUpdated(address,uint256,address,bool,uint256)"(
      kreskoAsset?: string | null,
      kFactor?: BigNumberish | null,
      oracle?: string | null,
      mintable?: null,
      limit?: null
    ): KreskoAssetUpdatedEventFilter;
    KreskoAssetUpdated(
      kreskoAsset?: string | null,
      kFactor?: BigNumberish | null,
      oracle?: string | null,
      mintable?: null,
      limit?: null
    ): KreskoAssetUpdatedEventFilter;

    "LiquidationIncentiveMultiplierUpdated(uint256)"(
      liquidationIncentiveMultiplier?: BigNumberish | null
    ): LiquidationIncentiveMultiplierUpdatedEventFilter;
    LiquidationIncentiveMultiplierUpdated(
      liquidationIncentiveMultiplier?: BigNumberish | null
    ): LiquidationIncentiveMultiplierUpdatedEventFilter;

    "LiquidationOccurred(address,address,address,uint256,address,uint256)"(
      account?: string | null,
      liquidator?: string | null,
      repayKreskoAsset?: string | null,
      repayAmount?: null,
      seizedCollateralAsset?: null,
      collateralSent?: null
    ): LiquidationOccurredEventFilter;
    LiquidationOccurred(
      account?: string | null,
      liquidator?: string | null,
      repayKreskoAsset?: string | null,
      repayAmount?: null,
      seizedCollateralAsset?: null,
      collateralSent?: null
    ): LiquidationOccurredEventFilter;

    "MinimumCollateralizationRatioUpdated(uint256)"(
      minimumCollateralizationRatio?: BigNumberish | null
    ): MinimumCollateralizationRatioUpdatedEventFilter;
    MinimumCollateralizationRatioUpdated(
      minimumCollateralizationRatio?: BigNumberish | null
    ): MinimumCollateralizationRatioUpdatedEventFilter;

    "MinimumDebtValueUpdated(uint256)"(
      minimumDebtValue?: BigNumberish | null
    ): MinimumDebtValueUpdatedEventFilter;
    MinimumDebtValueUpdated(
      minimumDebtValue?: BigNumberish | null
    ): MinimumDebtValueUpdatedEventFilter;

    "TrustedContract(address,bool)"(
      contractAddress?: string | null,
      isTrusted?: boolean | null
    ): TrustedContractEventFilter;
    TrustedContract(
      contractAddress?: string | null,
      isTrusted?: boolean | null
    ): TrustedContractEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
