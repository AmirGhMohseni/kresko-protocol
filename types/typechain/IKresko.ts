/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace FixedPoint {
  export type UnsignedStruct = { rawValue: BigNumberish };

  export type UnsignedStructOutput = [BigNumber] & { rawValue: BigNumber };
}

export declare namespace IKresko {
  export type CollateralAssetStruct = {
    factor: FixedPoint.UnsignedStruct;
    oracle: string;
    underlyingRebasingToken: string;
    decimals: BigNumberish;
    exists: boolean;
  };

  export type CollateralAssetStructOutput = [
    FixedPoint.UnsignedStructOutput,
    string,
    string,
    number,
    boolean
  ] & {
    factor: FixedPoint.UnsignedStructOutput;
    oracle: string;
    underlyingRebasingToken: string;
    decimals: number;
    exists: boolean;
  };

  export type KrAssetStruct = {
    kFactor: FixedPoint.UnsignedStruct;
    oracle: string;
    exists: boolean;
    mintable: boolean;
  };

  export type KrAssetStructOutput = [
    FixedPoint.UnsignedStructOutput,
    string,
    boolean,
    boolean
  ] & {
    kFactor: FixedPoint.UnsignedStructOutput;
    oracle: string;
    exists: boolean;
    mintable: boolean;
  };
}

export interface IKreskoInterface extends utils.Interface {
  contractName: "IKresko";
  functions: {
    "burnKreskoAsset(address,address,uint256,uint256)": FunctionFragment;
    "calculateMaxLiquidatableValueForAssets(address,address,address)": FunctionFragment;
    "collateralAssets(address)": FunctionFragment;
    "collateralDeposits(address,address)": FunctionFragment;
    "collateralExists(address)": FunctionFragment;
    "depositCollateral(address,address,uint256)": FunctionFragment;
    "depositRebasingCollateral(address,address,uint256)": FunctionFragment;
    "getAccountCollateralValue(address)": FunctionFragment;
    "getAccountKrAssetValue(address)": FunctionFragment;
    "getAccountMinimumCollateralValue(address)": FunctionFragment;
    "getCollateralValueAndOraclePrice(address,uint256,bool)": FunctionFragment;
    "getDepositedCollateralAssetIndex(address,address)": FunctionFragment;
    "getDepositedCollateralAssets(address)": FunctionFragment;
    "getKrAssetValue(address,uint256,bool)": FunctionFragment;
    "getMinimumCollateralValue(address,uint256)": FunctionFragment;
    "getMintedKreskoAssets(address)": FunctionFragment;
    "getMintedKreskoAssetsIndex(address,address)": FunctionFragment;
    "krAssetExists(address)": FunctionFragment;
    "kreskoAssetDebt(address,address)": FunctionFragment;
    "kreskoAssets(address)": FunctionFragment;
    "minimumCollateralizationRatio()": FunctionFragment;
    "mintKreskoAsset(address,address,uint256)": FunctionFragment;
    "withdrawCollateral(address,address,uint256,uint256)": FunctionFragment;
    "withdrawRebasingCollateral(address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnKreskoAsset",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMaxLiquidatableValueForAssets",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralDeposits",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRebasingCollateral",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountCollateralValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountKrAssetValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountMinimumCollateralValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralValueAndOraclePrice",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositedCollateralAssetIndex",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositedCollateralAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getKrAssetValue",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumCollateralValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintedKreskoAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintedKreskoAssetsIndex",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "krAssetExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "kreskoAssetDebt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "kreskoAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumCollateralizationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintKreskoAsset",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRebasingCollateral",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnKreskoAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMaxLiquidatableValueForAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRebasingCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCollateralValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountKrAssetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountMinimumCollateralValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralValueAndOraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositedCollateralAssetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositedCollateralAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKrAssetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumCollateralValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintedKreskoAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintedKreskoAssetsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "krAssetExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kreskoAssetDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kreskoAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumCollateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintKreskoAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRebasingCollateral",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IKresko extends BaseContract {
  contractName: "IKresko";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKreskoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnKreskoAsset(
      _account: string,
      _kreskoAsset: string,
      _amount: BigNumberish,
      _mintedKreskoAssetIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateMaxLiquidatableValueForAssets(
      _account: string,
      _repayKreskoAsset: string,
      _collateralAssetToSeize: string,
      overrides?: CallOverrides
    ): Promise<[FixedPoint.UnsignedStructOutput]>;

    collateralAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[IKresko.CollateralAssetStructOutput]>;

    collateralDeposits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralExists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    depositCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositRebasingCollateral(
      _account: string,
      _collateralAsset: string,
      _rebasingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[FixedPoint.UnsignedStructOutput]>;

    getAccountKrAssetValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[FixedPoint.UnsignedStructOutput]>;

    getAccountMinimumCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[FixedPoint.UnsignedStructOutput]>;

    getCollateralValueAndOraclePrice(
      _collateralAsset: string,
      _amount: BigNumberish,
      _ignoreCollateralFactor: boolean,
      overrides?: CallOverrides
    ): Promise<
      [FixedPoint.UnsignedStructOutput, FixedPoint.UnsignedStructOutput]
    >;

    getDepositedCollateralAssetIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { i: BigNumber }>;

    getDepositedCollateralAssets(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getKrAssetValue(
      _kreskoAsset: string,
      _amount: BigNumberish,
      _ignoreKfactor: boolean,
      overrides?: CallOverrides
    ): Promise<[FixedPoint.UnsignedStructOutput]>;

    getMinimumCollateralValue(
      _krAsset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[FixedPoint.UnsignedStructOutput]>;

    getMintedKreskoAssets(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getMintedKreskoAssetsIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { i: BigNumber }>;

    krAssetExists(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    kreskoAssetDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    kreskoAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[IKresko.KrAssetStructOutput]>;

    minimumCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<[FixedPoint.UnsignedStructOutput]>;

    mintKreskoAsset(
      _account: string,
      _kreskoAsset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      _depositedCollateralAssetIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRebasingCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      _depositedCollateralAssetIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnKreskoAsset(
    _account: string,
    _kreskoAsset: string,
    _amount: BigNumberish,
    _mintedKreskoAssetIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateMaxLiquidatableValueForAssets(
    _account: string,
    _repayKreskoAsset: string,
    _collateralAssetToSeize: string,
    overrides?: CallOverrides
  ): Promise<FixedPoint.UnsignedStructOutput>;

  collateralAssets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<IKresko.CollateralAssetStructOutput>;

  collateralDeposits(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  depositCollateral(
    _account: string,
    _collateralAsset: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositRebasingCollateral(
    _account: string,
    _collateralAsset: string,
    _rebasingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountCollateralValue(
    _account: string,
    overrides?: CallOverrides
  ): Promise<FixedPoint.UnsignedStructOutput>;

  getAccountKrAssetValue(
    _account: string,
    overrides?: CallOverrides
  ): Promise<FixedPoint.UnsignedStructOutput>;

  getAccountMinimumCollateralValue(
    _account: string,
    overrides?: CallOverrides
  ): Promise<FixedPoint.UnsignedStructOutput>;

  getCollateralValueAndOraclePrice(
    _collateralAsset: string,
    _amount: BigNumberish,
    _ignoreCollateralFactor: boolean,
    overrides?: CallOverrides
  ): Promise<
    [FixedPoint.UnsignedStructOutput, FixedPoint.UnsignedStructOutput]
  >;

  getDepositedCollateralAssetIndex(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositedCollateralAssets(
    user: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getKrAssetValue(
    _kreskoAsset: string,
    _amount: BigNumberish,
    _ignoreKfactor: boolean,
    overrides?: CallOverrides
  ): Promise<FixedPoint.UnsignedStructOutput>;

  getMinimumCollateralValue(
    _krAsset: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<FixedPoint.UnsignedStructOutput>;

  getMintedKreskoAssets(
    user: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMintedKreskoAssetsIndex(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  krAssetExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  kreskoAssetDebt(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  kreskoAssets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<IKresko.KrAssetStructOutput>;

  minimumCollateralizationRatio(
    overrides?: CallOverrides
  ): Promise<FixedPoint.UnsignedStructOutput>;

  mintKreskoAsset(
    _account: string,
    _kreskoAsset: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    _account: string,
    _collateralAsset: string,
    _amount: BigNumberish,
    _depositedCollateralAssetIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRebasingCollateral(
    _account: string,
    _collateralAsset: string,
    _amount: BigNumberish,
    _depositedCollateralAssetIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnKreskoAsset(
      _account: string,
      _kreskoAsset: string,
      _amount: BigNumberish,
      _mintedKreskoAssetIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateMaxLiquidatableValueForAssets(
      _account: string,
      _repayKreskoAsset: string,
      _collateralAssetToSeize: string,
      overrides?: CallOverrides
    ): Promise<FixedPoint.UnsignedStructOutput>;

    collateralAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<IKresko.CollateralAssetStructOutput>;

    collateralDeposits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    depositCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositRebasingCollateral(
      _account: string,
      _collateralAsset: string,
      _rebasingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<FixedPoint.UnsignedStructOutput>;

    getAccountKrAssetValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<FixedPoint.UnsignedStructOutput>;

    getAccountMinimumCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<FixedPoint.UnsignedStructOutput>;

    getCollateralValueAndOraclePrice(
      _collateralAsset: string,
      _amount: BigNumberish,
      _ignoreCollateralFactor: boolean,
      overrides?: CallOverrides
    ): Promise<
      [FixedPoint.UnsignedStructOutput, FixedPoint.UnsignedStructOutput]
    >;

    getDepositedCollateralAssetIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositedCollateralAssets(
      user: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getKrAssetValue(
      _kreskoAsset: string,
      _amount: BigNumberish,
      _ignoreKfactor: boolean,
      overrides?: CallOverrides
    ): Promise<FixedPoint.UnsignedStructOutput>;

    getMinimumCollateralValue(
      _krAsset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<FixedPoint.UnsignedStructOutput>;

    getMintedKreskoAssets(
      user: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMintedKreskoAssetsIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    krAssetExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    kreskoAssetDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kreskoAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<IKresko.KrAssetStructOutput>;

    minimumCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<FixedPoint.UnsignedStructOutput>;

    mintKreskoAsset(
      _account: string,
      _kreskoAsset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      _depositedCollateralAssetIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRebasingCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      _depositedCollateralAssetIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    burnKreskoAsset(
      _account: string,
      _kreskoAsset: string,
      _amount: BigNumberish,
      _mintedKreskoAssetIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateMaxLiquidatableValueForAssets(
      _account: string,
      _repayKreskoAsset: string,
      _collateralAssetToSeize: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralDeposits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralExists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositRebasingCollateral(
      _account: string,
      _collateralAsset: string,
      _rebasingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountKrAssetValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountMinimumCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralValueAndOraclePrice(
      _collateralAsset: string,
      _amount: BigNumberish,
      _ignoreCollateralFactor: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositedCollateralAssetIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositedCollateralAssets(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKrAssetValue(
      _kreskoAsset: string,
      _amount: BigNumberish,
      _ignoreKfactor: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumCollateralValue(
      _krAsset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintedKreskoAssets(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintedKreskoAssetsIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    krAssetExists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    kreskoAssetDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kreskoAssets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minimumCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintKreskoAsset(
      _account: string,
      _kreskoAsset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      _depositedCollateralAssetIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRebasingCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      _depositedCollateralAssetIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnKreskoAsset(
      _account: string,
      _kreskoAsset: string,
      _amount: BigNumberish,
      _mintedKreskoAssetIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateMaxLiquidatableValueForAssets(
      _account: string,
      _repayKreskoAsset: string,
      _collateralAssetToSeize: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralDeposits(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralExists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositRebasingCollateral(
      _account: string,
      _collateralAsset: string,
      _rebasingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountKrAssetValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountMinimumCollateralValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralValueAndOraclePrice(
      _collateralAsset: string,
      _amount: BigNumberish,
      _ignoreCollateralFactor: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositedCollateralAssetIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositedCollateralAssets(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKrAssetValue(
      _kreskoAsset: string,
      _amount: BigNumberish,
      _ignoreKfactor: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumCollateralValue(
      _krAsset: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintedKreskoAssets(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintedKreskoAssetsIndex(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    krAssetExists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kreskoAssetDebt(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kreskoAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintKreskoAsset(
      _account: string,
      _kreskoAsset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      _depositedCollateralAssetIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRebasingCollateral(
      _account: string,
      _collateralAsset: string,
      _amount: BigNumberish,
      _depositedCollateralAssetIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
