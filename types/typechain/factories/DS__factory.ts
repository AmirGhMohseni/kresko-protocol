/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DS, DSInterface } from "../DS";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122080f01bbf13069fab815dce706bc45708eba9e8807a0345ec097ad7ca3ca03f8a64736f6c634300080b0033";

type DSConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DSConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DS__factory extends ContractFactory {
  constructor(...args: DSConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "DS";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DS> {
    return super.deploy(overrides || {}) as Promise<DS>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DS {
    return super.attach(address) as DS;
  }
  connect(signer: Signer): DS__factory {
    return super.connect(signer) as DS__factory;
  }
  static readonly contractName: "DS";
  public readonly contractName: "DS";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DSInterface {
    return new utils.Interface(_abi) as DSInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DS {
    return new Contract(address, _abi, signerOrProvider) as DS;
  }
}
