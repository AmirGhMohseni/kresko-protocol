/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OperatorFacet, OperatorFacetInterface } from "../OperatorFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
    ],
    name: "isOperatorFor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
    ],
    name: "toggleOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102c9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063bdac7ca31461003b578063d95b637114610050575b600080fd5b61004e610049366004610260565b6100bf565b005b6100ab61005e366004610260565b6001600160a01b0391821660009081527fa1913c34ddada141a5d56c2b5b7d024a07c1db6234ef6660e64a8f3cc6c7ca9e6020908152604080832093909416825291909152205460ff1690565b604051901515815260200160405180910390f35b7f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f09546001600160a01b03166100f261015a565b6001600160a01b03161461014c5760405162461bcd60e51b815260206004820152601f60248201527f4469616d6f6e643a204d75737420626520636f6e7472616374206f776e657200604482015260640160405180910390fd5b61015682826101b7565b5050565b6000333014156101b157600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506101b49050565b50335b90565b6001600160a01b0382811660008181527fa1913c34ddada141a5d56c2b5b7d024a07c1db6234ef6660e64a8f3cc6c7ca9e6020908152604080832094861680845294909152808220805460ff81161560ff199091168117909155905190938493909290917f42343f44c66ea1eaffa334760d3da2cb731d2a0b3b3e30423df997faa36cc95c9190a4505050565b80356001600160a01b038116811461025b57600080fd5b919050565b6000806040838503121561027357600080fd5b61027c83610244565b915061028a60208401610244565b9050925092905056fea26469706673582212200467af021513dbde93c6171bb509f56d2e405e3096ec367766010629d81aa06464736f6c634300080b0033";

type OperatorFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OperatorFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OperatorFacet__factory extends ContractFactory {
  constructor(...args: OperatorFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "OperatorFacet";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OperatorFacet> {
    return super.deploy(overrides || {}) as Promise<OperatorFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OperatorFacet {
    return super.attach(address) as OperatorFacet;
  }
  connect(signer: Signer): OperatorFacet__factory {
    return super.connect(signer) as OperatorFacet__factory;
  }
  static readonly contractName: "OperatorFacet";
  public readonly contractName: "OperatorFacet";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OperatorFacetInterface {
    return new utils.Interface(_abi) as OperatorFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OperatorFacet {
    return new Contract(address, _abi, signerOrProvider) as OperatorFacet;
  }
}
