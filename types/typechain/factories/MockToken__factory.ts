/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockToken, MockTokenInterface } from "../MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "setBalanceOf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161038238038061038283398101604081905261002f91610048565b6001805460ff191660ff92909216919091179055610072565b60006020828403121561005a57600080fd5b815160ff8116811461006b57600080fd5b9392505050565b610301806100816000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806370a082311161005057806370a08231146100b3578063a9059cbb146100e1578063b46310f6146100f457600080fd5b806323b872dd1461006c578063313ce56714610094575b600080fd5b61007f61007a3660046101fe565b610120565b60405190151581526020015b60405180910390f35b6001546100a19060ff1681565b60405160ff909116815260200161008b565b6100d36100c136600461023a565b60006020819052908152604090205481565b60405190815260200161008b565b61007f6100ef36600461025c565b610186565b61011e61010236600461025c565b6001600160a01b03909116600090815260208190526040902055565b005b6001600160a01b03831660009081526020819052604081208054839190839061014a90849061029c565b90915550506001600160a01b038316600090815260208190526040812080548492906101779084906102b3565b90915550600195945050505050565b336000908152602081905260408120805483919083906101a790849061029c565b90915550506001600160a01b038316600090815260208190526040812080548492906101d49084906102b3565b909155506001949350505050565b80356001600160a01b03811681146101f957600080fd5b919050565b60008060006060848603121561021357600080fd5b61021c846101e2565b925061022a602085016101e2565b9150604084013590509250925092565b60006020828403121561024c57600080fd5b610255826101e2565b9392505050565b6000806040838503121561026f57600080fd5b610278836101e2565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156102ae576102ae610286565b500390565b600082198211156102c6576102c6610286565b50019056fea2646970667358221220b16462c50bc4d188badf0158ff58dc9da27b56e81378ca4e75492fe20fdc28dd64736f6c634300080b0033";

type MockTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockToken__factory extends ContractFactory {
  constructor(...args: MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockToken";
  }

  deploy(
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockToken> {
    return super.deploy(_decimals, overrides || {}) as Promise<MockToken>;
  }
  getDeployTransaction(
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_decimals, overrides || {});
  }
  attach(address: string): MockToken {
    return super.attach(address) as MockToken;
  }
  connect(signer: Signer): MockToken__factory {
    return super.connect(signer) as MockToken__factory;
  }
  static readonly contractName: "MockToken";
  public readonly contractName: "MockToken";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new utils.Interface(_abi) as MockTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockToken {
    return new Contract(address, _abi, signerOrProvider) as MockToken;
  }
}
