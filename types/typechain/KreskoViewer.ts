/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace FixedPoint {
  export type UnsignedStruct = { rawValue: BigNumberish };

  export type UnsignedStructOutput = [BigNumber] & { rawValue: BigNumber };
}

export declare namespace KreskoViewer {
  export type CollateralAssetInfoUserStruct = {
    assetAddress: string;
    oracleAddress: string;
    underlyingRebasingToken: string;
    amount: BigNumberish;
    amountUSD: FixedPoint.UnsignedStruct;
    cFactor: FixedPoint.UnsignedStruct;
    decimals: BigNumberish;
    index: BigNumberish;
    price: BigNumberish;
    symbol: string;
    name: string;
  };

  export type CollateralAssetInfoUserStructOutput = [
    string,
    string,
    string,
    BigNumber,
    FixedPoint.UnsignedStructOutput,
    FixedPoint.UnsignedStructOutput,
    number,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    assetAddress: string;
    oracleAddress: string;
    underlyingRebasingToken: string;
    amount: BigNumber;
    amountUSD: FixedPoint.UnsignedStructOutput;
    cFactor: FixedPoint.UnsignedStructOutput;
    decimals: number;
    index: BigNumber;
    price: BigNumber;
    symbol: string;
    name: string;
  };

  export type CollateralAssetInfoStruct = {
    assetAddress: string;
    oracleAddress: string;
    underlyingRebasingToken: string;
    price: BigNumberish;
    value: BigNumberish;
    cFactor: FixedPoint.UnsignedStruct;
    decimals: BigNumberish;
    symbol: string;
    name: string;
  };

  export type CollateralAssetInfoStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    FixedPoint.UnsignedStructOutput,
    number,
    string,
    string
  ] & {
    assetAddress: string;
    oracleAddress: string;
    underlyingRebasingToken: string;
    price: BigNumber;
    value: BigNumber;
    cFactor: FixedPoint.UnsignedStructOutput;
    decimals: number;
    symbol: string;
    name: string;
  };

  export type AllowanceStruct = {
    owner: string;
    spender: string;
    allowance: BigNumberish;
  };

  export type AllowanceStructOutput = [string, string, BigNumber] & {
    owner: string;
    spender: string;
    allowance: BigNumber;
  };

  export type KrAssetInfoStruct = {
    oracleAddress: string;
    assetAddress: string;
    price: BigNumberish;
    value: BigNumberish;
    kFactor: FixedPoint.UnsignedStruct;
    symbol: string;
    name: string;
  };

  export type KrAssetInfoStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    FixedPoint.UnsignedStructOutput,
    string,
    string
  ] & {
    oracleAddress: string;
    assetAddress: string;
    price: BigNumber;
    value: BigNumber;
    kFactor: FixedPoint.UnsignedStructOutput;
    symbol: string;
    name: string;
  };

  export type BalanceStruct = { token: string; balance: BigNumberish };

  export type BalanceStructOutput = [string, BigNumber] & {
    token: string;
    balance: BigNumber;
  };

  export type TokenMetadataStruct = {
    decimals: BigNumberish;
    symbol: string;
    name: string;
  };

  export type TokenMetadataStructOutput = [number, string, string] & {
    decimals: number;
    symbol: string;
    name: string;
  };

  export type KrAssetInfoUserStruct = {
    assetAddress: string;
    oracleAddress: string;
    amount: BigNumberish;
    amountUSD: FixedPoint.UnsignedStruct;
    index: BigNumberish;
    kFactor: FixedPoint.UnsignedStruct;
    mintable: boolean;
    price: BigNumberish;
    symbol: string;
    name: string;
  };

  export type KrAssetInfoUserStructOutput = [
    string,
    string,
    BigNumber,
    FixedPoint.UnsignedStructOutput,
    BigNumber,
    FixedPoint.UnsignedStructOutput,
    boolean,
    BigNumber,
    string,
    string
  ] & {
    assetAddress: string;
    oracleAddress: string;
    amount: BigNumber;
    amountUSD: FixedPoint.UnsignedStructOutput;
    index: BigNumber;
    kFactor: FixedPoint.UnsignedStructOutput;
    mintable: boolean;
    price: BigNumber;
    symbol: string;
    name: string;
  };

  export type KreskoUserStruct = {
    krAssets: KreskoViewer.KrAssetInfoUserStruct[];
    collateralAssets: KreskoViewer.CollateralAssetInfoUserStruct[];
    healthFactor: FixedPoint.UnsignedStruct;
    debtActualUSD: FixedPoint.UnsignedStruct;
    debtUSD: FixedPoint.UnsignedStruct;
    collateralActualUSD: FixedPoint.UnsignedStruct;
    collateralUSD: FixedPoint.UnsignedStruct;
    minCollateralUSD: FixedPoint.UnsignedStruct;
    borrowingPowerUSD: FixedPoint.UnsignedStruct;
  };

  export type KreskoUserStructOutput = [
    KreskoViewer.KrAssetInfoUserStructOutput[],
    KreskoViewer.CollateralAssetInfoUserStructOutput[],
    FixedPoint.UnsignedStructOutput,
    FixedPoint.UnsignedStructOutput,
    FixedPoint.UnsignedStructOutput,
    FixedPoint.UnsignedStructOutput,
    FixedPoint.UnsignedStructOutput,
    FixedPoint.UnsignedStructOutput,
    FixedPoint.UnsignedStructOutput
  ] & {
    krAssets: KreskoViewer.KrAssetInfoUserStructOutput[];
    collateralAssets: KreskoViewer.CollateralAssetInfoUserStructOutput[];
    healthFactor: FixedPoint.UnsignedStructOutput;
    debtActualUSD: FixedPoint.UnsignedStructOutput;
    debtUSD: FixedPoint.UnsignedStructOutput;
    collateralActualUSD: FixedPoint.UnsignedStructOutput;
    collateralUSD: FixedPoint.UnsignedStructOutput;
    minCollateralUSD: FixedPoint.UnsignedStructOutput;
    borrowingPowerUSD: FixedPoint.UnsignedStructOutput;
  };
}

export interface KreskoViewerInterface extends utils.Interface {
  contractName: "KreskoViewer";
  functions: {
    "Kresko()": FunctionFragment;
    "borrowingPowerUSD(address)": FunctionFragment;
    "collateralAssetInfoFor(address)": FunctionFragment;
    "collateralAssetInfos(address[])": FunctionFragment;
    "getAllowances(address[],address,address)": FunctionFragment;
    "getAssetInfos(address[],address[])": FunctionFragment;
    "getBalances(address[],address)": FunctionFragment;
    "getTokenMetadatas(address[])": FunctionFragment;
    "healthFactorFor(address)": FunctionFragment;
    "krAssetInfoFor(address)": FunctionFragment;
    "krAssetInfos(address[])": FunctionFragment;
    "kreskoUser(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Kresko", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowingPowerUSD",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAssetInfoFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAssetInfos",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowances",
    values: [string[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetInfos",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMetadatas",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "healthFactorFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "krAssetInfoFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "krAssetInfos",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "kreskoUser", values: [string]): string;

  decodeFunctionResult(functionFragment: "Kresko", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowingPowerUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAssetInfoFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAssetInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMetadatas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healthFactorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "krAssetInfoFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "krAssetInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kreskoUser", data: BytesLike): Result;

  events: {};
}

export interface KreskoViewer extends BaseContract {
  contractName: "KreskoViewer";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KreskoViewerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Kresko(overrides?: CallOverrides): Promise<[string]>;

    borrowingPowerUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[FixedPoint.UnsignedStructOutput]>;

    collateralAssetInfoFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        KreskoViewer.CollateralAssetInfoUserStructOutput[],
        FixedPoint.UnsignedStructOutput
      ] & {
        result: KreskoViewer.CollateralAssetInfoUserStructOutput[];
        totalCollateralUSD: FixedPoint.UnsignedStructOutput;
      }
    >;

    collateralAssetInfos(
      assetAddresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [KreskoViewer.CollateralAssetInfoStructOutput[]] & {
        result: KreskoViewer.CollateralAssetInfoStructOutput[];
      }
    >;

    getAllowances(
      _tokens: string[],
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<
      [KreskoViewer.AllowanceStructOutput[]] & {
        allowances: KreskoViewer.AllowanceStructOutput[];
      }
    >;

    getAssetInfos(
      _collateralAssets: string[],
      _krAssets: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        KreskoViewer.CollateralAssetInfoStructOutput[],
        KreskoViewer.KrAssetInfoStructOutput[]
      ] & {
        collateralAssets: KreskoViewer.CollateralAssetInfoStructOutput[];
        krAssets: KreskoViewer.KrAssetInfoStructOutput[];
      }
    >;

    getBalances(
      _tokens: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [KreskoViewer.BalanceStructOutput[]] & {
        balances: KreskoViewer.BalanceStructOutput[];
      }
    >;

    getTokenMetadatas(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [KreskoViewer.TokenMetadataStructOutput[]] & {
        metadatas: KreskoViewer.TokenMetadataStructOutput[];
      }
    >;

    healthFactorFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[FixedPoint.UnsignedStructOutput]>;

    krAssetInfoFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        KreskoViewer.KrAssetInfoUserStructOutput[],
        FixedPoint.UnsignedStructOutput
      ] & {
        result: KreskoViewer.KrAssetInfoUserStructOutput[];
        totalDebtUSD: FixedPoint.UnsignedStructOutput;
      }
    >;

    krAssetInfos(
      assetAddresses: string[],
      overrides?: CallOverrides
    ): Promise<
      [KreskoViewer.KrAssetInfoStructOutput[]] & {
        result: KreskoViewer.KrAssetInfoStructOutput[];
      }
    >;

    kreskoUser(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [KreskoViewer.KreskoUserStructOutput] & {
        user: KreskoViewer.KreskoUserStructOutput;
      }
    >;
  };

  Kresko(overrides?: CallOverrides): Promise<string>;

  borrowingPowerUSD(
    _account: string,
    overrides?: CallOverrides
  ): Promise<FixedPoint.UnsignedStructOutput>;

  collateralAssetInfoFor(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      KreskoViewer.CollateralAssetInfoUserStructOutput[],
      FixedPoint.UnsignedStructOutput
    ] & {
      result: KreskoViewer.CollateralAssetInfoUserStructOutput[];
      totalCollateralUSD: FixedPoint.UnsignedStructOutput;
    }
  >;

  collateralAssetInfos(
    assetAddresses: string[],
    overrides?: CallOverrides
  ): Promise<KreskoViewer.CollateralAssetInfoStructOutput[]>;

  getAllowances(
    _tokens: string[],
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<KreskoViewer.AllowanceStructOutput[]>;

  getAssetInfos(
    _collateralAssets: string[],
    _krAssets: string[],
    overrides?: CallOverrides
  ): Promise<
    [
      KreskoViewer.CollateralAssetInfoStructOutput[],
      KreskoViewer.KrAssetInfoStructOutput[]
    ] & {
      collateralAssets: KreskoViewer.CollateralAssetInfoStructOutput[];
      krAssets: KreskoViewer.KrAssetInfoStructOutput[];
    }
  >;

  getBalances(
    _tokens: string[],
    account: string,
    overrides?: CallOverrides
  ): Promise<KreskoViewer.BalanceStructOutput[]>;

  getTokenMetadatas(
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<KreskoViewer.TokenMetadataStructOutput[]>;

  healthFactorFor(
    _account: string,
    overrides?: CallOverrides
  ): Promise<FixedPoint.UnsignedStructOutput>;

  krAssetInfoFor(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      KreskoViewer.KrAssetInfoUserStructOutput[],
      FixedPoint.UnsignedStructOutput
    ] & {
      result: KreskoViewer.KrAssetInfoUserStructOutput[];
      totalDebtUSD: FixedPoint.UnsignedStructOutput;
    }
  >;

  krAssetInfos(
    assetAddresses: string[],
    overrides?: CallOverrides
  ): Promise<KreskoViewer.KrAssetInfoStructOutput[]>;

  kreskoUser(
    _account: string,
    overrides?: CallOverrides
  ): Promise<KreskoViewer.KreskoUserStructOutput>;

  callStatic: {
    Kresko(overrides?: CallOverrides): Promise<string>;

    borrowingPowerUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<FixedPoint.UnsignedStructOutput>;

    collateralAssetInfoFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        KreskoViewer.CollateralAssetInfoUserStructOutput[],
        FixedPoint.UnsignedStructOutput
      ] & {
        result: KreskoViewer.CollateralAssetInfoUserStructOutput[];
        totalCollateralUSD: FixedPoint.UnsignedStructOutput;
      }
    >;

    collateralAssetInfos(
      assetAddresses: string[],
      overrides?: CallOverrides
    ): Promise<KreskoViewer.CollateralAssetInfoStructOutput[]>;

    getAllowances(
      _tokens: string[],
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<KreskoViewer.AllowanceStructOutput[]>;

    getAssetInfos(
      _collateralAssets: string[],
      _krAssets: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        KreskoViewer.CollateralAssetInfoStructOutput[],
        KreskoViewer.KrAssetInfoStructOutput[]
      ] & {
        collateralAssets: KreskoViewer.CollateralAssetInfoStructOutput[];
        krAssets: KreskoViewer.KrAssetInfoStructOutput[];
      }
    >;

    getBalances(
      _tokens: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<KreskoViewer.BalanceStructOutput[]>;

    getTokenMetadatas(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<KreskoViewer.TokenMetadataStructOutput[]>;

    healthFactorFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<FixedPoint.UnsignedStructOutput>;

    krAssetInfoFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        KreskoViewer.KrAssetInfoUserStructOutput[],
        FixedPoint.UnsignedStructOutput
      ] & {
        result: KreskoViewer.KrAssetInfoUserStructOutput[];
        totalDebtUSD: FixedPoint.UnsignedStructOutput;
      }
    >;

    krAssetInfos(
      assetAddresses: string[],
      overrides?: CallOverrides
    ): Promise<KreskoViewer.KrAssetInfoStructOutput[]>;

    kreskoUser(
      _account: string,
      overrides?: CallOverrides
    ): Promise<KreskoViewer.KreskoUserStructOutput>;
  };

  filters: {};

  estimateGas: {
    Kresko(overrides?: CallOverrides): Promise<BigNumber>;

    borrowingPowerUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAssetInfoFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAssetInfos(
      assetAddresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllowances(
      _tokens: string[],
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetInfos(
      _collateralAssets: string[],
      _krAssets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalances(
      _tokens: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenMetadatas(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    healthFactorFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    krAssetInfoFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    krAssetInfos(
      assetAddresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kreskoUser(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Kresko(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowingPowerUSD(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAssetInfoFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAssetInfos(
      assetAddresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllowances(
      _tokens: string[],
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetInfos(
      _collateralAssets: string[],
      _krAssets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalances(
      _tokens: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenMetadatas(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    healthFactorFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    krAssetInfoFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    krAssetInfos(
      assetAddresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kreskoUser(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
