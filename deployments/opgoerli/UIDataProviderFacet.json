{
  "address": "0x6616bCd10D7ec950B51C731a464C9F9202Af0540",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "contract AggregatorV2V3Interface[]",
          "name": "_oracles",
          "type": "address[]"
        }
      ],
      "name": "batchPrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint80",
              "name": "roundId",
              "type": "uint80"
            }
          ],
          "internalType": "struct LibUI.Price[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getAccountData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "oracleAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "rawValue",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct FixedPoint.Unsigned",
                  "name": "amountUSD",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "rawValue",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct FixedPoint.Unsigned",
                  "name": "kFactor",
                  "type": "tuple"
                },
                {
                  "internalType": "bool",
                  "name": "mintable",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct LibUI.krAssetInfoUser[]",
              "name": "krAssets",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "oracleAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "rawValue",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct FixedPoint.Unsigned",
                  "name": "amountUSD",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "rawValue",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct FixedPoint.Unsigned",
                  "name": "cFactor",
                  "type": "tuple"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct LibUI.CollateralAssetInfoUser[]",
              "name": "collateralAssets",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rawValue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FixedPoint.Unsigned",
              "name": "healthFactor",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rawValue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FixedPoint.Unsigned",
              "name": "debtActualUSD",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rawValue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FixedPoint.Unsigned",
              "name": "debtUSD",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rawValue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FixedPoint.Unsigned",
              "name": "collateralActualUSD",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rawValue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FixedPoint.Unsigned",
              "name": "collateralUSD",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rawValue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FixedPoint.Unsigned",
              "name": "minCollateralUSD",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rawValue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FixedPoint.Unsigned",
              "name": "borrowingPowerUSD",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibUI.KreskoUser",
          "name": "user",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.Balance[]",
          "name": "balances",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalDeposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "rewardPerBlocks",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "rewardTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "rewardAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct LibUI.StakingData[]",
          "name": "stakingData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV2V3Interface",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "getGenericInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rawValue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FixedPoint.Unsigned",
              "name": "kFactor",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rawValue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FixedPoint.Unsigned",
              "name": "cFactor",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isKrAsset",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCollateral",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "debtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "walletBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.GenericInfo",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_collateralAssets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_krAssets",
          "type": "address[]"
        }
      ],
      "name": "getGlobalData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rawValue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FixedPoint.Unsigned",
              "name": "cFactor",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct LibUI.CollateralAssetInfo[]",
          "name": "collateralAssets",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "oracleAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rawValue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FixedPoint.Unsigned",
              "name": "kFactor",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct LibUI.krAssetInfo[]",
          "name": "krAssets",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "liqMultiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minDebtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minCollateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationThreshold",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.ProtocolParams",
          "name": "protocolParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pairAddresses",
          "type": "address[]"
        }
      ],
      "name": "getPairsData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "decimals0",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "decimals1",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "reserve0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.PairData[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "_allTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "contract AggregatorV2V3Interface[]",
          "name": "_oracles",
          "type": "address[]"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibUI.TokenMetadata[]",
          "name": "metadatas",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint80",
              "name": "roundId",
              "type": "uint80"
            }
          ],
          "internalType": "struct LibUI.Price[]",
          "name": "prices",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IKrStaking",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4540f107225ecca0f9a84b1787408f2abefa32a814f3fd0ddd070dd088143829",
  "receipt": {
    "to": null,
    "from": "0x2121245dcAD697f11244068AaD6EcbC301811239",
    "contractAddress": "0x6616bCd10D7ec950B51C731a464C9F9202Af0540",
    "transactionIndex": 0,
    "gasUsed": "5762120",
    "logsBloom": "0x
    "blockHash": "0xdd3970348993462e647489f108ad2dd4e542cf86f7b1c149c7fb55ec25182847",
    "transactionHash": "0x4540f107225ecca0f9a84b1787408f2abefa32a814f3fd0ddd070dd088143829",
    "logs": [],
    "blockNumber": 1438442,
    "cumulativeGasUsed": "5762120",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "982b6a22f97b2c235980e50ae289fa10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"contract AggregatorV2V3Interface[]\",\"name\":\"_oracles\",\"type\":\"address[]\"}],\"name\":\"batchPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"internalType\":\"struct LibUI.Price[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getAccountData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amountUSD\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct LibUI.krAssetInfoUser[]\",\"name\":\"krAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amountUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct LibUI.CollateralAssetInfoUser[]\",\"name\":\"collateralAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"healthFactor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"debtActualUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"debtUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralActualUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"minCollateralUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"borrowingPowerUSD\",\"type\":\"tuple\"}],\"internalType\":\"struct LibUI.KreskoUser\",\"name\":\"user\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct LibUI.Balance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct LibUI.StakingData[]\",\"name\":\"stakingData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"getGenericInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isKrAsset\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"walletBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct LibUI.GenericInfo\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_krAssets\",\"type\":\"address[]\"}],\"name\":\"getGlobalData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct LibUI.CollateralAssetInfo[]\",\"name\":\"collateralAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct LibUI.krAssetInfo[]\",\"name\":\"krAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"liqMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"}],\"internalType\":\"struct LibUI.ProtocolParams\",\"name\":\"protocolParams\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pairAddresses\",\"type\":\"address[]\"}],\"name\":\"getPairsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals1\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct LibUI.PairData[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"_allTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"contract AggregatorV2V3Interface[]\",\"name\":\"_oracles\",\"type\":\"address[]\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct LibUI.TokenMetadata[]\",\"name\":\"metadatas\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"internalType\":\"struct LibUI.Price[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKrStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/minter/facets/UIDataProviderFacet.sol\":\"UIDataProviderFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x322088ced3c1d027a3260de4e5a867b2264adeef252b94158a9725767873ea31\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/contracts/diamond/DiamondState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {EnumerableSet} from \\\"../libs/EnumerableSet.sol\\\";\\nimport {FacetAddressAndPosition, FacetFunctionSelectors, RoleData, ENTERED, NOT_ENTERED} from \\\"./DiamondTypes.sol\\\";\\n\\nimport {LibDiamondCut} from \\\"./libs/LibDiamondCut.sol\\\";\\nimport {LibOwnership} from \\\"./libs/LibOwnership.sol\\\";\\n\\nusing LibDiamondCut for DiamondState global;\\nusing LibOwnership for DiamondState global;\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                 Main Layout                                */\\n/* -------------------------------------------------------------------------- */\\n\\nstruct DiamondState {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Proxy                                    */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Maps function selector to the facet address and\\n    /// the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    /// @notice Maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    /// @notice Facet addresses\\n    address[] facetAddresses;\\n    /// @notice ERC165 query implementation\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Initialization                               */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Initialization status\\n    bool initialized;\\n    /// @notice Domain field separator\\n    bytes32 domainSeparator;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  Ownership                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Current owner of the diamond\\n    address contractOwner;\\n    /// @notice Pending new diamond owner\\n    address pendingOwner;\\n    /// @notice Storage version\\n    uint8 storageVersion;\\n    /// @notice address(this) replacement for FF\\n    address self;\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Access Control                               */\\n    /* -------------------------------------------------------------------------- */\\n    mapping(bytes32 => RoleData) _roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Reentrancy                                 */\\n    /* -------------------------------------------------------------------------- */\\n    uint256 entered;\\n}\\n\",\"keccak256\":\"0x2ac47bdeb8d5d3f6aeabf941a0156e092cc40416a7e1fde68eafe125fe6de4a6\",\"license\":\"MIT\"},\"src/contracts/diamond/DiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable func-visibility */\\n\\npragma solidity >=0.8.14;\\n\\nimport \\\"./DiamondState.sol\\\";\\n\\n// Storage position\\nbytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"kresko.diamond.storage\\\");\\n\\nfunction ds() pure returns (DiamondState storage state) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0xa67ec48f5630f20bc19f8fc8d6f0d0670f323fa826a9f14d0dc76bd1130f5fc6\",\"license\":\"MIT\"},\"src/contracts/diamond/DiamondTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/// @dev set the initial value to 1 as we do not\\n/// wanna hinder possible gas refunds by setting it to 0 on exit.\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                 Reentrancy                                 */\\n/* -------------------------------------------------------------------------- */\\nuint256 constant NOT_ENTERED = 1;\\nuint256 constant ENTERED = 2;\\n\\n/* ========================================================================== */\\n/*                                   STRUCTS                                  */\\n/* ========================================================================== */\\n\\nstruct FacetAddressAndPosition {\\n    address facetAddress;\\n    // position in facetFunctionSelectors.functionSelectors array\\n    uint96 functionSelectorPosition;\\n}\\n\\nstruct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    // position of facetAddress in facetAddresses array\\n    uint256 facetAddressPosition;\\n}\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\",\"keccak256\":\"0x370ffd042b931cf8c3bd841462d4e52ed17a605e120d513a60a9b3eca2a21e9d\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IAuthorization {\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x2b00b30e0f620c51e9ebf434be6ef3cde312f759bd26a5910fc6ff0dc4dbb872\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IDiamondCut {\\n    /// @dev  Add=0, Replace=1, Remove=2\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    /// a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x23f3b450ca6ed6dd0d37117c3eb1a7e0162dd5e3768e3dff9262005fc83a65f6\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x3945ba76b7d38c744bc6154af7209fb2a1550f71c95146e62a759ef8081e76c5\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/// @title Contract Ownership\\ninterface IOwnership {\\n    /// @dev Pending contract ownership transfer is initiated.\\n    event PendingOwnershipTransfer(address indexed previousOwner, address indexed newOwner);\\n    /// @dev Ownership of a contract is transferred\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Get the address of pending owner\\n    /// @return pendingOwner_ The address of the pending owner.\\n    function pendingOwner() external view returns (address pendingOwner_);\\n\\n    /// @notice Set the address of the new pending owner of the contract\\n    /// @param _newOwner The address of the pending owner\\n    function transferOwnership(address _newOwner) external;\\n\\n    /// @notice Change the ownership of the contract to the pending owner\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xee9ef7fe6558a3bb6d8b7cebafe8846a5fa8788f56b845b6eaf18683823e99fd\",\"license\":\"MIT\"},\"src/contracts/diamond/libs/LibDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nimport {Meta} from \\\"../../libs/Meta.sol\\\";\\nimport {DiamondEvent} from \\\"../../libs/Events.sol\\\";\\nimport {DiamondState} from \\\"../DiamondState.sol\\\";\\n\\n// solhint-disable-next-line func-visibility\\nfunction initializeDiamondCut(address _init, bytes memory _calldata) {\\n    if (_init == address(0)) {\\n        require(_calldata.length == 0, \\\"DiamondCut: _init is address(0) but_calldata is not empty\\\");\\n    } else {\\n        require(_calldata.length > 0, \\\"DiamondCut: _calldata is empty but _init is not address(0)\\\");\\n        Meta.enforceHasContractCode(_init, \\\"DiamondCut: _init address has no code\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up the error\\n                revert(string(error));\\n            } else {\\n                revert(\\\"DiamondCut: _init function reverted\\\");\\n            }\\n        }\\n    }\\n}\\n\\nlibrary LibDiamondCut {\\n    /* -------------------------------------------------------------------------- */\\n    /*                              Diamond Functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    function diamondCut(\\n        DiamondState storage self,\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                self.addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                self.replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                self.removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondEvent.DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        require(_facetAddress != address(0), \\\"DiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(self.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            self.addFacet(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondCut: Can't add function that already exists\\\");\\n            self.addFunction(selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        require(_facetAddress != address(0), \\\"DiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(self.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            self.addFacet(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondCut: Can't replace function with same function\\\");\\n            self.removeFunction(oldFacetAddress, selector);\\n            self.addFunction(selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            self.removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondState storage self, address _facetAddress) internal {\\n        Meta.enforceHasContractCode(_facetAddress, \\\"DiamondCut: New facet has no code\\\");\\n        self.facetFunctionSelectors[_facetAddress].facetAddressPosition = self.facetAddresses.length;\\n        self.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondState storage self,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        self.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        self.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        self.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(_facetAddress != address(0), \\\"DiamondCut: Can't remove function that doesn't exist\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = self.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = self.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = self.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            self.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            self.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        self.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete self.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = self.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = self.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = self.facetAddresses[lastFacetAddressPosition];\\n                self.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                self.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            self.facetAddresses.pop();\\n            delete self.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x879914872b713a25453f38aa2a81efd9d63fa16b61fceba8912f34aa3c154ee0\",\"license\":\"MIT\"},\"src/contracts/diamond/libs/LibOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {IERC165} from \\\"../../shared/IERC165.sol\\\";\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport {IOwnership} from \\\"../interfaces/IOwnership.sol\\\";\\nimport {IAuthorization} from \\\"../interfaces/IAuthorization.sol\\\";\\n\\nimport {GeneralEvent, AuthEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {Meta} from \\\"../../libs/Meta.sol\\\";\\n\\nimport {NOT_ENTERED} from \\\"../DiamondTypes.sol\\\";\\nimport {DiamondState} from \\\"../DiamondState.sol\\\";\\n\\nlibrary LibOwnership {\\n    /* -------------------------------------------------------------------------- */\\n    /*                         Initialization & Ownership                         */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Ownership initializer\\n    /// @notice Only called on the first deployment\\n    function initialize(DiamondState storage self, address _owner) internal {\\n        require(!self.initialized, Error.ALREADY_INITIALIZED);\\n        self.entered = NOT_ENTERED;\\n        self.initialized = true;\\n        self.storageVersion++;\\n        self.contractOwner = _owner;\\n\\n        self.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        self.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        self.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        self.supportedInterfaces[type(IOwnership).interfaceId] = true;\\n        self.supportedInterfaces[type(IAuthorization).interfaceId] = true;\\n\\n        emit GeneralEvent.Deployed(_owner, self.storageVersion);\\n        emit AuthEvent.OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Initiate ownership transfer to a new address\\n     * @param _newOwner address that is set as the pending new owner\\n     * @notice caller must be the current contract owner\\n     */\\n    function initiateOwnershipTransfer(DiamondState storage self, address _newOwner) internal {\\n        require(Meta.msgSender() == self.contractOwner, Error.DIAMOND_INVALID_OWNER);\\n        require(_newOwner != address(0), \\\"DS: Owner cannot be 0-address\\\");\\n\\n        self.pendingOwner = _newOwner;\\n\\n        emit AuthEvent.PendingOwnershipTransfer(self.contractOwner, _newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfer the ownership to the new pending owner\\n     * @notice caller must be the pending owner\\n     */\\n    function finalizeOwnershipTransfer(DiamondState storage self) internal {\\n        require(Meta.msgSender() == self.pendingOwner, Error.DIAMOND_INVALID_PENDING_OWNER);\\n        self.contractOwner = self.pendingOwner;\\n        self.pendingOwner = address(0);\\n\\n        emit AuthEvent.OwnershipTransferred(self.contractOwner, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xb1b1c6bdd01880d3cc45aad78b2925bdfc8bfb4447689e4be67306799c3589a7\",\"license\":\"MIT\"},\"src/contracts/krAsset/IWrappedKreskoAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\ninterface IWrappedKreskoAsset is IAccessControlEnumerableUpgradeable {\\n    function asset() external view returns (address);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function deposit(uint256 _assets, address _receiver) external returns (uint256 shares);\\n\\n    function initialize(\\n        address _asset,\\n        string memory _name,\\n        string memory _symbol,\\n        address _owner\\n    ) external;\\n\\n    function maxDeposit(address) external view returns (uint256);\\n\\n    function maxMint(address) external view returns (uint256);\\n\\n    function maxRedeem(address owner) external view returns (uint256);\\n\\n    function maxWithdraw(address owner) external view returns (uint256);\\n\\n    function mint(uint256 _shares, address _receiver) external returns (uint256 assets);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    function previewMint(uint256 shares) external view returns (uint256);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    function redeem(\\n        uint256 _shares,\\n        address _receiver,\\n        address _owner\\n    ) external returns (uint256 assets);\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function updateMetaData(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _version\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _assets,\\n        address _receiver,\\n        address _owner\\n    ) external returns (uint256 shares);\\n}\\n\",\"keccak256\":\"0xbd867f937685c8e678913cf63e6c808b8bb1dc9c2cdf84dea4d0e8c0767db0e2\",\"license\":\"MIT\"},\"src/contracts/libs/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\nimport {Error} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @title Library for operations on arrays\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Removes an element by copying the last element to the element to remove's place and removing\\n     * the last element.\\n     * @param _addresses The address array containing the item to be removed.\\n     * @param _elementToRemove The element to be removed.\\n     * @param _elementIndex The index of the element to be removed.\\n     */\\n    function removeAddress(\\n        address[] storage _addresses,\\n        address _elementToRemove,\\n        uint256 _elementIndex\\n    ) internal {\\n        require(_addresses[_elementIndex] == _elementToRemove, Error.ARRAY_OUT_OF_BOUNDS);\\n\\n        uint256 lastIndex = _addresses.length - 1;\\n        // If the index to remove is not the last one, overwrite the element at the index\\n        // with the last element.\\n        if (_elementIndex != lastIndex) {\\n            _addresses[_elementIndex] = _addresses[lastIndex];\\n        }\\n        // Remove the last element.\\n        _addresses.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xf903d0e3b9fb538cbbb13d320ea90dbc17ecc55ffc270d48bac5af67a7b27da4\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libs/Authorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"../vendor/gnosis/IGnosisSafeL2.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport {AuthEvent} from \\\"./Events.sol\\\";\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\nimport {Error} from \\\"./Errors.sol\\\";\\nimport {Meta} from \\\"./Meta.sol\\\";\\nimport {ds} from \\\"../diamond/DiamondStorage.sol\\\";\\n\\n/* solhint-disable state-visibility */\\n\\n/**\\n * @title Shared library for access control\\n * @author Kresko\\n */\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                    Roles                                   */\\n/* -------------------------------------------------------------------------- */\\n\\nlibrary Role {\\n    /// @dev role that grants other roles\\n    bytes32 constant ADMIN = 0x00;\\n    /// @dev keccak256(\\\"kresko.roles.minter.operator\\\")\\n    bytes32 constant OPERATOR = 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd;\\n    /// @dev keccak256(\\\"kresko.roles.minter.manager\\\")\\n    bytes32 constant MANAGER = 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0;\\n    /// @dev keccak256(\\\"kresko.roles.minter.safety.council\\\")\\n    bytes32 constant SAFETY_COUNCIL = 0x9c387ecf1663f9144595993e2c602b45de94bf8ba3a110cb30e3652d79b581c0;\\n}\\n\\nlibrary Authorization {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    function hasRole(bytes32 role, address account) internal view returns (bool) {\\n        return ds()._roles[role].members[account];\\n    }\\n\\n    function getRoleMemberCount(bytes32 role) internal view returns (uint256) {\\n        return ds()._roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `Meta.msgSender` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        _checkRole(role, Meta.msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return ds()._roles[role].adminRole;\\n    }\\n\\n    function getRoleMember(bytes32 role, uint256 index) internal view returns (address) {\\n        return ds()._roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @notice Checks if the target contract implements the ERC165 interfaceId for the multisig.\\n     *\\n     */\\n    function setupSecurityCouncil(address _councilAddress) internal {\\n        require(getRoleMemberCount(Role.SAFETY_COUNCIL) == 0, Error.SAFETY_COUNCIL_EXISTS);\\n        require(IGnosisSafeL2(_councilAddress).isOwner(msg.sender), Error.ADDRESS_INVALID_SAFETY_COUNCIL);\\n\\n        ds()._roles[Role.SAFETY_COUNCIL].members[_councilAddress] = true;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].add(_councilAddress);\\n\\n        emit AuthEvent.RoleGranted(Role.SAFETY_COUNCIL, _councilAddress, Meta.msgSender());\\n    }\\n\\n    function transferSecurityCouncil(address _newCouncil) internal {\\n        hasRole(Role.SAFETY_COUNCIL, msg.sender);\\n        require(IGnosisSafeL2(_newCouncil).getOwners().length >= 5, Error.MULTISIG_NOT_ENOUGH_OWNERS);\\n\\n        // As this is called by the multisig - just check that it's not an EOA\\n        ds()._roles[Role.SAFETY_COUNCIL].members[msg.sender] = false;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].remove(msg.sender);\\n\\n        ds()._roles[Role.SAFETY_COUNCIL].members[_newCouncil] = true;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].add(_newCouncil);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        checkRole(getRoleAdmin(role));\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        checkRole(getRoleAdmin(role));\\n        _revokeRole(role, account);\\n        ds()._roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function _renounceRole(bytes32 role, address account) internal {\\n        require(account == Meta.msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        ds()._roles[role].adminRole = adminRole;\\n        emit AuthEvent.RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * @notice Cannot grant the role `SAFETY_COUNCIL` - must be done via explicit function.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal ensureNotSafetyCouncil(role) {\\n        if (!hasRole(role, account)) {\\n            ds()._roles[role].members[account] = true;\\n            ds()._roleMembers[role].add(account);\\n            emit AuthEvent.RoleGranted(role, account, Meta.msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            ds()._roles[role].members[account] = false;\\n            ds()._roleMembers[role].remove(account);\\n            emit AuthEvent.RoleRevoked(role, account, Meta.msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensure we use the explicit `grantSafetyCouncilRole` function.\\n     */\\n    modifier ensureNotSafetyCouncil(bytes32 role) {\\n        require(role != Role.SAFETY_COUNCIL, Error.ADDRESS_INVALID_SAFETY_COUNCIL);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf8d261c125f778899772973840bc391a7d733cbed5e039b5a2f57128bfc9eada\",\"license\":\"MIT\"},\"src/contracts/libs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity >=0.8.14;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x383c949d8da7fe5cc88bad0fa0a9510154caf2451e3c3c0596ade13e1058dfaa\",\"license\":\"MIT\"},\"src/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @author Kresko\\n * @title Error codes\\n * @notice Kresko-specific revert return values and their explanation\\n * @dev First number indicates the domain for the error\\n */\\nlibrary Error {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Diamond                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // Preserve readability for the diamond proxy\\n    string public constant DIAMOND_INVALID_FUNCTION_SIGNATURE = \\\"krDiamond: function does not exist\\\";\\n    string public constant DIAMOND_INVALID_PENDING_OWNER = \\\"krDiamond: Must be pending contract owner\\\";\\n    string public constant DIAMOND_INVALID_OWNER = \\\"krDiamond: Must be diamond owner\\\";\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   1. General                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_OWNER = \\\"100\\\"; // The sender must be owner\\n    string public constant NOT_OPERATOR = \\\"101\\\"; // The sender must be operator\\n    string public constant ZERO_WITHDRAW = \\\"102\\\"; // Withdraw must be greater than 0\\n    string public constant ZERO_DEPOSIT = \\\"103\\\"; // Deposit must be greater than 0\\n    string public constant ZERO_ADDRESS = \\\"104\\\"; // Address provided cannot be address(0)\\n    string public constant ALREADY_INITIALIZED = \\\"105\\\"; // Contract has already been initialized\\n    string public constant RE_ENTRANCY = \\\"106\\\"; // Function does not allow re-entrant calls\\n    string public constant NOT_ENOUGH_BALANCE = \\\"107\\\"; // Transfer of elastic token exceeds value\\n    string public constant NOT_ENOUGH_ALLOWANCE = \\\"108\\\"; // TransferFrom of elastic token exceeds allowance\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   2. Minter                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_LIQUIDATABLE = \\\"200\\\"; // Account has collateral deposits exceeding minCollateralValue\\n    string public constant ZERO_MINT = \\\"201\\\"; // Mint amount must be greater than 0\\n    string public constant ZERO_BURN = \\\"202\\\"; // Burn amount must be greater than 0\\n    string public constant ADDRESS_INVALID_ORACLE = \\\"203\\\"; // Oracle address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_NRWT = \\\"204\\\"; // Underlying rebasing token address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_FEERECIPIENT = \\\"205\\\"; // Fee recipient address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_COLLATERAL = \\\"206\\\"; // Collateral address cant be set to address(0)\\n    string public constant COLLATERAL_EXISTS = \\\"207\\\"; // Collateral has already been added into the protocol\\n    string public constant COLLATERAL_INVALID_FACTOR = \\\"208\\\"; // cFactor must be greater than 1FP\\n    string public constant COLLATERAL_WITHDRAW_OVERFLOW = \\\"209\\\"; // Withdraw amount cannot reduce accounts collateral value under minCollateralValue\\n    string public constant KRASSET_INVALID_FACTOR = \\\"210\\\"; // kFactor must be greater than 1FP\\n    string public constant KRASSET_BURN_AMOUNT_OVERFLOW = \\\"211\\\"; // Repaying more than account has debt\\n    string public constant KRASSET_EXISTS = \\\"212\\\"; // Asset is already added\\n    string public constant PARAM_CLOSE_FEE_TOO_HIGH = \\\"213\\\"; // \\\"Close fee exceeds MAX_CLOSE_FEE\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_LOW = \\\"214\\\"; // \\\"Liquidation incentive less than MIN_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_HIGH = \\\"215\\\"; // \\\"Liquidation incentive greater than MAX_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_MIN_COLLATERAL_RATIO_LOW = \\\"216\\\"; // Minimum collateral ratio less than MIN_COLLATERALIZATION_RATIO\\n    string public constant PARAM_MIN_DEBT_AMOUNT_HIGH = \\\"217\\\"; // Minimum debt param argument exceeds MAX_DEBT_VALUE\\n    string public constant COLLATERAL_DOESNT_EXIST = \\\"218\\\"; // Collateral does not exist within the protocol\\n    string public constant KRASSET_DOESNT_EXIST = \\\"219\\\"; // KrAsset does not exist within the protocol\\n    string public constant KRASSET_NOT_MINTABLE = \\\"220\\\"; // KrAsset is not mintable\\n    string public constant KRASSET_SYMBOL_EXISTS = \\\"221\\\"; // KrAsset with this symbol is already within the protocl\\n    string public constant KRASSET_COLLATERAL_LOW = \\\"222\\\"; // Collateral deposits do not cover the amount being minted\\n    string public constant KRASSET_MINT_AMOUNT_LOW = \\\"223\\\"; // Debt position must be greater than the minimum debt position value\\n    string public constant KRASSET_MAX_SUPPLY_REACHED = \\\"224\\\"; // Asset being minted has reached its current supply limit\\n    string public constant SELF_LIQUIDATION = \\\"225\\\"; // Account cannot liquidate itself\\n    string public constant ZERO_REPAY = \\\"226\\\"; // Account cannot liquidate itself\\n    string public constant STALE_PRICE = \\\"227\\\"; // Price for the asset is stale\\n    string public constant LIQUIDATION_OVERFLOW = \\\"228\\\"; // Repaying more USD value than allowed\\n    string public constant ADDRESS_INVALID_SAFETY_COUNCIL = \\\"229\\\"; // Account responsible for the safety council role must be a multisig\\n    string public constant SAFETY_COUNCIL_EXISTS = \\\"230\\\"; // Only one council role can exist\\n    string public constant NOT_SAFETY_COUNCIL = \\\"231\\\"; // Sender must have the role `Role.SAFETY_COUNCIL`\\n    string public constant ACTION_PAUSED_FOR_ASSET = \\\"232\\\"; // This action is currently paused for this asset\\n    string public constant INVALID_ASSET_SUPPLIED = \\\"233\\\"; // Asset supplied is not a collateral nor a krAsset\\n    string public constant KRASSET_NOT_WRAPPED = \\\"234\\\"; // krAsset given is not the wrapped version\\n    string public constant INVALID_LT = \\\"235\\\"; // Liquidation threshold is greater than minimum collateralization ratio\\n    string public constant COLLATERAL_INSUFFICIENT_AMOUNT = \\\"236\\\"; // Insufficient amount of collateral to complete the operation\\n    string public constant MULTISIG_NOT_ENOUGH_OWNERS = \\\"237\\\"; // Multisig has invalid amount of owners\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   3. Staking                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REWARD_PER_BLOCK_MISSING = \\\"300\\\"; // Each reward token must have a reward per block value\\n    string public constant REWARD_TOKENS_MISSING = \\\"301\\\"; // Pool must include an array of reward token addresses\\n    string public constant POOL_EXISTS = \\\"302\\\"; // Pool with this deposit token already exists\\n    string public constant POOL_DOESNT_EXIST = \\\"303\\\"; // Pool with this deposit token does not exist\\n    string public constant ADDRESS_INVALID_REWARD_RECIPIENT = \\\"304\\\"; // Reward recipient cant be address(0)\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   4. Libraries                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant ARRAY_OUT_OF_BOUNDS = \\\"400\\\"; // Array out of bounds error\\n}\\n\",\"keccak256\":\"0x505dec28e1ae8320481f88629c9f87da6307e2c017ccc1238ea8b4dab9487e0f\",\"license\":\"MIT\"},\"src/contracts/libs/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {IDiamondCut} from \\\"../diamond/interfaces/IDiamondCut.sol\\\";\\nimport {Action} from \\\"../minter/MinterTypes.sol\\\";\\n\\nlibrary GeneralEvent {\\n    /**\\n     * @dev Triggered when the contract has been deployed\\n     */\\n    event Deployed(address indexed owner, uint8 version);\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(address indexed operator, uint8 version);\\n}\\n\\nlibrary DiamondEvent {\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\\nlibrary MinterEvent {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Collateral                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a collateral asset is added to the protocol.\\n     * @dev Can only be emitted once for a given collateral asset.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The address of the oracle.\\n     */\\n    event CollateralAssetAdded(address indexed collateralAsset, uint256 indexed factor, address indexed oracle);\\n\\n    /**\\n     * @notice Emitted when a collateral asset is updated.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The oracle address.\\n     */\\n    event CollateralAssetUpdated(address indexed collateralAsset, uint256 indexed factor, address indexed oracle);\\n\\n    /**\\n     * @notice Emitted when an account deposits collateral.\\n     * @param account The address of the account depositing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was deposited.\\n     */\\n    event CollateralDeposited(address indexed account, address indexed collateralAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account withdraws collateral.\\n     * @param account The address of the account withdrawing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was withdrawn.\\n     */\\n    event CollateralWithdrawn(address indexed account, address indexed collateralAsset, uint256 indexed amount);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Kresko Assets                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a Kresko asset is added to the protocol.\\n     * @dev Can only be emitted once for a given Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param supplyLimit The total supply limit.\\n     * @param closeFee The close fee percentage.\\n     */\\n    event KreskoAssetAdded(\\n        address indexed kreskoAsset,\\n        uint256 indexed kFactor,\\n        address oracle,\\n        uint256 supplyLimit,\\n        uint256 closeFee\\n    );\\n\\n    /**\\n     * @notice Emitted when a Kresko asset's oracle is updated.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param mintable The mintable value.\\n     * @param supplyLimit The total supply limit.\\n     * @param closeFee The close fee percentage.\\n     */\\n    event KreskoAssetUpdated(\\n        address indexed kreskoAsset,\\n        uint256 indexed kFactor,\\n        address indexed oracle,\\n        bool mintable,\\n        uint256 supplyLimit,\\n        uint256 closeFee\\n    );\\n\\n    /**\\n     * @notice Emitted when an account mints a Kresko asset.\\n     * @param account The address of the account minting the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the Kresko asset that was minted.\\n     */\\n    event KreskoAssetMinted(address indexed account, address indexed kreskoAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account burns a Kresko asset.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the Kresko asset that was burned.\\n     */\\n    event KreskoAssetBurned(address indexed account, address indexed kreskoAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account pays a close fee with a collateral asset upon burning a Kresko asset.\\n     * @dev This can be emitted multiple times for a single Kresko asset burn.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param paymentCollateralAsset The address of the collateral asset used to pay the close fee.\\n     * @param paymentAmount The amount of the payment collateral asset that was paid.\\n     * @param paymentValue The USD value of the payment.\\n     */\\n    event CloseFeePaid(\\n        address indexed account,\\n        address indexed paymentCollateralAsset,\\n        uint256 indexed paymentAmount,\\n        uint256 paymentValue\\n    );\\n\\n    /**\\n     * @notice Emitted when a liquidation occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param repayKreskoAsset The address of the Kresko asset being paid back to the protocol by the liquidator.\\n     * @param repayAmount The amount of the repay Kresko asset being paid back to the protocol by the liquidator.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event LiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed repayKreskoAsset,\\n        uint256 repayAmount,\\n        address seizedCollateralAsset,\\n        uint256 collateralSent\\n    );\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Parameters                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a safety state is triggered for an asset\\n     * @param action Target action\\n     * @param asset Asset affected\\n     * @param description change description\\n     */\\n    event SafetyStateChange(Action indexed action, address indexed asset, string indexed description);\\n\\n    /**\\n     * @notice Emitted when the fee recipient is updated.\\n     * @param feeRecipient The new fee recipient.\\n     */\\n    event FeeRecipientUpdated(address indexed feeRecipient);\\n\\n    /**\\n     * @notice Emitted when the liquidation incentive multiplier is updated.\\n     * @param liquidationIncentiveMultiplier The new liquidation incentive multiplier raw value.\\n     */\\n    event LiquidationIncentiveMultiplierUpdated(uint256 indexed liquidationIncentiveMultiplier);\\n\\n    /**\\n     * @notice Emitted when the minimum collateralization ratio is updated.\\n     * @param minimumCollateralizationRatio The new minimum collateralization ratio raw value.\\n     */\\n    event MinimumCollateralizationRatioUpdated(uint256 indexed minimumCollateralizationRatio);\\n\\n    /**\\n     * @notice Emitted when the minimum debt value updated.\\n     * @param minimumDebtValue The new minimum debt value.\\n     */\\n    event MinimumDebtValueUpdated(uint256 indexed minimumDebtValue);\\n\\n    /**\\n     * @notice Emitted when the liquidation threshold value is updated\\n     * @param liquidationThreshold The new liquidation threshold value.\\n     */\\n    event LiquidationThresholdUpdated(uint256 indexed liquidationThreshold);\\n}\\n\\nlibrary StakingEvent {\\n    event LiquidityAndStakeAdded(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event LiquidityAndStakeRemoved(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event ClaimRewards(address indexed user, address indexed rewardToken, uint256 indexed amount);\\n    event ClaimRewardsMulti(address indexed to);\\n}\\n\\nlibrary AuthEvent {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event PendingOwnershipTransfer(address indexed previousOwner, address indexed newOwner);\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\",\"keccak256\":\"0xe0205efda81a642b67c61dc4b84f0484835cc5b30559f14c62ae1bdc51a544d3\",\"license\":\"MIT\"},\"src/contracts/libs/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\n\\nlibrary FixedPoint {\\n    using SafeMathUpgradeable for uint256;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    uint256 internal constant FP_DECIMALS = 18;\\n    uint256 internal constant FP_SCALING_FACTOR = 10**FP_DECIMALS;\\n    int256 internal constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n\\n    // --------------------------------------- UNSIGNED ---------------------------------------------------------------\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED ------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored\\n    //   internally as int256 10^76.\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------- Additional Fixed Point math functions specific to Kresko protocol -------------------\\n}\\n\",\"keccak256\":\"0x0e2fcdd6540eb9a799b408086b6d75a9ae9d8d7f788290c521417ab8dd558a24\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libs/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\nimport {FixedPoint} from \\\"./FixedPoint.sol\\\";\\n\\n/**\\n * @title Library for Kresko specific math involving floating point arithmetic\\n */\\n\\nlibrary Math {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /**\\n     * @notice For a given collateral asset and amount, returns a FixedPoint.Unsigned representation.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals > 18, there may be a loss of precision.\\n     * @param _collateralAssetDecimals The collateral asset's number of decimals\\n     * @param _amount The amount of the collateral asset.\\n     * @return A FixedPoint.Unsigned of amount scaled according to the collateral asset's decimals.\\n     */\\n    function _toCollateralFixedPointAmount(uint256 _collateralAssetDecimals, uint256 _amount)\\n        internal\\n        pure\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        // Initially, use the amount as the raw value for the FixedPoint.Unsigned,\\n        // which internally uses FixedPoint.FP_DECIMALS (18) decimals. Most collateral\\n        // assets will have 18 decimals.\\n        FixedPoint.Unsigned memory fixedPointAmount = FixedPoint.Unsigned(_amount);\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_collateralAssetDecimals < FixedPoint.FP_DECIMALS) {\\n            // If the decimals are less than 18, multiply the amount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token of a 17 decimal token will  cause the\\n            // initial setting of amount to be 0.1, so we multiply\\n            // by 10 ** (18 - 17) = 10 to get it to 0.1 * 10 = 1.\\n            return fixedPointAmount.mul(10**(FixedPoint.FP_DECIMALS - _collateralAssetDecimals));\\n        } else if (_collateralAssetDecimals > FixedPoint.FP_DECIMALS) {\\n            // If the decimals are greater than 18, divide the amount\\n            // to get the correct fixed point value.\\n            // Note because FixedPoint numbers are 18 decimals, this results\\n            // in loss of precision. E.g. if the collateral asset has 19\\n            // decimals and the deposit amount is only 1 uint, this will divide\\n            // 1 by 10 ** (19 - 18), resulting in 1 / 10 = 0\\n            return fixedPointAmount.div(10**(_collateralAssetDecimals - FixedPoint.FP_DECIMALS));\\n        }\\n        return fixedPointAmount;\\n    }\\n\\n    /**\\n     * @notice For a given collateral asset and fixed point amount, i.e. where a rawValue of 1e18 is equal to 1\\n     *   whole token, returns the amount according to the collateral asset's decimals.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals < 18, there may be a loss of precision.\\n     * @param _collateralAssetDecimals The collateral asset's number of decimals\\n     * @param _fixedPointAmount The fixed point amount of the collateral asset.\\n     * @return An amount that is compatible with the collateral asset's decimals.\\n     */\\n    function _fromCollateralFixedPointAmount(\\n        uint256 _collateralAssetDecimals,\\n        FixedPoint.Unsigned memory _fixedPointAmount\\n    ) internal pure returns (uint256) {\\n        // Initially, use the rawValue, which internally uses FixedPoint.FP_DECIMALS (18) decimals\\n        // Most collateral assets will have 18 decimals.\\n        uint256 amount = _fixedPointAmount.rawValue;\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_collateralAssetDecimals < FixedPoint.FP_DECIMALS) {\\n            // If the decimals are less than 18, divide the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 17 decimals, divide by 10 ** (18 - 17) = 10\\n            // to get a value of 1e17.\\n            // This may result in a loss of precision.\\n            return amount / (10**(FixedPoint.FP_DECIMALS - _collateralAssetDecimals));\\n        } else if (_collateralAssetDecimals > FixedPoint.FP_DECIMALS) {\\n            // If the decimals are greater than 18, multiply the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 19 decimals, multiply by 10 ** (19 - 18) = 10\\n            // to get a value of 1e19.\\n            return amount * (10**(_collateralAssetDecimals - FixedPoint.FP_DECIMALS));\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n    //  * @notice Calculate amount of collateral to seize during the liquidation process.\\n    //  * @param _collateralOraclePriceUSD The address of the collateral asset to be seized.\\n    //  * @param _kreskoAssetRepayAmountUSD Kresko asset amount being repaid in exchange for the seized collateral.\\n    //  */\\n    function _calculateAmountToSeize(\\n        FixedPoint.Unsigned memory _liquidationIncentiveMultiplier,\\n        FixedPoint.Unsigned memory _collateralOraclePriceUSD,\\n        FixedPoint.Unsigned memory _kreskoAssetRepayAmountUSD\\n    ) internal pure returns (FixedPoint.Unsigned memory) {\\n        // Seize amount = (repay amount USD * liquidation incentive / collateral price USD).\\n        // Denominate seize amount in collateral type\\n        // Apply liquidation incentive multiplier\\n        return _kreskoAssetRepayAmountUSD.mul(_liquidationIncentiveMultiplier).div(_collateralOraclePriceUSD);\\n    }\\n}\\n\",\"keccak256\":\"0xdcc9b5606e7f8040ffa23621c3e9b7a0b4c4fc37c19ee2f58dba8ac5ea2c7d71\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libs/Meta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-inline-assembly */\\n\\npragma solidity >=0.8.14;\\n\\nlibrary Meta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"));\\n\\n    function domainSeparator(string memory name, string memory version)\\n        internal\\n        view\\n        returns (bytes32 domainSeparator_)\\n    {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x3f3c3c3fc475ea52b4f9d635dd5c90c984458ba7510ebc0e4c3ae9702ad7d39e\",\"license\":\"MIT\"},\"src/contracts/libs/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity >=0.8.14;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x6e6036354cbb95e2337d987382a7845a2fbe9d687e2cff9dde2fe63d50d7f9fe\",\"license\":\"MIT\"},\"src/contracts/minter/MinterState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {Action, SafetyState, CollateralAsset, KrAsset, FixedPoint} from \\\"./MinterTypes.sol\\\";\\nimport {LibKrAsset} from \\\"./libs/LibKrAsset.sol\\\";\\nimport {LibAccount} from \\\"./libs/LibAccount.sol\\\";\\nimport {LibCollateral} from \\\"./libs/LibCollateral.sol\\\";\\nimport {LibCalc} from \\\"./libs/LibCalculation.sol\\\";\\nimport {LibRepay} from \\\"./libs/LibRepay.sol\\\";\\n\\nusing LibCalc for MinterState global;\\nusing LibKrAsset for MinterState global;\\nusing LibCollateral for MinterState global;\\nusing LibAccount for MinterState global;\\nusing LibRepay for MinterState global;\\n\\n/* solhint-disable state-visibility */\\n\\n/// @title Complete storage layout for the minter state\\nstruct MinterState {\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Initialization                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Initialization version\\n    uint256 initializations;\\n    bytes32 domainSeparator;\\n    /* -------------------------------------------------------------------------- */\\n    /*                           Configurable Parameters                          */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice The recipient of protocol fees.\\n    address feeRecipient;\\n    /// @notice The factor used to calculate the incentive a liquidator receives in the form of seized collateral.\\n    FixedPoint.Unsigned liquidationIncentiveMultiplier;\\n    /// @notice The absolute minimum ratio of collateral value to debt value used to calculate collateral requirements.\\n    FixedPoint.Unsigned minimumCollateralizationRatio;\\n    /// @notice The minimum USD value of an individual synthetic asset debt position.\\n    FixedPoint.Unsigned minimumDebtValue;\\n    /// @notice The collateralization ratio at which positions may be liquidated.\\n    FixedPoint.Unsigned liquidationThreshold;\\n    /// @notice Flag tells if there is a need to perform safety checks on user actions\\n    bool safetyStateSet;\\n    /// @notice asset -> action -> state\\n    mapping(address => mapping(Action => SafetyState)) safetyState;\\n    /* -------------------------------------------------------------------------- */\\n    /*                              Collateral Assets                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Mapping of collateral asset token address to information on the collateral asset.\\n    mapping(address => CollateralAsset) collateralAssets;\\n    /**\\n     * @notice Mapping of account -> asset -> deposit amount\\n     */\\n    mapping(address => mapping(address => uint256)) collateralDeposits;\\n    /// @notice Mapping of account -> collateral asset addresses deposited\\n    mapping(address => address[]) depositedCollateralAssets;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Kresko Assets                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Mapping of Kresko asset token address to information on the Kresko asset.\\n    mapping(address => KrAsset) kreskoAssets;\\n    /// @notice Mapping of account -> krAsset -> debt amount owed to the protocol\\n    mapping(address => mapping(address => uint256)) kreskoAssetDebt;\\n    /// @notice Mapping of account -> addresses of borrowed krAssets\\n    mapping(address => address[]) mintedKreskoAssets;\\n}\\n\",\"keccak256\":\"0xa03c9c2a2ff90e7e1f680147d68f9190cbf6efaf0223d1c62a9044306e745178\",\"license\":\"MIT\"},\"src/contracts/minter/MinterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable func-visibility */\\n\\npragma solidity >=0.8.14;\\n\\nimport {MinterState} from \\\"./MinterState.sol\\\";\\n\\n// Storage position\\nbytes32 constant MINTER_STORAGE_POSITION = keccak256(\\\"kresko.minter.storage\\\");\\n\\nfunction ms() pure returns (MinterState storage state) {\\n    bytes32 position = MINTER_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x420e480023e1df437fb43a18c3c1cbf2b29e93378f025249512df02f8840a314\",\"license\":\"MIT\"},\"src/contracts/minter/MinterTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {AggregatorV2V3Interface} from \\\"../vendor/flux/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {FixedPoint} from \\\"../libs/FixedPoint.sol\\\";\\nimport {IWrappedKreskoAsset} from \\\"../krAsset/IWrappedKreskoAsset.sol\\\";\\n\\n/* solhint-disable state-visibility */\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                  CONSTANTS                                 */\\n/* -------------------------------------------------------------------------- */\\n\\nlibrary Constants {\\n    uint256 constant ONE_HUNDRED_PERCENT = 1e18;\\n\\n    /// @dev The maximum configurable close fee.\\n    uint256 constant MAX_CLOSE_FEE = 10e16; // 10%\\n\\n    /// @dev The minimum configurable minimum collateralization ratio.\\n    uint256 constant MIN_COLLATERALIZATION_RATIO = ONE_HUNDRED_PERCENT;\\n\\n    /// @dev The minimum configurable liquidation incentive multiplier.\\n    /// This means liquidator only receives equal amount of collateral to debt repaid.\\n    uint256 constant MIN_LIQUIDATION_INCENTIVE_MULTIPLIER = ONE_HUNDRED_PERCENT;\\n\\n    /// @dev The maximum configurable liquidation incentive multiplier.\\n    /// This means liquidator receives 25% bonus collateral compared to the debt repaid.\\n    uint256 constant MAX_LIQUIDATION_INCENTIVE_MULTIPLIER = 1.25e18; // 125%\\n\\n    /// @dev The maximum configurable minimum debt USD value.\\n    uint256 constant MAX_DEBT_VALUE = 1000e18; // $1,000\\n}\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                    ENUM                                    */\\n/* -------------------------------------------------------------------------- */\\n\\n/**\\n * @dev Protocol user facing actions\\n *\\n * Deposit = 0\\n * Withdraw = 1,\\n * Repay = 2,\\n * Borrow = 3,\\n * Liquidate = 4\\n */\\nenum Action {\\n    Deposit,\\n    Withdraw,\\n    Repay,\\n    Borrow,\\n    Liquidation\\n}\\n\\n/* ========================================================================== */\\n/*                                   STRUCTS                                  */\\n/* ========================================================================== */\\n\\n/**\\n * @notice Initialization arguments for the protocol\\n */\\nstruct MinterInitArgs {\\n    address operator;\\n    address council;\\n    address feeRecipient;\\n    uint256 liquidationIncentiveMultiplier;\\n    uint256 minimumCollateralizationRatio;\\n    uint256 minimumDebtValue;\\n    uint256 liquidationThreshold;\\n}\\n\\n/**\\n * @notice Configurable parameters within the protocol\\n */\\n\\nstruct MinterParams {\\n    FixedPoint.Unsigned minimumCollateralizationRatio;\\n    FixedPoint.Unsigned liquidationIncentiveMultiplier;\\n    FixedPoint.Unsigned minimumDebtValue;\\n    FixedPoint.Unsigned liquidationThreshold;\\n    address feeRecipient;\\n}\\n\\n/**\\n * @notice Information on a token that is a Kresko asset.\\n * @dev Each Kresko asset has 18 decimals.\\n * @param kFactor The k-factor used for calculating the required collateral value for Kresko asset debt.\\n * @param oracle The oracle that provides the USD price of one Kresko asset.\\n * @param supplyLimit The total supply limit of the Kresko asset.\\n * @param closeFee The percentage paid in fees when closing a debt position of this type.\\n * @param exists Whether the Kresko asset exists within the protocol.\\n * @param mintable Whether the Kresko asset can be minted.\\n */\\nstruct KrAsset {\\n    FixedPoint.Unsigned kFactor;\\n    AggregatorV2V3Interface oracle;\\n    uint256 supplyLimit;\\n    FixedPoint.Unsigned closeFee;\\n    bool mintable;\\n    bool exists;\\n}\\n\\n/**\\n * @notice Information on a token that can be used as collateral.\\n * @dev Setting the factor to zero effectively makes the asset useless as collateral while still allowing\\n * it to be deposited and withdrawn.\\n * @param factor The collateral factor used for calculating the value of the collateral.\\n * @param oracle The oracle that provides the USD price of one collateral asset.\\n * @param kreskoAsset If the collateral is a krAsset, the underlying token address\\n * @param decimals The decimals for the token, stored here to avoid repetitive external calls.\\n * @param exists Whether the collateral asset exists within the protocol.\\n */\\nstruct CollateralAsset {\\n    FixedPoint.Unsigned factor;\\n    AggregatorV2V3Interface oracle;\\n    address kreskoAsset;\\n    uint8 decimals;\\n    bool exists;\\n}\\n\\n/// @notice Configuration for pausing `Action`\\nstruct Pause {\\n    bool enabled;\\n    uint256 timestamp0;\\n    uint256 timestamp1;\\n}\\n\\n/// @notice Safety configuration for assets\\nstruct SafetyState {\\n    Pause pause;\\n}\\n\",\"keccak256\":\"0x767ca5c105994e4870df22cd53519d7b8fe0fbb7b7ae2434c52f2822228180de\",\"license\":\"MIT\"},\"src/contracts/minter/facets/UIDataProviderFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\n/* solhint-disable max-line-length */\\n/* solhint-disable var-name-mixedcase */\\n/* solhint-disable func-name-mixedcase */\\n/* solhint-disable contract-name-camelcase */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable func-visibility */\\n\\nimport {FixedPoint} from \\\"../MinterTypes.sol\\\";\\nimport {DiamondModifiers} from \\\"../../shared/Modifiers.sol\\\";\\nimport {LibUI, IKresko, IKrStaking, IUniswapV2Pair, IERC20Upgradeable, AggregatorV2V3Interface, ms} from \\\"../libs/LibUI.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nbytes32 constant UI_STORAGE_POSITION = keccak256(\\\"kresko.ui.storage\\\");\\n\\nstruct UIState {\\n    IKrStaking staking;\\n}\\n\\nfunction UI() pure returns (UIState storage state) {\\n    bytes32 position = UI_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\\ncontract UIDataProviderFacet is DiamondModifiers {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    function initialize(IKrStaking _staking) external onlyOwner {\\n        UI().staking = _staking;\\n    }\\n\\n    function getGlobalData(address[] memory _collateralAssets, address[] memory _krAssets)\\n        external\\n        view\\n        returns (\\n            LibUI.CollateralAssetInfo[] memory collateralAssets,\\n            LibUI.krAssetInfo[] memory krAssets,\\n            LibUI.ProtocolParams memory protocolParams\\n        )\\n    {\\n        collateralAssets = LibUI.collateralAssetInfos(_collateralAssets);\\n        krAssets = LibUI.krAssetInfos(_krAssets);\\n        protocolParams = LibUI.ProtocolParams({\\n            minCollateralRatio: ms().minimumCollateralizationRatio.rawValue,\\n            liqMultiplier: ms().liquidationIncentiveMultiplier.rawValue,\\n            minDebtAmount: ms().minimumDebtValue.rawValue,\\n            liquidationThreshold: ms().liquidationThreshold.rawValue\\n        });\\n    }\\n\\n    function getAccountData(address _account, IERC20Upgradeable[] memory _tokens)\\n        external\\n        view\\n        returns (\\n            LibUI.KreskoUser memory user,\\n            LibUI.Balance[] memory balances,\\n            LibUI.StakingData[] memory stakingData\\n        )\\n    {\\n        user = LibUI.kreskoUser(_account);\\n        balances = LibUI.getBalances(_tokens, _account);\\n        stakingData = LibUI.getStakingData(_account);\\n    }\\n\\n    function getPairsData(address[] memory _pairAddresses) external view returns (LibUI.PairData[] memory result) {\\n        result = new LibUI.PairData[](_pairAddresses.length);\\n        for (uint256 i; i < _pairAddresses.length; i++) {\\n            IUniswapV2Pair pair = IUniswapV2Pair(_pairAddresses[i]);\\n            IERC20Upgradeable tkn0 = IERC20Upgradeable(pair.token0());\\n            IERC20Upgradeable tkn1 = IERC20Upgradeable(pair.token1());\\n            (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n            result[i] = LibUI.PairData({\\n                decimals0: tkn0.decimals(),\\n                decimals1: tkn1.decimals(),\\n                totalSupply: pair.totalSupply(),\\n                reserve0: reserve0,\\n                reserve1: reserve1\\n            });\\n        }\\n    }\\n\\n    function batchPrices(address[] calldata _assets, AggregatorV2V3Interface[] calldata _oracles)\\n        public\\n        view\\n        returns (LibUI.Price[] memory result)\\n    {\\n        return LibUI.batchPrices(_assets, _oracles);\\n    }\\n\\n    function getGenericInfo(\\n        address _account,\\n        address _asset,\\n        AggregatorV2V3Interface oracle\\n    ) external view returns (LibUI.GenericInfo memory result) {\\n        IKresko kresko = IKresko(address(this));\\n        result = LibUI.GenericInfo({\\n            assetAddress: _asset,\\n            depositAmount: kresko.collateralDeposits(_account, _asset),\\n            debtAmount: kresko.kreskoAssetDebt(_account, _asset),\\n            isKrAsset: kresko.krAssetExists(_asset),\\n            isCollateral: kresko.collateralExists(_asset),\\n            price: uint256(oracle.latestAnswer()),\\n            kFactor: kresko.kreskoAssets(_asset).kFactor,\\n            cFactor: kresko.collateralAssets(_asset).factor,\\n            walletBalance: IERC20Upgradeable(_asset).balanceOf(_account)\\n        });\\n    }\\n\\n    function getTokenData(\\n        IERC20Upgradeable[] memory _allTokens,\\n        address[] calldata _assets,\\n        AggregatorV2V3Interface[] calldata _oracles\\n    ) external view returns (LibUI.TokenMetadata[] memory metadatas, LibUI.Price[] memory prices) {\\n        metadatas = new LibUI.TokenMetadata[](_allTokens.length);\\n        for (uint256 i; i < _allTokens.length; i++) {\\n            metadatas[i] = LibUI.TokenMetadata({\\n                decimals: _allTokens[i].decimals(),\\n                name: _allTokens[i].name(),\\n                symbol: _allTokens[i].symbol(),\\n                totalSupply: _allTokens[i].totalSupply()\\n            });\\n        }\\n        prices = LibUI.batchPrices(_assets, _oracles);\\n    }\\n}\\n\",\"keccak256\":\"0xd31a6599399ca80fa5e29e62d5b8d08cac39bc9fb34eb51ea99777fec3d6531d\",\"license\":\"MIT\"},\"src/contracts/minter/interfaces/IAccountState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {Action} from \\\"../MinterTypes.sol\\\";\\n\\ninterface IAccountState {\\n    function getMintedKreskoAssets(address _account) external view returns (address[] memory);\\n\\n    function getMintedKreskoAssetsIndex(address _account, address _kreskoAsset) external view returns (uint256);\\n\\n    function getAccountKrAssetValue(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getAccountCollateralValue(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getAccountMinimumCollateralValueAtRatio(address _account, FixedPoint.Unsigned memory _ratio)\\n        external\\n        view\\n        returns (FixedPoint.Unsigned memory);\\n\\n    function getDepositedCollateralAssetIndex(address _account, address _collateralAsset)\\n        external\\n        view\\n        returns (uint256 i);\\n\\n    function getDepositedCollateralAssets(address _account) external view returns (address[] memory);\\n\\n    function getAccountCollateralRatio(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getCollateralRatiosFor(address[] memory _accounts) external view returns (FixedPoint.Unsigned[] memory);\\n}\\n\",\"keccak256\":\"0xff05db9dba42209502b1ddb15aae416071c9915ee48f33e50814cf4071e8ea37\",\"license\":\"MIT\"},\"src/contracts/minter/interfaces/IAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IAction {\\n    function burnKreskoAsset(\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        uint256 _mintedKreskoAssetIndex\\n    ) external;\\n\\n    function depositCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount\\n    ) external;\\n\\n    function mintKreskoAsset(\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) external;\\n}\\n\",\"keccak256\":\"0x82e9c561423e1f155235ff242ae6fb96877422c35fee4f5e71c1798dd019ceb8\",\"license\":\"MIT\"},\"src/contracts/minter/interfaces/IConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {MinterInitArgs, KrAsset, CollateralAsset} from \\\"../MinterTypes.sol\\\";\\n\\ninterface IConfiguration {\\n    function initialize(MinterInitArgs calldata args) external;\\n\\n    function addCollateralAsset(\\n        address _collateralAsset,\\n        uint256 _factor,\\n        address _oracle\\n    ) external;\\n\\n    function updateCollateralAsset(\\n        address _collateralAsset,\\n        uint256 _factor,\\n        address _oracle\\n    ) external;\\n\\n    function addKreskoAsset(\\n        address _krAsset,\\n        address _wrapper,\\n        uint256 _kFactor,\\n        address _oracle,\\n        uint256 _supplyLimit,\\n        uint256 _closeFee\\n    ) external;\\n\\n    function updateKreskoAsset(\\n        address _krAsset,\\n        uint256 _kFactor,\\n        address _oracle,\\n        bool _mintable,\\n        uint256 _supplyLimit,\\n        uint256 _closeFee\\n    ) external;\\n\\n    function updateFeeRecipient(address _feeRecipient) external;\\n\\n    function updateLiquidationIncentiveMultiplier(uint256 _liquidationIncentiveMultiplier) external;\\n\\n    function updateMinimumCollateralizationRatio(uint256 _minimumCollateralizationRatio) external;\\n\\n    function updateMinimumDebtValue(uint256 _minimumDebtValue) external;\\n\\n    function updateLiquidationThreshold(uint256 _minimumDebtValue) external;\\n}\\n\",\"keccak256\":\"0x15105bb1a6c811a51fa0eca3d58acd94450623bfe5a88714953d66428191de2e\",\"license\":\"MIT\"},\"src/contracts/minter/interfaces/IKresko.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {Action} from \\\"../MinterTypes.sol\\\";\\nimport {IAccountState} from \\\"./IAccountState.sol\\\";\\nimport {IConfiguration} from \\\"./IConfiguration.sol\\\";\\nimport {IAction} from \\\"./IAction.sol\\\";\\nimport {IState} from \\\"./IState.sol\\\";\\nimport {ILiquidation} from \\\"./ILiquidation.sol\\\";\\nimport {IAuthorization} from \\\"../../diamond/interfaces/IAuthorization.sol\\\";\\nimport {IOwnership} from \\\"../../diamond/interfaces/IOwnership.sol\\\";\\nimport {KrAsset, CollateralAsset} from \\\"../MinterTypes.sol\\\";\\n\\n/* solhint-disable no-empty-blocks */\\ninterface IKresko is IAccountState, IState, ILiquidation, IConfiguration, IAction, IAuthorization, IOwnership {\\n    function kreskoAssets(address _asset) external view returns (KrAsset memory);\\n\\n    function kreskoAssetDebt(address _account, address _asset) external view returns (uint256);\\n\\n    function collateralDeposits(address _account, address _asset) external view returns (uint256);\\n\\n    function collateralAssets(address _asset) external view returns (CollateralAsset memory);\\n}\\n\",\"keccak256\":\"0x8e50fe941c8268bcefef164388ed25a76d93011ba563264d57cb74b01fd01076\",\"license\":\"MIT\"},\"src/contracts/minter/interfaces/ILiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"../../libs/FixedPoint.sol\\\";\\n\\ninterface ILiquidation {\\n    function calculateMaxLiquidatableValueForAssets(\\n        address _account,\\n        address _repayKreskoAsset,\\n        address _collateralAssetToSeize\\n    ) external view returns (FixedPoint.Unsigned memory maxLiquidatableUSD);\\n\\n    function isAccountLiquidatable(address _account) external view returns (bool);\\n\\n    function liquidate(\\n        address _account,\\n        address _repayKreskoAsset,\\n        uint256 _repayAmount,\\n        address _collateralAssetToSeize,\\n        uint256 _mintedKreskoAssetIndex,\\n        uint256 _depositedCollateralAssetIndex\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbd4e8a599483bde594e21eb2ec39b6d090504020c680e7b0bda78da94d22b80a\",\"license\":\"MIT\"},\"src/contracts/minter/interfaces/IState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {CollateralAsset, KrAsset} from \\\"../MinterTypes.sol\\\";\\n\\ninterface IState {\\n    function domainSeparator() external view returns (bytes32);\\n\\n    function minterInitializations() external view returns (uint256);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function liquidationThreshold() external view returns (FixedPoint.Unsigned memory);\\n\\n    function liquidationIncentiveMultiplier() external view returns (FixedPoint.Unsigned memory);\\n\\n    function minimumCollateralizationRatio() external view returns (FixedPoint.Unsigned memory);\\n\\n    function minimumDebtValue() external view returns (FixedPoint.Unsigned memory);\\n\\n    function krAssetExists(address _krAsset) external view returns (bool);\\n\\n    function kreskoAsset(address _asset) external view returns (KrAsset memory);\\n\\n    function collateralAsset(address _asset) external view returns (CollateralAsset memory);\\n\\n    function collateralExists(address _collateralAsset) external view returns (bool);\\n\\n    function getCollateralValueAndOraclePrice(\\n        address _collateralAsset,\\n        uint256 _amount,\\n        bool _ignoreCollateralFactor\\n    ) external view returns (FixedPoint.Unsigned memory, FixedPoint.Unsigned memory);\\n\\n    function getKrAssetValue(\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        bool _ignoreKFactor\\n    ) external view returns (FixedPoint.Unsigned memory);\\n}\\n\",\"keccak256\":\"0x00e50fb6305be850800ca482cb9d9b9a50d28cdd8174abf39baa4cdb97ace65b\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LibAccount {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /**\\n     * @notice Gets an array of Kresko assets the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @return An array of addresses of Kresko assets the account has minted.\\n     */\\n    function getMintedKreskoAssets(MinterState storage self, address _account)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        return self.mintedKreskoAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Gets an array of collateral assets the account has deposited.\\n     * @param _account The account to get the deposited collateral assets for.\\n     * @return An array of addresses of collateral assets the account has deposited.\\n     */\\n    function getDepositedCollateralAssets(MinterState storage self, address _account)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        return self.depositedCollateralAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Calculates if an account's current collateral value is under its minimum collateral value.\\n     * @dev Returns true if the account's current collateral value is below the minimum collateral value.\\n     * required to consider the position healthy.\\n     * @param _account The account to check.\\n     * @return A boolean indicating if the account can be liquidated.\\n     */\\n    function isAccountLiquidatable(MinterState storage self, address _account) internal view returns (bool) {\\n        return\\n            self.getAccountCollateralValue(_account).isLessThan(\\n                self.getAccountMinimumCollateralValueAtRatio(_account, self.liquidationThreshold)\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value of a particular account.\\n     * @dev O(# of different deposited collateral assets by account) complexity.\\n     * @param _account The account to calculate the collateral value for.\\n     * @return The collateral value of a particular account.\\n     */\\n    function getAccountCollateralValue(MinterState storage self, address _account)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        FixedPoint.Unsigned memory totalCollateralValue = FixedPoint.Unsigned(0);\\n\\n        address[] memory assets = self.depositedCollateralAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (FixedPoint.Unsigned memory collateralValue, ) = self.getCollateralValueAndOraclePrice(\\n                asset,\\n                self.collateralDeposits[_account][asset],\\n                false // Take the collateral factor into consideration.\\n                // TODO: should this take the collateral factor into account?\\n                // TODO: PANU: add a param bool _ignoreCollateralFactor or rename the func?\\n            );\\n            totalCollateralValue = totalCollateralValue.add(collateralValue);\\n        }\\n\\n        return totalCollateralValue;\\n    }\\n\\n    /**\\n     * @notice Get an account's minimum collateral value required\\n     *         to back a Kresko asset amount at a given collateralization ratio.\\n     * @dev Accounts that have their collateral value under the minimum collateral value are considered unhealthy,\\n     *      accounts with their collateral value under the liquidation threshold are considered liquidatable.\\n     * @param _account The account to calculate the minimum collateral value for.\\n     * @param _ratio The collateralization ratio required: higher ratio = more collateral required\\n     * @return The minimum collateral value at a given collateralization ratio for a given account.\\n     */\\n    function getAccountMinimumCollateralValueAtRatio(\\n        MinterState storage self,\\n        address _account,\\n        FixedPoint.Unsigned memory _ratio\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        return self.getAccountKrAssetValue(_account).mul(_ratio);\\n    }\\n\\n    /**\\n     * @notice Gets the Kresko asset value in USD of a particular account.\\n     * @param _account The account to calculate the Kresko asset value for.\\n     * @return The Kresko asset value of a particular account.\\n     */\\n    function getAccountKrAssetValue(MinterState storage self, address _account)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        FixedPoint.Unsigned memory value = FixedPoint.Unsigned(0);\\n\\n        address[] memory assets = self.mintedKreskoAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            value = value.add(self.getKrAssetValue(asset, self.kreskoAssetDebt[_account][asset], false));\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @notice Gets an index for the Kresko asset the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @param _kreskoAsset The asset lookup address.\\n     * @return i = index of the minted Kresko asset.\\n     */\\n    function getMintedKreskoAssetsIndex(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset\\n    ) internal view returns (uint256 i) {\\n        for (i; i < self.mintedKreskoAssets[_account].length; i++) {\\n            if (self.mintedKreskoAssets[_account][i] == _kreskoAsset) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets an index for the collateral asset the account has deposited.\\n     * @param _account The account to get the index for.\\n     * @param _collateralAsset The asset lookup address.\\n     * @return i = index of the minted collateral asset.\\n     */\\n    function getDepositedCollateralAssetIndex(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset\\n    ) internal view returns (uint256 i) {\\n        for (i; i < self.depositedCollateralAssets[_account].length; i++) {\\n            if (self.depositedCollateralAssets[_account][i] == _collateralAsset) {\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa03449d2258afed0d9b55fe876d5744fb17c8c35f6ddea99a519f997893066a8\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {Math} from \\\"../../libs/Math.sol\\\";\\n\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\n\\nuint256 constant ONE_HUNDRED_PERCENT = 1e18;\\n\\nlibrary LibCalc {\\n    using Arrays for address[];\\n    using Math for uint8;\\n    using Math for uint256;\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /**\\n     * @dev Calculates the total value that can be liquidated for a liquidation pair\\n     * @param _account address to liquidate\\n     * @param _repayKreskoAsset address of the kreskoAsset being repaid on behalf of the liquidatee\\n     * @param _collateralAssetToSeize address of the collateral asset being seized from the liquidatee\\n     * @return maxLiquidatableUSD USD value that can be liquidated, 0 if the pair has no liquidatable value\\n     */\\n    function calculateMaxLiquidatableValueForAssets(\\n        MinterState storage self,\\n        address _account,\\n        address _repayKreskoAsset,\\n        address _collateralAssetToSeize\\n    ) internal view returns (FixedPoint.Unsigned memory maxLiquidatableUSD) {\\n        // Minimum collateral value required for the krAsset position\\n        FixedPoint.Unsigned memory minCollateralValue = self.getMinimumCollateralValueAtRatio(\\n            _repayKreskoAsset,\\n            self.kreskoAssetDebt[_account][_repayKreskoAsset],\\n            self.liquidationThreshold\\n        );\\n\\n        // Collateral value for this position\\n        (FixedPoint.Unsigned memory collateralValueAvailable, ) = self.getCollateralValueAndOraclePrice(\\n            _collateralAssetToSeize,\\n            self.collateralDeposits[_account][_collateralAssetToSeize],\\n            false // take cFactor into consideration\\n        );\\n        if (collateralValueAvailable.isGreaterThanOrEqual(minCollateralValue)) {\\n            return FixedPoint.Unsigned(0);\\n        } else {\\n            KrAsset memory kreskoAsset = self.kreskoAssets[_repayKreskoAsset];\\n            FixedPoint.Unsigned memory cFactor = self.collateralAssets[_collateralAssetToSeize].factor;\\n\\n            // Calculate how much value is under\\n            FixedPoint.Unsigned memory valueUnderMin = minCollateralValue.sub(collateralValueAvailable);\\n\\n            // Get the divisor which calculates the max repayment from the underwater value\\n            FixedPoint.Unsigned memory repayDivisor = kreskoAsset.kFactor.mul(self.minimumCollateralizationRatio).sub(\\n                self.liquidationIncentiveMultiplier.sub(kreskoAsset.closeFee).mul(cFactor)\\n            );\\n\\n            // Max repayment value for this pair\\n            maxLiquidatableUSD = valueUnderMin.div(repayDivisor);\\n\\n            // Get the future collateral value that is being used for the liquidation\\n            FixedPoint.Unsigned memory collateralValueRepaid = maxLiquidatableUSD.div(\\n                kreskoAsset.kFactor.mul(self.liquidationIncentiveMultiplier.add(kreskoAsset.closeFee))\\n            );\\n\\n            // If it's more than whats available get the max value from how much value is available instead.\\n            if (collateralValueRepaid.isGreaterThan(collateralValueAvailable)) {\\n                // Reverse the divisor formula to achieve the max repayment from available collateral.\\n                // We end up here if the user has multiple positions with different risk profiles.\\n                maxLiquidatableUSD = collateralValueAvailable.div(collateralValueRepaid.div(valueUnderMin));\\n            }\\n\\n            // Cascade the liquidations if user has multiple collaterals and cFactor < 1.\\n            // This is desired because pairs with low cFactor have higher collateral requirement\\n            // than positions with high cFactor.\\n\\n            // Main reason here is keep the liquidations from happening only on pairs that have a high risk profile.\\n            if (self.depositedCollateralAssets[_account].length > 1 && cFactor.isLessThan(ONE_HUNDRED_PERCENT)) {\\n                // To mitigate:\\n                // cFactor^4 the collateral available (cFactor = 1 == nothing happens)\\n                // Get the ratio between max liquidatable USD and diminished collateral available\\n                // = (higher value -> higher the risk ratio of this pair)\\n                // Divide the maxValue by this ratio and a diminishing max value is returned.\\n\\n                // For a max profit liquidation strategy jumps to other pairs must happen before\\n                // the liquidation value of the risky position becomes the most profitable again.\\n\\n                return\\n                    maxLiquidatableUSD.div(maxLiquidatableUSD.div(collateralValueAvailable.mul(cFactor.pow(4)))).mul(\\n                        // Include a closeFee surplus in the liquidation\\n                        // so the users can repay their debt.\\n                        FixedPoint.Unsigned(ONE_HUNDRED_PERCENT).add(kreskoAsset.closeFee)\\n                    );\\n            } else {\\n                // For collaterals with cFactor = 1 / accounts with only single collateral\\n                // the debt is just repaid in full with a single transaction\\n                return maxLiquidatableUSD.mul(FixedPoint.Unsigned(ONE_HUNDRED_PERCENT).add(kreskoAsset.closeFee));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the close fee for a burned asset.\\n     * @param _collateralAssetAddress The collateral asset from which to take to the fee.\\n     * @param _account The owner of the collateral.\\n     * @param _feeValue The original value of the fee.\\n     * @param _collateralAssetIndex The collateral asset's index in the user's depositedCollateralAssets array.\\n     * @return The transfer amount to be received as a uint256 and a FixedPoint.Unsigned\\n     * representing the fee value paid.\\n     */\\n    function calcCloseFee(\\n        MinterState storage self,\\n        address _collateralAssetAddress,\\n        address _account,\\n        FixedPoint.Unsigned memory _feeValue,\\n        uint256 _collateralAssetIndex\\n    ) internal returns (uint256, FixedPoint.Unsigned memory) {\\n        uint256 depositAmount = self.collateralDeposits[_account][_collateralAssetAddress];\\n\\n        // Don't take the collateral asset's collateral factor into consideration.\\n        (FixedPoint.Unsigned memory depositValue, FixedPoint.Unsigned memory oraclePrice) = self\\n            .getCollateralValueAndOraclePrice(_collateralAssetAddress, depositAmount, true);\\n\\n        FixedPoint.Unsigned memory feeValuePaid;\\n        uint256 transferAmount;\\n        // If feeValue < depositValue, the entire fee can be charged for this collateral asset.\\n        if (_feeValue.isLessThan(depositValue)) {\\n            // We want to make sure that transferAmount is < depositAmount.\\n            // Proof:\\n            //   depositValue <= oraclePrice * depositAmount (<= due to a potential loss of precision)\\n            //   feeValue < depositValue\\n            // Meaning:\\n            //   feeValue < oraclePrice * depositAmount\\n            // Solving for depositAmount we get:\\n            //   feeValue / oraclePrice < depositAmount\\n            // Due to integer division:\\n            //   transferAmount = floor(feeValue / oracleValue)\\n            //   transferAmount <= feeValue / oraclePrice\\n            // We see that:\\n            //   transferAmount <= feeValue / oraclePrice < depositAmount\\n            //   transferAmount < depositAmount\\n            transferAmount = self.collateralAssets[_collateralAssetAddress].decimals._fromCollateralFixedPointAmount(\\n                _feeValue.div(oraclePrice)\\n            );\\n            feeValuePaid = _feeValue;\\n        } else {\\n            // If the feeValue >= depositValue, the entire deposit\\n            // should be taken as the fee.\\n            transferAmount = depositAmount;\\n            feeValuePaid = depositValue;\\n            // Because the entire deposit is taken, remove it from the depositCollateralAssets array.\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAssetAddress, _collateralAssetIndex);\\n        }\\n\\n        return (transferAmount, feeValuePaid);\\n    }\\n}\\n\",\"keccak256\":\"0xb1ccc8b2f3872ff3a86d5605e88e45ae16992c0f8c7d3e05ceb1f3aed1ca3b07\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {AggregatorV2V3Interface} from \\\"../../vendor/flux/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {IWrappedKreskoAsset} from \\\"../../krAsset/IWrappedKreskoAsset.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Math} from \\\"../../libs/Math.sol\\\";\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\n\\nimport {CollateralAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\nlibrary LibCollateral {\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using Math for uint8;\\n    using Arrays for address[];\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  Functions                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Get the state of a specific collateral asset\\n     * @param _asset Address of the asset.\\n     * @return State of assets `CollateralAsset` struct\\n     */\\n    function collateralAsset(MinterState storage self, address _asset) internal view returns (CollateralAsset memory) {\\n        return self.collateralAssets[_asset];\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value for a single collateral asset and amount.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _amount The amount of the collateral asset to calculate the collateral value for.\\n     * @param _ignoreCollateralFactor Boolean indicating if the asset's collateral factor should be ignored.\\n     * @return The collateral value for the provided amount of the collateral asset.\\n     */\\n    function getCollateralValueAndOraclePrice(\\n        MinterState storage self,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        bool _ignoreCollateralFactor\\n    ) internal view returns (FixedPoint.Unsigned memory, FixedPoint.Unsigned memory) {\\n        CollateralAsset memory asset = self.collateralAssets[_collateralAsset];\\n\\n        FixedPoint.Unsigned memory fixedPointAmount = asset.decimals._toCollateralFixedPointAmount(_amount);\\n        FixedPoint.Unsigned memory oraclePrice = FixedPoint.Unsigned(uint256(asset.oracle.latestAnswer()));\\n        FixedPoint.Unsigned memory value = fixedPointAmount.mul(oraclePrice);\\n\\n        if (!_ignoreCollateralFactor) {\\n            value = value.mul(asset.factor);\\n        }\\n        return (value, oraclePrice);\\n    }\\n\\n    function verifyAndRecordCollateralWithdrawal(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositAmount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) internal {\\n        require(_amount > 0, Error.ZERO_WITHDRAW);\\n        require(\\n            _depositedCollateralAssetIndex <= self.depositedCollateralAssets[_account].length - 1,\\n            Error.ARRAY_OUT_OF_BOUNDS\\n        );\\n\\n        // Ensure the withdrawal does not result in the account having a collateral value\\n        // under the minimum collateral amount required to maintain a healthy position.\\n        // I.e. the new account's collateral value must still exceed the account's minimum\\n        // collateral value.\\n        // Get the account's current collateral value.\\n        FixedPoint.Unsigned memory accountCollateralValue = self.getAccountCollateralValue(_account);\\n        // Get the collateral value that the account will lose as a result of this withdrawal.\\n        (FixedPoint.Unsigned memory withdrawnCollateralValue, ) = self.getCollateralValueAndOraclePrice(\\n            _collateralAsset,\\n            _amount,\\n            false // Take the collateral factor into consideration.\\n        );\\n        // Get the account's minimum collateral value.\\n        FixedPoint.Unsigned memory accountMinCollateralValue = self.getAccountMinimumCollateralValueAtRatio(\\n            _account,\\n            self.minimumCollateralizationRatio\\n        );\\n        // Require accountCollateralValue - withdrawnCollateralValue >= accountMinCollateralValue.\\n        require(\\n            accountCollateralValue.sub(withdrawnCollateralValue).isGreaterThanOrEqual(accountMinCollateralValue),\\n            Error.COLLATERAL_INSUFFICIENT_AMOUNT\\n        );\\n\\n        // Record the withdrawal.\\n        self.collateralDeposits[_account][_collateralAsset] = _depositAmount - _amount;\\n\\n        // If the user is withdrawing all of the collateral asset, remove the collateral asset\\n        // from the user's deposited collateral assets array.\\n        if (_amount == _depositAmount) {\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAsset, _depositedCollateralAssetIndex);\\n        }\\n\\n        emit MinterEvent.CollateralWithdrawn(_account, _collateralAsset, _amount);\\n    }\\n\\n    /**\\n     * @notice Records account as having deposited an amount of a collateral asset.\\n     * @dev Token transfers are expected to be done by the caller.\\n     * @param _account The address of the collateral asset.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _amount The amount of the collateral asset deposited.\\n     */\\n    function recordCollateralDeposit(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount\\n    ) internal {\\n        // Because the depositedCollateralAssets[_account] is pushed to if the existing\\n        // deposit amount is 0, require the amount to be > 0. Otherwise, the depositedCollateralAssets[_account]\\n        // could be filled with duplicates, causing collateral to be double-counted in the collateral value.\\n        require(_amount > 0, Error.ZERO_DEPOSIT);\\n\\n        // If the account does not have an existing deposit for this collateral asset,\\n        // push it to the list of the account's deposited collateral assets.\\n        uint256 existingDepositAmount = self.collateralDeposits[_account][_collateralAsset];\\n        if (existingDepositAmount == 0) {\\n            self.depositedCollateralAssets[_account].push(_collateralAsset);\\n        }\\n        // Record the deposit.\\n        unchecked {\\n            self.collateralDeposits[_account][_collateralAsset] = existingDepositAmount + _amount;\\n        }\\n\\n        emit MinterEvent.CollateralDeposited(_account, _collateralAsset, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x22f628b0e88c35464456a6964114852c64ae978c4bd9bbf7847e7de1061c5fec\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibKrAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\nlibrary LibKrAsset {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  Functions                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Get the state of a specific krAsset\\n     * @param _asset Address of the asset.\\n     * @return State of assets `KrAsset` struct\\n     */\\n    function kreskoAsset(MinterState storage self, address _asset) internal view returns (KrAsset memory) {\\n        return self.kreskoAssets[_asset];\\n    }\\n\\n    /**\\n     * @notice Gets the USD value for a single Kresko asset and amount.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _amount The amount of the Kresko asset to calculate the value for.\\n     * @param _ignoreKFactor Boolean indicating if the asset's k-factor should be ignored.\\n     * @return The value for the provided amount of the Kresko asset.\\n     */\\n    function getKrAssetValue(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        bool _ignoreKFactor\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n\\n        FixedPoint.Unsigned memory oraclePrice = FixedPoint.Unsigned(uint256(krAsset.oracle.latestAnswer()));\\n\\n        FixedPoint.Unsigned memory value = FixedPoint.Unsigned(_amount).mul(oraclePrice);\\n\\n        if (!_ignoreKFactor) {\\n            value = value.mul(krAsset.kFactor);\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @notice Get the minimum collateral value required to\\n     * back a Kresko asset amount at a given collateralization ratio.\\n     * @param _krAsset The address of the Kresko asset.\\n     * @param _amount The Kresko Asset debt amount.\\n     * @return minCollateralValue is the minimum collateral value required for this Kresko Asset amount.\\n     * @param _ratio The collateralization ratio required: higher ratio = more collateral required.\\n     */\\n    function getMinimumCollateralValueAtRatio(\\n        MinterState storage self,\\n        address _krAsset,\\n        uint256 _amount,\\n        FixedPoint.Unsigned memory _ratio\\n    ) internal view returns (FixedPoint.Unsigned memory minCollateralValue) {\\n        // Calculate the Kresko asset's value weighted by its k-factor.\\n        FixedPoint.Unsigned memory weightedKreskoAssetValue = self.getKrAssetValue(_krAsset, _amount, false);\\n        // Calculate the collateral value required to back this Kresko asset amount at the given ratio\\n        return weightedKreskoAssetValue.mul(_ratio);\\n    }\\n}\\n\",\"keccak256\":\"0xfea1dc34fe71eed7f600dd374d427d4fc13e1e1d7c9e57922e7cf9b7c6482d51\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibRepay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n// solhint-disable-next-line\\nimport {SafeERC20Upgradeable, IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {Math} from \\\"../../libs/Math.sol\\\";\\n\\nimport {LibCalc} from \\\"./LibCalculation.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\nlibrary LibRepay {\\n    using Arrays for address[];\\n    using Math for uint8;\\n    using Math for uint256;\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using LibCalc for MinterState;\\n\\n    /**\\n     * @notice Charges the protocol close fee based off the value of the burned asset.\\n     * @dev Takes the fee from the account's collateral assets. Attempts collateral assets\\n     *   in reverse order of the account's deposited collateral assets array.\\n     * @param _account The account to charge the close fee from.\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _kreskoAssetAmountBurned The amount of the kresko asset being burned.\\n     */\\n    function chargeCloseFee(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _kreskoAssetAmountBurned\\n    ) internal {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        // Calculate the value of the fee according to the value of the krAssets being burned.\\n        FixedPoint.Unsigned memory feeValue = FixedPoint\\n            .Unsigned(uint256(krAsset.oracle.latestAnswer()))\\n            .mul(FixedPoint.Unsigned(_kreskoAssetAmountBurned))\\n            .mul(krAsset.closeFee);\\n\\n        // Do nothing if the fee value is 0.\\n        if (feeValue.rawValue == 0) {\\n            return;\\n        }\\n\\n        address[] memory accountCollateralAssets = self.depositedCollateralAssets[_account];\\n        // Iterate backward through the account's deposited collateral assets to safely\\n        // traverse the array while still being able to remove elements if necessary.\\n        // This is because removing the last element of the array does not shift around\\n        // other elements in the array.\\n\\n        for (uint256 i = accountCollateralAssets.length - 1; i >= 0; i--) {\\n            address collateralAssetAddress = accountCollateralAssets[i];\\n\\n            (uint256 transferAmount, FixedPoint.Unsigned memory feeValuePaid) = self.calcCloseFee(\\n                collateralAssetAddress,\\n                _account,\\n                feeValue,\\n                i\\n            );\\n\\n            // Remove the transferAmount from the stored deposit for the account.\\n            self.collateralDeposits[_account][collateralAssetAddress] -= transferAmount;\\n            // Transfer the fee to the feeRecipient.\\n            IERC20Upgradeable(collateralAssetAddress).safeTransfer(self.feeRecipient, transferAmount);\\n            emit MinterEvent.CloseFeePaid(_account, collateralAssetAddress, transferAmount, feeValuePaid.rawValue);\\n\\n            feeValue = feeValue.sub(feeValuePaid);\\n            // If the entire fee has been paid, no more action needed.\\n            if (feeValue.rawValue == 0) {\\n                return;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe9190373b427cb79879af19669e97b7602b7a1620605c3a7b9f0b555b640b34d\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibUI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n// solhint-disable-next-line\\nimport {SafeERC20Upgradeable} from \\\"../../shared/SafeERC20Upgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"../../shared/IERC20Upgradeable.sol\\\";\\nimport {AggregatorV2V3Interface} from \\\"../../vendor/flux/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {IUniswapV2Pair} from \\\"../../vendor/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\\\";\\nimport {IKrStaking} from \\\"../../staking/interfaces/IKrStaking.sol\\\";\\nimport {IKresko} from \\\"../interfaces/IKresko.sol\\\";\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {Math} from \\\"../../libs/Math.sol\\\";\\n\\nimport {KrAsset, CollateralAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState, ms} from \\\"../MinterStorage.sol\\\";\\n\\nimport {UI} from \\\"../facets/UIDataProviderFacet.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/* solhint-disable contract-name-camelcase */\\n/* solhint-disable var-name-mixedcase */\\n\\nlibrary LibUI {\\n    using Arrays for address[];\\n    using Math for uint8;\\n    using Math for uint256;\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct CollateralAssetInfoUser {\\n        address assetAddress;\\n        address oracleAddress;\\n        uint256 amount;\\n        FixedPoint.Unsigned amountUSD;\\n        FixedPoint.Unsigned cFactor;\\n        uint8 decimals;\\n        uint256 index;\\n        uint256 price;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct CollateralAssetInfo {\\n        address assetAddress;\\n        address oracleAddress;\\n        uint256 price;\\n        uint256 value;\\n        FixedPoint.Unsigned cFactor;\\n        uint8 decimals;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct ProtocolParams {\\n        uint256 liqMultiplier;\\n        uint256 minDebtAmount;\\n        uint256 minCollateralRatio;\\n        uint256 liquidationThreshold;\\n    }\\n\\n    struct krAssetInfo {\\n        address oracleAddress;\\n        address assetAddress;\\n        uint256 price;\\n        uint256 value;\\n        FixedPoint.Unsigned kFactor;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct KreskoUser {\\n        krAssetInfoUser[] krAssets;\\n        CollateralAssetInfoUser[] collateralAssets;\\n        FixedPoint.Unsigned healthFactor;\\n        FixedPoint.Unsigned debtActualUSD;\\n        FixedPoint.Unsigned debtUSD;\\n        FixedPoint.Unsigned collateralActualUSD;\\n        FixedPoint.Unsigned collateralUSD;\\n        FixedPoint.Unsigned minCollateralUSD;\\n        FixedPoint.Unsigned borrowingPowerUSD;\\n    }\\n\\n    struct PairData {\\n        uint8 decimals0;\\n        uint8 decimals1;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 totalSupply;\\n    }\\n\\n    struct GenericInfo {\\n        address assetAddress;\\n        FixedPoint.Unsigned kFactor;\\n        FixedPoint.Unsigned cFactor;\\n        uint256 price;\\n        bool isKrAsset;\\n        bool isCollateral;\\n        uint256 debtAmount;\\n        uint256 depositAmount;\\n        uint256 walletBalance;\\n    }\\n\\n    struct Price {\\n        uint256 price;\\n        uint256 timestamp;\\n        address assetAddress;\\n        uint80 roundId;\\n    }\\n\\n    struct Allowance {\\n        address owner;\\n        address spender;\\n        uint256 allowance;\\n    }\\n\\n    struct Balance {\\n        address token;\\n        uint256 balance;\\n    }\\n\\n    struct TokenMetadata {\\n        uint8 decimals;\\n        string symbol;\\n        string name;\\n        uint256 totalSupply;\\n    }\\n\\n    struct StakingData {\\n        uint256 pid;\\n        address depositToken;\\n        uint256 totalDeposits;\\n        uint256 allocPoint;\\n        uint256[] rewardPerBlocks;\\n        uint256 lastRewardBlock;\\n        uint256 depositAmount;\\n        address[] rewardTokens;\\n        uint256[] rewardAmounts;\\n    }\\n\\n    struct krAssetInfoUser {\\n        address assetAddress;\\n        address oracleAddress;\\n        uint256 amount;\\n        FixedPoint.Unsigned amountUSD;\\n        uint256 index;\\n        FixedPoint.Unsigned kFactor;\\n        bool mintable;\\n        uint256 price;\\n        string symbol;\\n        string name;\\n    }\\n\\n    function getBalances(IERC20Upgradeable[] memory _tokens, address account)\\n        internal\\n        view\\n        returns (Balance[] memory balances)\\n    {\\n        balances = new Balance[](_tokens.length);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            balances[i] = Balance({token: address(_tokens[i]), balance: _tokens[i].balanceOf(account)});\\n        }\\n    }\\n\\n    function getAllowances(\\n        IERC20Upgradeable[] memory _tokens,\\n        address owner,\\n        address spender\\n    ) internal view returns (Allowance[] memory allowances) {\\n        allowances = new Allowance[](_tokens.length);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            allowances[i] = Allowance({\\n                allowance: _tokens[i].allowance(owner, spender),\\n                spender: spender,\\n                owner: owner\\n            });\\n        }\\n    }\\n\\n    function getStakingData(address _account) internal view returns (StakingData[] memory result) {\\n        IKrStaking.Reward[] memory rewards = UI().staking.allPendingRewards(_account);\\n        result = new StakingData[](rewards.length);\\n\\n        for (uint256 i; i < rewards.length; i++) {\\n            IKrStaking.UserInfo memory userInfo = UI().staking.userInfo(rewards[i].pid, _account);\\n            IKrStaking.PoolInfo memory poolInfo = UI().staking.poolInfo(rewards[i].pid);\\n            address depositTokenAddress = address(poolInfo.depositToken);\\n            result[i] = StakingData({\\n                pid: rewards[i].pid,\\n                totalDeposits: poolInfo.depositToken.balanceOf(address(UI().staking)),\\n                allocPoint: poolInfo.allocPoint,\\n                depositToken: depositTokenAddress,\\n                depositAmount: userInfo.amount,\\n                rewardTokens: rewards[i].tokens,\\n                rewardAmounts: rewards[i].amounts,\\n                rewardPerBlocks: UI().staking.rewardPerBlockFor(depositTokenAddress),\\n                lastRewardBlock: poolInfo.lastRewardBlock\\n            });\\n        }\\n    }\\n\\n    function borrowingPowerUSD(address _account) internal view returns (FixedPoint.Unsigned memory) {\\n        FixedPoint.Unsigned memory minCollateral = ms().getAccountMinimumCollateralValueAtRatio(\\n            _account,\\n            ms().minimumCollateralizationRatio\\n        );\\n        FixedPoint.Unsigned memory collateral = ms().getAccountCollateralValue(_account);\\n\\n        if (collateral.isLessThan(minCollateral)) {\\n            return FixedPoint.Unsigned(0);\\n        } else {\\n            return collateral.sub(minCollateral);\\n        }\\n    }\\n\\n    function batchPrices(address[] calldata _assets, AggregatorV2V3Interface[] calldata _oracles)\\n        internal\\n        view\\n        returns (Price[] memory result)\\n    {\\n        require(_assets.length == _oracles.length, \\\"Query must be equal\\\");\\n        result = new Price[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            (uint80 roundId, int256 answer, , uint256 updatedAt, ) = _oracles[i].latestRoundData();\\n            result[i] = Price(uint256(answer), updatedAt, _assets[i], roundId);\\n        }\\n    }\\n\\n    function krAssetInfos(address[] memory assetAddresses) internal view returns (krAssetInfo[] memory result) {\\n        result = new krAssetInfo[](assetAddresses.length);\\n        for (uint256 i; i < assetAddresses.length; i++) {\\n            address assetAddress = assetAddresses[i];\\n\\n            KrAsset memory krAsset = ms().kreskoAssets[assetAddress];\\n\\n            FixedPoint.Unsigned memory value = ms().getKrAssetValue(assetAddress, 1 ether, false);\\n            uint256 price = uint256(krAsset.oracle.latestAnswer());\\n\\n            string memory name = IERC20Upgradeable(assetAddress).name();\\n            string memory symbol = IERC20Upgradeable(assetAddress).symbol();\\n\\n            krAssetInfo memory assetInfo = krAssetInfo({\\n                value: value.rawValue,\\n                oracleAddress: address(krAsset.oracle),\\n                assetAddress: assetAddress,\\n                kFactor: krAsset.kFactor,\\n                price: price,\\n                symbol: symbol,\\n                name: name\\n            });\\n\\n            result[i] = assetInfo;\\n        }\\n    }\\n\\n    function collateralAssetInfos(address[] memory assetAddresses)\\n        internal\\n        view\\n        returns (CollateralAssetInfo[] memory result)\\n    {\\n        result = new CollateralAssetInfo[](assetAddresses.length);\\n        for (uint256 i; i < assetAddresses.length; i++) {\\n            address assetAddress = assetAddresses[i];\\n            CollateralAsset memory collateralAsset = ms().collateralAssets[assetAddress];\\n            uint8 decimals = IERC20Upgradeable(assetAddress).decimals();\\n\\n            string memory symbol = IERC20Upgradeable(assetAddress).symbol();\\n            (FixedPoint.Unsigned memory value, FixedPoint.Unsigned memory price) = ms()\\n                .getCollateralValueAndOraclePrice(assetAddress, 1 * 10**decimals, false);\\n\\n            string memory name = IERC20Upgradeable(assetAddress).name();\\n\\n            CollateralAssetInfo memory assetInfo = CollateralAssetInfo({\\n                value: value.rawValue,\\n                oracleAddress: address(collateralAsset.oracle),\\n                assetAddress: assetAddress,\\n                cFactor: collateralAsset.factor,\\n                decimals: decimals,\\n                price: price.rawValue,\\n                symbol: symbol,\\n                name: name\\n            });\\n\\n            result[i] = assetInfo;\\n        }\\n    }\\n\\n    function collateralAssetInfoFor(address _account)\\n        internal\\n        view\\n        returns (CollateralAssetInfoUser[] memory result, FixedPoint.Unsigned memory totalCollateralUSD)\\n    {\\n        address[] memory collateralAssetAddresses = ms().getDepositedCollateralAssets(_account);\\n        if (collateralAssetAddresses.length > 0) {\\n            result = new CollateralAssetInfoUser[](collateralAssetAddresses.length);\\n            for (uint256 i; i < collateralAssetAddresses.length; i++) {\\n                address assetAddress = collateralAssetAddresses[i];\\n                CollateralAsset memory collateralAsset = ms().collateralAssets[assetAddress];\\n                uint8 decimals = IERC20Upgradeable(assetAddress).decimals();\\n\\n                uint256 amount = ms().collateralDeposits[_account][assetAddress];\\n\\n                string memory symbol = IERC20Upgradeable(assetAddress).symbol();\\n                (FixedPoint.Unsigned memory amountUSD, FixedPoint.Unsigned memory price) = ms()\\n                    .getCollateralValueAndOraclePrice(assetAddress, amount, true);\\n\\n                string memory name = IERC20Upgradeable(assetAddress).name();\\n\\n                CollateralAssetInfoUser memory assetInfo = CollateralAssetInfoUser({\\n                    amount: amount,\\n                    amountUSD: amountUSD,\\n                    oracleAddress: address(collateralAsset.oracle),\\n                    assetAddress: assetAddress,\\n                    cFactor: collateralAsset.factor,\\n                    decimals: decimals,\\n                    index: i,\\n                    price: price.rawValue,\\n                    symbol: symbol,\\n                    name: name\\n                });\\n\\n                totalCollateralUSD.add(amountUSD);\\n                result[i] = assetInfo;\\n            }\\n        }\\n    }\\n\\n    function krAssetInfoFor(address _account)\\n        internal\\n        view\\n        returns (krAssetInfoUser[] memory result, FixedPoint.Unsigned memory totalDebtUSD)\\n    {\\n        address[] memory krAssetAddresses = ms().mintedKreskoAssets[_account];\\n        if (krAssetAddresses.length > 0) {\\n            result = new krAssetInfoUser[](krAssetAddresses.length);\\n            for (uint256 i; i < krAssetAddresses.length; i++) {\\n                address assetAddress = krAssetAddresses[i];\\n                KrAsset memory krAsset = ms().kreskoAssets[assetAddress];\\n                uint256 amount = ms().kreskoAssetDebt[_account][assetAddress];\\n\\n                uint256 price = uint256(krAsset.oracle.latestAnswer());\\n                FixedPoint.Unsigned memory amountUSD = ms().getKrAssetValue(assetAddress, amount, true);\\n\\n                string memory symbol = IERC20Upgradeable(assetAddress).symbol();\\n                string memory name = IERC20Upgradeable(assetAddress).name();\\n\\n                krAssetInfoUser memory assetInfo = krAssetInfoUser({\\n                    assetAddress: assetAddress,\\n                    oracleAddress: address(krAsset.oracle),\\n                    amount: amount,\\n                    amountUSD: amountUSD,\\n                    index: i,\\n                    kFactor: krAsset.kFactor,\\n                    mintable: krAsset.mintable,\\n                    price: price,\\n                    symbol: symbol,\\n                    name: name\\n                });\\n\\n                totalDebtUSD.add(amountUSD);\\n                result[i] = assetInfo;\\n            }\\n        }\\n    }\\n\\n    function healthFactorFor(address _account) internal view returns (FixedPoint.Unsigned memory) {\\n        FixedPoint.Unsigned memory userDebt = ms().getAccountKrAssetValue(_account);\\n        FixedPoint.Unsigned memory userCollateral = ms().getAccountCollateralValue(_account);\\n\\n        if (userDebt.isGreaterThan(0)) {\\n            return userCollateral.div(userDebt);\\n        } else {\\n            return FixedPoint.Unsigned(0);\\n        }\\n    }\\n\\n    function kreskoUser(address _account) internal view returns (KreskoUser memory user) {\\n        (krAssetInfoUser[] memory krInfos, FixedPoint.Unsigned memory totalDebtUSD) = krAssetInfoFor(_account);\\n        (\\n            CollateralAssetInfoUser[] memory collateralInfos,\\n            FixedPoint.Unsigned memory totalCollateralUSD\\n        ) = collateralAssetInfoFor(_account);\\n\\n        if (krInfos.length > 0 || collateralInfos.length > 0) {\\n            user = KreskoUser({\\n                collateralAssets: collateralInfos,\\n                krAssets: krInfos,\\n                borrowingPowerUSD: borrowingPowerUSD(_account),\\n                healthFactor: healthFactorFor(_account),\\n                debtActualUSD: totalDebtUSD,\\n                debtUSD: ms().getAccountKrAssetValue(_account),\\n                collateralActualUSD: totalCollateralUSD,\\n                collateralUSD: ms().getAccountCollateralValue(_account),\\n                minCollateralUSD: ms().getAccountMinimumCollateralValueAtRatio(\\n                    _account,\\n                    ms().minimumCollateralizationRatio\\n                )\\n            });\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe10b3571e723e38a6ef7113e965bc13f59bb0e21da9918f72bca888f3b3f5316\",\"license\":\"MIT\"},\"src/contracts/shared/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc769e2950b896b7ccad33ee8c42948778d8ef6eb13a9de733fd5c968fd35729e\",\"license\":\"MIT\"},\"src/contracts/shared/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\ninterface IERC20Upgradeable {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function name() external view returns (string memory);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6e71c915a009a354a711867b60cad322092cb48b83eb09c1ec3a37d036380828\",\"license\":\"MIT\"},\"src/contracts/shared/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {Authorization, Role} from \\\"../libs/Authorization.sol\\\";\\nimport {Meta} from \\\"../libs/Meta.sol\\\";\\nimport {Error} from \\\"../libs/Errors.sol\\\";\\n\\nimport {Action} from \\\"../minter/MinterTypes.sol\\\";\\nimport {ms} from \\\"../minter/MinterStorage.sol\\\";\\n\\nimport {ENTERED, NOT_ENTERED} from \\\"../diamond/DiamondTypes.sol\\\";\\nimport {ds} from \\\"../diamond/DiamondStorage.sol\\\";\\n\\nabstract contract DiamondModifiers {\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^Authorization: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        Authorization.checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Ensure only trusted contracts can act on behalf of `_account`\\n     * @param _accountIsNotMsgSender The address of the collateral asset.\\n     */\\n    modifier onlyRoleIf(bool _accountIsNotMsgSender, bytes32 role) {\\n        if (_accountIsNotMsgSender) {\\n            Authorization.checkRole(role);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(Meta.msgSender() == ds().contractOwner, Error.DIAMOND_INVALID_OWNER);\\n        _;\\n    }\\n\\n    modifier onlyPendingOwner() {\\n        require(Meta.msgSender() == ds().pendingOwner, Error.DIAMOND_INVALID_PENDING_OWNER);\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(ds().entered == NOT_ENTERED, Error.RE_ENTRANCY);\\n        ds().entered = ENTERED;\\n        _;\\n        ds().entered = NOT_ENTERED;\\n    }\\n}\\n\\nabstract contract MinterModifiers {\\n    /**\\n     * @notice Reverts if a collateral asset does not exist within the protocol.\\n     * @param _collateralAsset The address of the collateral asset.\\n     */\\n    modifier collateralAssetExists(address _collateralAsset) {\\n        require(ms().collateralAssets[_collateralAsset].exists, Error.COLLATERAL_DOESNT_EXIST);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if a collateral asset already exists within the protocol.\\n     * @param _collateralAsset The address of the collateral asset.\\n     */\\n    modifier collateralAssetDoesNotExist(address _collateralAsset) {\\n        require(!ms().collateralAssets[_collateralAsset].exists, Error.COLLATERAL_EXISTS);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if a Kresko asset does not exist within the protocol or is not mintable.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     */\\n    modifier kreskoAssetExistsAndMintable(address _kreskoAsset) {\\n        require(ms().kreskoAssets[_kreskoAsset].exists, Error.KRASSET_DOESNT_EXIST);\\n        require(ms().kreskoAssets[_kreskoAsset].mintable, Error.KRASSET_NOT_MINTABLE);\\n        _;\\n    }\\n    /**\\n     * @notice Reverts if a Kresko asset does not exist within the protocol. Does not revert if\\n     * the Kresko asset is not mintable.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     */\\n    modifier kreskoAssetExistsMaybeNotMintable(address _kreskoAsset) {\\n        require(ms().kreskoAssets[_kreskoAsset].exists, Error.KRASSET_DOESNT_EXIST);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the symbol of a Kresko asset already exists within the protocol.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     */\\n    modifier kreskoAssetDoesNotExist(address _kreskoAsset) {\\n        require(!ms().kreskoAssets[_kreskoAsset].exists, Error.KRASSET_EXISTS);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4cff6f93b235b1b28b859df9194d3764958932a1452d8f48546a774e097529d7\",\"license\":\"MIT\"},\"src/contracts/shared/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ea70193765a0a396b50e7f3bf7c0913339c5e7f3f06d0a12288261b374bc0ba\",\"license\":\"MIT\"},\"src/contracts/staking/interfaces/IKrStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKrStaking {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256[] rewardDebts;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 depositToken; // Address of LP token contract.\\n        uint128 allocPoint; // How many allocation points assigned to this pool.\\n        uint128 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        uint256[] accRewardPerShares; // Accumulated rewards per share, times 1e12.\\n        address[] rewardTokens; // Reward tokens for this pool.\\n    }\\n\\n    struct Reward {\\n        uint256 pid;\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    function getPidFor(address _token) external view returns (uint256 pid, bool found);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function deposit(\\n        address _to,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawFor(\\n        address _for,\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _claimRewardsTo\\n    ) external;\\n\\n    function claimFor(\\n        address _for,\\n        uint256 _pid,\\n        address _rewardRecipient\\n    ) external;\\n\\n    function allPendingRewards(address) external view returns (Reward[] memory);\\n\\n    function userInfo(uint256 _pid, address _account) external view returns (UserInfo memory);\\n\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n\\n    function rewardPerBlockFor(address depositTokenAddress) external view returns (uint256[] memory rewardPerBlocks);\\n}\\n\",\"keccak256\":\"0x69a309ddb47b84913b8b6293a847e73e5f8d3a5f74fc47d65b9066cc75dcaf02\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x02a9c18fd33c5de5de54df13d923ddf7d76f70bc033bc27975374bf641207c85\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcb2f40bda00b52487beb7940f2da015deb59968c858bf7973d9a4313961f5392\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x582a2837f5116408a826d9600a23b87cbc64ea00a234ad43da459df69697a5fa\",\"license\":\"MIT\"},\"src/contracts/vendor/gnosis/IGnosisSafeL2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IGnosisSafeL2 {\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x62d4c6ebee8a2bd5a5eb86d29ff2c88b1cd500f14b892795e579188a2b763c0b\",\"license\":\"MIT\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x26726f18a897fb67275ebf22b5d24c14c8f45d423d3d800d64abe0d0cf4d4df2\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}