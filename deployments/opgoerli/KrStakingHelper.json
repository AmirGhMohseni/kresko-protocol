{
    "address": "0xB1A13FbC46800276671403CeDdd528D01a447c8F",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "contract IUniswapV2Router02",
                    "name": "_router",
                    "type": "address"
                },
                {
                    "internalType": "contract IUniswapV2Factory",
                    "name": "_factory",
                    "type": "address"
                },
                {
                    "internalType": "contract IKrStaking",
                    "name": "_staking",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }
            ],
            "name": "ClaimRewardsMulti",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "pid",
                    "type": "uint256"
                }
            ],
            "name": "LiquidityAndStakeAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "pid",
                    "type": "uint256"
                }
            ],
            "name": "LiquidityAndStakeRemoved",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "tokenA",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenB",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amountADesired",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amountBDesired",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amountAMin",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amountBMin",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "deadline",
                    "type": "uint256"
                }
            ],
            "name": "addLiquidityAndStake",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }
            ],
            "name": "claimRewardsMulti",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "factory",
            "outputs": [
                {
                    "internalType": "contract IUniswapV2Factory",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "router",
            "outputs": [
                {
                    "internalType": "contract IUniswapV2Router02",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "staking",
            "outputs": [
                {
                    "internalType": "contract IKrStaking",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "tokenA",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenB",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "liquidity",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amountAMin",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amountBMin",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "deadline",
                    "type": "uint256"
                }
            ],
            "name": "withdrawAndRemoveLiquidity",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x85905d85411f686cc47c8a26c33b7929ba19f658ef6934e12b1f2cfdd2307e59",
    "receipt": {
        "to": null,
        "from": "0xDc46c7eA52c6b2ca13D1dB949F79F81Cc0E7193C",
        "contractAddress": "0xB1A13FbC46800276671403CeDdd528D01a447c8F",
        "transactionIndex": 2,
        "gasUsed": "1260727",
        "logsBloom": "0x
        "blockHash": "0xf221e84dec6b547b646ffd9b96c09ae2a9c936f5041a3ea54ef628b62e9e5718",
        "transactionHash": "0x85905d85411f686cc47c8a26c33b7929ba19f658ef6934e12b1f2cfdd2307e59",
        "logs": [],
        "blockNumber": 7377155,
        "cumulativeGasUsed": "1376744",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0x1f693246650f93a7E9f4a713479695881b96b5F1",
        "0xc88508156D93BfF0Adce6c84d4269Efc82D4C827",
        "0x5843Cd37d7566173158c0B2655DA6A57422d4734"
    ],
    "numDeployments": 1,
    "solcInputHash": "9b9fa97d52b096ec7a35e0be35a83020",
    "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IKrStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimRewardsMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"LiquidityAndStakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"LiquidityAndStakeRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityAndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewardsMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IKrStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawAndRemoveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountADesired\":\"optimal amount of token A\",\"amountAMin\":\"min amountA (slippage)\",\"amountBDesired\":\"optimal amount of token B\",\"amountBMin\":\"min amountB (slippage)\",\"deadline\":\"transaction deadline (used by router)\",\"to\":\"address to deposit for\",\"tokenA\":\"address of tokenA\",\"tokenB\":\"address of tokenB\"}},\"claimRewardsMulti(address)\":{\"params\":{\"to\":\"address that receives the rewards\"}},\"withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountAMin\":\"min amountA to receive (slippage)\",\"amountBMin\":\"min amountB to receive (slippage)\",\"deadline\":\"transaction deadline (used by router)\",\"liquidity\":\"liquidity token amount to remove\",\"to\":\"address that receives the underlying\",\"tokenA\":\"address of tokenA\",\"tokenB\":\"address of tokenB\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LiquidityAndStakeAdded(address,uint256,uint256)\":{\"notice\":\"================================================== ============ Events ============================== ==================================================\"}},\"kind\":\"user\",\"methods\":{\"addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Add liquidity to a pair, deposit liquidity tokens to staking\"},\"claimRewardsMulti(address)\":{\"notice\":\"Claim rewards from each pool\"},\"withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraw liquidity tokens from staking, remove the underlying\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/staking/KrStakingHelper.sol\":\"KrStakingHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"src/contracts/staking/KrStakingHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IUniswapV2Factory} from \\\"../vendor/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\\\";\\nimport {IUniswapV2Router02} from \\\"../vendor/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IKrStaking.sol\\\";\\n\\ncontract KrStakingHelper {\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Router02 public router;\\n    IUniswapV2Factory public factory;\\n    IKrStaking public staking;\\n\\n    constructor(\\n        IUniswapV2Router02 _router,\\n        IUniswapV2Factory _factory,\\n        IKrStaking _staking\\n    ) {\\n        router = _router;\\n        factory = _factory;\\n        staking = _staking;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============ Events ==============================\\n     * ==================================================\\n     */\\n\\n    event LiquidityAndStakeAdded(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event LiquidityAndStakeRemoved(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event ClaimRewardsMulti(address indexed to);\\n\\n    /**\\n     * ==================================================\\n     * ============ Public functions ====================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Add liquidity to a pair, deposit liquidity tokens to staking\\n     * @param tokenA address of tokenA\\n     * @param tokenB address of tokenB\\n     * @param amountADesired optimal amount of token A\\n     * @param amountBDesired optimal amount of token B\\n     * @param amountAMin min amountA (slippage)\\n     * @param amountBMin min amountB (slippage)\\n     * @param to address to deposit for\\n     * @param deadline transaction deadline (used by router)\\n     */\\n    function addLiquidityAndStake(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        require(to != address(0), \\\"KR: !address\\\");\\n        address pair = factory.getPair(tokenA, tokenB);\\n        (uint256 pid, bool found) = staking.getPidFor(pair);\\n\\n        require(found, \\\"KR: !poolExists\\\");\\n\\n        IERC20(tokenA).safeTransferFrom(msg.sender, address(this), amountADesired);\\n        IERC20(tokenB).safeTransferFrom(msg.sender, address(this), amountBDesired);\\n\\n        IERC20(tokenA).approve(address(router), amountADesired);\\n        IERC20(tokenB).approve(address(router), amountBDesired);\\n\\n        (, , uint256 liquidity) = router.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            address(this),\\n            deadline\\n        );\\n\\n        IERC20(pair).approve(address(staking), liquidity);\\n        staking.deposit(to, pid, liquidity);\\n\\n        emit LiquidityAndStakeAdded(to, liquidity, pid);\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @notice Withdraw liquidity tokens from staking, remove the underlying\\n     * @param tokenA address of tokenA\\n     * @param tokenB address of tokenB\\n     * @param liquidity liquidity token amount to remove\\n     * @param amountAMin min amountA to receive (slippage)\\n     * @param amountBMin min amountB to receive (slippage)\\n     * @param to address that receives the underlying\\n     * @param deadline transaction deadline (used by router)\\n     */\\n    function withdrawAndRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external {\\n        require(to != address(0), \\\"KR: !address\\\");\\n        address pair = factory.getPair(tokenA, tokenB);\\n        (uint256 pid, bool found) = staking.getPidFor(pair);\\n\\n        require(found, \\\"KR: !poolExists\\\");\\n\\n        staking.withdrawFor(msg.sender, pid, liquidity, to);\\n\\n        IERC20(pair).approve(address(router), liquidity);\\n        router.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\n\\n        emit LiquidityAndStakeRemoved(to, liquidity, pid);\\n    }\\n\\n    /**\\n     * @notice Claim rewards from each pool\\n     * @param to address that receives the rewards\\n     */\\n    function claimRewardsMulti(address to) external {\\n        require(to != address(0), \\\"KR: !address\\\");\\n\\n        uint256 length = staking.poolLength();\\n\\n        for (uint256 i; i < length; i++) {\\n            staking.claimFor(msg.sender, i, to);\\n        }\\n\\n        emit ClaimRewardsMulti(to);\\n    }\\n}\\n\",\"keccak256\":\"0xdd5669f5cc1c741d1dd1b94f773b25d70f7acb9bb42b49060bc73314b65831b7\",\"license\":\"MIT\"},\"src/contracts/staking/interfaces/IKrStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKrStaking {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256[] rewardDebts;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 depositToken; // Address of LP token contract.\\n        uint128 allocPoint; // How many allocation points assigned to this pool.\\n        uint128 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        uint256[] accRewardPerShares; // Accumulated rewards per share, times 1e12.\\n        address[] rewardTokens; // Reward tokens for this pool.\\n    }\\n\\n    struct Reward {\\n        uint256 pid;\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    function getPidFor(address _token) external view returns (uint256 pid, bool found);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function deposit(\\n        address _to,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawFor(\\n        address _for,\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _claimRewardsTo\\n    ) external;\\n\\n    function claimFor(\\n        address _for,\\n        uint256 _pid,\\n        address _rewardRecipient\\n    ) external;\\n\\n    function allPendingRewards(address) external view returns (Reward[] memory);\\n\\n    function userInfo(uint256 _pid, address _account) external view returns (UserInfo memory);\\n\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n\\n    function rewardPerBlockFor(address depositTokenAddress) external view returns (uint256[] memory rewardPerBlocks);\\n}\\n\",\"keccak256\":\"0x69a309ddb47b84913b8b6293a847e73e5f8d3a5f74fc47d65b9066cc75dcaf02\",\"license\":\"MIT\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x77483b717fd86de5cd25e59fb77d890a631951dd2b50152c237e4293cc9ce5f1\"},\"src/contracts/vendor/uniswap/v2-periphery/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x84373b2af39c116f38d7011fbdf5919540fc8c981a2e5549fe84cd9e420d88bd\"},\"src/contracts/vendor/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x050b10e6a0e134193f881aaaa56f3598a1d013bbbdbd3baf11e9b9eb79267474\"}},\"version\":1}",
    "bytecode": "0x6080346100ce57601f620015b1388190039182017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01683019167ffffffffffffffff8311848410176100d3578084926060946040528339810103126100ce5780516100be9161006d826100e9565b604060208201519161007e836100e9565b01519161008a836100e9565b9160018060a01b0380928160018060a01b031995168560005416176000551683600154161760015516906002541617600255565b6040516114a99081620001088239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116036100ce5756fe60406080815260048036101561001457600080fd5b600090813560e01c9283632df56a3f146100935750505080634cf088d91461008a578063b4c29b6814610081578063b6842c6014610078578063c45a01551461006f5763f887ea4014610067575b600080fd5b610062610eec565b50610062610e97565b50610062610cac565b506100626105dc565b50610062610587565b3461055a5760e0367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261055a578135906100ce8261055e565b602435906100db8261055e565b6044359160a435936100ec8561055e565b73ffffffffffffffffffffffffffffffffffffffff85811696909590610113881515610f41565b60015461014a9073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1690565b85517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80861684830190815290871660208281019190915291959282918791908290819060400103915afa94851561054d575b8b9561051e575b506002546101de9073ffffffffffffffffffffffffffffffffffffffff16610131565b87517fba8fc5bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716858201908152909a918d918a908d9081906020010381845afa8015610511575b829c83916104de575b5061024d90611085565b803b156104da5789517f43a4534b00000000000000000000000000000000000000000000000000000000815233818801908152602081018e9052604081018d905273ffffffffffffffffffffffffffffffffffffffff891660608201528b996103539587958f95929491939092839183919082908490829060800103925af180156104cd575b6104b4575b5080546102fa9073ffffffffffffffffffffffffffffffffffffffff16610131565b8b517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091168a82019081526020810195909552958694859391849160400190565b0393165af180156104a7575b610479575b505089548a906103899073ffffffffffffffffffffffffffffffffffffffff16610131565b85517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416948101948552968316602085015260408401899052606435606085015260843560808501529390911660a083015260c43560c0830152849291839190829060e00103925af1801561046c575b610440575b5051927f27b4eb450d703cc6355f1bc733710bf45d86de95f33ef1c672786817a5c9265d8585a4f35b61045f90823d8411610465575b6104578183611017565b81019061140b565b50610417565b503d61044d565b610474611051565b610412565b8161049892903d106104a0575b6104908183611017565b8101906110eb565b508a80610364565b503d610486565b6104af611051565b61035f565b806104c16104c792610fbe565b8061057c565b386102d8565b6104d5611051565b6102d3565b5080fd5b61024d9d5061050391508b3d8d1161050a575b6104fb8183611017565b81019061106b565b909c610243565b503d6104f1565b610519611051565b61023a565b8161053f9296503d8711610546575b6105378183611017565b810190611039565b938b6101bb565b503d61052d565b610555611051565b6101b4565b8280fd5b73ffffffffffffffffffffffffffffffffffffffff81160361006257565b600091031261006257565b5034610062576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100625760025460405173ffffffffffffffffffffffffffffffffffffffff9091168152602090f35b503461006257610100367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100625761061860043561055e565b61062360243561055e565b60c43561062f8161055e565b73ffffffffffffffffffffffffffffffffffffffff8116610651811515610f41565b6001546106739073ffffffffffffffffffffffffffffffffffffffff16610131565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff600480358216908301526024803591909116908201529290602090849081806044810103915afa928315610c9f575b600093610c7e575b506002546107089073ffffffffffffffffffffffffffffffffffffffff16610131565b604080517fba8fc5bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015291829060249082905afa8015610c71575b6000918291610c4c575b5061077090611085565b610796604435303360043573ffffffffffffffffffffffffffffffffffffffff1661111a565b6107bc606435303360243573ffffffffffffffffffffffffffffffffffffffff1661111a565b60005461083d906020906107e59073ffffffffffffffffffffffffffffffffffffffff16610131565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015260448035602483015290928391829190820190565b0381600060043573ffffffffffffffffffffffffffffffffffffffff165af18015610c3f575b610c20575b506000546108e9906020906108929073ffffffffffffffffffffffffffffffffffffffff16610131565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152606435602482015291829081906044820190565b0381600060243573ffffffffffffffffffffffffffffffffffffffff165af18015610c13575b610bf4575b506000546109379073ffffffffffffffffffffffffffffffffffffffff16610131565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6004803582169083015260248035919091169082015260448035908201526064803590820152608480359082015260a48035908201523060c482015260e48035908201529490606090869081600081610104810103925af1948515610be7575b600095610bad575b50600254610a6591602091879190610a079073ffffffffffffffffffffffffffffffffffffffff16610131565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101929092529092839190829060009082906044820190565b039273ffffffffffffffffffffffffffffffffffffffff165af18015610ba0575b610b81575b50600254610aae9073ffffffffffffffffffffffffffffffffffffffff16610131565b90813b15610062576040517f0efe6a8b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9390931660048401526024830181905260448301859052610b5d9285926000908290606490829084905af18015610b74575b610b61575b506040519485947f67153b1f92f8a4e823af8ca2fdb93c3d313b9dcb1404c5da9a9c44234a3302e9600087a482526020820190565b0390f35b806104c1610b6e92610fbe565b38610b28565b610b7c611051565b610b23565b610b999060203d6020116104a0576104908183611017565b5038610a8b565b610ba8611051565b610a86565b610a65919550610bd560209160603d8111610be0575b610bcd8183611017565b8101906110ff565b9150509591506109da565b503d610bc3565b610bef611051565b6109d2565b610c0c9060203d6020116104a0576104908183611017565b5038610914565b610c1b611051565b61090f565b610c389060203d6020116104a0576104908183611017565b5038610868565b610c47611051565b610863565b6107709250610c6a915060403d60401161050a576104fb8183611017565b9091610766565b610c79611051565b61075c565b610c9891935060203d602011610546576105378183611017565b91386106e5565b610ca7611051565b6106dd565b5034610062576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0112610062576004803590610cea8261055e565b73ffffffffffffffffffffffffffffffffffffffff821690610d0d821515610f41565b600280549091908190610d359073ffffffffffffffffffffffffffffffffffffffff16610131565b92602060409485519485809263040f1f6d60e11b82525afa928315610e8a575b600093610e5a575b5060005b838110610d94576000868651907fac4bb348f20fccad9f5419b8d566bc60a544d193931dc39efe624899e5d068b78383a2f35b8154610db59073ffffffffffffffffffffffffffffffffffffffff16610131565b90813b156100625785517fbf82b7b5000000000000000000000000000000000000000000000000000000008152338582019081526020810183905273ffffffffffffffffffffffffffffffffffffffff8a166040820152610e359360009183919082908490829060600103925af18015610e4d575b610e3a575b50611430565b610d61565b806104c1610e4792610fbe565b38610e2f565b610e55611051565b610e2a565b610e7c91935060203d8111610e83575b610e748183611017565b810190611421565b9138610d5d565b503d610e6a565b610e92611051565b610d55565b5034610062576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100625760015460405173ffffffffffffffffffffffffffffffffffffffff9091168152602090f35b5034610062576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100625760005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602090f35b15610f4857565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4b523a20216164647265737300000000000000000000000000000000000000006044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610fd257604052565b610fda610fa7565b604052565b60a0810190811067ffffffffffffffff821117610fd257604052565b6040810190811067ffffffffffffffff821117610fd257604052565b90601f8019910116810190811067ffffffffffffffff821117610fd257604052565b90816020910312610062575161104e8161055e565b90565b506040513d6000823e3d90fd5b5190811515820361006257565b91908260409103126100625761104e60208351930161105e565b1561108c57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4b523a2021706f6f6c45786973747300000000000000000000000000000000006044820152606490fd5b908160209103126100625761104e9061105e565b90816060910312610062578051916040602083015192015190565b6040517f23b872dd000000000000000000000000000000000000000000000000000000006020820190815273ffffffffffffffffffffffffffffffffffffffff938416602483015293831660448201526064808201959095529384526111e19392600092839261118986610fdf565b1690826040519561119987610ffb565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460208801526111cf843b1515611294565b51925af16111db6112fa565b90611366565b8051806111ec575050565b816020806112019361120695010191016110eb565b611208565b565b1561120f57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b1561129b57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d15611361573d9067ffffffffffffffff8211611354575b60405191611348601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184611017565b82523d6000602084013e565b61135c610fa7565b611312565b606090565b90919015611372575090565b8151156113825750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251928360248401526000915b8483106113f25750509180604493116113e5575b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101030190fd5b60008382840101526113b9565b81830181015186840160440152859350918201916113a5565b9190826040910312610062576020825192015190565b90816020910312610062575190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461145d5760010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a48ea7f508685336585a57148b7b16ae71e56b4fe9a7780dd2b8c6575959c0bd64736f6c634300080e0033",
    "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600090813560e01c9283632df56a3f146100935750505080634cf088d91461008a578063b4c29b6814610081578063b6842c6014610078578063c45a01551461006f5763f887ea4014610067575b600080fd5b610062610eec565b50610062610e97565b50610062610cac565b506100626105dc565b50610062610587565b3461055a5760e0367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261055a578135906100ce8261055e565b602435906100db8261055e565b6044359160a435936100ec8561055e565b73ffffffffffffffffffffffffffffffffffffffff85811696909590610113881515610f41565b60015461014a9073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1690565b85517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80861684830190815290871660208281019190915291959282918791908290819060400103915afa94851561054d575b8b9561051e575b506002546101de9073ffffffffffffffffffffffffffffffffffffffff16610131565b87517fba8fc5bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716858201908152909a918d918a908d9081906020010381845afa8015610511575b829c83916104de575b5061024d90611085565b803b156104da5789517f43a4534b00000000000000000000000000000000000000000000000000000000815233818801908152602081018e9052604081018d905273ffffffffffffffffffffffffffffffffffffffff891660608201528b996103539587958f95929491939092839183919082908490829060800103925af180156104cd575b6104b4575b5080546102fa9073ffffffffffffffffffffffffffffffffffffffff16610131565b8b517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091168a82019081526020810195909552958694859391849160400190565b0393165af180156104a7575b610479575b505089548a906103899073ffffffffffffffffffffffffffffffffffffffff16610131565b85517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416948101948552968316602085015260408401899052606435606085015260843560808501529390911660a083015260c43560c0830152849291839190829060e00103925af1801561046c575b610440575b5051927f27b4eb450d703cc6355f1bc733710bf45d86de95f33ef1c672786817a5c9265d8585a4f35b61045f90823d8411610465575b6104578183611017565b81019061140b565b50610417565b503d61044d565b610474611051565b610412565b8161049892903d106104a0575b6104908183611017565b8101906110eb565b508a80610364565b503d610486565b6104af611051565b61035f565b806104c16104c792610fbe565b8061057c565b386102d8565b6104d5611051565b6102d3565b5080fd5b61024d9d5061050391508b3d8d1161050a575b6104fb8183611017565b81019061106b565b909c610243565b503d6104f1565b610519611051565b61023a565b8161053f9296503d8711610546575b6105378183611017565b810190611039565b938b6101bb565b503d61052d565b610555611051565b6101b4565b8280fd5b73ffffffffffffffffffffffffffffffffffffffff81160361006257565b600091031261006257565b5034610062576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100625760025460405173ffffffffffffffffffffffffffffffffffffffff9091168152602090f35b503461006257610100367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100625761061860043561055e565b61062360243561055e565b60c43561062f8161055e565b73ffffffffffffffffffffffffffffffffffffffff8116610651811515610f41565b6001546106739073ffffffffffffffffffffffffffffffffffffffff16610131565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff600480358216908301526024803591909116908201529290602090849081806044810103915afa928315610c9f575b600093610c7e575b506002546107089073ffffffffffffffffffffffffffffffffffffffff16610131565b604080517fba8fc5bf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015291829060249082905afa8015610c71575b6000918291610c4c575b5061077090611085565b610796604435303360043573ffffffffffffffffffffffffffffffffffffffff1661111a565b6107bc606435303360243573ffffffffffffffffffffffffffffffffffffffff1661111a565b60005461083d906020906107e59073ffffffffffffffffffffffffffffffffffffffff16610131565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015260448035602483015290928391829190820190565b0381600060043573ffffffffffffffffffffffffffffffffffffffff165af18015610c3f575b610c20575b506000546108e9906020906108929073ffffffffffffffffffffffffffffffffffffffff16610131565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152606435602482015291829081906044820190565b0381600060243573ffffffffffffffffffffffffffffffffffffffff165af18015610c13575b610bf4575b506000546109379073ffffffffffffffffffffffffffffffffffffffff16610131565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6004803582169083015260248035919091169082015260448035908201526064803590820152608480359082015260a48035908201523060c482015260e48035908201529490606090869081600081610104810103925af1948515610be7575b600095610bad575b50600254610a6591602091879190610a079073ffffffffffffffffffffffffffffffffffffffff16610131565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101929092529092839190829060009082906044820190565b039273ffffffffffffffffffffffffffffffffffffffff165af18015610ba0575b610b81575b50600254610aae9073ffffffffffffffffffffffffffffffffffffffff16610131565b90813b15610062576040517f0efe6a8b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9390931660048401526024830181905260448301859052610b5d9285926000908290606490829084905af18015610b74575b610b61575b506040519485947f67153b1f92f8a4e823af8ca2fdb93c3d313b9dcb1404c5da9a9c44234a3302e9600087a482526020820190565b0390f35b806104c1610b6e92610fbe565b38610b28565b610b7c611051565b610b23565b610b999060203d6020116104a0576104908183611017565b5038610a8b565b610ba8611051565b610a86565b610a65919550610bd560209160603d8111610be0575b610bcd8183611017565b8101906110ff565b9150509591506109da565b503d610bc3565b610bef611051565b6109d2565b610c0c9060203d6020116104a0576104908183611017565b5038610914565b610c1b611051565b61090f565b610c389060203d6020116104a0576104908183611017565b5038610868565b610c47611051565b610863565b6107709250610c6a915060403d60401161050a576104fb8183611017565b9091610766565b610c79611051565b61075c565b610c9891935060203d602011610546576105378183611017565b91386106e5565b610ca7611051565b6106dd565b5034610062576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0112610062576004803590610cea8261055e565b73ffffffffffffffffffffffffffffffffffffffff821690610d0d821515610f41565b600280549091908190610d359073ffffffffffffffffffffffffffffffffffffffff16610131565b92602060409485519485809263040f1f6d60e11b82525afa928315610e8a575b600093610e5a575b5060005b838110610d94576000868651907fac4bb348f20fccad9f5419b8d566bc60a544d193931dc39efe624899e5d068b78383a2f35b8154610db59073ffffffffffffffffffffffffffffffffffffffff16610131565b90813b156100625785517fbf82b7b5000000000000000000000000000000000000000000000000000000008152338582019081526020810183905273ffffffffffffffffffffffffffffffffffffffff8a166040820152610e359360009183919082908490829060600103925af18015610e4d575b610e3a575b50611430565b610d61565b806104c1610e4792610fbe565b38610e2f565b610e55611051565b610e2a565b610e7c91935060203d8111610e83575b610e748183611017565b810190611421565b9138610d5d565b503d610e6a565b610e92611051565b610d55565b5034610062576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100625760015460405173ffffffffffffffffffffffffffffffffffffffff9091168152602090f35b5034610062576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01126100625760005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602090f35b15610f4857565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4b523a20216164647265737300000000000000000000000000000000000000006044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610fd257604052565b610fda610fa7565b604052565b60a0810190811067ffffffffffffffff821117610fd257604052565b6040810190811067ffffffffffffffff821117610fd257604052565b90601f8019910116810190811067ffffffffffffffff821117610fd257604052565b90816020910312610062575161104e8161055e565b90565b506040513d6000823e3d90fd5b5190811515820361006257565b91908260409103126100625761104e60208351930161105e565b1561108c57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4b523a2021706f6f6c45786973747300000000000000000000000000000000006044820152606490fd5b908160209103126100625761104e9061105e565b90816060910312610062578051916040602083015192015190565b6040517f23b872dd000000000000000000000000000000000000000000000000000000006020820190815273ffffffffffffffffffffffffffffffffffffffff938416602483015293831660448201526064808201959095529384526111e19392600092839261118986610fdf565b1690826040519561119987610ffb565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460208801526111cf843b1515611294565b51925af16111db6112fa565b90611366565b8051806111ec575050565b816020806112019361120695010191016110eb565b611208565b565b1561120f57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b1561129b57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d15611361573d9067ffffffffffffffff8211611354575b60405191611348601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184611017565b82523d6000602084013e565b61135c610fa7565b611312565b606090565b90919015611372575090565b8151156113825750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251928360248401526000915b8483106113f25750509180604493116113e5575b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101030190fd5b60008382840101526113b9565b81830181015186840160440152859350918201916113a5565b9190826040910312610062576020825192015190565b90816020910312610062575190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461145d5760010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a48ea7f508685336585a57148b7b16ae71e56b4fe9a7780dd2b8c6575959c0bd64736f6c634300080e0033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
                "params": {
                    "amountADesired": "optimal amount of token A",
                    "amountAMin": "min amountA (slippage)",
                    "amountBDesired": "optimal amount of token B",
                    "amountBMin": "min amountB (slippage)",
                    "deadline": "transaction deadline (used by router)",
                    "to": "address to deposit for",
                    "tokenA": "address of tokenA",
                    "tokenB": "address of tokenB"
                }
            },
            "claimRewardsMulti(address)": {
                "params": {
                    "to": "address that receives the rewards"
                }
            },
            "withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
                "params": {
                    "amountAMin": "min amountA to receive (slippage)",
                    "amountBMin": "min amountB to receive (slippage)",
                    "deadline": "transaction deadline (used by router)",
                    "liquidity": "liquidity token amount to remove",
                    "to": "address that receives the underlying",
                    "tokenA": "address of tokenA",
                    "tokenB": "address of tokenB"
                }
            }
        },
        "version": 1
    },
    "userdoc": {
        "events": {
            "LiquidityAndStakeAdded(address,uint256,uint256)": {
                "notice": "================================================== ============ Events ============================== =================================================="
            }
        },
        "kind": "user",
        "methods": {
            "addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
                "notice": "Add liquidity to a pair, deposit liquidity tokens to staking"
            },
            "claimRewardsMulti(address)": {
                "notice": "Claim rewards from each pool"
            },
            "withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
                "notice": "Withdraw liquidity tokens from staking, remove the underlying"
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 30055,
                "contract": "src/contracts/staking/KrStakingHelper.sol:KrStakingHelper",
                "label": "router",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(IUniswapV2Router02)37206"
            },
            {
                "astId": 30058,
                "contract": "src/contracts/staking/KrStakingHelper.sol:KrStakingHelper",
                "label": "factory",
                "offset": 0,
                "slot": "1",
                "type": "t_contract(IUniswapV2Factory)36468"
            },
            {
                "astId": 30061,
                "contract": "src/contracts/staking/KrStakingHelper.sol:KrStakingHelper",
                "label": "staking",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(IKrStaking)30503"
            }
        ],
        "types": {
            "t_contract(IKrStaking)30503": {
                "encoding": "inplace",
                "label": "contract IKrStaking",
                "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Factory)36468": {
                "encoding": "inplace",
                "label": "contract IUniswapV2Factory",
                "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)37206": {
                "encoding": "inplace",
                "label": "contract IUniswapV2Router02",
                "numberOfBytes": "20"
            }
        }
    }
}
