{
  "address": "0x232d36020fbCa3b0A11Ecd1F05da04CE44af0Ef9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IKrStaking",
          "name": "_staking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ClaimRewardsMulti",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAndStakeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAndStakeRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityAndStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimRewardsMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IKrStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndRemoveLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x000688a35f4294c6662790c80dde98d72cbf80b491f914eb6f75e1835dc2f2bb",
  "receipt": {
    "to": null,
    "from": "0x2121245dcAD697f11244068AaD6EcbC301811239",
    "contractAddress": "0x232d36020fbCa3b0A11Ecd1F05da04CE44af0Ef9",
    "transactionIndex": 0,
    "gasUsed": "1671522",
    "logsBloom": "0x
    "blockHash": "0xea2230eaf0f9bc1350cec4d61cdc94189006fb4f5e8394f632ec0f32a4a7df9d",
    "transactionHash": "0x000688a35f4294c6662790c80dde98d72cbf80b491f914eb6f75e1835dc2f2bb",
    "logs": [],
    "blockNumber": 3601038,
    "cumulativeGasUsed": "1671522",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB3AD7504D0391c2cd527bed4a3D8BE9983395b16",
    "0x38bf03AA1a152AAF696e79b4b4772a4F95Ef21f0",
    "0xCE6D339aCaEd5C5252E998B441a212421DA7b489"
  ],
  "numDeployments": 1,
  "solcInputHash": "0ce1e08460d17f4712f59fc37114fb55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IKrStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimRewardsMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"LiquidityAndStakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"LiquidityAndStakeRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityAndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewardsMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IKrStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawAndRemoveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountADesired\":\"optimal amount of token A\",\"amountAMin\":\"min amountA (slippage)\",\"amountBDesired\":\"optimal amount of token B\",\"amountBMin\":\"min amountB (slippage)\",\"deadline\":\"transaction deadline (used by router)\",\"to\":\"address to deposit for\",\"tokenA\":\"address of tokenA\",\"tokenB\":\"address of tokenB\"}},\"claimRewardsMulti(address)\":{\"params\":{\"to\":\"address that receives the rewards\"}},\"withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountAMin\":\"min amountA to receive (slippage)\",\"amountBMin\":\"min amountB to receive (slippage)\",\"deadline\":\"transaction deadline (used by router)\",\"liquidity\":\"liquidity token amount to remove\",\"to\":\"address that receives the underlying\",\"tokenA\":\"address of tokenA\",\"tokenB\":\"address of tokenB\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LiquidityAndStakeAdded(address,uint256,uint256)\":{\"notice\":\"================================================== ============ Events ============================== ==================================================\"}},\"kind\":\"user\",\"methods\":{\"addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Add liquidity to a pair, deposit liquidity tokens to staking\"},\"claimRewardsMulti(address)\":{\"notice\":\"Claim rewards from each pool\"},\"withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraw liquidity tokens from staking, remove the underlying\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/staking/KrStakingHelper.sol\":\"KrStakingHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"src/contracts/staking/KrStakingHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IUniswapV2Factory} from \\\"../vendor/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\\\";\\nimport {IUniswapV2Router02} from \\\"../vendor/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IKrStaking.sol\\\";\\n\\ncontract KrStakingHelper {\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Router02 public router;\\n    IUniswapV2Factory public factory;\\n    IKrStaking public staking;\\n\\n    constructor(\\n        IUniswapV2Router02 _router,\\n        IUniswapV2Factory _factory,\\n        IKrStaking _staking\\n    ) {\\n        router = _router;\\n        factory = _factory;\\n        staking = _staking;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============ Events ==============================\\n     * ==================================================\\n     */\\n\\n    event LiquidityAndStakeAdded(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event LiquidityAndStakeRemoved(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event ClaimRewardsMulti(address indexed to);\\n\\n    /**\\n     * ==================================================\\n     * ============ Public functions ====================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Add liquidity to a pair, deposit liquidity tokens to staking\\n     * @param tokenA address of tokenA\\n     * @param tokenB address of tokenB\\n     * @param amountADesired optimal amount of token A\\n     * @param amountBDesired optimal amount of token B\\n     * @param amountAMin min amountA (slippage)\\n     * @param amountBMin min amountB (slippage)\\n     * @param to address to deposit for\\n     * @param deadline transaction deadline (used by router)\\n     */\\n    function addLiquidityAndStake(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        require(to != address(0), \\\"KR: !address\\\");\\n        address pair = factory.getPair(tokenA, tokenB);\\n        (uint256 pid, bool found) = staking.getPidFor(pair);\\n\\n        require(found, \\\"KR: !poolExists\\\");\\n\\n        IERC20(tokenA).safeTransferFrom(msg.sender, address(this), amountADesired);\\n        IERC20(tokenB).safeTransferFrom(msg.sender, address(this), amountBDesired);\\n\\n        IERC20(tokenA).approve(address(router), amountADesired);\\n        IERC20(tokenB).approve(address(router), amountBDesired);\\n\\n        (, , uint256 liquidity) = router.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            address(this),\\n            deadline\\n        );\\n\\n        IERC20(pair).approve(address(staking), liquidity);\\n        staking.deposit(to, pid, liquidity);\\n\\n        emit LiquidityAndStakeAdded(to, liquidity, pid);\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @notice Withdraw liquidity tokens from staking, remove the underlying\\n     * @param tokenA address of tokenA\\n     * @param tokenB address of tokenB\\n     * @param liquidity liquidity token amount to remove\\n     * @param amountAMin min amountA to receive (slippage)\\n     * @param amountBMin min amountB to receive (slippage)\\n     * @param to address that receives the underlying\\n     * @param deadline transaction deadline (used by router)\\n     */\\n    function withdrawAndRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external {\\n        require(to != address(0), \\\"KR: !address\\\");\\n        address pair = factory.getPair(tokenA, tokenB);\\n        (uint256 pid, bool found) = staking.getPidFor(pair);\\n\\n        require(found, \\\"KR: !poolExists\\\");\\n\\n        staking.withdrawFor(msg.sender, pid, liquidity, to);\\n\\n        IERC20(pair).approve(address(router), liquidity);\\n        router.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\n\\n        emit LiquidityAndStakeRemoved(to, liquidity, pid);\\n    }\\n\\n    /**\\n     * @notice Claim rewards from each pool\\n     * @param to address that receives the rewards\\n     */\\n    function claimRewardsMulti(address to) external {\\n        require(to != address(0), \\\"KR: !address\\\");\\n\\n        uint256 length = staking.poolLength();\\n\\n        for (uint256 i; i < length; i++) {\\n            staking.claimFor(msg.sender, i, to);\\n        }\\n\\n        emit ClaimRewardsMulti(to);\\n    }\\n}\\n\",\"keccak256\":\"0xdd5669f5cc1c741d1dd1b94f773b25d70f7acb9bb42b49060bc73314b65831b7\",\"license\":\"MIT\"},\"src/contracts/staking/interfaces/IKrStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKrStaking {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256[] rewardDebts;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 depositToken; // Address of LP token contract.\\n        uint128 allocPoint; // How many allocation points assigned to this pool.\\n        uint128 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        uint256[] accRewardPerShares; // Accumulated rewards per share, times 1e12.\\n        address[] rewardTokens; // Reward tokens for this pool.\\n    }\\n\\n    struct Reward {\\n        uint256 pid;\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    function getPidFor(address _token) external view returns (uint256 pid, bool found);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function deposit(\\n        address _to,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawFor(\\n        address _for,\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _claimRewardsTo\\n    ) external;\\n\\n    function claimFor(\\n        address _for,\\n        uint256 _pid,\\n        address _rewardRecipient\\n    ) external;\\n\\n    function allPendingRewards(address) external view returns (Reward[] memory);\\n\\n    function userInfo(uint256 _pid, address _account) external view returns (UserInfo memory);\\n\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n\\n    function rewardPerBlockFor(address depositTokenAddress) external view returns (uint256[] memory rewardPerBlocks);\\n}\\n\",\"keccak256\":\"0x69a309ddb47b84913b8b6293a847e73e5f8d3a5f74fc47d65b9066cc75dcaf02\",\"license\":\"MIT\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x77483b717fd86de5cd25e59fb77d890a631951dd2b50152c237e4293cc9ce5f1\"},\"src/contracts/vendor/uniswap/v2-periphery/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x84373b2af39c116f38d7011fbdf5919540fc8c981a2e5549fe84cd9e420d88bd\"},\"src/contracts/vendor/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x050b10e6a0e134193f881aaaa56f3598a1d013bbbdbd3baf11e9b9eb79267474\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e6d38038062001e6d83398181016040528101906200003791906200020a565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000266565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001348262000107565b9050919050565b6000620001488262000127565b9050919050565b6200015a816200013b565b81146200016657600080fd5b50565b6000815190506200017a816200014f565b92915050565b60006200018d8262000127565b9050919050565b6200019f8162000180565b8114620001ab57600080fd5b50565b600081519050620001bf8162000194565b92915050565b6000620001d28262000127565b9050919050565b620001e481620001c5565b8114620001f057600080fd5b50565b6000815190506200020481620001d9565b92915050565b60008060006060848603121562000226576200022562000102565b5b6000620002368682870162000169565b93505060206200024986828701620001ae565b92505060406200025c86828701620001f3565b9150509250925092565b611bf780620002766000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632df56a3f146100675780634cf088d914610083578063b4c29b68146100a1578063b6842c60146100d1578063c45a0155146100ed578063f887ea401461010b575b600080fd5b610081600480360381019061007c9190611119565b610129565b005b61008b610548565b604051610098919061121a565b60405180910390f35b6100bb60048036038101906100b69190611235565b61056e565b6040516100c891906112fa565b60405180910390f35b6100eb60048036038101906100e69190611315565b610b35565b005b6100f5610d30565b6040516101029190611363565b60405180910390f35b610113610d56565b604051610120919061139f565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018f90611417565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390589896040518363ffffffff1660e01b81526004016101f7929190611446565b602060405180830381865afa158015610214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102389190611484565b9050600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba8fc5bf846040518263ffffffff1660e01b815260040161029891906114b1565b6040805180830381865afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190611519565b915091508061031c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610313906115a5565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343a4534b33848b896040518563ffffffff1660e01b815260040161037d94939291906115c5565b600060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a6040518363ffffffff1660e01b815260040161040a92919061160a565b6020604051808303816000875af1158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190611633565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663baa2abde8b8b8b8b8b8b8b6040518863ffffffff1660e01b81526004016104b39796959493929190611660565b60408051808303816000875af11580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f591906116cf565b505081888673ffffffffffffffffffffffffffffffffffffffff167f27b4eb450d703cc6355f1bc733710bf45d86de95f33ef1c672786817a5c9265d60405160405180910390a450505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611417565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a439058b8b6040518363ffffffff1660e01b815260040161063d929190611446565b602060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190611484565b9050600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba8fc5bf846040518263ffffffff1660e01b81526004016106de91906114b1565b6040805180830381865afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190611519565b9150915080610762576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610759906115a5565b60405180910390fd5b61078f33308c8f73ffffffffffffffffffffffffffffffffffffffff16610d7a909392919063ffffffff16565b6107bc33308b8e73ffffffffffffffffffffffffffffffffffffffff16610d7a909392919063ffffffff16565b8b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c6040518363ffffffff1660e01b815260040161081792919061160a565b6020604051808303816000875af1158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190611633565b508a73ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6040518363ffffffff1660e01b81526004016108b692919061160a565b6020604051808303816000875af11580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f99190611633565b5060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e337008e8e8e8e8e8e308e6040518963ffffffff1660e01b815260040161096498979695949392919061170f565b6060604051808303816000875af1158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a7919061178d565b925050508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610a0892919061160a565b6020604051808303816000875af1158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4b9190611633565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630efe6a8b8885846040518463ffffffff1660e01b8152600401610aab939291906117e0565b600060405180830381600087803b158015610ac557600080fd5b505af1158015610ad9573d6000803e3d6000fd5b5050505082818873ffffffffffffffffffffffffffffffffffffffff167f67153b1f92f8a4e823af8ca2fdb93c3d313b9dcb1404c5da9a9c44234a3302e960405160405180910390a48094505050505098975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b90611417565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081e3eda6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c379190611817565b905060005b81811015610ce857600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf82b7b53383866040518463ffffffff1660e01b8152600401610ca393929190611844565b600060405180830381600087803b158015610cbd57600080fd5b505af1158015610cd1573d6000803e3d6000fd5b505050508080610ce0906118aa565b915050610c3c565b508173ffffffffffffffffffffffffffffffffffffffff167fac4bb348f20fccad9f5419b8d566bc60a544d193931dc39efe624899e5d068b760405160405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610dfd846323b872dd60e01b858585604051602401610d9b939291906118f2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e03565b50505050565b6000610e65826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610eca9092919063ffffffff16565b9050600081511115610ec55780806020019051810190610e859190611633565b610ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebb9061199b565b60405180910390fd5b5b505050565b6060610ed98484600085610ee2565b90509392505050565b606082471015610f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1e90611a2d565b60405180910390fd5b610f3085610ff6565b610f6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6690611a99565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610f989190611b33565b60006040518083038185875af1925050503d8060008114610fd5576040519150601f19603f3d011682016040523d82523d6000602084013e610fda565b606091505b5091509150610fea828286611019565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561102957829050611079565b60008351111561103c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110709190611b9f565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110b082611085565b9050919050565b6110c0816110a5565b81146110cb57600080fd5b50565b6000813590506110dd816110b7565b92915050565b6000819050919050565b6110f6816110e3565b811461110157600080fd5b50565b600081359050611113816110ed565b92915050565b600080600080600080600060e0888a03121561113857611137611080565b5b60006111468a828b016110ce565b97505060206111578a828b016110ce565b96505060406111688a828b01611104565b95505060606111798a828b01611104565b945050608061118a8a828b01611104565b93505060a061119b8a828b016110ce565b92505060c06111ac8a828b01611104565b91505092959891949750929550565b6000819050919050565b60006111e06111db6111d684611085565b6111bb565b611085565b9050919050565b60006111f2826111c5565b9050919050565b6000611204826111e7565b9050919050565b611214816111f9565b82525050565b600060208201905061122f600083018461120b565b92915050565b600080600080600080600080610100898b03121561125657611255611080565b5b60006112648b828c016110ce565b98505060206112758b828c016110ce565b97505060406112868b828c01611104565b96505060606112978b828c01611104565b95505060806112a88b828c01611104565b94505060a06112b98b828c01611104565b93505060c06112ca8b828c016110ce565b92505060e06112db8b828c01611104565b9150509295985092959890939650565b6112f4816110e3565b82525050565b600060208201905061130f60008301846112eb565b92915050565b60006020828403121561132b5761132a611080565b5b6000611339848285016110ce565b91505092915050565b600061134d826111e7565b9050919050565b61135d81611342565b82525050565b60006020820190506113786000830184611354565b92915050565b6000611389826111e7565b9050919050565b6113998161137e565b82525050565b60006020820190506113b46000830184611390565b92915050565b600082825260208201905092915050565b7f4b523a2021616464726573730000000000000000000000000000000000000000600082015250565b6000611401600c836113ba565b915061140c826113cb565b602082019050919050565b60006020820190508181036000830152611430816113f4565b9050919050565b611440816110a5565b82525050565b600060408201905061145b6000830185611437565b6114686020830184611437565b9392505050565b60008151905061147e816110b7565b92915050565b60006020828403121561149a57611499611080565b5b60006114a88482850161146f565b91505092915050565b60006020820190506114c66000830184611437565b92915050565b6000815190506114db816110ed565b92915050565b60008115159050919050565b6114f6816114e1565b811461150157600080fd5b50565b600081519050611513816114ed565b92915050565b600080604083850312156115305761152f611080565b5b600061153e858286016114cc565b925050602061154f85828601611504565b9150509250929050565b7f4b523a2021706f6f6c4578697374730000000000000000000000000000000000600082015250565b600061158f600f836113ba565b915061159a82611559565b602082019050919050565b600060208201905081810360008301526115be81611582565b9050919050565b60006080820190506115da6000830187611437565b6115e760208301866112eb565b6115f460408301856112eb565b6116016060830184611437565b95945050505050565b600060408201905061161f6000830185611437565b61162c60208301846112eb565b9392505050565b60006020828403121561164957611648611080565b5b600061165784828501611504565b91505092915050565b600060e082019050611675600083018a611437565b6116826020830189611437565b61168f60408301886112eb565b61169c60608301876112eb565b6116a960808301866112eb565b6116b660a0830185611437565b6116c360c08301846112eb565b98975050505050505050565b600080604083850312156116e6576116e5611080565b5b60006116f4858286016114cc565b9250506020611705858286016114cc565b9150509250929050565b600061010082019050611725600083018b611437565b611732602083018a611437565b61173f60408301896112eb565b61174c60608301886112eb565b61175960808301876112eb565b61176660a08301866112eb565b61177360c0830185611437565b61178060e08301846112eb565b9998505050505050505050565b6000806000606084860312156117a6576117a5611080565b5b60006117b4868287016114cc565b93505060206117c5868287016114cc565b92505060406117d6868287016114cc565b9150509250925092565b60006060820190506117f56000830186611437565b61180260208301856112eb565b61180f60408301846112eb565b949350505050565b60006020828403121561182d5761182c611080565b5b600061183b848285016114cc565b91505092915050565b60006060820190506118596000830186611437565b61186660208301856112eb565b6118736040830184611437565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118b5826110e3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118e7576118e661187b565b5b600182019050919050565b60006060820190506119076000830186611437565b6119146020830185611437565b61192160408301846112eb565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611985602a836113ba565b915061199082611929565b604082019050919050565b600060208201905081810360008301526119b481611978565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611a176026836113ba565b9150611a22826119bb565b604082019050919050565b60006020820190508181036000830152611a4681611a0a565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611a83601d836113ba565b9150611a8e82611a4d565b602082019050919050565b60006020820190508181036000830152611ab281611a76565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611aed578082015181840152602081019050611ad2565b83811115611afc576000848401525b50505050565b6000611b0d82611ab9565b611b178185611ac4565b9350611b27818560208601611acf565b80840191505092915050565b6000611b3f8284611b02565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000611b7182611b4a565b611b7b81856113ba565b9350611b8b818560208601611acf565b611b9481611b55565b840191505092915050565b60006020820190508181036000830152611bb98184611b66565b90509291505056fea26469706673582212208c44011c90535506d6200637c490b73df6b8a547b8f463d7193e66f343d2cf7864736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80632df56a3f146100675780634cf088d914610083578063b4c29b68146100a1578063b6842c60146100d1578063c45a0155146100ed578063f887ea401461010b575b600080fd5b610081600480360381019061007c9190611119565b610129565b005b61008b610548565b604051610098919061121a565b60405180910390f35b6100bb60048036038101906100b69190611235565b61056e565b6040516100c891906112fa565b60405180910390f35b6100eb60048036038101906100e69190611315565b610b35565b005b6100f5610d30565b6040516101029190611363565b60405180910390f35b610113610d56565b604051610120919061139f565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018f90611417565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390589896040518363ffffffff1660e01b81526004016101f7929190611446565b602060405180830381865afa158015610214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102389190611484565b9050600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba8fc5bf846040518263ffffffff1660e01b815260040161029891906114b1565b6040805180830381865afa1580156102b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d89190611519565b915091508061031c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610313906115a5565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343a4534b33848b896040518563ffffffff1660e01b815260040161037d94939291906115c5565b600060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a6040518363ffffffff1660e01b815260040161040a92919061160a565b6020604051808303816000875af1158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190611633565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663baa2abde8b8b8b8b8b8b8b6040518863ffffffff1660e01b81526004016104b39796959493929190611660565b60408051808303816000875af11580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f591906116cf565b505081888673ffffffffffffffffffffffffffffffffffffffff167f27b4eb450d703cc6355f1bc733710bf45d86de95f33ef1c672786817a5c9265d60405160405180910390a450505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611417565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a439058b8b6040518363ffffffff1660e01b815260040161063d929190611446565b602060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190611484565b9050600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba8fc5bf846040518263ffffffff1660e01b81526004016106de91906114b1565b6040805180830381865afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190611519565b9150915080610762576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610759906115a5565b60405180910390fd5b61078f33308c8f73ffffffffffffffffffffffffffffffffffffffff16610d7a909392919063ffffffff16565b6107bc33308b8e73ffffffffffffffffffffffffffffffffffffffff16610d7a909392919063ffffffff16565b8b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c6040518363ffffffff1660e01b815260040161081792919061160a565b6020604051808303816000875af1158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190611633565b508a73ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6040518363ffffffff1660e01b81526004016108b692919061160a565b6020604051808303816000875af11580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f99190611633565b5060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e337008e8e8e8e8e8e308e6040518963ffffffff1660e01b815260040161096498979695949392919061170f565b6060604051808303816000875af1158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a7919061178d565b925050508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610a0892919061160a565b6020604051808303816000875af1158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4b9190611633565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630efe6a8b8885846040518463ffffffff1660e01b8152600401610aab939291906117e0565b600060405180830381600087803b158015610ac557600080fd5b505af1158015610ad9573d6000803e3d6000fd5b5050505082818873ffffffffffffffffffffffffffffffffffffffff167f67153b1f92f8a4e823af8ca2fdb93c3d313b9dcb1404c5da9a9c44234a3302e960405160405180910390a48094505050505098975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b90611417565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081e3eda6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c379190611817565b905060005b81811015610ce857600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf82b7b53383866040518463ffffffff1660e01b8152600401610ca393929190611844565b600060405180830381600087803b158015610cbd57600080fd5b505af1158015610cd1573d6000803e3d6000fd5b505050508080610ce0906118aa565b915050610c3c565b508173ffffffffffffffffffffffffffffffffffffffff167fac4bb348f20fccad9f5419b8d566bc60a544d193931dc39efe624899e5d068b760405160405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610dfd846323b872dd60e01b858585604051602401610d9b939291906118f2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e03565b50505050565b6000610e65826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610eca9092919063ffffffff16565b9050600081511115610ec55780806020019051810190610e859190611633565b610ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebb9061199b565b60405180910390fd5b5b505050565b6060610ed98484600085610ee2565b90509392505050565b606082471015610f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1e90611a2d565b60405180910390fd5b610f3085610ff6565b610f6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6690611a99565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610f989190611b33565b60006040518083038185875af1925050503d8060008114610fd5576040519150601f19603f3d011682016040523d82523d6000602084013e610fda565b606091505b5091509150610fea828286611019565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561102957829050611079565b60008351111561103c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110709190611b9f565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110b082611085565b9050919050565b6110c0816110a5565b81146110cb57600080fd5b50565b6000813590506110dd816110b7565b92915050565b6000819050919050565b6110f6816110e3565b811461110157600080fd5b50565b600081359050611113816110ed565b92915050565b600080600080600080600060e0888a03121561113857611137611080565b5b60006111468a828b016110ce565b97505060206111578a828b016110ce565b96505060406111688a828b01611104565b95505060606111798a828b01611104565b945050608061118a8a828b01611104565b93505060a061119b8a828b016110ce565b92505060c06111ac8a828b01611104565b91505092959891949750929550565b6000819050919050565b60006111e06111db6111d684611085565b6111bb565b611085565b9050919050565b60006111f2826111c5565b9050919050565b6000611204826111e7565b9050919050565b611214816111f9565b82525050565b600060208201905061122f600083018461120b565b92915050565b600080600080600080600080610100898b03121561125657611255611080565b5b60006112648b828c016110ce565b98505060206112758b828c016110ce565b97505060406112868b828c01611104565b96505060606112978b828c01611104565b95505060806112a88b828c01611104565b94505060a06112b98b828c01611104565b93505060c06112ca8b828c016110ce565b92505060e06112db8b828c01611104565b9150509295985092959890939650565b6112f4816110e3565b82525050565b600060208201905061130f60008301846112eb565b92915050565b60006020828403121561132b5761132a611080565b5b6000611339848285016110ce565b91505092915050565b600061134d826111e7565b9050919050565b61135d81611342565b82525050565b60006020820190506113786000830184611354565b92915050565b6000611389826111e7565b9050919050565b6113998161137e565b82525050565b60006020820190506113b46000830184611390565b92915050565b600082825260208201905092915050565b7f4b523a2021616464726573730000000000000000000000000000000000000000600082015250565b6000611401600c836113ba565b915061140c826113cb565b602082019050919050565b60006020820190508181036000830152611430816113f4565b9050919050565b611440816110a5565b82525050565b600060408201905061145b6000830185611437565b6114686020830184611437565b9392505050565b60008151905061147e816110b7565b92915050565b60006020828403121561149a57611499611080565b5b60006114a88482850161146f565b91505092915050565b60006020820190506114c66000830184611437565b92915050565b6000815190506114db816110ed565b92915050565b60008115159050919050565b6114f6816114e1565b811461150157600080fd5b50565b600081519050611513816114ed565b92915050565b600080604083850312156115305761152f611080565b5b600061153e858286016114cc565b925050602061154f85828601611504565b9150509250929050565b7f4b523a2021706f6f6c4578697374730000000000000000000000000000000000600082015250565b600061158f600f836113ba565b915061159a82611559565b602082019050919050565b600060208201905081810360008301526115be81611582565b9050919050565b60006080820190506115da6000830187611437565b6115e760208301866112eb565b6115f460408301856112eb565b6116016060830184611437565b95945050505050565b600060408201905061161f6000830185611437565b61162c60208301846112eb565b9392505050565b60006020828403121561164957611648611080565b5b600061165784828501611504565b91505092915050565b600060e082019050611675600083018a611437565b6116826020830189611437565b61168f60408301886112eb565b61169c60608301876112eb565b6116a960808301866112eb565b6116b660a0830185611437565b6116c360c08301846112eb565b98975050505050505050565b600080604083850312156116e6576116e5611080565b5b60006116f4858286016114cc565b9250506020611705858286016114cc565b9150509250929050565b600061010082019050611725600083018b611437565b611732602083018a611437565b61173f60408301896112eb565b61174c60608301886112eb565b61175960808301876112eb565b61176660a08301866112eb565b61177360c0830185611437565b61178060e08301846112eb565b9998505050505050505050565b6000806000606084860312156117a6576117a5611080565b5b60006117b4868287016114cc565b93505060206117c5868287016114cc565b92505060406117d6868287016114cc565b9150509250925092565b60006060820190506117f56000830186611437565b61180260208301856112eb565b61180f60408301846112eb565b949350505050565b60006020828403121561182d5761182c611080565b5b600061183b848285016114cc565b91505092915050565b60006060820190506118596000830186611437565b61186660208301856112eb565b6118736040830184611437565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118b5826110e3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118e7576118e661187b565b5b600182019050919050565b60006060820190506119076000830186611437565b6119146020830185611437565b61192160408301846112eb565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611985602a836113ba565b915061199082611929565b604082019050919050565b600060208201905081810360008301526119b481611978565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611a176026836113ba565b9150611a22826119bb565b604082019050919050565b60006020820190508181036000830152611a4681611a0a565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611a83601d836113ba565b9150611a8e82611a4d565b602082019050919050565b60006020820190508181036000830152611ab281611a76565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611aed578082015181840152602081019050611ad2565b83811115611afc576000848401525b50505050565b6000611b0d82611ab9565b611b178185611ac4565b9350611b27818560208601611acf565b80840191505092915050565b6000611b3f8284611b02565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000611b7182611b4a565b611b7b81856113ba565b9350611b8b818560208601611acf565b611b9481611b55565b840191505092915050565b60006020820190508181036000830152611bb98184611b66565b90509291505056fea26469706673582212208c44011c90535506d6200637c490b73df6b8a547b8f463d7193e66f343d2cf7864736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "amountADesired": "optimal amount of token A",
          "amountAMin": "min amountA (slippage)",
          "amountBDesired": "optimal amount of token B",
          "amountBMin": "min amountB (slippage)",
          "deadline": "transaction deadline (used by router)",
          "to": "address to deposit for",
          "tokenA": "address of tokenA",
          "tokenB": "address of tokenB"
        }
      },
      "claimRewardsMulti(address)": {
        "params": {
          "to": "address that receives the rewards"
        }
      },
      "withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "amountAMin": "min amountA to receive (slippage)",
          "amountBMin": "min amountB to receive (slippage)",
          "deadline": "transaction deadline (used by router)",
          "liquidity": "liquidity token amount to remove",
          "to": "address that receives the underlying",
          "tokenA": "address of tokenA",
          "tokenB": "address of tokenB"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LiquidityAndStakeAdded(address,uint256,uint256)": {
        "notice": "================================================== ============ Events ============================== =================================================="
      }
    },
    "kind": "user",
    "methods": {
      "addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Add liquidity to a pair, deposit liquidity tokens to staking"
      },
      "claimRewardsMulti(address)": {
        "notice": "Claim rewards from each pool"
      },
      "withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Withdraw liquidity tokens from staking, remove the underlying"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29878,
        "contract": "src/contracts/staking/KrStakingHelper.sol:KrStakingHelper",
        "label": "router",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IUniswapV2Router02)36720"
      },
      {
        "astId": 29881,
        "contract": "src/contracts/staking/KrStakingHelper.sol:KrStakingHelper",
        "label": "factory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUniswapV2Factory)35982"
      },
      {
        "astId": 29884,
        "contract": "src/contracts/staking/KrStakingHelper.sol:KrStakingHelper",
        "label": "staking",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IKrStaking)30326"
      }
    ],
    "types": {
      "t_contract(IKrStaking)30326": {
        "encoding": "inplace",
        "label": "contract IKrStaking",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)35982": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)36720": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      }
    }
  }
}