{
  "address": "0x33a1cB462086bc6D28078Ea4310E5F683F9d2e81",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositedCollateralAssetIndex",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x88945d41a95bab2440c8d1657f5e5e3ab670e2304697c63d975c930ec65e4fb0",
  "receipt": {
    "to": null,
    "from": "0xDc46c7eA52c6b2ca13D1dB949F79F81Cc0E7193C",
    "contractAddress": "0x33a1cB462086bc6D28078Ea4310E5F683F9d2e81",
    "transactionIndex": 2,
    "gasUsed": "1828151",
    "logsBloom": "0x
    "blockHash": "0x0867b196ce89ed1c0e34d7bf695c0bebe36c0b470e326051778c391698cd9068",
    "transactionHash": "0x88945d41a95bab2440c8d1657f5e5e3ab670e2304697c63d975c930ec65e4fb0",
    "logs": [],
    "blockNumber": 7897559,
    "cumulativeGasUsed": "2357298",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ae1fc0dafe5a732e0de9681a142b3713",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedCollateralAssetIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kresko\",\"kind\":\"dev\",\"methods\":{\"depositCollateral(address,address,uint256)\":{\"params\":{\"_account\":\"The user to deposit collateral for.\",\"_collateralAsset\":\"The address of the collateral asset.\",\"_depositAmount\":\"The amount of the collateral asset to deposit.\"}},\"withdrawCollateral(address,address,uint256,uint256)\":{\"details\":\"Requires the post-withdrawal collateral value to violate minimum collateral requirement.\",\"params\":{\"_account\":\"The address to withdraw assets for.\",\"_collateralAsset\":\"The address of the collateral asset.\",\"_depositedCollateralAssetIndex\":\"The index of the collateral asset in the sender's deposited collateral assets array. Only needed if withdrawing the entire deposit of a particular collateral asset.\",\"_withdrawAmount\":\"The amount of the collateral asset to withdraw.\"}}},\"title\":\"DepositWithdrawFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositCollateral(address,address,uint256)\":{\"notice\":\"Deposits collateral into the protocol.\"},\"withdrawCollateral(address,address,uint256,uint256)\":{\"notice\":\"Withdraws sender's collateral from the protocol.\"}},\"notice\":\"Main end-user functionality concerning collateral asset deposits and withdrawals within the Kresko protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/minter/facets/DepositWithdrawFacet.sol\":\"DepositWithdrawFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x322088ced3c1d027a3260de4e5a867b2264adeef252b94158a9725767873ea31\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/diamond/DiamondState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {EnumerableSet} from \\\"../libs/EnumerableSet.sol\\\";\\nimport {FacetAddressAndPosition, FacetFunctionSelectors, RoleData, ENTERED, NOT_ENTERED} from \\\"./DiamondTypes.sol\\\";\\n\\nimport {LibDiamondCut} from \\\"./libs/LibDiamondCut.sol\\\";\\nimport {LibOwnership} from \\\"./libs/LibOwnership.sol\\\";\\n\\nusing LibDiamondCut for DiamondState global;\\nusing LibOwnership for DiamondState global;\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                 Main Layout                                */\\n/* -------------------------------------------------------------------------- */\\n\\nstruct DiamondState {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Proxy                                    */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Maps function selector to the facet address and\\n    /// the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    /// @notice Maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    /// @notice Facet addresses\\n    address[] facetAddresses;\\n    /// @notice ERC165 query implementation\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Initialization                               */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Initialization status\\n    bool initialized;\\n    /// @notice Domain field separator\\n    bytes32 domainSeparator;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  Ownership                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Current owner of the diamond\\n    address contractOwner;\\n    /// @notice Pending new diamond owner\\n    address pendingOwner;\\n    /// @notice Storage version\\n    uint8 storageVersion;\\n    /// @notice address(this) replacement for FF\\n    address self;\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Access Control                               */\\n    /* -------------------------------------------------------------------------- */\\n    mapping(bytes32 => RoleData) _roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Reentrancy                                 */\\n    /* -------------------------------------------------------------------------- */\\n    uint256 entered;\\n}\\n\",\"keccak256\":\"0x2ac47bdeb8d5d3f6aeabf941a0156e092cc40416a7e1fde68eafe125fe6de4a6\",\"license\":\"MIT\"},\"src/contracts/diamond/DiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable func-visibility */\\n\\npragma solidity >=0.8.14;\\n\\nimport {DiamondState} from \\\"./DiamondState.sol\\\";\\n\\n// Storage position\\nbytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"kresko.diamond.storage\\\");\\n\\nfunction ds() pure returns (DiamondState storage state) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0xf1b29686ecb521bff1a5435cc486335206170178acac4363d1ca7a5653103233\",\"license\":\"MIT\"},\"src/contracts/diamond/DiamondTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/// @dev set the initial value to 1 as we do not\\n/// wanna hinder possible gas refunds by setting it to 0 on exit.\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                 Reentrancy                                 */\\n/* -------------------------------------------------------------------------- */\\nuint256 constant NOT_ENTERED = 1;\\nuint256 constant ENTERED = 2;\\n\\n/* ========================================================================== */\\n/*                                   STRUCTS                                  */\\n/* ========================================================================== */\\n\\nstruct FacetAddressAndPosition {\\n    address facetAddress;\\n    // position in facetFunctionSelectors.functionSelectors array\\n    uint96 functionSelectorPosition;\\n}\\n\\nstruct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    // position of facetAddress in facetAddresses array\\n    uint256 facetAddressPosition;\\n}\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\",\"keccak256\":\"0x370ffd042b931cf8c3bd841462d4e52ed17a605e120d513a60a9b3eca2a21e9d\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IAuthorizationFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IAuthorizationFacet {\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xad30bb8e523b808b6f9854b3f9d84c1483e805806e833ce445dd563b79822bfa\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IDiamondCutFacet {\\n    /// @dev  Add=0, Replace=1, Remove=2\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    /// a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x64674cfd4181cac7ee3eefe3f652e75d2aa52773195fe3089a71d8d5277d5da6\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupeFacet {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xd2383fcf3158a0750b9d69a785d1bcd2590a79fd584fe6a67865fbb9e2ece2da\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondOwnershipFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/// @title Contract Ownership\\ninterface IDiamondOwnershipFacet {\\n    /// @dev Pending contract ownership transfer is initiated.\\n    event PendingOwnershipTransfer(address indexed previousOwner, address indexed newOwner);\\n    /// @dev Ownership of a contract is transferred\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Get the address of pending owner\\n    /// @return pendingOwner_ The address of the pending owner.\\n    function pendingOwner() external view returns (address pendingOwner_);\\n\\n    /// @notice Set the address of the new pending owner of the contract\\n    /// @param _newOwner The address of the pending owner\\n    function transferOwnership(address _newOwner) external;\\n\\n    /// @notice Change the ownership of the contract to the pending owner\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x47da586fe172ef25aebf079ae31d50c23df475fb269f7683181cbcb3f87fda60\",\"license\":\"MIT\"},\"src/contracts/diamond/libs/LibDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {IDiamondCutFacet} from \\\"../interfaces/IDiamondCutFacet.sol\\\";\\n\\nimport {Meta} from \\\"../../libs/Meta.sol\\\";\\nimport {DiamondEvent} from \\\"../../libs/Events.sol\\\";\\nimport {DiamondState} from \\\"../DiamondState.sol\\\";\\n\\n// solhint-disable-next-line func-visibility\\nfunction initializeDiamondCut(address _init, bytes memory _calldata) {\\n    if (_init == address(0)) {\\n        require(_calldata.length == 0, \\\"DiamondCut: _init is address(0) but_calldata is not empty\\\");\\n    } else {\\n        require(_calldata.length > 0, \\\"DiamondCut: _calldata is empty but _init is not address(0)\\\");\\n        Meta.enforceHasContractCode(_init, \\\"DiamondCut: _init address has no code\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up the error\\n                revert(string(error));\\n            } else {\\n                revert(\\\"DiamondCut: _init function reverted\\\");\\n            }\\n        }\\n    }\\n}\\n\\nlibrary LibDiamondCut {\\n    /* -------------------------------------------------------------------------- */\\n    /*                              Diamond Functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    function diamondCut(\\n        DiamondState storage self,\\n        IDiamondCutFacet.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCutFacet.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCutFacet.FacetCutAction.Add) {\\n                self.addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCutFacet.FacetCutAction.Replace) {\\n                self.replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCutFacet.FacetCutAction.Remove) {\\n                self.removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondEvent.DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        require(_facetAddress != address(0), \\\"DiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(self.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            self.addFacet(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondCut: Can't add function that already exists\\\");\\n            self.addFunction(selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        require(_facetAddress != address(0), \\\"DiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(self.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            self.addFacet(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondCut: Can't replace function with same function\\\");\\n            self.removeFunction(oldFacetAddress, selector);\\n            self.addFunction(selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            self.removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondState storage self, address _facetAddress) internal {\\n        Meta.enforceHasContractCode(_facetAddress, \\\"DiamondCut: New facet has no code\\\");\\n        self.facetFunctionSelectors[_facetAddress].facetAddressPosition = self.facetAddresses.length;\\n        self.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondState storage self,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        self.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        self.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        self.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondState storage self, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondCut: Can't remove function that doesn't exist\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = self.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = self.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = self.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            self.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            self.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        self.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete self.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = self.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = self.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = self.facetAddresses[lastFacetAddressPosition];\\n                self.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                self.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            self.facetAddresses.pop();\\n            delete self.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4502c7c5fac04643521664676b9bb7b4411772a0044a7136a806c1ca8104cd19\",\"license\":\"MIT\"},\"src/contracts/diamond/libs/LibOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {IERC165} from \\\"../../shared/IERC165.sol\\\";\\nimport {IDiamondCutFacet} from \\\"../interfaces/IDiamondCutFacet.sol\\\";\\nimport {IDiamondLoupeFacet} from \\\"../interfaces/IDiamondLoupeFacet.sol\\\";\\nimport {IDiamondOwnershipFacet} from \\\"../interfaces/IDiamondOwnershipFacet.sol\\\";\\nimport {IAuthorizationFacet} from \\\"../interfaces/IAuthorizationFacet.sol\\\";\\n\\nimport {GeneralEvent, AuthEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {Meta} from \\\"../../libs/Meta.sol\\\";\\n\\nimport {NOT_ENTERED} from \\\"../DiamondTypes.sol\\\";\\nimport {DiamondState} from \\\"../DiamondState.sol\\\";\\n\\nlibrary LibOwnership {\\n    /* -------------------------------------------------------------------------- */\\n    /*                         Initialization & Ownership                         */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Ownership initializer\\n    /// @notice Only called on the first deployment\\n    function initialize(DiamondState storage self, address _owner) internal {\\n        require(!self.initialized, Error.ALREADY_INITIALIZED);\\n        self.entered = NOT_ENTERED;\\n        self.initialized = true;\\n        self.storageVersion++;\\n        self.contractOwner = _owner;\\n\\n        self.supportedInterfaces[type(IDiamondLoupeFacet).interfaceId] = true;\\n        self.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        self.supportedInterfaces[type(IDiamondCutFacet).interfaceId] = true;\\n        self.supportedInterfaces[type(IDiamondOwnershipFacet).interfaceId] = true;\\n        self.supportedInterfaces[type(IAuthorizationFacet).interfaceId] = true;\\n\\n        emit GeneralEvent.Deployed(_owner, self.storageVersion);\\n        emit AuthEvent.OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Initiate ownership transfer to a new address\\n     * @param _newOwner address that is set as the pending new owner\\n     * @notice caller must be the current contract owner\\n     */\\n    function initiateOwnershipTransfer(DiamondState storage self, address _newOwner) internal {\\n        require(Meta.msgSender() == self.contractOwner, Error.DIAMOND_INVALID_OWNER);\\n        require(_newOwner != address(0), \\\"DS: Owner cannot be 0-address\\\");\\n\\n        self.pendingOwner = _newOwner;\\n\\n        emit AuthEvent.PendingOwnershipTransfer(self.contractOwner, _newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfer the ownership to the new pending owner\\n     * @notice caller must be the pending owner\\n     */\\n    function finalizeOwnershipTransfer(DiamondState storage self) internal {\\n        address sender = Meta.msgSender();\\n        require(sender == self.pendingOwner, Error.DIAMOND_INVALID_PENDING_OWNER);\\n        self.contractOwner = self.pendingOwner;\\n        self.pendingOwner = address(0);\\n\\n        emit AuthEvent.OwnershipTransferred(self.contractOwner, sender);\\n    }\\n}\\n\",\"keccak256\":\"0x85cea9a83cf2ca67d0d23215dff570bab38d894f967486f98be34507834f7ebe\",\"license\":\"MIT\"},\"src/contracts/kreskoasset/IKreskoAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"../shared/IERC20Upgradeable.sol\\\";\\nimport {Rebase} from \\\"../shared/Rebase.sol\\\";\\nimport {IERC165} from \\\"../shared/IERC165.sol\\\";\\n\\ninterface IKreskoAsset is IERC20Upgradeable, IAccessControlEnumerableUpgradeable, IERC165 {\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _owner,\\n        address _kresko\\n    ) external;\\n\\n    function kresko() external view returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function rebaseInfo() external view returns (Rebase memory);\\n\\n    function isRebased() external view returns (bool);\\n\\n    function rebase(uint256 _denominator, bool _positive) external;\\n\\n    function reinitializeERC20(string memory _name, string memory _symbol, uint8 _version) external;\\n}\\n\",\"keccak256\":\"0x66d0ff6a843c9478dfd6644a3c2dca8aa7fe518fbc8f25026c9e3c0a02d7d804\",\"license\":\"MIT\"},\"src/contracts/kreskoasset/IKreskoAssetAnchor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {IAccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport {IERC165} from \\\"../shared/IERC165.sol\\\";\\nimport {IERC20Upgradeable} from \\\"../shared/IERC20Upgradeable.sol\\\";\\nimport {IKreskoAssetIssuer} from \\\"./IKreskoAssetIssuer.sol\\\";\\n\\ninterface IKreskoAssetAnchor is IKreskoAssetIssuer, IERC20Upgradeable, IAccessControlEnumerableUpgradeable, IERC165 {\\n    function asset() external view returns (address);\\n\\n    function deposit(uint256, address) external returns (uint256);\\n\\n    function withdraw(uint256, address, address) external returns (uint256);\\n\\n    function initialize(address _asset, string memory _name, string memory _symbol, address _admin) external;\\n\\n    function maxDeposit(address) external view returns (uint256);\\n\\n    function maxMint(address) external view returns (uint256);\\n\\n    function maxRedeem(address owner) external view returns (uint256);\\n\\n    function maxWithdraw(address owner) external view returns (uint256);\\n\\n    function mint(uint256 _shares, address _receiver) external returns (uint256 assets);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    function previewMint(uint256 shares) external view returns (uint256);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function reinitializeERC20(string memory _name, string memory _symbol, uint8 _version) external;\\n}\\n\",\"keccak256\":\"0x71be8c8057b861e995ae59c130d974e494949ba0deee7394ccc92ac0f62d3ff3\",\"license\":\"MIT\"},\"src/contracts/kreskoasset/IKreskoAssetIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/// @title KreskoAsset issuer interface\\n/// @author Kresko\\n/// @notice Contract that can issue/destroy Kresko Assets through Kresko\\n/// @dev This interface is used by KISS & KreskoAssetAnchor\\ninterface IKreskoAssetIssuer {\\n    function issue(uint256 _assets, address _to) external returns (uint256 shares);\\n\\n    function destroy(uint256 _assets, address _from) external returns (uint256 shares);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5537d33f7ac02c68f59528446b86436306fa083052b0fe14aed71f41bfa416cb\",\"license\":\"MIT\"},\"src/contracts/libs/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\nimport {Error} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @title Library for operations on arrays\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Removes an element by copying the last element to the element to remove's place and removing\\n     * the last element.\\n     * @param _addresses The address array containing the item to be removed.\\n     * @param _elementToRemove The element to be removed.\\n     * @param _elementIndex The index of the element to be removed.\\n     */\\n    function removeAddress(address[] storage _addresses, address _elementToRemove, uint256 _elementIndex) internal {\\n        require(_addresses[_elementIndex] == _elementToRemove, Error.ARRAY_OUT_OF_BOUNDS);\\n\\n        uint256 lastIndex = _addresses.length - 1;\\n        // If the index to remove is not the last one, overwrite the element at the index\\n        // with the last element.\\n        if (_elementIndex != lastIndex) {\\n            _addresses[_elementIndex] = _addresses[lastIndex];\\n        }\\n        // Remove the last element.\\n        _addresses.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xb1c8d123d5d6d1aeeb83f0bc745d67415a2ced3591cbeaf9e4cff3ab9bcfb478\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libs/Authorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {IGnosisSafeL2} from \\\"../vendor/gnosis/IGnosisSafeL2.sol\\\";\\nimport {Strings} from \\\"./Strings.sol\\\";\\nimport {AuthEvent} from \\\"./Events.sol\\\";\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\nimport {Error} from \\\"./Errors.sol\\\";\\nimport {Meta} from \\\"./Meta.sol\\\";\\nimport {ds} from \\\"../diamond/DiamondStorage.sol\\\";\\n\\n/* solhint-disable state-visibility */\\n\\n/**\\n * @title Shared library for access control\\n * @author Kresko\\n */\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                    Roles                                   */\\n/* -------------------------------------------------------------------------- */\\n\\nlibrary Role {\\n    /// @dev role that grants other roles\\n    bytes32 constant DEFAULT_ADMIN = 0x00;\\n    /// @dev  keccak256(\\\"kresko.roles.minter.admin\\\")\\n    bytes32 constant ADMIN = 0xb9dacdf02281f2e98ddbadaaf44db270b3d5a916342df47c59f77937a6bcd5d8;\\n    /// @dev keccak256(\\\"kresko.roles.minter.operator\\\")\\n    bytes32 constant OPERATOR = 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd;\\n    /// @dev keccak256(\\\"kresko.roles.minter.manager\\\")\\n    bytes32 constant MANAGER = 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0;\\n    /// @dev keccak256(\\\"kresko.roles.minter.safety.council\\\")\\n    bytes32 constant SAFETY_COUNCIL = 0x9c387ecf1663f9144595993e2c602b45de94bf8ba3a110cb30e3652d79b581c0;\\n}\\n\\nlibrary Authorization {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    function hasRole(bytes32 role, address account) internal view returns (bool) {\\n        return ds()._roles[role].members[account];\\n    }\\n\\n    function getRoleMemberCount(bytes32 role) internal view returns (uint256) {\\n        return ds()._roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `Meta.msgSender` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        _checkRole(role, Meta.msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return ds()._roles[role].adminRole;\\n    }\\n\\n    function getRoleMember(bytes32 role, uint256 index) internal view returns (address) {\\n        return ds()._roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @notice Checks if the target contract implements the ERC165 interfaceId for the multisig.\\n     *\\n     */\\n    function setupSecurityCouncil(address _councilAddress) internal {\\n        require(getRoleMemberCount(Role.SAFETY_COUNCIL) == 0, Error.SAFETY_COUNCIL_EXISTS);\\n        require(IGnosisSafeL2(_councilAddress).isOwner(msg.sender), Error.ADDRESS_INVALID_SAFETY_COUNCIL);\\n\\n        ds()._roles[Role.SAFETY_COUNCIL].members[_councilAddress] = true;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].add(_councilAddress);\\n\\n        emit AuthEvent.RoleGranted(Role.SAFETY_COUNCIL, _councilAddress, Meta.msgSender());\\n    }\\n\\n    function transferSecurityCouncil(address _newCouncil) internal {\\n        hasRole(Role.SAFETY_COUNCIL, msg.sender);\\n        require(IGnosisSafeL2(_newCouncil).getOwners().length >= 5, Error.MULTISIG_NOT_ENOUGH_OWNERS);\\n\\n        // As this is called by the multisig - just check that it's not an EOA\\n        ds()._roles[Role.SAFETY_COUNCIL].members[msg.sender] = false;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].remove(msg.sender);\\n\\n        ds()._roles[Role.SAFETY_COUNCIL].members[_newCouncil] = true;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].add(_newCouncil);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        checkRole(getRoleAdmin(role));\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        checkRole(getRoleAdmin(role));\\n        _revokeRole(role, account);\\n        ds()._roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function _renounceRole(bytes32 role, address account) internal {\\n        require(account == Meta.msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        ds()._roles[role].adminRole = adminRole;\\n        emit AuthEvent.RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * @notice Cannot grant the role `SAFETY_COUNCIL` - must be done via explicit function.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal ensureNotSafetyCouncil(role) {\\n        if (!hasRole(role, account)) {\\n            ds()._roles[role].members[account] = true;\\n            ds()._roleMembers[role].add(account);\\n            emit AuthEvent.RoleGranted(role, account, Meta.msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            ds()._roles[role].members[account] = false;\\n            ds()._roleMembers[role].remove(account);\\n            emit AuthEvent.RoleRevoked(role, account, Meta.msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensure we use the explicit `grantSafetyCouncilRole` function.\\n     */\\n    modifier ensureNotSafetyCouncil(bytes32 role) {\\n        require(role != Role.SAFETY_COUNCIL, Error.ADDRESS_INVALID_SAFETY_COUNCIL);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9ab61f9ccab067ce42bf14ab01be2f3d9e3444d833d0856a832e88071a199543\",\"license\":\"MIT\"},\"src/contracts/libs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity >=0.8.14;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x383c949d8da7fe5cc88bad0fa0a9510154caf2451e3c3c0596ade13e1058dfaa\",\"license\":\"MIT\"},\"src/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity <0.9.0;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @author Kresko\\n * @title Error codes\\n * @notice Kresko-specific revert return values and their explanation\\n * @dev First number indicates the domain for the error\\n */\\nlibrary Error {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Diamond                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // Preserve readability for the diamond proxy\\n    string public constant DIAMOND_INVALID_FUNCTION_SIGNATURE = \\\"krDiamond: function does not exist\\\";\\n    string public constant DIAMOND_INVALID_PENDING_OWNER = \\\"krDiamond: Must be pending contract owner\\\";\\n    string public constant DIAMOND_INVALID_OWNER = \\\"krDiamond: Must be diamond owner\\\";\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   1. General                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_OWNER = \\\"100\\\"; // The sender must be owner\\n    string public constant NOT_OPERATOR = \\\"101\\\"; // The sender must be operator\\n    string public constant ZERO_WITHDRAW = \\\"102\\\"; // Withdraw must be greater than 0\\n    string public constant ZERO_DEPOSIT = \\\"103\\\"; // Deposit must be greater than 0\\n    string public constant ZERO_ADDRESS = \\\"104\\\"; // Address provided cannot be address(0)\\n    string public constant ALREADY_INITIALIZED = \\\"105\\\"; // Contract has already been initialized\\n    string public constant RE_ENTRANCY = \\\"106\\\"; // Function does not allow re-entrant calls\\n    string public constant NOT_ENOUGH_BALANCE = \\\"107\\\"; // Transfer of rebasing token exceeds value\\n    string public constant NOT_ENOUGH_ALLOWANCE = \\\"108\\\"; // TransferFrom of rebasing token exceeds allowance\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   2. Minter                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_LIQUIDATABLE = \\\"200\\\"; // Account has collateral deposits exceeding minCollateralValue\\n    string public constant ZERO_MINT = \\\"201\\\"; // Mint amount must be greater than 0\\n    string public constant ZERO_BURN = \\\"202\\\"; // Burn amount must be greater than 0\\n    string public constant ADDRESS_INVALID_ORACLE = \\\"203\\\"; // Oracle address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_NRWT = \\\"204\\\"; // Underlying rebasing token address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_FEERECIPIENT = \\\"205\\\"; // Fee recipient address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_COLLATERAL = \\\"206\\\"; // Collateral address cant be set to address(0)\\n    string public constant COLLATERAL_EXISTS = \\\"207\\\"; // Collateral has already been added into the protocol\\n    string public constant COLLATERAL_INVALID_FACTOR = \\\"208\\\"; // cFactor must be greater than 1FP\\n    string public constant COLLATERAL_WITHDRAW_OVERFLOW = \\\"209\\\"; // Withdraw amount cannot reduce accounts collateral value under minCollateralValue\\n    string public constant KRASSET_INVALID_FACTOR = \\\"210\\\"; // kFactor must be greater than 1FP\\n    string public constant KRASSET_BURN_AMOUNT_OVERFLOW = \\\"211\\\"; // Repaying more than account has debt\\n    string public constant KRASSET_EXISTS = \\\"212\\\"; // KrAsset is already added\\n    string public constant PARAM_CLOSE_FEE_TOO_HIGH = \\\"213\\\"; // \\\"Close fee exceeds MAX_CLOSE_FEE\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_LOW = \\\"214\\\"; // \\\"Liquidation incentive less than MIN_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_HIGH = \\\"215\\\"; // \\\"Liquidation incentive greater than MAX_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_MIN_COLLATERAL_RATIO_LOW = \\\"216\\\"; // Minimum collateral ratio less than MIN_COLLATERALIZATION_RATIO\\n    string public constant PARAM_MIN_DEBT_AMOUNT_HIGH = \\\"217\\\"; // Minimum debt param argument exceeds MAX_DEBT_VALUE\\n    string public constant COLLATERAL_DOESNT_EXIST = \\\"218\\\"; // Collateral does not exist within the protocol\\n    string public constant KRASSET_DOESNT_EXIST = \\\"219\\\"; // KrAsset does not exist within the protocol\\n    string public constant KRASSET_NOT_MINTABLE = \\\"220\\\"; // KrAsset is not mintable\\n    string public constant KRASSET_SYMBOL_EXISTS = \\\"221\\\"; // KrAsset with this symbol is already within the protocl\\n    string public constant KRASSET_COLLATERAL_LOW = \\\"222\\\"; // Collateral deposits do not cover the amount being minted\\n    string public constant KRASSET_MINT_AMOUNT_LOW = \\\"223\\\"; // Debt position must be greater than the minimum debt position value\\n    string public constant KRASSET_MAX_SUPPLY_REACHED = \\\"224\\\"; // KrAsset being minted has reached its current supply limit\\n    string public constant SELF_LIQUIDATION = \\\"225\\\"; // Account cannot liquidate itself\\n    string public constant ZERO_REPAY = \\\"226\\\"; // Account cannot liquidate itself\\n    string public constant STALE_PRICE = \\\"227\\\"; // Price for the asset is stale\\n    string public constant LIQUIDATION_OVERFLOW = \\\"228\\\"; // Repaying more USD value than allowed\\n    string public constant ADDRESS_INVALID_SAFETY_COUNCIL = \\\"229\\\"; // Account responsible for the safety council role must be a multisig\\n    string public constant SAFETY_COUNCIL_EXISTS = \\\"230\\\"; // Only one council role can exist\\n    string public constant NOT_SAFETY_COUNCIL = \\\"231\\\"; // Sender must have the role `Role.SAFETY_COUNCIL`\\n    string public constant ACTION_PAUSED_FOR_ASSET = \\\"232\\\"; // This action is currently paused for this asset\\n    string public constant INVALID_ASSET_SUPPLIED = \\\"233\\\"; // Asset supplied is not a collateral nor a krAsset\\n    string public constant KRASSET_NOT_ANCHOR = \\\"234\\\"; // Address is not the anchor for the krAsset\\n    string public constant INVALID_LT = \\\"235\\\"; // Liquidation threshold is greater than minimum collateralization ratio\\n    string public constant COLLATERAL_INSUFFICIENT_AMOUNT = \\\"236\\\"; // Insufficient amount of collateral to complete the operation\\n    string public constant MULTISIG_NOT_ENOUGH_OWNERS = \\\"237\\\"; // Multisig has invalid amount of owners\\n    string public constant PARAM_OPEN_FEE_TOO_HIGH = \\\"238\\\"; // \\\"Close fee exceeds MAX_OPEN_FEE\\\"\\n    string public constant INVALID_FEE_TYPE = \\\"239\\\"; // \\\"Invalid fee type\\n    string public constant KRASSET_INVALID_ANCHOR = \\\"240\\\"; // krAsset anchor does not support the correct interfaceId\\n    string public constant KRASSET_INVALID_CONTRACT = \\\"241\\\"; // krAsset does not support the correct interfaceId\\n    string public constant KRASSET_MARKET_CLOSED = \\\"242\\\"; // KrAsset's market is currently closed\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   3. Staking                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REWARD_PER_BLOCK_MISSING = \\\"300\\\"; // Each reward token must have a reward per block value\\n    string public constant REWARD_TOKENS_MISSING = \\\"301\\\"; // Pool must include an array of reward token addresses\\n    string public constant POOL_EXISTS = \\\"302\\\"; // Pool with this deposit token already exists\\n    string public constant POOL_DOESNT_EXIST = \\\"303\\\"; // Pool with this deposit token does not exist\\n    string public constant ADDRESS_INVALID_REWARD_RECIPIENT = \\\"304\\\"; // Reward recipient cant be address(0)\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   4. Libraries                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant ARRAY_OUT_OF_BOUNDS = \\\"400\\\"; // Array out of bounds error\\n    string public constant PRICEFEEDS_MUST_MATCH_STATUS_FEEDS = \\\"401\\\"; // Supplied price feeds must match status feeds in length\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   5. KrAsset                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REBASING_DENOMINATOR_LOW = \\\"500\\\"; // denominator of rebases must be >= 1\\n    string public constant ISSUER_NOT_KRESKO = \\\"501\\\"; // issue must be done by kresko\\n    string public constant REDEEMER_NOT_KRESKO = \\\"502\\\"; // redeem must be done by kresko\\n    string public constant DESTROY_OVERFLOW = \\\"503\\\"; // trying to destroy more than allowed\\n    string public constant ISSUE_OVERFLOW = \\\"504\\\"; // trying to destroy more than allowed\\n    string public constant MINT_OVERFLOW = \\\"505\\\"; // trying to destroy more than allowed\\n    string public constant DEPOSIT_OVERFLOW = \\\"506\\\"; // trying to destroy more than allowed\\n    string public constant REDEEM_OVERFLOW = \\\"507\\\"; // trying to destroy more than allowed\\n    string public constant WITHDRAW_OVERFLOW = \\\"508\\\"; // trying to destroy more than allowed\\n    string public constant ZERO_SHARES = \\\"509\\\"; // amount of shares must be greater than 0\\n    string public constant ZERO_ASSETS = \\\"510\\\"; // amount of assets must be greater than 0\\n    string public constant INVALID_SCALED_AMOUNT = \\\"511\\\"; // amount of debt scaled must be greater than 0\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              6. STABILITY RATES                            */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant STABILITY_RATES_ALREADY_INITIALIZED = \\\"601\\\"; // stability rates for the asset are already initialized\\n    string public constant INVALID_OPTIMAL_RATE = \\\"602\\\"; // the optimal price rate configured is less than 1e27 for the asset\\n    string public constant INVALID_PRICE_RATE_DELTA = \\\"603\\\"; // the price rate delta configured is less than 1e27 for the asset\\n    string public constant STABILITY_RATES_NOT_INITIALIZED = \\\"604\\\"; // the stability rates for the asset are not initialized\\n    string public constant STABILITY_RATE_OVERFLOW = \\\"605\\\"; // the stability rates is > max uint128\\n    string public constant DEBT_INDEX_OVERFLOW = \\\"606\\\"; // the debt index is > max uint128\\n    string public constant KISS_NOT_SET = \\\"607\\\"; // the debt index is > max uint128\\n    string public constant STABILITY_RATE_REPAYMENT_AMOUNT_ZERO = \\\"608\\\"; // interest being repaid cannot be 0\\n    string public constant STABILITY_RATE_INTEREST_IS_ZERO = \\\"609\\\"; // account must have accrued interest to repay it\\n    string public constant INTEREST_REPAY_NOT_PARTIAL = \\\"610\\\"; // account must have accrued interest to repay it\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              7. AMM ORACLE                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant PAIR_ADDRESS_IS_ZERO = \\\"701\\\"; // Pair address to configure cannot be zero\\n    string public constant INVALID_UPDATE_PERIOD = \\\"702\\\"; // Update period must be greater than the minimum\\n    string public constant PAIR_ALREADY_EXISTS = \\\"703\\\"; // Pair with the address is already initialized\\n    string public constant PAIR_DOES_NOT_EXIST = \\\"704\\\"; // Pair supplied does not exist\\n    string public constant INVALID_LIQUIDITY = \\\"706\\\"; // Pair initializaition requires that the pair has liquidity\\n    string public constant UPDATE_PERIOD_NOT_FINISHED = \\\"707\\\"; // Update can only be called once per update period\\n    string public constant INVALID_PAIR = \\\"708\\\"; // Pair being consulted does not have the token that the price was requested for\\n    string public constant CALLER_NOT_ADMIN = \\\"709\\\"; // Caller must be the admin\\n    string public constant CONSTRUCTOR_INVALID_ADMIN = \\\"710\\\"; // Admin cannot be zero address in the constructor\\n    string public constant CONSTRUCTOR_INVALID_FACTORY = \\\"711\\\"; // Factory cannot be the zero address\\n    string public constant NO_INCENTIVES_LEFT = \\\"712\\\"; // No incentives left for updating the price\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              8. KISS                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant OPERATOR_WAIT_PERIOD_NOT_OVER = \\\"800\\\"; // Operator role has a cooldown period which has not passed\\n    string public constant OPERATOR_LIMIT_REACHED = \\\"801\\\"; // More minters cannot be assigned before existing one is removed\\n    string public constant CALLER_NOT_CONTRACT = \\\"802\\\"; // Caller of the function must be a contract\\n    string public constant OPERATOR_NOT_CONTRACT = \\\"803\\\"; // Operator role can only be granted to a contract\\n    string public constant KRESKO_NOT_CONTRACT = \\\"804\\\"; // Operator role can only be granted to a contract\\n    string public constant ADMIN_NOT_A_CONTRACT = \\\"805\\\"; // Operator role can only be granted to a contract\\n    string public constant OPERATOR_WAIT_PERIOD_TOO_SHORT = \\\"806\\\"; // Operator assignment cooldown period must be greater than 15 minutes\\n}\\n\",\"keccak256\":\"0x2174f868e58c7ff5c9d687802c4b0c096d77cf7ffe0cc190db7a00fab0f664ba\",\"license\":\"MIT\"},\"src/contracts/libs/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {IDiamondCutFacet} from \\\"../diamond/interfaces/IDiamondCutFacet.sol\\\";\\nimport {Action} from \\\"../minter/MinterTypes.sol\\\";\\n\\n/* solhint-disable var-name-mixedcase */\\n\\n/**\\n * @author Kresko\\n * @title Events\\n * @notice Event definitions\\n */\\n\\nlibrary GeneralEvent {\\n    /**\\n     * @dev Triggered when the contract has been deployed\\n     */\\n    event Deployed(address indexed owner, uint8 version);\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(address indexed operator, uint8 version);\\n}\\n\\nlibrary DiamondEvent {\\n    event DiamondCut(IDiamondCutFacet.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\\nlibrary MinterEvent {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Collateral                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a collateral asset is added to the protocol.\\n     * @dev Can only be emitted once for a given collateral asset.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The address of the oracle.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     */\\n    event CollateralAssetAdded(\\n        address indexed collateralAsset,\\n        uint256 factor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        address anchor\\n    );\\n\\n    /**\\n     * @notice Emitted when a collateral asset is updated.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The oracle address.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     */\\n    event CollateralAssetUpdated(\\n        address indexed collateralAsset,\\n        uint256 factor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        address anchor\\n    );\\n\\n    /**\\n     * @notice Emitted when an account deposits collateral.\\n     * @param account The address of the account depositing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was deposited.\\n     */\\n    event CollateralDeposited(address indexed account, address indexed collateralAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account withdraws collateral.\\n     * @param account The address of the account withdrawing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was withdrawn.\\n     */\\n    event CollateralWithdrawn(address indexed account, address indexed collateralAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when AMM oracle is set.\\n     * @param ammOracle The address of the AMM oracle.\\n     */\\n    event AMMOracleUpdated(address indexed ammOracle);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Kresko Assets                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a Kresko asset is added to the protocol.\\n     * @dev Can only be emitted once for a given Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param anchor anchor token\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     * @param supplyLimit The total supply limit.\\n     * @param closeFee The close fee percentage.\\n     * @param openFee The open fee percentage.\\n     */\\n    event KreskoAssetAdded(\\n        address indexed kreskoAsset,\\n        address anchor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        uint256 kFactor,\\n        uint256 supplyLimit,\\n        uint256 closeFee,\\n        uint256 openFee\\n    );\\n\\n    /**\\n     * @notice Emitted when a Kresko asset's oracle is updated.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     * @param supplyLimit The total supply limit.\\n     * @param closeFee The close fee percentage.\\n     * @param openFee The open fee percentage.\\n     */\\n    event KreskoAssetUpdated(\\n        address indexed kreskoAsset,\\n        address anchor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        uint256 kFactor,\\n        uint256 supplyLimit,\\n        uint256 closeFee,\\n        uint256 openFee\\n    );\\n\\n    /**\\n     * @notice Emitted when an account mints a Kresko asset.\\n     * @param account The address of the account minting the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the Kresko asset that was minted.\\n     */\\n    event KreskoAssetMinted(address indexed account, address indexed kreskoAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account burns a Kresko asset.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the Kresko asset that was burned.\\n     */\\n    event KreskoAssetBurned(address indexed account, address indexed kreskoAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account burns a Kresko asset.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the Kresko asset that was burned.\\n     * @param interestRepaid The amount of the KISS repaid due to interest accrual\\n     */\\n    event DebtPositionClosed(\\n        address indexed account,\\n        address indexed kreskoAsset,\\n        uint256 indexed amount,\\n        uint256 interestRepaid\\n    );\\n\\n    /**\\n     * @notice Emitted when an account pays a close fee with a collateral asset upon burning a Kresko asset.\\n     * @dev This can be emitted multiple times for a single Kresko asset burn.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param paymentCollateralAsset The address of the collateral asset used to pay the close fee.\\n     * @param paymentAmount The amount of the payment collateral asset that was paid.\\n     * @param paymentValue The USD value of the payment.\\n     */\\n    event CloseFeePaid(\\n        address indexed account,\\n        address indexed paymentCollateralAsset,\\n        uint256 indexed paymentAmount,\\n        uint256 paymentValue\\n    );\\n\\n    /**\\n     * @notice Emitted when an account pays an open fee with a collateral asset upon minting a Kresko asset.\\n     * @dev This can be emitted multiple times for a single Kresko asset mint.\\n     * @param account The address of the account minting the Kresko asset.\\n     * @param paymentCollateralAsset The address of the collateral asset used to pay the open fee.\\n     * @param paymentAmount The amount of the payment collateral asset that was paid.\\n     * @param paymentValue The USD value of the payment.\\n     */\\n    event OpenFeePaid(\\n        address indexed account,\\n        address indexed paymentCollateralAsset,\\n        uint256 indexed paymentAmount,\\n        uint256 paymentValue\\n    );\\n\\n    /**\\n     * @notice Emitted when a liquidation occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param repayKreskoAsset The address of the Kresko asset being paid back to the protocol by the liquidator.\\n     * @param repayAmount The amount of the repay Kresko asset being paid back to the protocol by the liquidator.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event LiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed repayKreskoAsset,\\n        uint256 repayAmount,\\n        address seizedCollateralAsset,\\n        uint256 collateralSent\\n    );\\n\\n    /**\\n     * @notice Emitted when a liquidation of interest occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param repayKreskoAsset The address of the Kresko asset being paid back to the protocol by the liquidator.\\n     * @param repayUSD The value of the repay Kresko asset being paid back to the protocol by the liquidator.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event InterestLiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed repayKreskoAsset,\\n        uint256 repayUSD,\\n        address seizedCollateralAsset,\\n        uint256 collateralSent\\n    );\\n    /**\\n     * @notice Emitted when a batch liquidation of interest occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param repayUSD The value of the repay Kresko asset being paid back to the protocol by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event BatchInterestLiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed seizedCollateralAsset,\\n        uint256 repayUSD,\\n        uint256 collateralSent\\n    );\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Parameters                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a safety state is triggered for an asset\\n     * @param action Target action\\n     * @param asset Asset affected\\n     * @param description change description\\n     */\\n    event SafetyStateChange(Action indexed action, address indexed asset, string indexed description);\\n\\n    /**\\n     * @notice Emitted when the fee recipient is updated.\\n     * @param feeRecipient The new fee recipient.\\n     */\\n    event FeeRecipientUpdated(address indexed feeRecipient);\\n\\n    /**\\n     * @notice Emitted when the liquidation incentive multiplier is updated.\\n     * @param liquidationIncentiveMultiplier The new liquidation incentive multiplier raw value.\\n     */\\n    event LiquidationIncentiveMultiplierUpdated(uint256 indexed liquidationIncentiveMultiplier);\\n\\n    /**\\n     * @notice Emitted when the minimum collateralization ratio is updated.\\n     * @param minimumCollateralizationRatio The new minimum collateralization ratio raw value.\\n     */\\n    event MinimumCollateralizationRatioUpdated(uint256 indexed minimumCollateralizationRatio);\\n\\n    /**\\n     * @notice Emitted when the minimum debt value updated.\\n     * @param minimumDebtValue The new minimum debt value.\\n     */\\n    event MinimumDebtValueUpdated(uint256 indexed minimumDebtValue);\\n\\n    /**\\n     * @notice Emitted when the liquidation threshold value is updated\\n     * @param liquidationThreshold The new liquidation threshold value.\\n     */\\n    event LiquidationThresholdUpdated(uint256 indexed liquidationThreshold);\\n}\\n\\nlibrary StakingEvent {\\n    event LiquidityAndStakeAdded(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event LiquidityAndStakeRemoved(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event ClaimRewards(address indexed user, address indexed rewardToken, uint256 indexed amount);\\n    event ClaimRewardsMulti(address indexed to);\\n}\\n\\nlibrary AuthEvent {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event PendingOwnershipTransfer(address indexed previousOwner, address indexed newOwner);\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\\nlibrary InterestRateEvent {\\n    /**\\n     * @dev Emitted when @param account repaid their @param asset interest @param value\\n     */\\n    event StabilityRateConfigured(\\n        address indexed asset,\\n        uint256 indexed stabilityRateBase,\\n        uint256 indexed priceRateDelta,\\n        uint256 rateSlope1,\\n        uint256 rateSlope2\\n    );\\n    /**\\n     * @dev Emitted when @param account repaid their @param asset interest @param value\\n     */\\n    event StabilityRateInterestRepaid(address indexed account, address indexed asset, uint256 value);\\n    /**\\n     * @dev Emitted when @param account repaid all interest @param value\\n     */\\n    event StabilityRateInterestBatchRepaid(address indexed account, uint256 value);\\n\\n    /**\\n     * @notice Emitted when KISS address is set.\\n     * @param KISS The address of KISS.\\n     */\\n    event KISSUpdated(address indexed KISS);\\n}\\n\",\"keccak256\":\"0xf4085e155cd9e13e6bb0dcc3689cfab26dddb3f93a5058bcaa406d8e5502defa\",\"license\":\"MIT\"},\"src/contracts/libs/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\nimport {SafeMathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport {SignedSafeMathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\\\";\\n\\n/* solhint-disable  func-name-mixedcase */\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\n\\nlibrary FixedPoint {\\n    using SafeMathUpgradeable for uint256;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    uint256 internal constant FP_DECIMALS = 18;\\n    uint256 internal constant FP_SCALING_FACTOR = 10 ** FP_DECIMALS;\\n    int256 internal constant SFP_SCALING_FACTOR = 10 ** 18;\\n\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n\\n    // --------------------------------------- UNSIGNED ---------------------------------------------------------------\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED ------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored\\n    //   internally as int256 10^76.\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------- Additional Fixed Point math functions specific to Kresko protocol -------------------\\n\\n    function ONE_HUNDRED_PERCENT() internal pure returns (Unsigned memory) {\\n        return FixedPoint.Unsigned(1e18);\\n    }\\n\\n    function ONE_USD() internal pure returns (Unsigned memory) {\\n        return FixedPoint.Unsigned(1e18);\\n    }\\n\\n    function toFixedPoint(uint256 value) internal pure returns (Unsigned memory) {\\n        return FixedPoint.Unsigned(value);\\n    }\\n\\n    function toFixedPoint(uint128 value) internal pure returns (Unsigned memory) {\\n        return FixedPoint.Unsigned(value);\\n    }\\n\\n    function toFixedPoint(int256 value) internal pure returns (Unsigned memory) {\\n        return FixedPoint.Unsigned(uint256(value));\\n    }\\n}\\n\",\"keccak256\":\"0xdadba6368ca33b5ed655c31b9d0db9c50843ebf5673d3245c9d7e14381653fd2\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libs/Meta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-inline-assembly */\\n\\npragma solidity >=0.8.14;\\n\\nlibrary Meta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"));\\n\\n    function domainSeparator(\\n        string memory name,\\n        string memory version\\n    ) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xd298e793dc03745e41466a834548310fb3afe73ff4145e119c789ab98f208115\",\"license\":\"MIT\"},\"src/contracts/libs/Percentages.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.10;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00).\\n * The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary Percentages {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(or(iszero(percentage), iszero(gt(value, div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage))))) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(add(mul(value, percentage), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(iszero(gt(value, div(sub(not(0), div(percentage, 2)), PERCENTAGE_FACTOR))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)), percentage)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d49de48721f554dbd1580961804c32c44dbfd943f5b1ff4f8b00bbeecc62df6\",\"license\":\"BUSL-1.1\"},\"src/contracts/libs/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity >=0.8.14;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x6e6036354cbb95e2337d987382a7845a2fbe9d687e2cff9dde2fe63d50d7f9fe\",\"license\":\"MIT\"},\"src/contracts/libs/WadRay.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.10;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRay {\\n    // HALF_WAD and HALF_RAY expressed with extended notation\\n    // as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0559fb40c491d5cc7cd26e4c98cc184795e46120342c299bdd0f75af58275add\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/InterestRateState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {LibStabilityRate} from \\\"./libs/LibStabilityRate.sol\\\";\\n\\nusing LibStabilityRate for StabilityRateConfig global;\\n\\n/* solhint-disable var-name-mixedcase */\\n\\n// Asset data\\nstruct StabilityRateConfig {\\n    // Interest index for debt\\n    uint128 debtIndex;\\n    // Represents the optimal price rate between an oracle report and an AMM twap\\n    uint128 optimalPriceRate;\\n    // Slope of the variable interest curve when rate > 0 and <= optimalPriceRate.\\n    // Expressed in ray\\n    uint128 rateSlope1;\\n    // Slope of the variable interest curve when rate > optimalPriceRate.\\n    // Expressed in ray\\n    uint128 rateSlope2;\\n    /**\\n     * Represents the excess price premium in either direction.\\n     * Expressed in ray\\n     * Eg. 1/20 ray = 5% price premium in either direction is considered excess\\n     */\\n    uint128 priceRateDelta;\\n    // Current accrual rate for debt\\n    uint128 stabilityRate;\\n    // Base accrual rate for debt\\n    uint128 stabilityRateBase;\\n    // Asset to configure\\n    address asset;\\n    // Last update for the asset\\n    uint40 lastUpdateTimestamp;\\n}\\n\\n// User data\\nstruct StabilityRateUser {\\n    uint128 debtScaled;\\n    uint128 lastDebtIndex;\\n}\\n\\n// Storage layout\\nstruct InterestRateState {\\n    // asset address -> asset data\\n    mapping(address => StabilityRateConfig) srAssets;\\n    // account address -> asset address -> user data\\n    mapping(address => mapping(address => StabilityRateUser)) srUserInfo;\\n    // interest repayment token is KISS\\n    address kiss;\\n}\\n\\n// Storage position\\nbytes32 constant INTEREST_RATE_STORAGE_POSITION = keccak256(\\\"kresko.interest.rate.storage\\\");\\n\\n// solhint-disable func-visibility\\nfunction irs() pure returns (InterestRateState storage state) {\\n    bytes32 position = INTEREST_RATE_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x2a74d915103338e55d54fae2307180656559217e51025e665b3cf3df91466189\",\"license\":\"MIT\"},\"src/contracts/minter/MinterState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {LibKrAsset} from \\\"./libs/LibKrAsset.sol\\\";\\nimport {LibAccount} from \\\"./libs/LibAccount.sol\\\";\\nimport {LibCollateral} from \\\"./libs/LibCollateral.sol\\\";\\nimport {LibCalculation} from \\\"./libs/LibCalculation.sol\\\";\\nimport {LibRepay} from \\\"./libs/LibRepay.sol\\\";\\nimport {LibMint} from \\\"./libs/LibMint.sol\\\";\\nimport {FixedPoint} from \\\"../libs/FixedPoint.sol\\\";\\nimport {Action, SafetyState, CollateralAsset, KrAsset} from \\\"./MinterTypes.sol\\\";\\n\\n/* solhint-disable state-visibility */\\nusing LibCalculation for MinterState global;\\nusing LibKrAsset for MinterState global;\\nusing LibCollateral for MinterState global;\\nusing LibAccount for MinterState global;\\nusing LibRepay for MinterState global;\\nusing LibMint for MinterState global;\\n\\n/**\\n * @title Storage layout for the minter state\\n * @author Kresko\\n */\\nstruct MinterState {\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Initialization                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Initialization version\\n    uint256 initializations;\\n    bytes32 domainSeparator;\\n    /* -------------------------------------------------------------------------- */\\n    /*                           Configurable Parameters                          */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice The recipient of protocol fees.\\n    address feeRecipient;\\n    /// @notice The factor used to calculate the incentive a liquidator receives in the form of seized collateral.\\n    FixedPoint.Unsigned liquidationIncentiveMultiplier;\\n    /// @notice The absolute minimum ratio of collateral value to debt value used to calculate collateral requirements.\\n    FixedPoint.Unsigned minimumCollateralizationRatio;\\n    /// @notice The minimum USD value of an individual synthetic asset debt position.\\n    FixedPoint.Unsigned minimumDebtValue;\\n    /// @notice The collateralization ratio at which positions may be liquidated.\\n    FixedPoint.Unsigned liquidationThreshold;\\n    /// @notice Flag tells if there is a need to perform safety checks on user actions\\n    bool safetyStateSet;\\n    /// @notice asset -> action -> state\\n    mapping(address => mapping(Action => SafetyState)) safetyState;\\n    /* -------------------------------------------------------------------------- */\\n    /*                              Collateral Assets                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Mapping of collateral asset token address to information on the collateral asset.\\n    mapping(address => CollateralAsset) collateralAssets;\\n    /**\\n     * @notice Mapping of account -> asset -> deposit amount\\n     */\\n    mapping(address => mapping(address => uint256)) collateralDeposits;\\n    /// @notice Mapping of account -> collateral asset addresses deposited\\n    mapping(address => address[]) depositedCollateralAssets;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Kresko Assets                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Mapping of kresko asset token address to information on the Kresko asset.\\n    mapping(address => KrAsset) kreskoAssets;\\n    /// @notice Mapping of account -> krAsset -> debt amount owed to the protocol\\n    mapping(address => mapping(address => uint256)) kreskoAssetDebt;\\n    /// @notice Mapping of account -> addresses of borrowed krAssets\\n    mapping(address => address[]) mintedKreskoAssets;\\n    /// @notice The AMM oracle address.\\n    address ammOracle;\\n    /// @notice Offchain oracle decimals\\n    uint8 extOracleDecimals;\\n}\\n\",\"keccak256\":\"0x7540b68e6b0a2cc62d374826727424494dbcce43e99784cc5484b7c03e9c641e\",\"license\":\"MIT\"},\"src/contracts/minter/MinterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable func-visibility */\\n\\npragma solidity >=0.8.14;\\n\\nimport {MinterState} from \\\"./MinterState.sol\\\";\\n\\n// Storage position\\nbytes32 constant MINTER_STORAGE_POSITION = keccak256(\\\"kresko.minter.storage\\\");\\n\\nfunction ms() pure returns (MinterState storage state) {\\n    bytes32 position = MINTER_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x420e480023e1df437fb43a18c3c1cbf2b29e93378f025249512df02f8840a314\",\"license\":\"MIT\"},\"src/contracts/minter/MinterTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {AggregatorV2V3Interface} from \\\"../vendor/flux/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {FixedPoint} from \\\"../libs/FixedPoint.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {LibAssetUtility} from \\\"./libs/LibAssetUtility.sol\\\";\\n\\n/* solhint-disable state-visibility */\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                  CONSTANTS                                 */\\n/* -------------------------------------------------------------------------- */\\n\\nlibrary Constants {\\n    uint256 constant ONE_HUNDRED_PERCENT = 1e18;\\n\\n    /// @dev The maximum configurable close fee.\\n    uint256 constant MAX_CLOSE_FEE = 10e16; // 10%\\n\\n    /// @dev The maximum configurable open fee.\\n    uint256 constant MAX_OPEN_FEE = 10e16; // 10%\\n\\n    /// @dev The minimum configurable minimum collateralization ratio.\\n    uint256 constant MIN_COLLATERALIZATION_RATIO = ONE_HUNDRED_PERCENT;\\n\\n    /// @dev The minimum configurable liquidation incentive multiplier.\\n    /// This means liquidator only receives equal amount of collateral to debt repaid.\\n    uint256 constant MIN_LIQUIDATION_INCENTIVE_MULTIPLIER = ONE_HUNDRED_PERCENT;\\n\\n    /// @dev The maximum configurable liquidation incentive multiplier.\\n    /// This means liquidator receives 25% bonus collateral compared to the debt repaid.\\n    uint256 constant MAX_LIQUIDATION_INCENTIVE_MULTIPLIER = 1.25e18; // 125%\\n\\n    /// @dev The maximum configurable minimum debt USD value.\\n    uint256 constant MAX_DEBT_VALUE = 1000e18; // $1,000\\n}\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                    ENUM                                    */\\n/* -------------------------------------------------------------------------- */\\n\\n/**\\n * @dev Protocol user facing actions\\n *\\n * Deposit = 0\\n * Withdraw = 1,\\n * Repay = 2,\\n * Borrow = 3,\\n * Liquidate = 4\\n */\\nenum Action {\\n    Deposit,\\n    Withdraw,\\n    Repay,\\n    Borrow,\\n    Liquidation\\n}\\n/**\\n * @dev Fee types\\n *\\n * Open = 0\\n * Close = 1\\n */\\nenum Fee {\\n    Open,\\n    Close\\n}\\n\\n/* ========================================================================== */\\n/*                                   STRUCTS                                  */\\n/* ========================================================================== */\\n\\n/**\\n * @notice Initialization arguments for the protocol\\n */\\nstruct MinterInitArgs {\\n    address admin;\\n    address council;\\n    address treasury;\\n    uint8 extOracleDecimals;\\n    uint256 liquidationIncentiveMultiplier;\\n    uint256 minimumCollateralizationRatio;\\n    uint256 minimumDebtValue;\\n    uint256 liquidationThreshold;\\n}\\n\\n/**\\n * @notice Configurable parameters within the protocol\\n */\\n\\nstruct MinterParams {\\n    FixedPoint.Unsigned minimumCollateralizationRatio;\\n    FixedPoint.Unsigned liquidationIncentiveMultiplier;\\n    FixedPoint.Unsigned minimumDebtValue;\\n    FixedPoint.Unsigned liquidationThreshold;\\n    address feeRecipient;\\n    uint8 extOracleDecimals;\\n}\\n\\n/**\\n * @notice Information on a token that is a KreskoAsset.\\n * @dev Each KreskoAsset has 18 decimals.\\n * @param kFactor The k-factor used for calculating the required collateral value for KreskoAsset debt.\\n * @param oracle The oracle that provides the USD price of one KreskoAsset.\\n * @param supplyLimit The total supply limit of the KreskoAsset.\\n * @param anchor The anchor address\\n * @param closeFee The percentage paid in fees when closing a debt position of this type.\\n * @param openFee The percentage paid in fees when opening a debt position of this type.\\n * @param exists Whether the KreskoAsset exists within the protocol.\\n */\\nstruct KrAsset {\\n    FixedPoint.Unsigned kFactor;\\n    AggregatorV2V3Interface oracle;\\n    AggregatorV2V3Interface marketStatusOracle;\\n    uint256 supplyLimit;\\n    address anchor;\\n    FixedPoint.Unsigned closeFee;\\n    FixedPoint.Unsigned openFee;\\n    bool exists;\\n}\\nusing LibAssetUtility for KrAsset global;\\n/**\\n * @notice Information on a token that can be used as collateral.\\n * @dev Setting the factor to zero effectively makes the asset useless as collateral while still allowing\\n * it to be deposited and withdrawn.\\n * @param factor The collateral factor used for calculating the value of the collateral.\\n * @param oracle The oracle that provides the USD price of one collateral asset.\\n * @param anchor If the collateral is a KreskoAsset, the anchor address\\n * @param decimals The decimals for the token, stored here to avoid repetitive external calls.\\n * @param exists Whether the collateral asset exists within the protocol.\\n */\\nstruct CollateralAsset {\\n    FixedPoint.Unsigned factor;\\n    AggregatorV2V3Interface oracle;\\n    AggregatorV2V3Interface marketStatusOracle;\\n    address anchor;\\n    uint8 decimals;\\n    bool exists;\\n}\\nusing LibAssetUtility for CollateralAsset global;\\n\\n/// @notice Configuration for pausing `Action`\\nstruct Pause {\\n    bool enabled;\\n    uint256 timestamp0;\\n    uint256 timestamp1;\\n}\\n\\n/// @notice Safety configuration for assets\\nstruct SafetyState {\\n    Pause pause;\\n}\\n\",\"keccak256\":\"0xc86a70cc8c8a76bf8a8dc99507481f1fffa2ecd2da6f6560a06abd9cc1f713f5\",\"license\":\"MIT\"},\"src/contracts/minter/facets/DepositWithdrawFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {IDepositWithdrawFacet} from \\\"../interfaces/IDepositWithdrawFacet.sol\\\";\\n\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Role} from \\\"../../libs/Authorization.sol\\\";\\nimport {Meta} from \\\"../../libs/Meta.sol\\\";\\n\\nimport {SafeERC20Upgradeable, IERC20Upgradeable} from \\\"../../shared/SafeERC20Upgradeable.sol\\\";\\nimport {DiamondModifiers, MinterModifiers} from \\\"../../shared/Modifiers.sol\\\";\\nimport {Action, FixedPoint, KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {ms, MinterState} from \\\"../MinterStorage.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\n\\n/**\\n * @author Kresko\\n * @title DepositWithdrawFacet\\n * @notice Main end-user functionality concerning collateral asset deposits and withdrawals within the Kresko protocol\\n */\\ncontract DepositWithdrawFacet is DiamondModifiers, MinterModifiers, IDepositWithdrawFacet {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Collateral                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Deposits collateral into the protocol.\\n     * @param _account The user to deposit collateral for.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _depositAmount The amount of the collateral asset to deposit.\\n     */\\n    function depositCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _depositAmount\\n    ) external nonReentrant collateralAssetExists(_collateralAsset) {\\n        if (ms().safetyStateSet) {\\n            super.ensureNotPaused(_collateralAsset, Action.Deposit);\\n        }\\n\\n        // Transfer tokens into this contract prior to any state changes as an extra measure against re-entrancy.\\n        IERC20Upgradeable(_collateralAsset).safeTransferFrom(Meta.msgSender(), address(this), _depositAmount);\\n\\n        // Record the collateral deposit.\\n        ms().recordCollateralDeposit(_account, _collateralAsset, _depositAmount);\\n        emit MinterEvent.CollateralDeposited(_account, _collateralAsset, _depositAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraws sender's collateral from the protocol.\\n     * @dev Requires the post-withdrawal collateral value to violate minimum collateral requirement.\\n     * @param _account The address to withdraw assets for.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _withdrawAmount The amount of the collateral asset to withdraw.\\n     * @param _depositedCollateralAssetIndex The index of the collateral asset in the sender's deposited collateral\\n     * assets array. Only needed if withdrawing the entire deposit of a particular collateral asset.\\n     */\\n    function withdrawCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _withdrawAmount,\\n        uint256 _depositedCollateralAssetIndex\\n    )\\n        external\\n        nonReentrant\\n        collateralAssetExists(_collateralAsset)\\n        onlyRoleIf(_account != Meta.msgSender(), Role.MANAGER)\\n    {\\n        if (ms().safetyStateSet) {\\n            ensureNotPaused(_collateralAsset, Action.Withdraw);\\n        }\\n\\n        uint256 collateralDeposits = ms().getCollateralDeposits(_account, _collateralAsset);\\n        _withdrawAmount = (_withdrawAmount > collateralDeposits ? collateralDeposits : _withdrawAmount);\\n        ms().verifyAndRecordCollateralWithdrawal(\\n            _account,\\n            _collateralAsset,\\n            _withdrawAmount,\\n            collateralDeposits,\\n            _depositedCollateralAssetIndex\\n        );\\n\\n        IERC20Upgradeable(_collateralAsset).safeTransfer(_account, _withdrawAmount);\\n        emit MinterEvent.CollateralWithdrawn(_account, _collateralAsset, _withdrawAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x3e0a513f9a6eacf5d74c1320e9141aaf16a7240259d9f2ffdd2bc8989dcaf63b\",\"license\":\"MIT\"},\"src/contracts/minter/interfaces/IDepositWithdrawFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IDepositWithdrawFacet {\\n    function depositCollateral(address _account, address _collateralAsset, uint256 _amount) external;\\n\\n    function withdrawCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1920f99e333d0f36cccce19e8434eaf15bd9095a81eee2bb015ea7c192b278a3\",\"license\":\"MIT\"},\"src/contracts/minter/interfaces/IUniswapV2Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IUniswapV2Oracle {\\n    function consultKrAsset(address _krAsset, uint256 _amount) external view returns (uint256 amountOut);\\n\\n    function consult(address _pair, address _token, uint256 _amountIn) external view returns (uint256 amountOut);\\n\\n    function initPair(address _pairAddress, address _krAsset, uint256 _updatePeriod) external;\\n\\n    function configurePair(address _pairAddress, uint256 _updatePeriod) external;\\n\\n    function update(address _pairAddress) external;\\n\\n    function krAssets(address) external returns (address);\\n\\n    function owner() external returns (address);\\n\\n    function factory() external returns (address);\\n}\\n\",\"keccak256\":\"0xf7bcbda982b67c15a59b52b93bc164d80a005d5242118794930452228bcfe7c1\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {KrAsset, CollateralAsset} from \\\"../MinterTypes.sol\\\";\\nimport {RebaseMath, Rebase} from \\\"../../shared/Rebase.sol\\\";\\nimport {IKreskoAsset} from \\\"../../kreskoasset/IKreskoAsset.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\n\\nlibrary LibAccount {\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using RebaseMath for uint256;\\n    using WadRay for uint256;\\n    using LibDecimals for FixedPoint.Unsigned;\\n\\n    /**\\n     * @notice Gets an array of Kresko assets the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @return An array of addresses of Kresko assets the account has minted.\\n     */\\n    function getMintedKreskoAssets(\\n        MinterState storage self,\\n        address _account\\n    ) internal view returns (address[] memory) {\\n        return self.mintedKreskoAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Gets an array of collateral assets the account has deposited.\\n     * @param _account The account to get the deposited collateral assets for.\\n     * @return An array of addresses of collateral assets the account has deposited.\\n     */\\n    function getDepositedCollateralAssets(\\n        MinterState storage self,\\n        address _account\\n    ) internal view returns (address[] memory) {\\n        return self.depositedCollateralAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Get `_account` collateral amount for `_asset`\\n     * @notice Performs rebasing conversion for KreskoAssets\\n     * @param _asset The asset address\\n     * @param _account The account to query amount for\\n     * @return Amount of collateral for `_asset`\\n     */\\n    function getCollateralDeposits(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        return self.collateralAssets[_asset].toRebasingAmount(self.collateralDeposits[_account][_asset]);\\n    }\\n\\n    /**\\n     * @notice Calculates if an account's current collateral value is under its minimum collateral value.\\n     * @dev Returns true if the account's current collateral value is below the minimum collateral value.\\n     * required to consider the position healthy.\\n     * @param _account The account to check.\\n     * @return A boolean indicating if the account can be liquidated.\\n     */\\n    function isAccountLiquidatable(MinterState storage self, address _account) internal view returns (bool) {\\n        return\\n            self.getAccountCollateralValue(_account).isLessThan(\\n                self.getAccountMinimumCollateralValueAtRatio(_account, self.liquidationThreshold)\\n            );\\n    }\\n\\n    /**\\n     * @notice Overload function for calculating liquidatable status with a future liquidated collateral value\\n     * @param _account The account to check.\\n     * @param _valueLiquidated Value liquidated, eg. in a batch liquidation\\n     * @return A boolean indicating if the account can be liquidated.\\n     */\\n    function isAccountLiquidatable(\\n        MinterState storage self,\\n        address _account,\\n        FixedPoint.Unsigned memory _valueLiquidated\\n    ) internal view returns (bool) {\\n        return\\n            self.getAccountCollateralValue(_account).sub(_valueLiquidated).isLessThan(\\n                self.getAccountMinimumCollateralValueAtRatio(_account, self.liquidationThreshold)\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value of a particular account.\\n     * @dev O(# of different deposited collateral assets by account) complexity.\\n     * @param _account The account to calculate the collateral value for.\\n     * @return totalCollateralValue The collateral value of a particular account.\\n     */\\n    function getAccountCollateralValue(\\n        MinterState storage self,\\n        address _account\\n    ) internal view returns (FixedPoint.Unsigned memory totalCollateralValue) {\\n        address[] memory assets = self.depositedCollateralAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (FixedPoint.Unsigned memory collateralValue, ) = self.getCollateralValueAndOraclePrice(\\n                asset,\\n                self.getCollateralDeposits(_account, asset),\\n                false // Take the collateral factor into consideration.\\n            );\\n            totalCollateralValue = totalCollateralValue.add(collateralValue);\\n        }\\n\\n        return totalCollateralValue;\\n    }\\n\\n    /**\\n     * @notice Get an account's minimum collateral value required\\n     *         to back a Kresko asset amount at a given collateralization ratio.\\n     * @dev Accounts that have their collateral value under the minimum collateral value are considered unhealthy,\\n     *      accounts with their collateral value under the liquidation threshold are considered liquidatable.\\n     * @param _account The account to calculate the minimum collateral value for.\\n     * @param _ratio The collateralization ratio required: higher ratio = more collateral required\\n     * @return The minimum collateral value at a given collateralization ratio for a given account.\\n     */\\n    function getAccountMinimumCollateralValueAtRatio(\\n        MinterState storage self,\\n        address _account,\\n        FixedPoint.Unsigned memory _ratio\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        return self.getAccountKrAssetValue(_account).mul(_ratio);\\n    }\\n\\n    /**\\n     * @notice Gets the Kresko asset value in USD of a particular account.\\n     * @param _account The account to calculate the Kresko asset value for.\\n     * @return value The Kresko asset value of a particular account.\\n     */\\n    function getAccountKrAssetValue(\\n        MinterState storage self,\\n        address _account\\n    ) internal view returns (FixedPoint.Unsigned memory value) {\\n        address[] memory assets = self.mintedKreskoAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            value = value.add(self.getKrAssetValue(asset, self.getKreskoAssetDebtScaled(_account, asset), false));\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @notice Get `_account` scaled debt amount for `_asset`\\n     * @notice debt amount of an account has one external effects\\n     * * Effect #1: Stability rate accrual through debt index\\n     * @param _asset The asset address\\n     * @param _account The account to query amount for\\n     * @return Amount of scaled debt for `_asset`\\n     */\\n    function getKreskoAssetDebtScaled(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        uint256 debt = self.kreskoAssets[_asset].toRebasingAmount(irs().srUserInfo[_account][_asset].debtScaled);\\n        if (debt == 0) {\\n            return 0;\\n        }\\n\\n        return debt.rayMul(irs().srAssets[_asset].getNormalizedDebtIndex()).rayToWad();\\n    }\\n\\n    /**\\n     * @notice Get `_account` principal debt amount for `_asset`\\n     * @notice Principal debt amount of an account has one external effects\\n     * * Effect #1: Asset is rebased due to stock split/reverse split\\n     * @param _asset The asset address\\n     * @param _account The account to query amount for\\n     * @return Amount of principal debt for `_asset`\\n     */\\n    function getKreskoAssetDebtPrincipal(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        return self.kreskoAssets[_asset].toRebasingAmount(self.kreskoAssetDebt[_account][_asset]);\\n    }\\n\\n    /**\\n     * @notice Get the total interest accrued on top of debt\\n     * * eg: scaled debt - principal debt\\n     * @return assetAmount the interest denominated in _asset\\n     * @return kissAmount the interest denominated in KISS, ignores K-factor\\n     **/\\n    function getKreskoAssetDebtInterest(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256 assetAmount, uint256 kissAmount) {\\n        assetAmount =\\n            self.getKreskoAssetDebtScaled(_account, _asset) -\\n            self.getKreskoAssetDebtPrincipal(_account, _asset);\\n        kissAmount = self.getKrAssetValue(_asset, assetAmount, true).fromFixedPointPriceToWad();\\n    }\\n\\n    /**\\n     * @notice Gets an index for the Kresko asset the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @param _kreskoAsset The asset lookup address.\\n     * @return i = index of the minted Kresko asset.\\n     */\\n    function getMintedKreskoAssetsIndex(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset\\n    ) internal view returns (uint256 i) {\\n        for (i; i < self.mintedKreskoAssets[_account].length; i++) {\\n            if (self.mintedKreskoAssets[_account][i] == _kreskoAsset) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets an index for the collateral asset the account has deposited.\\n     * @param _account The account to get the index for.\\n     * @param _collateralAsset The asset lookup address.\\n     * @return i = index of the minted collateral asset.\\n     */\\n    function getDepositedCollateralAssetIndex(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset\\n    ) internal view returns (uint256 i) {\\n        for (i; i < self.depositedCollateralAssets[_account].length; i++) {\\n            if (self.depositedCollateralAssets[_account][i] == _collateralAsset) {\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x76755c64ce3c17ae3a9b98e86aa04ebf7450ba3ac26a019dbd96aabfaa4bb1f1\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibAssetUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {CollateralAsset, KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {LibDecimals, FixedPoint} from \\\"../libs/LibDecimals.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\n\\n/**\\n * @title LibAssetUtility\\n * @author Kresko\\n * @notice Utility functions for KrAsset and CollateralAsset structs\\n */\\nlibrary LibAssetUtility {\\n    using FixedPoint for int256;\\n    using FixedPoint for uint256;\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using LibDecimals for int256;\\n\\n    /**\\n     * @notice Amount of non rebasing tokens -> amount of rebasing tokens\\n     * @param self the kresko asset struct\\n     * @param _nonRebasedAmount the amount to convert\\n     */\\n    function toRebasingAmount(KrAsset memory self, uint256 _nonRebasedAmount) internal view returns (uint256) {\\n        return IKreskoAssetAnchor(self.anchor).convertToAssets(_nonRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of non rebasing tokens -> amount of rebasing tokens\\n     * @dev if collateral is not a kresko asset, returns the input\\n     * @param self the collateral asset struct\\n     * @param _nonRebasedAmount the amount to convert\\n     */\\n    function toRebasingAmount(CollateralAsset memory self, uint256 _nonRebasedAmount) internal view returns (uint256) {\\n        if (self.anchor == address(0)) return _nonRebasedAmount;\\n        return IKreskoAssetAnchor(self.anchor).convertToAssets(_nonRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of rebasing tokens -> amount of non rebasing tokens\\n     * @param self the kresko asset struct\\n     * @param _maybeRebasedAmount the amount to convert\\n     */\\n    function toNonRebasingAmount(KrAsset memory self, uint256 _maybeRebasedAmount) internal view returns (uint256) {\\n        return IKreskoAssetAnchor(self.anchor).convertToShares(_maybeRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of rebasing tokens -> amount of non rebasing tokens\\n     * @dev if collateral is not a kresko asset, returns the input\\n     * @param self the collateral asset struct\\n     * @param _maybeRebasedAmount the amount to convert\\n     */\\n    function toNonRebasingAmount(\\n        CollateralAsset memory self,\\n        uint256 _maybeRebasedAmount\\n    ) internal view returns (uint256) {\\n        if (self.anchor == address(0)) return _maybeRebasedAmount;\\n        return IKreskoAssetAnchor(self.anchor).convertToShares(_maybeRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a collateral asset in uint256 with extOracleDecimals\\n     */\\n    function uintPrice(CollateralAsset memory self) internal view returns (uint256) {\\n        return uint256(self.oracle.latestAnswer());\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in uint256 with extOracleDecimals\\n     */\\n    function uintPrice(KrAsset memory self) internal view returns (uint256) {\\n        return uint256(self.oracle.latestAnswer());\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a collateral asset in uint256 with 18 decimals\\n     */\\n    function wadPrice(CollateralAsset memory self) internal view returns (uint256) {\\n        return self.oracle.latestAnswer().oraclePriceToWad();\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in uint256 with 18 decimals\\n     */\\n    function wadPrice(KrAsset memory self) internal view returns (uint256) {\\n        return self.oracle.latestAnswer().oraclePriceToWad();\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a collateral asset in FixedPoint.Unsigned\\n     */\\n    function fixedPointPrice(CollateralAsset memory self) internal view returns (FixedPoint.Unsigned memory) {\\n        return self.oracle.latestAnswer().toFixedPoint();\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in FixedPoint.Unsigned\\n     */\\n    function fixedPointPrice(KrAsset memory self) internal view returns (FixedPoint.Unsigned memory) {\\n        return self.oracle.latestAnswer().toFixedPoint();\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in uint256\\n     */\\n    function uintUSD(CollateralAsset memory self, uint256 _assetAmount) internal view returns (uint256) {\\n        return self.uintPrice() * _assetAmount;\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in uint256\\n     */\\n    function uintUSD(KrAsset memory self, uint256 _assetAmount) internal view returns (uint256) {\\n        return self.uintPrice() * _assetAmount;\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in FixedPoint.Unsigned\\n     */\\n    function fixedPointUSD(\\n        CollateralAsset memory self,\\n        uint256 _assetAmount\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        return self.fixedPointPrice().mul(_assetAmount.toFixedPoint());\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in FixedPoint.Unsigned\\n     */\\n    function fixedPointUSD(\\n        KrAsset memory self,\\n        uint256 _assetAmount\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        return self.fixedPointPrice().mul(_assetAmount.toFixedPoint());\\n    }\\n}\\n\",\"keccak256\":\"0xfe8b1b8527beec9100b05754f0377922596adff5f03f6d021baf46bac73c3457\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\n\\n/**\\n * @title Calculation library for liquidation & fee values\\n * @author Kresko\\n */\\nlibrary LibCalculation {\\n    using Arrays for address[];\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /**\\n     * @dev Calculates the total value that can be liquidated for a liquidation pair\\n     * @param _account address to liquidate\\n     * @param _repayKreskoAsset address of the kreskoAsset being repaid on behalf of the liquidatee\\n     * @param _collateralAssetToSeize address of the collateral asset being seized from the liquidatee\\n     * @return maxLiquidatableUSD USD value that can be liquidated, 0 if the pair has no liquidatable value\\n     */\\n    function calculateMaxLiquidatableValueForAssets(\\n        MinterState storage self,\\n        address _account,\\n        address _repayKreskoAsset,\\n        address _collateralAssetToSeize\\n    ) internal view returns (FixedPoint.Unsigned memory maxLiquidatableUSD) {\\n        FixedPoint.Unsigned memory minCollateralRequired = self.getAccountMinimumCollateralValueAtRatio(\\n            _account,\\n            self.liquidationThreshold\\n        );\\n        FixedPoint.Unsigned memory accountCollateralValue = self.getAccountCollateralValue(_account);\\n\\n        // Account is not liquidatable\\n        if (accountCollateralValue.isGreaterThanOrEqual(minCollateralRequired)) {\\n            return FixedPoint.Unsigned(0);\\n        }\\n\\n        FixedPoint.Unsigned memory valueGainedPerUSDRepaid = self.calcValueGainedPerUSDRepaid(\\n            _repayKreskoAsset,\\n            _collateralAssetToSeize\\n        );\\n\\n        // Max repayment value for this pair\\n        maxLiquidatableUSD = minCollateralRequired.sub(accountCollateralValue).div(valueGainedPerUSDRepaid);\\n\\n        if (maxLiquidatableUSD.isLessThan(self.minimumDebtValue)) {\\n            return self.minimumDebtValue;\\n        }\\n        // Diminish liquidatable value for assets with lower cFactor\\n        // This is desired as they have more seizable value.\\n        FixedPoint.Unsigned memory cFactor = self.collateralAssets[_collateralAssetToSeize].factor;\\n\\n        if (\\n            self.depositedCollateralAssets[_account].length > 1 && cFactor.isLessThan(FixedPoint.ONE_HUNDRED_PERCENT())\\n        ) {\\n            // cFactor^4 is the diminishing factor (cFactor = 1 == nothing happens)\\n            return maxLiquidatableUSD.mul(cFactor.pow(4));\\n        }\\n    }\\n\\n    function calcValueGainedPerUSDRepaid(\\n        MinterState storage self,\\n        address _repayKreskoAsset,\\n        address _collateralToSeize\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        KrAsset memory krAsset = self.kreskoAssets[_repayKreskoAsset];\\n        FixedPoint.Unsigned memory cFactor = self.collateralAssets[_collateralToSeize].factor;\\n        return\\n            krAsset\\n                .kFactor\\n                .mul(self.liquidationThreshold)\\n                .mul(FixedPoint.ONE_HUNDRED_PERCENT().sub(krAsset.closeFee))\\n                .mul(cFactor)\\n                .div(self.liquidationIncentiveMultiplier)\\n                .sub(FixedPoint.ONE_USD());\\n    }\\n\\n    /**\\n     * @notice Calculate amount of collateral to seize during the liquidation process.\\n     * @param _liquidationIncentiveMultiplier The liquidation incentive multiplier.\\n     * @param _collateralOraclePriceUSD The address of the collateral asset to be seized.\\n     * @param _kreskoAssetRepayAmountUSD Kresko asset amount being repaid in exchange for the seized collateral.\\n     */\\n    function calculateAmountToSeize(\\n        FixedPoint.Unsigned memory _liquidationIncentiveMultiplier,\\n        FixedPoint.Unsigned memory _collateralOraclePriceUSD,\\n        FixedPoint.Unsigned memory _kreskoAssetRepayAmountUSD\\n    ) internal pure returns (FixedPoint.Unsigned memory) {\\n        // Seize amount = (repay amount USD * liquidation incentive / collateral price USD).\\n        // Denominate seize amount in collateral type\\n        // Apply liquidation incentive multiplier\\n        return _kreskoAssetRepayAmountUSD.mul(_liquidationIncentiveMultiplier).div(_collateralOraclePriceUSD);\\n    }\\n\\n    /**\\n     * @notice Calculates the fee to be taken from a user's deposited collateral assets.\\n     * @param _collateralAsset The collateral asset from which to take to the fee.\\n     * @param _account The owner of the collateral.\\n     * @param _feeValue The original value of the fee.\\n     * @param _collateralAssetIndex The collateral asset's index in the user's depositedCollateralAssets array.\\n     *\\n     * @return transferAmount to be received as a uint256\\n     * @return feeValuePaid FixedPoint.Unsigned representing the fee value paid.\\n     */\\n    function calcFee(\\n        MinterState storage self,\\n        address _collateralAsset,\\n        address _account,\\n        FixedPoint.Unsigned memory _feeValue,\\n        uint256 _collateralAssetIndex\\n    ) internal returns (uint256 transferAmount, FixedPoint.Unsigned memory feeValuePaid) {\\n        uint256 depositAmount = self.getCollateralDeposits(_account, _collateralAsset);\\n\\n        // Don't take the collateral asset's collateral factor into consideration.\\n        (FixedPoint.Unsigned memory depositValue, FixedPoint.Unsigned memory oraclePrice) = self\\n            .getCollateralValueAndOraclePrice(_collateralAsset, depositAmount, true);\\n\\n        // If feeValue < depositValue, the entire fee can be charged for this collateral asset.\\n        if (_feeValue.isLessThan(depositValue)) {\\n            // We want to make sure that transferAmount is < depositAmount.\\n            // Proof:\\n            //   depositValue <= oraclePrice * depositAmount (<= due to a potential loss of precision)\\n            //   feeValue < depositValue\\n            // Meaning:\\n            //   feeValue < oraclePrice * depositAmount\\n            // Solving for depositAmount we get:\\n            //   feeValue / oraclePrice < depositAmount\\n            // Due to integer division:\\n            //   transferAmount = floor(feeValue / oracleValue)\\n            //   transferAmount <= feeValue / oraclePrice\\n            // We see that:\\n            //   transferAmount <= feeValue / oraclePrice < depositAmount\\n            //   transferAmount < depositAmount\\n            transferAmount = self.collateralAssets[_collateralAsset].decimals.fromCollateralFixedPointAmount(\\n                _feeValue.div(oraclePrice)\\n            );\\n            feeValuePaid = _feeValue;\\n        } else {\\n            // If the feeValue >= depositValue, the entire deposit\\n            // should be taken as the fee.\\n            transferAmount = depositAmount;\\n            feeValuePaid = depositValue;\\n            // Because the entire deposit is taken, remove it from the depositCollateralAssets array.\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAsset, _collateralAssetIndex);\\n        }\\n\\n        return (transferAmount, feeValuePaid);\\n    }\\n}\\n\",\"keccak256\":\"0x86f3fd354c65d16f6396f1c3f66cef05e14601287b0f43d77a92f799f11e9f0a\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {AggregatorV2V3Interface} from \\\"../../vendor/flux/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\n\\nimport {CollateralAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\n/**\\n * @title Library for collateral related operations\\n * @author Kresko\\n */\\nlibrary LibCollateral {\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using LibDecimals for uint8;\\n    using Arrays for address[];\\n\\n    /**\\n     * In case a collateral asset is also a kresko asset, convert an amount to anchor shares\\n     * @param _amount amount to possibly convert\\n     * @param _collateralAsset address of the collateral asset\\n     */\\n    function normalizeCollateralAmount(\\n        MinterState storage self,\\n        uint256 _amount,\\n        address _collateralAsset\\n    ) internal view returns (uint256 amount) {\\n        CollateralAsset memory asset = self.collateralAssets[_collateralAsset];\\n        if (asset.anchor != address(0)) {\\n            return IKreskoAssetAnchor(asset.anchor).convertToShares(_amount);\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice Get the state of a specific collateral asset\\n     * @param _asset Address of the asset.\\n     * @return State of assets `CollateralAsset` struct\\n     */\\n    function collateralAsset(MinterState storage self, address _asset) internal view returns (CollateralAsset memory) {\\n        return self.collateralAssets[_asset];\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value for a single collateral asset and amount.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _amount The amount of the collateral asset to calculate the collateral value for.\\n     * @param _ignoreCollateralFactor Boolean indicating if the asset's collateral factor should be ignored.\\n     * @return The collateral value for the provided amount of the collateral asset.\\n     */\\n    function getCollateralValueAndOraclePrice(\\n        MinterState storage self,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        bool _ignoreCollateralFactor\\n    ) internal view returns (FixedPoint.Unsigned memory, FixedPoint.Unsigned memory) {\\n        CollateralAsset memory asset = self.collateralAssets[_collateralAsset];\\n\\n        FixedPoint.Unsigned memory fixedPointAmount = asset.decimals.toCollateralFixedPointAmount(_amount);\\n        FixedPoint.Unsigned memory oraclePrice = asset.fixedPointPrice();\\n        FixedPoint.Unsigned memory value = fixedPointAmount.mul(oraclePrice);\\n\\n        if (!_ignoreCollateralFactor) {\\n            value = value.mul(asset.factor);\\n        }\\n        return (value, oraclePrice);\\n    }\\n\\n    function verifyAndRecordCollateralWithdrawal(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _withdrawAmount,\\n        uint256 _collateralDeposits,\\n        uint256 _depositedCollateralAssetIndex\\n    ) internal {\\n        require(_withdrawAmount > 0, Error.ZERO_WITHDRAW);\\n        require(\\n            _depositedCollateralAssetIndex <= self.depositedCollateralAssets[_account].length - 1,\\n            Error.ARRAY_OUT_OF_BOUNDS\\n        );\\n\\n        // Ensure the withdrawal does not result in the account having a collateral value\\n        // under the minimum collateral amount required to maintain a healthy position.\\n        // I.e. the new account's collateral value must still exceed the account's minimum\\n        // collateral value.\\n        // Get the account's current collateral value.\\n        FixedPoint.Unsigned memory accountCollateralValue = self.getAccountCollateralValue(_account);\\n        // Get the collateral value that the account will lose as a result of this withdrawal.\\n        (FixedPoint.Unsigned memory withdrawnCollateralValue, ) = self.getCollateralValueAndOraclePrice(\\n            _collateralAsset,\\n            _withdrawAmount,\\n            false // Take the collateral factor into consideration.\\n        );\\n        // Get the account's minimum collateral value.\\n        FixedPoint.Unsigned memory accountMinCollateralValue = self.getAccountMinimumCollateralValueAtRatio(\\n            _account,\\n            self.minimumCollateralizationRatio\\n        );\\n        // Require accountCollateralValue - withdrawnCollateralValue >= accountMinCollateralValue.\\n        require(\\n            accountCollateralValue.sub(withdrawnCollateralValue).isGreaterThanOrEqual(accountMinCollateralValue),\\n            Error.COLLATERAL_INSUFFICIENT_AMOUNT\\n        );\\n\\n        // Record the withdrawal.\\n        self.collateralDeposits[_account][_collateralAsset] = self\\n            .collateralAssets[_collateralAsset]\\n            .toNonRebasingAmount(_collateralDeposits - _withdrawAmount);\\n\\n        // If the user is withdrawing all of the collateral asset, remove the collateral asset\\n        // from the user's deposited collateral assets array.\\n        if (_withdrawAmount == _collateralDeposits) {\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAsset, _depositedCollateralAssetIndex);\\n        }\\n\\n        emit MinterEvent.CollateralWithdrawn(_account, _collateralAsset, _withdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Records account as having deposited an amount of a collateral asset.\\n     * @dev Token transfers are expected to be done by the caller.\\n     * @param _account The address of the collateral asset.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _depositAmount The amount of the collateral asset deposited.\\n     */\\n    function recordCollateralDeposit(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _depositAmount\\n    ) internal {\\n        // Because the depositedCollateralAssets[_account] is pushed to if the existing\\n        // deposit amount is 0, require the amount to be > 0. Otherwise, the depositedCollateralAssets[_account]\\n        // could be filled with duplicates, causing collateral to be double-counted in the collateral value.\\n        require(_depositAmount > 0, Error.ZERO_DEPOSIT);\\n\\n        // If the account does not have an existing deposit for this collateral asset,\\n        // push it to the list of the account's deposited collateral assets.\\n        uint256 existingDepositAmount = self.getCollateralDeposits(_account, _collateralAsset);\\n        if (existingDepositAmount == 0) {\\n            self.depositedCollateralAssets[_account].push(_collateralAsset);\\n        }\\n        // Record the deposit.\\n        unchecked {\\n            self.collateralDeposits[_account][_collateralAsset] = self\\n                .collateralAssets[_collateralAsset]\\n                .toNonRebasingAmount(existingDepositAmount + _depositAmount);\\n        }\\n\\n        emit MinterEvent.CollateralDeposited(_account, _collateralAsset, _depositAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x34972c674ff2759f30e4277ab0de2aa9562f7cf75242fc14534e2971b7b3efe2\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibDecimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {ms} from \\\"../MinterStorage.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\n\\n/**\\n * @title Library for Kresko specific decimals\\n */\\nlibrary LibDecimals {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /**\\n     * @notice For a given collateral asset and amount, returns a FixedPoint.Unsigned representation.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals > 18, there may be a loss of precision.\\n     * @param _collateralAssetDecimals The collateral asset's number of decimals\\n     * @param _amount The amount of the collateral asset.\\n     * @return A FixedPoint.Unsigned of amount scaled according to the collateral asset's decimals.\\n     */\\n    function toCollateralFixedPointAmount(\\n        uint256 _collateralAssetDecimals,\\n        uint256 _amount\\n    ) internal pure returns (FixedPoint.Unsigned memory) {\\n        // Initially, use the amount as the raw value for the FixedPoint.Unsigned,\\n        // which internally uses FixedPoint.FP_DECIMALS (18) decimals. Most collateral\\n        // assets will have 18 decimals.\\n        FixedPoint.Unsigned memory fixedPointAmount = FixedPoint.Unsigned(_amount);\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_collateralAssetDecimals < FixedPoint.FP_DECIMALS) {\\n            // If the decimals are less than 18, multiply the amount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token of a 17 decimal token will  cause the\\n            // initial setting of amount to be 0.1, so we multiply\\n            // by 10 ** (18 - 17) = 10 to get it to 0.1 * 10 = 1.\\n            return fixedPointAmount.mul(10 ** (FixedPoint.FP_DECIMALS - _collateralAssetDecimals));\\n        } else if (_collateralAssetDecimals > FixedPoint.FP_DECIMALS) {\\n            // If the decimals are greater than 18, divide the amount\\n            // to get the correct fixed point value.\\n            // Note because FixedPoint numbers are 18 decimals, this results\\n            // in loss of precision. E.g. if the collateral asset has 19\\n            // decimals and the deposit amount is only 1 uint, this will divide\\n            // 1 by 10 ** (19 - 18), resulting in 1 / 10 = 0\\n            return fixedPointAmount.div(10 ** (_collateralAssetDecimals - FixedPoint.FP_DECIMALS));\\n        }\\n        return fixedPointAmount;\\n    }\\n\\n    /**\\n     * @notice For a given collateral asset and fixed point amount, i.e. where a rawValue of 1e18 is equal to 1\\n     *   whole token, returns the amount according to the collateral asset's decimals.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals < 18, there may be a loss of precision.\\n     * @param _collateralAssetDecimals The collateral asset's number of decimals\\n     * @param _fixedPointAmount The fixed point amount of the collateral asset.\\n     * @return An amount that is compatible with the collateral asset's decimals.\\n     */\\n    function fromCollateralFixedPointAmount(\\n        uint256 _collateralAssetDecimals,\\n        FixedPoint.Unsigned memory _fixedPointAmount\\n    ) internal pure returns (uint256) {\\n        // Initially, use the rawValue, which internally uses FixedPoint.FP_DECIMALS (18) decimals\\n        // Most collateral assets will have 18 decimals.\\n        uint256 amount = _fixedPointAmount.rawValue;\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_collateralAssetDecimals < FixedPoint.FP_DECIMALS) {\\n            // If the decimals are less than 18, divide the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 17 decimals, divide by 10 ** (18 - 17) = 10\\n            // to get a value of 1e17.\\n            // This may result in a loss of precision.\\n            return amount / (10 ** (FixedPoint.FP_DECIMALS - _collateralAssetDecimals));\\n        } else if (_collateralAssetDecimals > FixedPoint.FP_DECIMALS) {\\n            // If the decimals are greater than 18, multiply the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 19 decimals, multiply by 10 ** (19 - 18) = 10\\n            // to get a value of 1e19.\\n            return amount * (10 ** (_collateralAssetDecimals - FixedPoint.FP_DECIMALS));\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Divides an uint256 @param _value with @param _priceWithOracleDecimals\\n     * @param _value Left side value of the division\\n     * @param wadValue result with 18 decimals\\n     */\\n    function divByPrice(uint256 _value, uint256 _priceWithOracleDecimals) internal view returns (uint256 wadValue) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals >= 18) return _priceWithOracleDecimals;\\n        return (_value / _priceWithOracleDecimals) * 10 ** (oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an uint256 with extOracleDecimals into a number with 18 decimals\\n     * @param _wadPrice value with extOracleDecimals\\n     */\\n    function fromWadPriceToUint(uint256 _wadPrice) internal view returns (uint256 priceWithOracleDecimals) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) return _wadPrice;\\n        return _wadPrice / 10 ** (18 - oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an 18 decimal price to a FixedPoint with extOracleDecimals\\n     * @param _wadPrice value with extOracleDecimals\\n     * @return priceWithOracleDecimals FixedPoint value with extOracleDecimals\\n     */\\n    function fromWadPriceToFixedPoint(\\n        uint256 _wadPrice\\n    ) internal view returns (FixedPoint.Unsigned memory priceWithOracleDecimals) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) {\\n            return FixedPoint.Unsigned(_wadPrice);\\n        }\\n        return FixedPoint.Unsigned(_wadPrice / 10 ** (18 - oracleDecimals));\\n    }\\n\\n    /**\\n     * @notice Converts an uint256 with extOracleDecimals into a number with 18 decimals\\n     * @param _priceWithOracleDecimals value with extOracleDecimals\\n     * @return wadPrice price with 18 decimals\\n     */\\n    function oraclePriceToWad(uint256 _priceWithOracleDecimals) internal view returns (uint256 wadPrice) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) {\\n            return _priceWithOracleDecimals;\\n        }\\n        return _priceWithOracleDecimals * 10 ** (18 - oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an int256 with extOracleDecimals into a number with 18 decimals\\n     * @param _priceWithOracleDecimals value with extOracleDecimals\\n     * @return wadPrice price with 18 decimals\\n     */\\n    function oraclePriceToWad(int256 _priceWithOracleDecimals) internal view returns (uint256 wadPrice) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals >= 18) return uint256(_priceWithOracleDecimals);\\n        return uint256(_priceWithOracleDecimals) * 10 ** (18 - oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an int256 with extOracleDecimals into a number with 18 decimals\\n     * @param _priceWithOracleDecimals value with extOracleDecimals\\n     * @return wadPrice price with 18 decimals\\n     */\\n    function fromFixedPointPriceToWad(\\n        FixedPoint.Unsigned memory _priceWithOracleDecimals\\n    ) internal view returns (uint256 wadPrice) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) return _priceWithOracleDecimals.rawValue;\\n        return _priceWithOracleDecimals.rawValue * 10 ** (18 - oracleDecimals);\\n    }\\n}\\n\",\"keccak256\":\"0xa8e9be8f51e3f340bba5a4ca898ec5c32269529140670e21c81ccca9d287540d\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibKrAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {IUniswapV2Oracle} from \\\"../interfaces/IUniswapV2Oracle.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\nlibrary LibKrAsset {\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using FixedPoint for uint256;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  Functions                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Get the state of a specific krAsset\\n     * @param _asset Address of the asset.\\n     * @return State of assets `KrAsset` struct\\n     */\\n    function kreskoAsset(MinterState storage self, address _asset) internal view returns (KrAsset memory) {\\n        return self.kreskoAssets[_asset];\\n    }\\n\\n    /**\\n     * @notice Gets the USD value for a single Kresko asset and amount.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _amount The amount of the Kresko asset to calculate the value for.\\n     * @param _ignoreKFactor Boolean indicating if the asset's k-factor should be ignored.\\n     * @return The value for the provided amount of the Kresko asset.\\n     */\\n    function getKrAssetValue(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        bool _ignoreKFactor\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        FixedPoint.Unsigned memory value = krAsset.fixedPointUSD(_amount);\\n\\n        if (!_ignoreKFactor) {\\n            value = value.mul(krAsset.kFactor);\\n        }\\n\\n        return value;\\n    }\\n\\n    function getKrAssetAMMPrice(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _amount\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        if (self.ammOracle == address(0)) {\\n            return FixedPoint.Unsigned(0);\\n        }\\n        return IUniswapV2Oracle(self.ammOracle).consultKrAsset(_kreskoAsset, _amount).toFixedPoint();\\n    }\\n\\n    /**\\n     * @notice Get the minimum collateral value required to\\n     * back a Kresko asset amount at a given collateralization ratio.\\n     * @param _krAsset The address of the Kresko asset.\\n     * @param _amount The Kresko Asset debt amount.\\n     * @return minCollateralValue is the minimum collateral value required for this Kresko Asset amount.\\n     * @param _ratio The collateralization ratio required: higher ratio = more collateral required.\\n     */\\n    function getMinimumCollateralValueAtRatio(\\n        MinterState storage self,\\n        address _krAsset,\\n        uint256 _amount,\\n        FixedPoint.Unsigned memory _ratio\\n    ) internal view returns (FixedPoint.Unsigned memory minCollateralValue) {\\n        // Calculate the collateral value required to back this Kresko asset amount at the given ratio\\n        return self.getKrAssetValue(_krAsset, _amount, false).mul(_ratio);\\n    }\\n}\\n\",\"keccak256\":\"0xbb345937de789d58b3f4859330cd909ab3c05c1d5669de9f5da6ad87c3e8dab9\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n// solhint-disable not-rely-on-time\\n// solhint-disable-next-line\\nimport {SafeERC20Upgradeable, IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {IKreskoAssetIssuer} from \\\"../../kreskoasset/IKreskoAssetIssuer.sol\\\";\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\n\\nimport {LibCalculation} from \\\"./LibCalculation.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\n\\nlibrary LibMint {\\n    using Arrays for address[];\\n\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n    using WadRay for uint256;\\n\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using LibCalculation for MinterState;\\n\\n    /// @notice Mint kresko assets with stability rate updates.\\n    /// @dev Updates the principal in MinterState and stability rate adjusted values in InterestRateState\\n    /// @param _kreskoAsset the asset being repaid\\n    /// @param _anchor the anchor token of the asset being repaid\\n    /// @param _amount the asset amount being burned\\n    /// @param _account the account the debt is subtracted from\\n    function mint(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        address _anchor,\\n        uint256 _amount,\\n        address _account\\n    ) internal {\\n        // Update global debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get possibly rebalanced amount of kresko asset\\n        uint256 issued = IKreskoAssetIssuer(_anchor).issue(_amount, _account);\\n        // Calculate debt index scaled value\\n        uint256 amountScaled = issued.wadToRay().rayDiv(newDebtIndex);\\n        require(amountScaled != 0, Error.INVALID_SCALED_AMOUNT);\\n        // Increase principal debt\\n        self.kreskoAssetDebt[_account][_kreskoAsset] += issued;\\n        // Update scaled values for the user\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled += uint128(amountScaled);\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n        // Update the global rate for the asset\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n    }\\n\\n    /**\\n     * @notice Charges the protocol open fee based off the value of the minted asset.\\n     * @dev Takes the fee from the account's collateral assets. Attempts collateral assets\\n     *   in reverse order of the account's deposited collateral assets array.\\n     * @param _account The account to charge the open fee from.\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _kreskoAssetAmountMinted The amount of the kresko asset being minted.\\n     */\\n    function chargeOpenFee(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _kreskoAssetAmountMinted\\n    ) internal {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        // Calculate the value of the fee according to the value of the krAssets being minted.\\n        FixedPoint.Unsigned memory feeValue = krAsset.fixedPointUSD(_kreskoAssetAmountMinted).mul(krAsset.openFee);\\n\\n        // Do nothing if the fee value is 0.\\n        if (feeValue.rawValue == 0) {\\n            return;\\n        }\\n\\n        address[] memory accountCollateralAssets = self.depositedCollateralAssets[_account];\\n        // Iterate backward through the account's deposited collateral assets to safely\\n        // traverse the array while still being able to remove elements if necessary.\\n        // This is because removing the last element of the array does not shift around\\n        // other elements in the array.\\n        for (uint256 i = accountCollateralAssets.length - 1; i >= 0; i--) {\\n            address collateralAssetAddress = accountCollateralAssets[i];\\n\\n            (uint256 transferAmount, FixedPoint.Unsigned memory feeValuePaid) = self.calcFee(\\n                collateralAssetAddress,\\n                _account,\\n                feeValue,\\n                i\\n            );\\n\\n            // Remove the transferAmount from the stored deposit for the account.\\n            self.collateralDeposits[_account][collateralAssetAddress] -= self\\n                .collateralAssets[collateralAssetAddress]\\n                .toNonRebasingAmount(transferAmount);\\n\\n            // Transfer the fee to the feeRecipient.\\n            IERC20Upgradeable(collateralAssetAddress).safeTransfer(self.feeRecipient, transferAmount);\\n            emit MinterEvent.OpenFeePaid(_account, collateralAssetAddress, transferAmount, feeValuePaid.rawValue);\\n\\n            feeValue = feeValue.sub(feeValuePaid);\\n            // If the entire fee has been paid, no more action needed.\\n            if (feeValue.rawValue == 0) {\\n                return;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa746667957449d61eb4b1128d503a35506eb7bc4513e72a07304330491842d13\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibRepay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n// solhint-disable not-rely-on-time\\n\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent, InterestRateEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {IERC20Upgradeable} from \\\"../../shared/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"../../shared/SafeERC20Upgradeable.sol\\\";\\nimport {IKreskoAssetIssuer} from \\\"../../kreskoasset/IKreskoAssetIssuer.sol\\\";\\n\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {LibCalculation} from \\\"./LibCalculation.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\nlibrary LibRepay {\\n    using Arrays for address[];\\n\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n    using WadRay for uint256;\\n\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using LibCalculation for MinterState;\\n\\n    /// @notice Repay user kresko asset debt with stability rate updates.\\n    /// @dev Updates the principal in MinterState and stability rate adjusted values in InterestRateState\\n    /// @param _kreskoAsset the asset being repaid\\n    /// @param _anchor the anchor token of the asset being repaid\\n    /// @param _burnAmount the asset amount being burned\\n    /// @param _account the account the debt is subtracted from\\n    function repay(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        address _anchor,\\n        uint256 _burnAmount,\\n        address _account\\n    ) internal {\\n        // Update global debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get the possibly rebalanced amount of destroyed tokens\\n        uint256 destroyed = IKreskoAssetIssuer(_anchor).destroy(_burnAmount, msg.sender);\\n        // Calculate the debt index scaled amount\\n        uint256 amountScaled = destroyed.wadToRay().rayDiv(newDebtIndex);\\n        require(amountScaled != 0, Error.INVALID_SCALED_AMOUNT);\\n\\n        // Decrease the principal debt\\n        self.kreskoAssetDebt[_account][_kreskoAsset] -= destroyed;\\n        // Decrease the scaled debt and set user asset's last debt index\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled -= uint128(amountScaled);\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n        // Update the stability rate for the asset\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n    }\\n\\n    /**\\n     * @notice Repays accrued stability rate interest for a single asset\\n     * @param _account Account to repay interest for\\n     * @param _kreskoAsset Kresko asset to repay interest for\\n     * @return kissRepayAmount amount repaid\\n     */\\n    function repayFullStabilityRateInterest(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset\\n    ) internal returns (uint256 kissRepayAmount) {\\n        // Update debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get the accrued interest in repayment token\\n        (, kissRepayAmount) = self.getKreskoAssetDebtInterest(_account, _kreskoAsset);\\n\\n        // If no interest has accrued no further operations needed\\n        // Do not revert because we want the preserve new debt index and stability rate\\n        if (kissRepayAmount == 0) {\\n            // Update stability rate for asset\\n            irs().srAssets[_kreskoAsset].updateStabilityRate();\\n            return 0;\\n        }\\n\\n        // Transfer the accrued interest\\n        IERC20Upgradeable(irs().kiss).safeTransferFrom(msg.sender, self.feeRecipient, kissRepayAmount);\\n\\n        // Update scaled values for the user\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled = uint128(\\n            self.getKreskoAssetDebtPrincipal(_account, _kreskoAsset).wadToRay().rayDiv(newDebtIndex)\\n        );\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n\\n        // Remove from minted kresko assets if debt is cleared\\n        if (self.getKreskoAssetDebtPrincipal(_account, _kreskoAsset) == 0) {\\n            self.mintedKreskoAssets[_account].removeAddress(\\n                _kreskoAsset,\\n                self.getMintedKreskoAssetsIndex(_account, _kreskoAsset)\\n            );\\n        }\\n\\n        // Update stability rates\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n        // Emit event with the account, asset and amount repaid\\n        emit InterestRateEvent.StabilityRateInterestRepaid(_account, _kreskoAsset, kissRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Charges the protocol close fee based off the value of the burned asset.\\n     * @dev Takes the fee from the account's collateral assets. Attempts collateral assets\\n     *   in reverse order of the account's deposited collateral assets array.\\n     * @param _account The account to charge the close fee from.\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _burnAmount The amount of the kresko asset being burned.\\n     */\\n    function chargeCloseFee(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _burnAmount\\n    ) internal {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        // Calculate the value of the fee according to the value of the krAssets being burned.\\n        FixedPoint.Unsigned memory feeValue = krAsset.fixedPointUSD(_burnAmount).mul(krAsset.closeFee);\\n\\n        // Do nothing if the fee value is 0.\\n        if (feeValue.rawValue == 0) {\\n            return;\\n        }\\n\\n        address[] memory accountCollateralAssets = self.depositedCollateralAssets[_account];\\n        // Iterate backward through the account's deposited collateral assets to safely\\n        // traverse the array while still being able to remove elements if necessary.\\n        // This is because removing the last element of the array does not shift around\\n        // other elements in the array.\\n\\n        for (uint256 i = accountCollateralAssets.length - 1; i >= 0; i--) {\\n            address collateralAssetAddress = accountCollateralAssets[i];\\n\\n            (uint256 transferAmount, FixedPoint.Unsigned memory feeValuePaid) = self.calcFee(\\n                collateralAssetAddress,\\n                _account,\\n                feeValue,\\n                i\\n            );\\n\\n            // Remove the transferAmount from the stored deposit for the account.\\n            self.collateralDeposits[_account][collateralAssetAddress] -= self\\n                .collateralAssets[collateralAssetAddress]\\n                .toNonRebasingAmount(transferAmount);\\n\\n            // Transfer the fee to the feeRecipient.\\n            IERC20Upgradeable(collateralAssetAddress).safeTransfer(self.feeRecipient, transferAmount);\\n            emit MinterEvent.CloseFeePaid(_account, collateralAssetAddress, transferAmount, feeValuePaid.rawValue);\\n\\n            feeValue = feeValue.sub(feeValuePaid);\\n            // If the entire fee has been paid, no more action needed.\\n            if (feeValue.rawValue == 0) {\\n                return;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check that debt repaid does not leave a dust position, if it does:\\n     * return an amount that pays up to minDebtValue\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _burnAmount The amount being burned\\n     * @param _debtAmount The debt amount of `_account`\\n     * @return amount == 0 or >= minDebtAmount\\n     */\\n    function ensureNotDustPosition(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _burnAmount,\\n        uint256 _debtAmount\\n    ) internal view returns (uint256 amount) {\\n        // If the requested burn would put the user's debt position below the minimum\\n        // debt value, close up to the minimum debt value instead.\\n        FixedPoint.Unsigned memory krAssetValue = self.getKrAssetValue(_kreskoAsset, _debtAmount - _burnAmount, true);\\n        if (krAssetValue.isGreaterThan(0) && krAssetValue.isLessThan(self.minimumDebtValue)) {\\n            FixedPoint.Unsigned memory minDebtValue = self.minimumDebtValue.div(\\n                self.kreskoAssets[_kreskoAsset].fixedPointPrice()\\n            );\\n            amount = _debtAmount - minDebtValue.rawValue;\\n        } else {\\n            amount = _burnAmount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe5f75300bb5b365226e5b6f13b39cd9fbd7d68933f9f52f68eec17542a474791\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibStabilityRate.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.14;\\n\\nimport {IKreskoAsset} from \\\"../../kreskoasset/IKreskoAsset.sol\\\";\\nimport {IERC20Upgradeable} from \\\"../../shared/IERC20Upgradeable.sol\\\";\\n\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {Percentages} from \\\"../../libs/Percentages.sol\\\";\\nimport {LibKrAsset} from \\\"../libs/LibKrAsset.sol\\\";\\n\\nimport {StabilityRateConfig} from \\\"../InterestRateState.sol\\\";\\nimport {ms} from \\\"../MinterStorage.sol\\\";\\n\\n/* solhint-disable not-rely-on-time */\\n\\n/**\\n * @author Kresko\\n * @title AMM price stability rate library, derived from Aave Protocols VariableDebtToken calculations\\n * @notice Library for performing stability rate related operations\\n */\\nlibrary LibStabilityRate {\\n    using WadRay for uint256;\\n    using WadRay for uint128;\\n    using Percentages for uint256;\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @notice Cumulates the stability rate from previous update and multiplies the debt index with it.\\n     * @dev Updates the updated timestamp\\n     * @dev New debt index cannot overflow uint128\\n     * @param self configuration for the asset\\n     * @return newDebtIndex the updated index\\n     */\\n    function updateDebtIndex(StabilityRateConfig storage self) internal returns (uint256 newDebtIndex) {\\n        if (self.asset == address(0)) return WadRay.RAY;\\n\\n        newDebtIndex = self.debtIndex;\\n        // only cumulating if there is any assets minted and rate is over 0\\n        if (IERC20Upgradeable(self.asset).totalSupply() != 0) {\\n            uint256 cumulatedStabilityRate = self.calculateCompoundedInterest(block.timestamp);\\n            newDebtIndex = cumulatedStabilityRate.rayMul(self.debtIndex);\\n            require(newDebtIndex <= type(uint128).max, Error.DEBT_INDEX_OVERFLOW);\\n            self.debtIndex = uint128(newDebtIndex);\\n        }\\n\\n        self.lastUpdateTimestamp = uint40(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Updates the current stability rate for an asset\\n     * @dev New stability rate cannot overflow uint128\\n     * @param self rate configuration for the asset\\n     */\\n    function updateStabilityRate(StabilityRateConfig storage self) internal {\\n        if (self.asset == address(0)) return;\\n\\n        uint256 stabilityRate = calculateStabilityRate(self);\\n        require(stabilityRate <= type(uint128).max, Error.STABILITY_RATE_OVERFLOW);\\n        self.stabilityRate = uint128(stabilityRate);\\n    }\\n\\n    /**\\n     * @notice Get the current price rate between AMM and oracle pricing\\n     * @dev Raw return value of ammPrice == 0 when no AMM pair exists OR liquidity of the pair does not qualify\\n     * @param self rate configuration for the asset\\n     * @return priceRate the current price rate\\n     */\\n    function getPriceRate(StabilityRateConfig storage self) internal view returns (uint256 priceRate) {\\n        FixedPoint.Unsigned memory oraclePrice = ms().getKrAssetValue(self.asset, 1 ether, true);\\n        FixedPoint.Unsigned memory ammPrice = ms().getKrAssetAMMPrice(self.asset, 1 ether);\\n        // no pair, no effect\\n        if (ammPrice.rawValue == 0) {\\n            return 0;\\n        }\\n        return ammPrice.div(oraclePrice).div(10).rawValue;\\n    }\\n\\n    /**\\n     * @notice Calculate new stability rate from the current price rate\\n     * @dev Separate calculations exist for following cases:\\n     * case 1: AMM premium < optimal\\n     * case 2: AMM premium > optimal\\n     * @param self rate configuration for the asset\\n     * @return stabilityRate the current stability rate\\n     */\\n    function calculateStabilityRate(StabilityRateConfig storage self) internal view returns (uint256 stabilityRate) {\\n        uint256 priceRate = self.getPriceRate(); // 0.95 RAY = -5% PREMIUM, 1.05 RAY = +5% PREMIUM\\n        // Return base rate if no AMM price exists\\n        if (priceRate == 0) {\\n            return self.stabilityRateBase;\\n        }\\n        bool rateIsGTOptimal = priceRate > self.optimalPriceRate;\\n\\n        uint256 rateDiff = rateIsGTOptimal ? priceRate - self.optimalPriceRate : self.optimalPriceRate - priceRate;\\n        uint256 rateDiffAdjusted = rateDiff.rayMul(self.rateSlope2.rayDiv(self.rateSlope1 + self.priceRateDelta));\\n\\n        if (!rateIsGTOptimal) {\\n            // Case: AMM price is lower than priceRate\\n            return self.stabilityRateBase + rateDiffAdjusted;\\n        } else {\\n            // Case: AMM price is higher than priceRate\\n            return self.stabilityRateBase.rayDiv(WadRay.RAY + rateDiffAdjusted);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers\\n     * with the advantage of great gas cost reductions\\n     * The Aave whitepaper contains reference to the approximation\\n     * with a table showing the margin of error per different time periods\\n     *\\n     * @param self rate configuration for the asset\\n     * @param _currentTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        StabilityRateConfig storage self,\\n        uint256 _currentTimestamp\\n    ) internal view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = _currentTimestamp - uint256(self.lastUpdateTimestamp);\\n\\n        if (exp == 0) {\\n            return WadRay.RAY;\\n        }\\n\\n        uint256 expMinusOne;\\n        uint256 expMinusTwo;\\n        uint256 basePowerTwo;\\n        uint256 basePowerThree;\\n        unchecked {\\n            expMinusOne = exp - 1;\\n\\n            expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n            basePowerTwo = self.stabilityRate.rayMul(self.stabilityRate) / (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\n            basePowerThree = basePowerTwo.rayMul(self.stabilityRate) / SECONDS_PER_YEAR;\\n        }\\n\\n        uint256 secondTerm = exp * expMinusOne * basePowerTwo;\\n        unchecked {\\n            secondTerm /= 2;\\n        }\\n        uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\\n        unchecked {\\n            thirdTerm /= 6;\\n        }\\n\\n        return WadRay.RAY + (self.stabilityRate * exp) / SECONDS_PER_YEAR + secondTerm + thirdTerm;\\n    }\\n\\n    /**\\n     * @dev Returns the ongoing normalized debt index for the borrowers\\n     * A value of 1e27 means there is no interest. As time passes, the interest is accrued\\n     * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n     * @param self rate configuration for the asset\\n     * @return The normalized debt index. expressed in ray\\n     **/\\n    function getNormalizedDebtIndex(StabilityRateConfig storage self) internal view returns (uint256) {\\n        if (self.asset == address(0)) return WadRay.RAY;\\n        //solium-disable-next-line\\n        if (self.lastUpdateTimestamp == uint40(block.timestamp)) {\\n            //if the index was updated in the same block, no need to perform any calculation\\n            return self.debtIndex;\\n        }\\n\\n        return self.calculateCompoundedInterest(block.timestamp).rayMul(self.debtIndex);\\n    }\\n}\\n\",\"keccak256\":\"0x28adbbe78d95bb142a732c3db0116a1d210c1a84ab77b9356893c443688dc0ca\",\"license\":\"agpl-3.0\"},\"src/contracts/shared/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc769e2950b896b7ccad33ee8c42948778d8ef6eb13a9de733fd5c968fd35729e\",\"license\":\"MIT\"},\"src/contracts/shared/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\ninterface IERC20Upgradeable {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function name() external view returns (string memory);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x054054c9c453c6add9282c6267e9c0f18d3ce28c05450202e93ffed9b1ba9147\",\"license\":\"MIT\"},\"src/contracts/shared/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {Authorization, Role} from \\\"../libs/Authorization.sol\\\";\\nimport {Meta} from \\\"../libs/Meta.sol\\\";\\nimport {Error} from \\\"../libs/Errors.sol\\\";\\n\\nimport {Action} from \\\"../minter/MinterTypes.sol\\\";\\nimport {ms} from \\\"../minter/MinterStorage.sol\\\";\\n\\nimport {ENTERED, NOT_ENTERED} from \\\"../diamond/DiamondTypes.sol\\\";\\nimport {ds} from \\\"../diamond/DiamondStorage.sol\\\";\\n\\nabstract contract DiamondModifiers {\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^Authorization: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        Authorization.checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Ensure only trusted contracts can act on behalf of `_account`\\n     * @param _accountIsNotMsgSender The address of the collateral asset.\\n     */\\n    modifier onlyRoleIf(bool _accountIsNotMsgSender, bytes32 role) {\\n        if (_accountIsNotMsgSender) {\\n            Authorization.checkRole(role);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(Meta.msgSender() == ds().contractOwner, Error.DIAMOND_INVALID_OWNER);\\n        _;\\n    }\\n\\n    modifier onlyPendingOwner() {\\n        require(Meta.msgSender() == ds().pendingOwner, Error.DIAMOND_INVALID_PENDING_OWNER);\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(ds().entered == NOT_ENTERED, Error.RE_ENTRANCY);\\n        ds().entered = ENTERED;\\n        _;\\n        ds().entered = NOT_ENTERED;\\n    }\\n}\\n\\nabstract contract MinterModifiers {\\n    /**\\n     * @notice Reverts if a collateral asset does not exist within the protocol.\\n     * @param _collateralAsset The address of the collateral asset.\\n     */\\n    modifier collateralAssetExists(address _collateralAsset) {\\n        require(ms().collateralAssets[_collateralAsset].exists, Error.COLLATERAL_DOESNT_EXIST);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if a collateral asset already exists within the protocol.\\n     * @param _collateralAsset The address of the collateral asset.\\n     */\\n    modifier collateralAssetDoesNotExist(address _collateralAsset) {\\n        require(!ms().collateralAssets[_collateralAsset].exists, Error.COLLATERAL_EXISTS);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if a Kresko asset does not exist within the protocol. Does not revert if\\n     * the Kresko asset is not mintable.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     */\\n    modifier kreskoAssetExists(address _kreskoAsset) {\\n        require(ms().kreskoAssets[_kreskoAsset].exists, Error.KRASSET_DOESNT_EXIST);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the symbol of a Kresko asset already exists within the protocol.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     */\\n    modifier kreskoAssetDoesNotExist(address _kreskoAsset) {\\n        require(!ms().kreskoAssets[_kreskoAsset].exists, Error.KRASSET_EXISTS);\\n        _;\\n    }\\n\\n    /// @dev Simple check for the enabled flag\\n    function ensureNotPaused(address _asset, Action _action) internal view virtual {\\n        require(!ms().safetyState[_asset][_action].pause.enabled, Error.ACTION_PAUSED_FOR_ASSET);\\n    }\\n}\\n\",\"keccak256\":\"0x95259f1c4cb7e143755d84710454bb5e3c68ebd7511a89684f0b7c4ab6d5e944\",\"license\":\"MIT\"},\"src/contracts/shared/Rebase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {FixedPointMathLib} from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\nstruct Rebase {\\n    bool positive;\\n    uint256 denominator;\\n}\\n\\nlibrary RebaseMath {\\n    using FixedPointMathLib for uint256;\\n\\n    function unrebase(uint256 self, Rebase memory _rebase) internal pure returns (uint256) {\\n        if (_rebase.denominator == 0) return self;\\n        return _rebase.positive ? self.divWadDown(_rebase.denominator) : self.mulWadDown(_rebase.denominator);\\n    }\\n\\n    function rebase(uint256 self, Rebase memory _rebase) internal pure returns (uint256) {\\n        if (_rebase.denominator == 0) return self;\\n        return _rebase.positive ? self.mulWadDown(_rebase.denominator) : self.divWadDown(_rebase.denominator);\\n    }\\n}\\n\",\"keccak256\":\"0x3bd071ae945d526c8858620739dc2a502b56516654eb715fef9e73da6f1b6458\",\"license\":\"MIT\"},\"src/contracts/shared/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {IERC20Upgradeable} from \\\"./IERC20Upgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbf96e4fce27659cd88af0487972551378c591318ae952bb9aaeaf9019c5de6a\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestMarketOpen() external view returns (bool);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    function getMarketOpen(uint256 roundId) external view returns (bool);\\n\\n    event AnswerUpdated(int256 indexed current, bool marketOpen, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xe542890a51377bca4d1d6ce9b85cd180433deab789e8b63b8c306aff0bc4c446\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcb2f40bda00b52487beb7940f2da015deb59968c858bf7973d9a4313961f5392\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n    \\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x1a5485cbb73bb42e632252456aa9a7b20c77ea6a0803d47d50309f5511784369\",\"license\":\"MIT\"},\"src/contracts/vendor/gnosis/IGnosisSafeL2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IGnosisSafeL2 {\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x62d4c6ebee8a2bd5a5eb86d29ff2c88b1cd500f14b892795e579188a2b763c0b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612034908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c908163f5e6546c1461003e575063f970c3b71461003657600080fd5b61000e6102d8565b3461028f576080367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261028f57610075610292565b9061007e6102b5565b60027f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f146100b760018254146100b16105aa565b90610662565b556100d660ff60036100c8846106a0565b015460a81c166100b1610772565b73ffffffffffffffffffffffffffffffffffffffff92836100f56107ab565b168482160361013f575b906101119160643591604435916107fe565b61013a60017f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f1455565b604051f35b6101476107ab565b937f46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a084527f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f126020526101b960ff6101b387604088209060018060a01b0316600052602052604060002090565b54161590565b6101c357506100ff565b6102226102596101d761028b938816610adb565b61024b6101e2610ba1565b61021c60405195869461021c602087016017907f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081520190565b90610980565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000815260110190565b03601f19810183528261051e565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815291829160048301610618565b0390fd5b80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b503461000e576060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576000610312610292565b61031a6102b5565b6044359060027f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f1461035160018254146100b16105aa565b5561036260ff60036100c8846106a0565b60ff7f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9835416610460575b73ffffffffffffffffffffffffffffffffffffffff8181169161040c9084906104066103b66107ab565b6040517f23b872dd000000000000000000000000000000000000000000000000000000006020820152908616602482015230604482015260648082018590528152610400816104ca565b86611eb3565b86611821565b60405193167ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e568585a461045e60017f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f1455565bf35b61046981611caa565b61038c565b50634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff8211176104a157604052565b6104a961046e565b604052565b60c0810190811067ffffffffffffffff8211176104a157604052565b60a0810190811067ffffffffffffffff8211176104a157604052565b6040810190811067ffffffffffffffff8211176104a157604052565b6080810190811067ffffffffffffffff8211176104a157604052565b90601f8019910116810190811067ffffffffffffffff8211176104a157604052565b60405190610100820182811067ffffffffffffffff8211176104a157604052565b60209067ffffffffffffffff811161059d575b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b6105a561046e565b610574565b604051906105b7826104e6565b600382527f31303600000000000000000000000000000000000000000000000000000000006020830152565b918091926000905b8282106106035750116105fc575050565b6000910152565b915080602091830151818601520182916105eb565b6040916020825261063881518092816020860152602086860191016105e3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010190565b1561066a5750565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815290819061028b9060048301610618565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9856020526040902090565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9876020526040902090565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9866020526040902090565b6040519061077f826104e6565b600382527f32313800000000000000000000000000000000000000000000000000000000006020830152565b3330036107fa576107bb36610561565b6107c8604051918261051e565b3681523660006020830137600060203692909201918201525173ffffffffffffffffffffffffffffffffffffffff1690565b3390565b919260ff7f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9835416610972575b6108348284610cf8565b938481111561096c5750835b61085361084b610e65565b861515610662565b610873610868610862866106e6565b54610e9e565b8311156100b1610ee2565b6108b76108af610882866110f9565b6108a761088f8988611676565b506108a161089b610c4d565b8a61120d565b9261106f565b519051111590565b6100b1610f1b565b6108db6108cb6108c6856106a0565b610c93565b6108d58784610ecb565b90611626565b6108ff846108e88761072c565b9060018060a01b0316600052602052604060002090565b558414610953575b5060018060a01b0380831691169161094b847f45892a46e6cef329bb642da6d69846d324db43d19008edc141ed82382eda1bee92818686866000604051a485611da4565b6000604051a4565b6109669082610961856106e6565b610f7a565b38610907565b93610840565b61097b82611d3f565b61082a565b90610993602092828151948592016105e3565b0190565b50634e487b7160e01b600052601160045260246000fd5b80600019048211811515166109c1570290565b6109c9610997565b0290565b6b033b2e3c9fd0803ce8000000811981116109e6570190565b610993610997565b811981116109e6570190565b50634e487b7160e01b600052603260045260246000fd5b602090805115610a1f570190565b6109936109fa565b602190805160011015610a1f570190565b906020918051821015610a4a57010190565b610a526109fa565b010190565b8015610a83575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b610a8b610997565b610a5e565b15610a9757565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b604051906060820182811067ffffffffffffffff821117610b94575b604052602a825260403660208401376030610b1183610a11565b536078610b1d83610a27565b536029905b60018211610b3857610b35915015610a90565b90565b80600f610b8192166010811015610b87575b7f3031323334353637383961626364656600000000000000000000000000000000901a610b778486610a38565b5360041c91610a57565b90610b22565b610b8f6109fa565b610b4a565b610b9c61046e565b610af7565b6040517f46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0610bce82610502565b6042825260603660208401376030610be583610a11565b536078610bf183610a27565b536041905b60018211610c0957610b35915015610a90565b80600f610c4792166010811015610b87577f3031323334353637383961626364656600000000000000000000000000000000901a610b778486610a38565b90610bf6565b60405190610c5a82610485565b7f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a980548252565b90604051610c8d81610485565b91548252565b90604051610ca0816104ae565b60a060ff8294604051610cb281610485565b8154815284526003600180851b0391826001820154166020870152826002820154166040870152015490811660608501528181841c16608085015260a81c161515910152565b610db7610b35926108e860018060a01b03938483166000527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a985602052610db260ff604060002096610d96600360405199610d518b6104ae565b610d5a81610c80565b8b526001810154841660208c01526002810154841660408c0152015491821673ffffffffffffffffffffffffffffffffffffffff1660608a0152565b60ff60a082901c831616608089015260a81c16151560a0870152565b61072c565b5490610dda565b9081602091031261000e575190565b506040513d6000823e3d90fd5b6060015173ffffffffffffffffffffffffffffffffffffffff16908115610e60576020906024604051809481936303d1689d60e11b835260048301525afa908115610e53575b600091610e2b575090565b610b35915060203d8111610e4c575b610e44818361051e565b810190610dbe565b503d610e3a565b610e5b610dcd565b610e20565b905090565b60405190610e72826104e6565b600382527f31303200000000000000000000000000000000000000000000000000000000006020830152565b60018110610a83577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b818110610ed6570390565b610ede610997565b0390565b60405190610eef826104e6565b600382527f34303000000000000000000000000000000000000000000000000000000000006020830152565b60405190610f28826104e6565b600382527f32333600000000000000000000000000000000000000000000000000000000006020830152565b8054821015610f6d575b60005260206000200190600090565b610f756109fa565b610f5e565b9091610fbe610f898284610f54565b94905494610f95610ee2565b73ffffffffffffffffffffffffffffffffffffffff969092871660039290921b1c861614610662565b8282549160018310611062575b600019809301808203611016575b50505081548015611000570191610ff08383610f54565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b61105a926110276110369287610f54565b90549060031b1c169185610f54565b90919082549060031b9160018060a01b039283811b93849216901b16911916179055565b823880610fd9565b61106a610997565b610fcb565b600060405161107d81610485565b5251905180821061109c575b6040519161109683610485565b03815290565b6110a4610997565b611089565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109e6570190565b60209181518110156110ec575b60051b010190565b6110f46109fa565b6110e4565b60405161110581610485565b6000815290611113816106e6565b604051808281935480845260208094019160005283600020936000905b8282106111ae575050506111469250038261051e565b6000925b81518410156111a75761119b6111a19161119461118461116a88876110d7565b5173ffffffffffffffffffffffffffffffffffffffff1690565b61118e8188610cf8565b90611676565b50906111de565b936110a9565b9261114a565b9250505090565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958795509381019390910190611130565b906111fb9160006040516111f181610485565b52519051906109ee565b6040519061120882610485565b815290565b91909160405161121c81610485565b600080915260405161122d81610485565b81815273ffffffffffffffffffffffffffffffffffffffff831660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98a6020526040902090939091604051808481955480845260208094019185528385209385905b8282106112fb575050506112a89250038461051e565b935b82518510156112ec576112e06112e6916112da6112ca61116a89886110d7565b6112d4818961137b565b906119f6565b906111de565b946110a9565b936112aa565b9150939150610b359250611347565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958995509381019390910190611292565b604d811161133a575b600a0a90565b611342610997565b611334565b670de0b6b3a76400009161136d91600060405161136381610485565b52519051906109ae565b046040519061120882610485565b6114f8906114f26114dd6114c7856108e86113c78260018060a01b03166000527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a988602052604060002090565b9561148161147860076113d8610540565b996113e281610c80565b8b52600181015473ffffffffffffffffffffffffffffffffffffffff1660208c0152600281015473ffffffffffffffffffffffffffffffffffffffff1660408c0152600381015460608c0152600481015473ffffffffffffffffffffffffffffffffffffffff1660808c015261145a60058201610c80565b60a08c015261146b60068201610c80565b60c08c0152015460ff1690565b151560e0890152565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f028c7d8c2729a6bb9150d56b34c68e690d2d010cd1f97ccb986fdd9fba86b18a6020526040902090565b546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff1690565b906115c0565b90811561155e5773ffffffffffffffffffffffffffffffffffffffff1660009081527f028c7d8c2729a6bb9150d56b34c68e690d2d010cd1f97ccb986fdd9fba86b18960205260409020610b35916115599161155390611b50565b90611565565b6115a1565b5050600090565b816b019d971e4fe8401e7400000019048111158215171561000e576b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b90631dcd6500633b9aca00808404930610156115b957565b9060010190565b608001516040517f07a2d13a00000000000000000000000000000000000000000000000000000000815260048101929092526020908290602490829073ffffffffffffffffffffffffffffffffffffffff165afa908115610e5357600091610e2b575090565b6060015173ffffffffffffffffffffffffffffffffffffffff16908115610e60576020906024604051809481936363737ac960e11b835260048301525afa908115610e5357600091610e2b575090565b61173c6116a661175892949394600060405161169181610485565b5260006040516116a081610485565b526106a0565b93611737611731604051966116ba886104ae565b6116c381610c80565b8852600181015473ffffffffffffffffffffffffffffffffffffffff90811660208a01526002820154811660408a0152600390910154908116606089015261172a60ff60808a019261171d828260a01c16859060ff169052565b60a81c16151560a08a0152565b5160ff1690565b60ff1690565b611911565b926117506117498261175c565b8095611347565b905190611347565b9190565b6020600491600060405161176f81610485565b528101516040517f50d25bcd000000000000000000000000000000000000000000000000000000008152928391829073ffffffffffffffffffffffffffffffffffffffff165afa908115611814575b6000916117e3575b5060006040516117d581610485565b526040519061120882610485565b906020823d821161180c575b816117fc6020938361051e565b8101031261028f575051386117c6565b3d91506117ef565b61181c610dcd565b6117be565b90611863604051611831816104e6565b600381527f31303300000000000000000000000000000000000000000000000000000000006020820152841515610662565b61188c6118708284610cf8565b80156118cf575b846118846108c6856106a0565b910190611626565b611899826108e88561072c565b5560018060a01b0380911691167ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e566000604051a4565b6118ff836110366118df876106e6565b80549068010000000000000000821015611904575b600182018155610f54565b611877565b61190c61046e565b6118f4565b600060405161191f81610485565b526040519161192d83610485565b82526012811015611964579061195182610b3593601210611957575b60120361132b565b906119dc565b61195f610997565b611949565b60128111611970575090565b61199b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee0161132b565b9060006040516119aa81610485565b52519080156119c657604051916119c083610485565b04815290565b634e487b7160e01b600052601260045260246000fd5b906111fb9160006040516119ef81610485565b52516109ae565b90611750611a56610b35936000604051611a0f81610485565b5273ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9886020526040902090565b91611b10611b076007611a67610540565b95611a7181610c80565b8752600181015473ffffffffffffffffffffffffffffffffffffffff166020880152600281015473ffffffffffffffffffffffffffffffffffffffff16604088015260038101546060880152600481015473ffffffffffffffffffffffffffffffffffffffff166080880152611ae960058201610c80565b60a0880152611afa60068201610c80565b60c0880152015460ff1690565b151560e0850152565b8290611b2d610b35926000604051611b2781610485565b5261175c565b6000604051611b3b81610485565b5260405191611b4983610485565b8252611347565b600481015473ffffffffffffffffffffffffffffffffffffffff811615611bac5764ffffffffff8042169160a01c16146114c757610b35906fffffffffffffffffffffffffffffffff611ba34283611bbe565b91541690611565565b50506b033b2e3c9fd0803ce800000090565b60048101549091611bd99160a01c64ffffffffff1690610ecb565b8015611bac57611c90611c6c611c90611c8b611c5b611c7195611c85611c7e610b35996000198401978891600060028711600014611c955750611c6c611c77611c2f6114dd60026001198b01955b015460801c90565b9d8e611c6c611c65611c5b611c54611c478580611565565b66038882915c4000900490565b9384611565565b6301e13380900490565b978b6109ae565b6109ae565b60011c90565b9a876109ae565b6006900490565b966109ae565b6109cd565b6109ee565b611c77611c2f6114dd6002611c6c9495611c27565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9846020526040902060008052602052611d3d60ff604060002054161560405190611d0e826104e6565b600382527f32333200000000000000000000000000000000000000000000000000000000006020830152610662565b565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a984602052604090206001600052602052611d3d60ff604060002054161560405190611d0e826104e6565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9092166024830152604480830193909352918152611d3d916080820167ffffffffffffffff811183821017611e1a575b604052611eb3565b611e2261046e565b611e12565b15611e2e57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b60018060a01b0316611f2f604051611eca816104e6565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848301526000808686829851910182855af13d15611f6b573d91611f1483610561565b92611f22604051948561051e565b83523d878785013e611f6f565b805180611f3d575b50505050565b81839181010312611f6757015190811515820361028f5750611f5e90611e27565b38808080611f37565b8280fd5b6060915b91929015611feb5750815115611f83575090565b3b15611f8c5790565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561066a5750805190602001fdfea2646970667358221220058f0a8f7bdd06a6e5502ecb822fcdc14492034084bf36387587acb6315295d564736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c908163f5e6546c1461003e575063f970c3b71461003657600080fd5b61000e6102d8565b3461028f576080367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261028f57610075610292565b9061007e6102b5565b60027f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f146100b760018254146100b16105aa565b90610662565b556100d660ff60036100c8846106a0565b015460a81c166100b1610772565b73ffffffffffffffffffffffffffffffffffffffff92836100f56107ab565b168482160361013f575b906101119160643591604435916107fe565b61013a60017f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f1455565b604051f35b6101476107ab565b937f46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a084527f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f126020526101b960ff6101b387604088209060018060a01b0316600052602052604060002090565b54161590565b6101c357506100ff565b6102226102596101d761028b938816610adb565b61024b6101e2610ba1565b61021c60405195869461021c602087016017907f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081520190565b90610980565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000815260110190565b03601f19810183528261051e565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815291829160048301610618565b0390fd5b80fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b503461000e576060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576000610312610292565b61031a6102b5565b6044359060027f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f1461035160018254146100b16105aa565b5561036260ff60036100c8846106a0565b60ff7f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9835416610460575b73ffffffffffffffffffffffffffffffffffffffff8181169161040c9084906104066103b66107ab565b6040517f23b872dd000000000000000000000000000000000000000000000000000000006020820152908616602482015230604482015260648082018590528152610400816104ca565b86611eb3565b86611821565b60405193167ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e568585a461045e60017f080f9836d135d84bdc1ee0b4214e5f2ae76516c41178c6f14a73685c9c3e5f1455565bf35b61046981611caa565b61038c565b50634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff8211176104a157604052565b6104a961046e565b604052565b60c0810190811067ffffffffffffffff8211176104a157604052565b60a0810190811067ffffffffffffffff8211176104a157604052565b6040810190811067ffffffffffffffff8211176104a157604052565b6080810190811067ffffffffffffffff8211176104a157604052565b90601f8019910116810190811067ffffffffffffffff8211176104a157604052565b60405190610100820182811067ffffffffffffffff8211176104a157604052565b60209067ffffffffffffffff811161059d575b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b6105a561046e565b610574565b604051906105b7826104e6565b600382527f31303600000000000000000000000000000000000000000000000000000000006020830152565b918091926000905b8282106106035750116105fc575050565b6000910152565b915080602091830151818601520182916105eb565b6040916020825261063881518092816020860152602086860191016105e3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010190565b1561066a5750565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815290819061028b9060048301610618565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9856020526040902090565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9876020526040902090565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9866020526040902090565b6040519061077f826104e6565b600382527f32313800000000000000000000000000000000000000000000000000000000006020830152565b3330036107fa576107bb36610561565b6107c8604051918261051e565b3681523660006020830137600060203692909201918201525173ffffffffffffffffffffffffffffffffffffffff1690565b3390565b919260ff7f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9835416610972575b6108348284610cf8565b938481111561096c5750835b61085361084b610e65565b861515610662565b610873610868610862866106e6565b54610e9e565b8311156100b1610ee2565b6108b76108af610882866110f9565b6108a761088f8988611676565b506108a161089b610c4d565b8a61120d565b9261106f565b519051111590565b6100b1610f1b565b6108db6108cb6108c6856106a0565b610c93565b6108d58784610ecb565b90611626565b6108ff846108e88761072c565b9060018060a01b0316600052602052604060002090565b558414610953575b5060018060a01b0380831691169161094b847f45892a46e6cef329bb642da6d69846d324db43d19008edc141ed82382eda1bee92818686866000604051a485611da4565b6000604051a4565b6109669082610961856106e6565b610f7a565b38610907565b93610840565b61097b82611d3f565b61082a565b90610993602092828151948592016105e3565b0190565b50634e487b7160e01b600052601160045260246000fd5b80600019048211811515166109c1570290565b6109c9610997565b0290565b6b033b2e3c9fd0803ce8000000811981116109e6570190565b610993610997565b811981116109e6570190565b50634e487b7160e01b600052603260045260246000fd5b602090805115610a1f570190565b6109936109fa565b602190805160011015610a1f570190565b906020918051821015610a4a57010190565b610a526109fa565b010190565b8015610a83575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b610a8b610997565b610a5e565b15610a9757565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b604051906060820182811067ffffffffffffffff821117610b94575b604052602a825260403660208401376030610b1183610a11565b536078610b1d83610a27565b536029905b60018211610b3857610b35915015610a90565b90565b80600f610b8192166010811015610b87575b7f3031323334353637383961626364656600000000000000000000000000000000901a610b778486610a38565b5360041c91610a57565b90610b22565b610b8f6109fa565b610b4a565b610b9c61046e565b610af7565b6040517f46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0610bce82610502565b6042825260603660208401376030610be583610a11565b536078610bf183610a27565b536041905b60018211610c0957610b35915015610a90565b80600f610c4792166010811015610b87577f3031323334353637383961626364656600000000000000000000000000000000901a610b778486610a38565b90610bf6565b60405190610c5a82610485565b7f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a980548252565b90604051610c8d81610485565b91548252565b90604051610ca0816104ae565b60a060ff8294604051610cb281610485565b8154815284526003600180851b0391826001820154166020870152826002820154166040870152015490811660608501528181841c16608085015260a81c161515910152565b610db7610b35926108e860018060a01b03938483166000527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a985602052610db260ff604060002096610d96600360405199610d518b6104ae565b610d5a81610c80565b8b526001810154841660208c01526002810154841660408c0152015491821673ffffffffffffffffffffffffffffffffffffffff1660608a0152565b60ff60a082901c831616608089015260a81c16151560a0870152565b61072c565b5490610dda565b9081602091031261000e575190565b506040513d6000823e3d90fd5b6060015173ffffffffffffffffffffffffffffffffffffffff16908115610e60576020906024604051809481936303d1689d60e11b835260048301525afa908115610e53575b600091610e2b575090565b610b35915060203d8111610e4c575b610e44818361051e565b810190610dbe565b503d610e3a565b610e5b610dcd565b610e20565b905090565b60405190610e72826104e6565b600382527f31303200000000000000000000000000000000000000000000000000000000006020830152565b60018110610a83577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b818110610ed6570390565b610ede610997565b0390565b60405190610eef826104e6565b600382527f34303000000000000000000000000000000000000000000000000000000000006020830152565b60405190610f28826104e6565b600382527f32333600000000000000000000000000000000000000000000000000000000006020830152565b8054821015610f6d575b60005260206000200190600090565b610f756109fa565b610f5e565b9091610fbe610f898284610f54565b94905494610f95610ee2565b73ffffffffffffffffffffffffffffffffffffffff969092871660039290921b1c861614610662565b8282549160018310611062575b600019809301808203611016575b50505081548015611000570191610ff08383610f54565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b61105a926110276110369287610f54565b90549060031b1c169185610f54565b90919082549060031b9160018060a01b039283811b93849216901b16911916179055565b823880610fd9565b61106a610997565b610fcb565b600060405161107d81610485565b5251905180821061109c575b6040519161109683610485565b03815290565b6110a4610997565b611089565b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109e6570190565b60209181518110156110ec575b60051b010190565b6110f46109fa565b6110e4565b60405161110581610485565b6000815290611113816106e6565b604051808281935480845260208094019160005283600020936000905b8282106111ae575050506111469250038261051e565b6000925b81518410156111a75761119b6111a19161119461118461116a88876110d7565b5173ffffffffffffffffffffffffffffffffffffffff1690565b61118e8188610cf8565b90611676565b50906111de565b936110a9565b9261114a565b9250505090565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958795509381019390910190611130565b906111fb9160006040516111f181610485565b52519051906109ee565b6040519061120882610485565b815290565b91909160405161121c81610485565b600080915260405161122d81610485565b81815273ffffffffffffffffffffffffffffffffffffffff831660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a98a6020526040902090939091604051808481955480845260208094019185528385209385905b8282106112fb575050506112a89250038461051e565b935b82518510156112ec576112e06112e6916112da6112ca61116a89886110d7565b6112d4818961137b565b906119f6565b906111de565b946110a9565b936112aa565b9150939150610b359250611347565b855473ffffffffffffffffffffffffffffffffffffffff1684526001958601958995509381019390910190611292565b604d811161133a575b600a0a90565b611342610997565b611334565b670de0b6b3a76400009161136d91600060405161136381610485565b52519051906109ae565b046040519061120882610485565b6114f8906114f26114dd6114c7856108e86113c78260018060a01b03166000527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a988602052604060002090565b9561148161147860076113d8610540565b996113e281610c80565b8b52600181015473ffffffffffffffffffffffffffffffffffffffff1660208c0152600281015473ffffffffffffffffffffffffffffffffffffffff1660408c0152600381015460608c0152600481015473ffffffffffffffffffffffffffffffffffffffff1660808c015261145a60058201610c80565b60a08c015261146b60068201610c80565b60c08c0152015460ff1690565b151560e0890152565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f028c7d8c2729a6bb9150d56b34c68e690d2d010cd1f97ccb986fdd9fba86b18a6020526040902090565b546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff1690565b906115c0565b90811561155e5773ffffffffffffffffffffffffffffffffffffffff1660009081527f028c7d8c2729a6bb9150d56b34c68e690d2d010cd1f97ccb986fdd9fba86b18960205260409020610b35916115599161155390611b50565b90611565565b6115a1565b5050600090565b816b019d971e4fe8401e7400000019048111158215171561000e576b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b90631dcd6500633b9aca00808404930610156115b957565b9060010190565b608001516040517f07a2d13a00000000000000000000000000000000000000000000000000000000815260048101929092526020908290602490829073ffffffffffffffffffffffffffffffffffffffff165afa908115610e5357600091610e2b575090565b6060015173ffffffffffffffffffffffffffffffffffffffff16908115610e60576020906024604051809481936363737ac960e11b835260048301525afa908115610e5357600091610e2b575090565b61173c6116a661175892949394600060405161169181610485565b5260006040516116a081610485565b526106a0565b93611737611731604051966116ba886104ae565b6116c381610c80565b8852600181015473ffffffffffffffffffffffffffffffffffffffff90811660208a01526002820154811660408a0152600390910154908116606089015261172a60ff60808a019261171d828260a01c16859060ff169052565b60a81c16151560a08a0152565b5160ff1690565b60ff1690565b611911565b926117506117498261175c565b8095611347565b905190611347565b9190565b6020600491600060405161176f81610485565b528101516040517f50d25bcd000000000000000000000000000000000000000000000000000000008152928391829073ffffffffffffffffffffffffffffffffffffffff165afa908115611814575b6000916117e3575b5060006040516117d581610485565b526040519061120882610485565b906020823d821161180c575b816117fc6020938361051e565b8101031261028f575051386117c6565b3d91506117ef565b61181c610dcd565b6117be565b90611863604051611831816104e6565b600381527f31303300000000000000000000000000000000000000000000000000000000006020820152841515610662565b61188c6118708284610cf8565b80156118cf575b846118846108c6856106a0565b910190611626565b611899826108e88561072c565b5560018060a01b0380911691167ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e566000604051a4565b6118ff836110366118df876106e6565b80549068010000000000000000821015611904575b600182018155610f54565b611877565b61190c61046e565b6118f4565b600060405161191f81610485565b526040519161192d83610485565b82526012811015611964579061195182610b3593601210611957575b60120361132b565b906119dc565b61195f610997565b611949565b60128111611970575090565b61199b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee0161132b565b9060006040516119aa81610485565b52519080156119c657604051916119c083610485565b04815290565b634e487b7160e01b600052601260045260246000fd5b906111fb9160006040516119ef81610485565b52516109ae565b90611750611a56610b35936000604051611a0f81610485565b5273ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9886020526040902090565b91611b10611b076007611a67610540565b95611a7181610c80565b8752600181015473ffffffffffffffffffffffffffffffffffffffff166020880152600281015473ffffffffffffffffffffffffffffffffffffffff16604088015260038101546060880152600481015473ffffffffffffffffffffffffffffffffffffffff166080880152611ae960058201610c80565b60a0880152611afa60068201610c80565b60c0880152015460ff1690565b151560e0850152565b8290611b2d610b35926000604051611b2781610485565b5261175c565b6000604051611b3b81610485565b5260405191611b4983610485565b8252611347565b600481015473ffffffffffffffffffffffffffffffffffffffff811615611bac5764ffffffffff8042169160a01c16146114c757610b35906fffffffffffffffffffffffffffffffff611ba34283611bbe565b91541690611565565b50506b033b2e3c9fd0803ce800000090565b60048101549091611bd99160a01c64ffffffffff1690610ecb565b8015611bac57611c90611c6c611c90611c8b611c5b611c7195611c85611c7e610b35996000198401978891600060028711600014611c955750611c6c611c77611c2f6114dd60026001198b01955b015460801c90565b9d8e611c6c611c65611c5b611c54611c478580611565565b66038882915c4000900490565b9384611565565b6301e13380900490565b978b6109ae565b6109ae565b60011c90565b9a876109ae565b6006900490565b966109ae565b6109cd565b6109ee565b611c77611c2f6114dd6002611c6c9495611c27565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a9846020526040902060008052602052611d3d60ff604060002054161560405190611d0e826104e6565b600382527f32333200000000000000000000000000000000000000000000000000000000006020830152610662565b565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f5076ab9fa18d2a17cfce4375a530b76392de8264a11126885cd5534d39f0a984602052604090206001600052602052611d3d60ff604060002054161560405190611d0e826104e6565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff9092166024830152604480830193909352918152611d3d916080820167ffffffffffffffff811183821017611e1a575b604052611eb3565b611e2261046e565b611e12565b15611e2e57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b60018060a01b0316611f2f604051611eca816104e6565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848301526000808686829851910182855af13d15611f6b573d91611f1483610561565b92611f22604051948561051e565b83523d878785013e611f6f565b805180611f3d575b50505050565b81839181010312611f6757015190811515820361028f5750611f5e90611e27565b38808080611f37565b8280fd5b6060915b91929015611feb5750815115611f83575090565b3b15611f8c5790565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561066a5750805190602001fdfea2646970667358221220058f0a8f7bdd06a6e5502ecb822fcdc14492034084bf36387587acb6315295d564736f6c634300080e0033",
  "devdoc": {
    "author": "Kresko",
    "kind": "dev",
    "methods": {
      "depositCollateral(address,address,uint256)": {
        "params": {
          "_account": "The user to deposit collateral for.",
          "_collateralAsset": "The address of the collateral asset.",
          "_depositAmount": "The amount of the collateral asset to deposit."
        }
      },
      "withdrawCollateral(address,address,uint256,uint256)": {
        "details": "Requires the post-withdrawal collateral value to violate minimum collateral requirement.",
        "params": {
          "_account": "The address to withdraw assets for.",
          "_collateralAsset": "The address of the collateral asset.",
          "_depositedCollateralAssetIndex": "The index of the collateral asset in the sender's deposited collateral assets array. Only needed if withdrawing the entire deposit of a particular collateral asset.",
          "_withdrawAmount": "The amount of the collateral asset to withdraw."
        }
      }
    },
    "title": "DepositWithdrawFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositCollateral(address,address,uint256)": {
        "notice": "Deposits collateral into the protocol."
      },
      "withdrawCollateral(address,address,uint256,uint256)": {
        "notice": "Withdraws sender's collateral from the protocol."
      }
    },
    "notice": "Main end-user functionality concerning collateral asset deposits and withdrawals within the Kresko protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}