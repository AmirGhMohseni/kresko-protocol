{
  "address": "0xcFc6ff1128686C112326a385A57934C8A4BB7E55",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IKISS",
          "name": "_KISS",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_underlyings",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kissIssued",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "Issue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kissDestroyed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingOut",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "UnderlyingDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "UnderlyingEnabled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "KISS",
      "outputs": [
        {
          "internalType": "contract IKISS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_kissIn",
          "type": "uint256"
        }
      ],
      "name": "fromKISS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "underlyingOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_underlyingIn",
          "type": "uint256"
        }
      ],
      "name": "issue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_underlyingOut",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_underlyingIn",
          "type": "uint256"
        }
      ],
      "name": "toKISS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "kissOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "toggleUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "underlyings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf64e0e4fe0e9d1e6a8e6614dbc1d84da37a47bd5e2a2e76b39258e7a095cebe2",
  "receipt": {
    "to": null,
    "from": "0x2121245dcAD697f11244068AaD6EcbC301811239",
    "contractAddress": "0xcFc6ff1128686C112326a385A57934C8A4BB7E55",
    "transactionIndex": 0,
    "gasUsed": "1640927",
    "logsBloom": "0x
    "blockHash": "0xa2e8c9de0807a364c2d359bf284d85597db4affc5cecc7cfd96ac0fc91ef980d",
    "transactionHash": "0xf64e0e4fe0e9d1e6a8e6614dbc1d84da37a47bd5e2a2e76b39258e7a095cebe2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2061322,
        "transactionHash": "0xf64e0e4fe0e9d1e6a8e6614dbc1d84da37a47bd5e2a2e76b39258e7a095cebe2",
        "address": "0xcFc6ff1128686C112326a385A57934C8A4BB7E55",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002121245dcad697f11244068aad6ecbc301811239"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa2e8c9de0807a364c2d359bf284d85597db4affc5cecc7cfd96ac0fc91ef980d"
      }
    ],
    "blockNumber": 2061322,
    "cumulativeGasUsed": "1640927",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdE945BB222777d72F82d589Fa711Ba522A5FDec9",
    [
      "0x9fedD80495dE8223a403b35e2e9D1C5b96d86Cd3"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "83713c02c02640d2cd1e3b8340799402",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IKISS\",\"name\":\"_KISS\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_underlyings\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kissIssued\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kissDestroyed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"UnderlyingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"UnderlyingEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KISS\",\"outputs\":[{\"internalType\":\"contract IKISS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_kissIn\",\"type\":\"uint256\"}],\"name\":\"fromKISS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingIn\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingIn\",\"type\":\"uint256\"}],\"name\":\"toKISS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kissOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"toggleUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"underlyings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kresko\",\"kind\":\"dev\",\"methods\":{\"fromKISS(address,uint256)\":{\"details\":\"TEST - no oracles - 1-1 ratio\",\"params\":{\"_kissIn\":\"amount of KISS\",\"_underlying\":\"underlying asset\"},\"returns\":{\"underlyingOut\":\"amount of underlying for `_kissIn`\"}},\"issue(address,address,uint256)\":{\"params\":{\"_to\":\"KISS recipient\",\"_underlying\":\"underlying asset\",\"_underlyingIn\":\"amount of underlying to convert into KISS\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(address,address,uint256)\":{\"params\":{\"_to\":\"address to send underlying\",\"_underlying\":\"underlying asset\",\"_underlyingOut\":\"amount of underlying to redeem\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"toKISS(address,uint256)\":{\"details\":\"TEST - no oracles - 1-1 ratio\",\"params\":{\"_underlying\":\"underlying asset\",\"_underlyingIn\":\"underlying asset amount\"},\"returns\":{\"kissOut\":\"amount of KISS for `_underlyingIn`\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"KISSConverter (TEST VERSION)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fromKISS(address,uint256)\":{\"notice\":\"Get equal amount of underlying for an amount of KISS\"},\"issue(address,address,uint256)\":{\"notice\":\"Issue KISS for amount of underlyingaddress(0) == _msgSender()\"},\"redeem(address,address,uint256)\":{\"notice\":\"Redeem underlying, destroy KISSaddress(0) == _msgSender()amount of KISS destroyed likely differs\"},\"toKISS(address,uint256)\":{\"notice\":\"Get equal amount of KISS for an amount of underlying\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/kiss/KISSConverter.sol\":\"KISSConverter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/kiss/KISSConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Error} from \\\"../libs/Errors.sol\\\";\\nimport \\\"./interfaces/IKISS.sol\\\";\\n\\n/* solhint-disable var-name-mixedcase */\\n/* solhint-disable contract-name-camelcase */\\n\\n/**\\n * @title KISSConverter (TEST VERSION)\\n * @author Kresko\\n */\\ncontract KISSConverter is Ownable, ReentrancyGuard {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Types                                   */\\n    /* -------------------------------------------------------------------------- */\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Layout                                   */\\n    /* -------------------------------------------------------------------------- */\\n    IKISS public immutable KISS;\\n    mapping(address => bool) public underlyings;\\n    mapping(address => mapping(address => uint256)) public balances;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Events                                   */\\n    /* -------------------------------------------------------------------------- */\\n\\n    event Issue(uint256 underlyingIn, uint256 kissIssued, address indexed to, address indexed underlying);\\n    event Redeem(uint256 kissDestroyed, uint256 underlyingOut, address indexed to, address indexed underlying);\\n    event UnderlyingEnabled(address indexed underlying);\\n    event UnderlyingDisabled(address indexed underlying);\\n\\n    constructor(IKISS _KISS, address[] memory _underlyings) {\\n        KISS = _KISS;\\n        for (uint256 i; i < _underlyings.length; i++) {\\n            underlyings[_underlyings[i]] = true;\\n        }\\n    }\\n\\n    function toggleUnderlying(address _underlying) external onlyOwner {\\n        bool enabled = !underlyings[_underlying];\\n\\n        underlyings[_underlying] = enabled;\\n        if (enabled) {\\n            emit UnderlyingEnabled(_underlying);\\n        } else {\\n            emit UnderlyingDisabled(_underlying);\\n        }\\n    }\\n\\n    /**\\n     * @notice Issue KISS for amount of underlying\\n     *\\n     * @param _to KISS recipient\\n     * @notice address(0) == _msgSender()\\n     *\\n     * @param _underlying underlying asset\\n     * @param _underlyingIn amount of underlying to convert into KISS\\n     *\\n     */\\n    function issue(\\n        address _to,\\n        address _underlying,\\n        uint256 _underlyingIn\\n    ) external nonReentrant {\\n        require(underlyings[_underlying], \\\"ISSUE: !underlying\\\");\\n\\n        address sender = _msgSender();\\n        address to = _to == address(0) ? sender : _to;\\n        balances[to][_underlying] += _underlyingIn;\\n\\n        IERC20MetadataUpgradeable(_underlying).safeTransferFrom(sender, address(this), _underlyingIn);\\n\\n        uint256 kissOut = toKISS(_underlying, _underlyingIn);\\n        KISS.mint(to, kissOut);\\n\\n        emit Issue(_underlyingIn, kissOut, to, _underlying);\\n    }\\n\\n    /**\\n     * @notice Redeem underlying, destroy KISS\\n     *\\n     * @param _to address to send underlying\\n     * @notice address(0) == _msgSender()\\n     *\\n     * @param _underlying underlying asset\\n     * @param _underlyingOut amount of underlying to redeem\\n     * @notice amount of KISS destroyed likely differs\\n     *\\n     */\\n    function redeem(\\n        address _to,\\n        address _underlying,\\n        uint256 _underlyingOut\\n    ) external nonReentrant {\\n        require(underlyings[_underlying], \\\"REDEEM: !underlying\\\");\\n\\n        address sender = _msgSender();\\n        require(balances[sender][_underlying] >= _underlyingOut, \\\"REDEEM: !balance\\\");\\n\\n        address to = _to == address(0) ? sender : _to;\\n        balances[to][_underlying] -= _underlyingOut;\\n\\n        uint256 kissIn = toKISS(_underlying, _underlyingOut);\\n        KISS.burn(sender, kissIn);\\n\\n        IERC20MetadataUpgradeable(_underlying).safeTransfer(to, _underlyingOut);\\n        emit Redeem(kissIn, _underlyingOut, to, _underlying);\\n    }\\n\\n    /**\\n     * @notice Get equal amount of KISS for an amount of underlying\\n     * @param _underlying underlying asset\\n     * @param _underlyingIn underlying asset amount\\n     * @return kissOut amount of KISS for `_underlyingIn`\\n     * @dev TEST - no oracles - 1-1 ratio\\n     */\\n    function toKISS(address _underlying, uint256 _underlyingIn) public pure returns (uint256 kissOut) {\\n        require(_underlying != address(0), Error.ZERO_ADDRESS);\\n        return _underlyingIn;\\n    }\\n\\n    /**\\n     * @notice Get equal amount of underlying for an amount of KISS\\n     * @param _underlying underlying asset\\n     * @param _kissIn amount of KISS\\n     * @return underlyingOut amount of underlying for `_kissIn`\\n     * @dev TEST - no oracles - 1-1 ratio\\n     */\\n    function fromKISS(address _underlying, uint256 _kissIn) public pure returns (uint256 underlyingOut) {\\n        require(_underlying != address(0), Error.ZERO_ADDRESS);\\n        return _kissIn;\\n    }\\n}\\n\",\"keccak256\":\"0x75ce0c1a33f2feeefaca4c4a023f0c693c84fac722cf55e85990b5d1362d3183\",\"license\":\"MIT\"},\"src/contracts/kiss/interfaces/IKISS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface IKISS {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\",\"keccak256\":\"0xcd85eef0ff08290d1ffd71d11afbaa643267bdbeb8ec318155369a9d72194adc\",\"license\":\"MIT\"},\"src/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @author Kresko\\n * @title Error codes\\n * @notice Kresko-specific revert return values and their explanation\\n * @dev First number indicates the domain for the error\\n */\\nlibrary Error {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Diamond                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // Preserve readability for the diamond proxy\\n    string public constant DIAMOND_INVALID_FUNCTION_SIGNATURE = \\\"krDiamond: function does not exist\\\";\\n    string public constant DIAMOND_INVALID_PENDING_OWNER = \\\"krDiamond: Must be pending contract owner\\\";\\n    string public constant DIAMOND_INVALID_OWNER = \\\"krDiamond: Must be diamond owner\\\";\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   1. General                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_OWNER = \\\"100\\\"; // The sender must be owner\\n    string public constant NOT_OPERATOR = \\\"101\\\"; // The sender must be operator\\n    string public constant ZERO_WITHDRAW = \\\"102\\\"; // Withdraw must be greater than 0\\n    string public constant ZERO_DEPOSIT = \\\"103\\\"; // Deposit must be greater than 0\\n    string public constant ZERO_ADDRESS = \\\"104\\\"; // Address provided cannot be address(0)\\n    string public constant ALREADY_INITIALIZED = \\\"105\\\"; // Contract has already been initialized\\n    string public constant RE_ENTRANCY = \\\"106\\\"; // Function does not allow re-entrant calls\\n    string public constant NOT_ENOUGH_BALANCE = \\\"107\\\"; // Transfer of rebasing token exceeds value\\n    string public constant NOT_ENOUGH_ALLOWANCE = \\\"108\\\"; // TransferFrom of rebasing token exceeds allowance\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   2. Minter                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_LIQUIDATABLE = \\\"200\\\"; // Account has collateral deposits exceeding minCollateralValue\\n    string public constant ZERO_MINT = \\\"201\\\"; // Mint amount must be greater than 0\\n    string public constant ZERO_BURN = \\\"202\\\"; // Burn amount must be greater than 0\\n    string public constant ADDRESS_INVALID_ORACLE = \\\"203\\\"; // Oracle address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_NRWT = \\\"204\\\"; // Underlying rebasing token address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_FEERECIPIENT = \\\"205\\\"; // Fee recipient address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_COLLATERAL = \\\"206\\\"; // Collateral address cant be set to address(0)\\n    string public constant COLLATERAL_EXISTS = \\\"207\\\"; // Collateral has already been added into the protocol\\n    string public constant COLLATERAL_INVALID_FACTOR = \\\"208\\\"; // cFactor must be greater than 1FP\\n    string public constant COLLATERAL_WITHDRAW_OVERFLOW = \\\"209\\\"; // Withdraw amount cannot reduce accounts collateral value under minCollateralValue\\n    string public constant KRASSET_INVALID_FACTOR = \\\"210\\\"; // kFactor must be greater than 1FP\\n    string public constant KRASSET_BURN_AMOUNT_OVERFLOW = \\\"211\\\"; // Repaying more than account has debt\\n    string public constant KRASSET_EXISTS = \\\"212\\\"; // Asset is already added\\n    string public constant PARAM_CLOSE_FEE_TOO_HIGH = \\\"213\\\"; // \\\"Close fee exceeds MAX_CLOSE_FEE\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_LOW = \\\"214\\\"; // \\\"Liquidation incentive less than MIN_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_HIGH = \\\"215\\\"; // \\\"Liquidation incentive greater than MAX_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_MIN_COLLATERAL_RATIO_LOW = \\\"216\\\"; // Minimum collateral ratio less than MIN_COLLATERALIZATION_RATIO\\n    string public constant PARAM_MIN_DEBT_AMOUNT_HIGH = \\\"217\\\"; // Minimum debt param argument exceeds MAX_DEBT_VALUE\\n    string public constant COLLATERAL_DOESNT_EXIST = \\\"218\\\"; // Collateral does not exist within the protocol\\n    string public constant KRASSET_DOESNT_EXIST = \\\"219\\\"; // KrAsset does not exist within the protocol\\n    string public constant KRASSET_NOT_MINTABLE = \\\"220\\\"; // KrAsset is not mintable\\n    string public constant KRASSET_SYMBOL_EXISTS = \\\"221\\\"; // KrAsset with this symbol is already within the protocl\\n    string public constant KRASSET_COLLATERAL_LOW = \\\"222\\\"; // Collateral deposits do not cover the amount being minted\\n    string public constant KRASSET_MINT_AMOUNT_LOW = \\\"223\\\"; // Debt position must be greater than the minimum debt position value\\n    string public constant KRASSET_MAX_SUPPLY_REACHED = \\\"224\\\"; // Asset being minted has reached its current supply limit\\n\\n    string public constant SELF_LIQUIDATION = \\\"225\\\"; // Account cannot liquidate itself\\n    string public constant ZERO_REPAY = \\\"226\\\"; // Account cannot liquidate itself\\n    string public constant STALE_PRICE = \\\"227\\\"; // Price for the asset is stale\\n    string public constant LIQUIDATION_OVERFLOW = \\\"228\\\"; // Repaying more USD value than allowed\\n    string public constant ADDRESS_INVALID_SAFETY_COUNCIL = \\\"229\\\"; // Account responsible for the safety council role must be a multisig\\n    string public constant SAFETY_COUNCIL_EXISTS = \\\"230\\\"; // Only one council role can exist\\n    string public constant NOT_SAFETY_COUNCIL = \\\"231\\\"; // Sender must have the role `Role.SAFETY_COUNCIL`\\n    string public constant ACTION_PAUSED_FOR_ASSET = \\\"232\\\"; // This action is currently paused for this asset\\n    string public constant INVALID_ASSET_SUPPLIED = \\\"233\\\"; // Asset supplied is not a collateral nor a krAsset\\n    string public constant KRASSET_NOT_ANCHOR = \\\"234\\\"; // Address is not the anchor for the krAsset\\n    string public constant INVALID_LT = \\\"235\\\"; // Liquidation threshold is greater than minimum collateralization ratio\\n    string public constant COLLATERAL_INSUFFICIENT_AMOUNT = \\\"236\\\"; // Insufficient amount of collateral to complete the operation\\n    string public constant MULTISIG_NOT_ENOUGH_OWNERS = \\\"237\\\"; // Multisig has invalid amount of owners\\n    string public constant PARAM_OPEN_FEE_TOO_HIGH = \\\"238\\\"; // \\\"Close fee exceeds MAX_OPEN_FEE\\\"\\n    string public constant INVALID_FEE_TYPE = \\\"239\\\"; // \\\"Invalid fee type\\n    string public constant KRASSET_INVALID_ANCHOR = \\\"240\\\"; // krAsset anchor does not support the correct interfaceId\\n    string public constant KRASSET_INVALID_CONTRACT = \\\"241\\\"; // krAsset does not support the correct interfaceId\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   3. Staking                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REWARD_PER_BLOCK_MISSING = \\\"300\\\"; // Each reward token must have a reward per block value\\n    string public constant REWARD_TOKENS_MISSING = \\\"301\\\"; // Pool must include an array of reward token addresses\\n    string public constant POOL_EXISTS = \\\"302\\\"; // Pool with this deposit token already exists\\n    string public constant POOL_DOESNT_EXIST = \\\"303\\\"; // Pool with this deposit token does not exist\\n    string public constant ADDRESS_INVALID_REWARD_RECIPIENT = \\\"304\\\"; // Reward recipient cant be address(0)\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   4. Libraries                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant ARRAY_OUT_OF_BOUNDS = \\\"400\\\"; // Array out of bounds error\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   5. KrAsset                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REBASING_DENOMINATOR_LOW = \\\"500\\\"; // denominator of rebases must be >= 1\\n    string public constant ISSUER_NOT_KRESKO = \\\"501\\\"; // issue must be done by kresko\\n    string public constant REDEEMER_NOT_KRESKO = \\\"502\\\"; // redeem must be done by kresko\\n    string public constant DESTROY_OVERFLOW = \\\"503\\\"; // trying to destroy more than allowed\\n    string public constant ISSUE_OVERFLOW = \\\"504\\\"; // trying to destroy more than allowed\\n    string public constant MINT_OVERFLOW = \\\"505\\\"; // trying to destroy more than allowed\\n    string public constant DEPOSIT_OVERFLOW = \\\"506\\\"; // trying to destroy more than allowed\\n    string public constant REDEEM_OVERFLOW = \\\"507\\\"; // trying to destroy more than allowed\\n    string public constant WITHDRAW_OVERFLOW = \\\"508\\\"; // trying to destroy more than allowed\\n    string public constant ZERO_SHARES = \\\"509\\\"; // amount of shares must be greater than 0\\n    string public constant ZERO_ASSETS = \\\"510\\\"; // amount of assets must be greater than 0\\n}\\n\",\"keccak256\":\"0x5719ee89e343274b01e87f047274b440a7fea0433fb0a06e1aa00893fd1951eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620020b3380380620020b3833981810160405281019062000037919062000432565b620000576200004b6200013360201b60201c565b6200013b60201b60201c565b600180819055508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060005b81518110156200012a57600160026000848481518110620000bb57620000ba62000498565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080620001219062000500565b91505062000095565b5050506200054d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002408262000213565b9050919050565b6000620002548262000233565b9050919050565b620002668162000247565b81146200027257600080fd5b50565b60008151905062000286816200025b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002dc8262000291565b810181811067ffffffffffffffff82111715620002fe57620002fd620002a2565b5b80604052505050565b600062000313620001ff565b9050620003218282620002d1565b919050565b600067ffffffffffffffff821115620003445762000343620002a2565b5b602082029050602081019050919050565b600080fd5b620003658162000233565b81146200037157600080fd5b50565b60008151905062000385816200035a565b92915050565b6000620003a26200039c8462000326565b62000307565b90508083825260208201905060208402830185811115620003c857620003c762000355565b5b835b81811015620003f55780620003e0888262000374565b845260208401935050602081019050620003ca565b5050509392505050565b600082601f8301126200041757620004166200028c565b5b8151620004298482602086016200038b565b91505092915050565b600080604083850312156200044c576200044b62000209565b5b60006200045c8582860162000275565b925050602083015167ffffffffffffffff81111562000480576200047f6200020e565b5b6200048e85828601620003ff565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006200050d82620004f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620005425762000541620004c7565b5b600182019050919050565b608051611b3c62000577600039600081816105f10152818161071f0152610af80152611b3c6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063679a8da811610071578063679a8da814610164578063715018a6146101945780638da5cb5b1461019e578063b6139992146101bc578063c23f001f146101d8578063f2fde38b14610208576100a9565b806301b29119146100ae5780630e6dfcd5146100ca5780633f9bd874146100e657806353764ebe14610104578063552cd1b514610134575b600080fd5b6100c860048036038101906100c391906111da565b610224565b005b6100e460048036038101906100df919061123d565b61036b565b005b6100ee61071d565b6040516100fb91906112ef565b60405180910390f35b61011e6004803603810190610119919061130a565b610741565b60405161012b9190611359565b60405180910390f35b61014e6004803603810190610149919061130a565b6107f4565b60405161015b9190611359565b60405180910390f35b61017e600480360381019061017991906111da565b6108a7565b60405161018b919061138f565b60405180910390f35b61019c6108c7565b005b6101a66108db565b6040516101b391906113b9565b60405180910390f35b6101d660048036038101906101d1919061123d565b610904565b005b6101f260048036038101906101ed91906113d4565b610bf9565b6040516101ff9190611359565b60405180910390f35b610222600480360381019061021d91906111da565b610c1e565b005b61022c610ca1565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015610323578173ffffffffffffffffffffffffffffffffffffffff167fabf4d64ce5121a1e72d320d057f320bb7c40997e6dcabca4dcd254eef9f6d74a60405160405180910390a2610367565b8173ffffffffffffffffffffffffffffffffffffffff167ff936ffcc7d39a14d439d7bee0f8cfba92398707f5a37a9c8ea4c65371d235e1c60405160405180910390a25b5050565b6002600154036103b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a790611471565b60405180910390fd5b6002600181905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043b906114dd565b60405180910390fd5b600061044e610d1f565b905081600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690611549565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461054a578461054c565b815b905082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105da9190611598565b9250508190555060006105ed8585610741565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639dc29fac84836040518363ffffffff1660e01b815260040161064a9291906115cc565b600060405180830381600087803b15801561066457600080fd5b505af1158015610678573d6000803e3d6000fd5b505050506106a782858773ffffffffffffffffffffffffffffffffffffffff16610d279092919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc7f098657aa627802dbc6b2c5bdd77a5dc62b624fe6ff30eeeb16e9308c67f1983876040516107069291906115f5565b60405180910390a350505060018081905550505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600381526020017f3130340000000000000000000000000000000000000000000000000000000000815250906107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e191906116a6565b60405180910390fd5b5081905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600381526020017f31303400000000000000000000000000000000000000000000000000000000008152509061089d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089491906116a6565b60405180910390fd5b5081905092915050565b60026020528060005260406000206000915054906101000a900460ff1681565b6108cf610ca1565b6108d96000610dad565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260015403610949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094090611471565b60405180910390fd5b6002600181905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d490611714565b60405180910390fd5b60006109e7610d1f565b905060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610a245784610a26565b815b905082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ab49190611734565b92505081905550610ae88230858773ffffffffffffffffffffffffffffffffffffffff16610e71909392919063ffffffff16565b6000610af48585610741565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401610b519291906115cc565b600060405180830381600087803b158015610b6b57600080fd5b505af1158015610b7f573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f21f0ca23fad9b3f9ee7ea19a41434459b5ba2efc2b37de2711af801af99bbb218684604051610be29291906115f5565b60405180910390a350505060018081905550505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b610c26610ca1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8c906117fc565b60405180910390fd5b610c9e81610dad565b50565b610ca9610d1f565b73ffffffffffffffffffffffffffffffffffffffff16610cc76108db565b73ffffffffffffffffffffffffffffffffffffffff1614610d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1490611868565b60405180910390fd5b565b600033905090565b610da88363a9059cbb60e01b8484604051602401610d469291906115cc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610efa565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610ef4846323b872dd60e01b858585604051602401610e9293929190611888565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610efa565b50505050565b6000610f5c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610fc19092919063ffffffff16565b9050600081511115610fbc5780806020019051810190610f7c91906118eb565b610fbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb29061198a565b60405180910390fd5b5b505050565b6060610fd08484600085610fd9565b90509392505050565b60608247101561101e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101590611a1c565b60405180910390fd5b611027856110ed565b611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d90611a88565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161108f9190611aef565b60006040518083038185875af1925050503d80600081146110cc576040519150601f19603f3d011682016040523d82523d6000602084013e6110d1565b606091505b50915091506110e1828286611110565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561112057829050611170565b6000835111156111335782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116791906116a6565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111a78261117c565b9050919050565b6111b78161119c565b81146111c257600080fd5b50565b6000813590506111d4816111ae565b92915050565b6000602082840312156111f0576111ef611177565b5b60006111fe848285016111c5565b91505092915050565b6000819050919050565b61121a81611207565b811461122557600080fd5b50565b60008135905061123781611211565b92915050565b60008060006060848603121561125657611255611177565b5b6000611264868287016111c5565b9350506020611275868287016111c5565b925050604061128686828701611228565b9150509250925092565b6000819050919050565b60006112b56112b06112ab8461117c565b611290565b61117c565b9050919050565b60006112c78261129a565b9050919050565b60006112d9826112bc565b9050919050565b6112e9816112ce565b82525050565b600060208201905061130460008301846112e0565b92915050565b6000806040838503121561132157611320611177565b5b600061132f858286016111c5565b925050602061134085828601611228565b9150509250929050565b61135381611207565b82525050565b600060208201905061136e600083018461134a565b92915050565b60008115159050919050565b61138981611374565b82525050565b60006020820190506113a46000830184611380565b92915050565b6113b38161119c565b82525050565b60006020820190506113ce60008301846113aa565b92915050565b600080604083850312156113eb576113ea611177565b5b60006113f9858286016111c5565b925050602061140a858286016111c5565b9150509250929050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061145b601f83611414565b915061146682611425565b602082019050919050565b6000602082019050818103600083015261148a8161144e565b9050919050565b7f52454445454d3a2021756e6465726c79696e6700000000000000000000000000600082015250565b60006114c7601383611414565b91506114d282611491565b602082019050919050565b600060208201905081810360008301526114f6816114ba565b9050919050565b7f52454445454d3a202162616c616e636500000000000000000000000000000000600082015250565b6000611533601083611414565b915061153e826114fd565b602082019050919050565b6000602082019050818103600083015261156281611526565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115a382611207565b91506115ae83611207565b9250828210156115c1576115c0611569565b5b828203905092915050565b60006040820190506115e160008301856113aa565b6115ee602083018461134a565b9392505050565b600060408201905061160a600083018561134a565b611617602083018461134a565b9392505050565b600081519050919050565b60005b8381101561164757808201518184015260208101905061162c565b83811115611656576000848401525b50505050565b6000601f19601f8301169050919050565b60006116788261161e565b6116828185611414565b9350611692818560208601611629565b61169b8161165c565b840191505092915050565b600060208201905081810360008301526116c0818461166d565b905092915050565b7f49535355453a2021756e6465726c79696e670000000000000000000000000000600082015250565b60006116fe601283611414565b9150611709826116c8565b602082019050919050565b6000602082019050818103600083015261172d816116f1565b9050919050565b600061173f82611207565b915061174a83611207565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561177f5761177e611569565b5b828201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006117e6602683611414565b91506117f18261178a565b604082019050919050565b60006020820190508181036000830152611815816117d9565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611852602083611414565b915061185d8261181c565b602082019050919050565b6000602082019050818103600083015261188181611845565b9050919050565b600060608201905061189d60008301866113aa565b6118aa60208301856113aa565b6118b7604083018461134a565b949350505050565b6118c881611374565b81146118d357600080fd5b50565b6000815190506118e5816118bf565b92915050565b60006020828403121561190157611900611177565b5b600061190f848285016118d6565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611974602a83611414565b915061197f82611918565b604082019050919050565b600060208201905081810360008301526119a381611967565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611a06602683611414565b9150611a11826119aa565b604082019050919050565b60006020820190508181036000830152611a35816119f9565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611a72601d83611414565b9150611a7d82611a3c565b602082019050919050565b60006020820190508181036000830152611aa181611a65565b9050919050565b600081519050919050565b600081905092915050565b6000611ac982611aa8565b611ad38185611ab3565b9350611ae3818560208601611629565b80840191505092915050565b6000611afb8284611abe565b91508190509291505056fea26469706673582212203c98c95649101b7ef7d4feafaf9343e282f7d15608b6a2f517ebdb134d964c9a64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063679a8da811610071578063679a8da814610164578063715018a6146101945780638da5cb5b1461019e578063b6139992146101bc578063c23f001f146101d8578063f2fde38b14610208576100a9565b806301b29119146100ae5780630e6dfcd5146100ca5780633f9bd874146100e657806353764ebe14610104578063552cd1b514610134575b600080fd5b6100c860048036038101906100c391906111da565b610224565b005b6100e460048036038101906100df919061123d565b61036b565b005b6100ee61071d565b6040516100fb91906112ef565b60405180910390f35b61011e6004803603810190610119919061130a565b610741565b60405161012b9190611359565b60405180910390f35b61014e6004803603810190610149919061130a565b6107f4565b60405161015b9190611359565b60405180910390f35b61017e600480360381019061017991906111da565b6108a7565b60405161018b919061138f565b60405180910390f35b61019c6108c7565b005b6101a66108db565b6040516101b391906113b9565b60405180910390f35b6101d660048036038101906101d1919061123d565b610904565b005b6101f260048036038101906101ed91906113d4565b610bf9565b6040516101ff9190611359565b60405180910390f35b610222600480360381019061021d91906111da565b610c1e565b005b61022c610ca1565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615905080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015610323578173ffffffffffffffffffffffffffffffffffffffff167fabf4d64ce5121a1e72d320d057f320bb7c40997e6dcabca4dcd254eef9f6d74a60405160405180910390a2610367565b8173ffffffffffffffffffffffffffffffffffffffff167ff936ffcc7d39a14d439d7bee0f8cfba92398707f5a37a9c8ea4c65371d235e1c60405160405180910390a25b5050565b6002600154036103b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a790611471565b60405180910390fd5b6002600181905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043b906114dd565b60405180910390fd5b600061044e610d1f565b905081600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690611549565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461054a578461054c565b815b905082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105da9190611598565b9250508190555060006105ed8585610741565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639dc29fac84836040518363ffffffff1660e01b815260040161064a9291906115cc565b600060405180830381600087803b15801561066457600080fd5b505af1158015610678573d6000803e3d6000fd5b505050506106a782858773ffffffffffffffffffffffffffffffffffffffff16610d279092919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc7f098657aa627802dbc6b2c5bdd77a5dc62b624fe6ff30eeeb16e9308c67f1983876040516107069291906115f5565b60405180910390a350505060018081905550505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600381526020017f3130340000000000000000000000000000000000000000000000000000000000815250906107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e191906116a6565b60405180910390fd5b5081905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600381526020017f31303400000000000000000000000000000000000000000000000000000000008152509061089d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089491906116a6565b60405180910390fd5b5081905092915050565b60026020528060005260406000206000915054906101000a900460ff1681565b6108cf610ca1565b6108d96000610dad565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260015403610949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094090611471565b60405180910390fd5b6002600181905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d490611714565b60405180910390fd5b60006109e7610d1f565b905060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610a245784610a26565b815b905082600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ab49190611734565b92505081905550610ae88230858773ffffffffffffffffffffffffffffffffffffffff16610e71909392919063ffffffff16565b6000610af48585610741565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401610b519291906115cc565b600060405180830381600087803b158015610b6b57600080fd5b505af1158015610b7f573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f21f0ca23fad9b3f9ee7ea19a41434459b5ba2efc2b37de2711af801af99bbb218684604051610be29291906115f5565b60405180910390a350505060018081905550505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b610c26610ca1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8c906117fc565b60405180910390fd5b610c9e81610dad565b50565b610ca9610d1f565b73ffffffffffffffffffffffffffffffffffffffff16610cc76108db565b73ffffffffffffffffffffffffffffffffffffffff1614610d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1490611868565b60405180910390fd5b565b600033905090565b610da88363a9059cbb60e01b8484604051602401610d469291906115cc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610efa565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610ef4846323b872dd60e01b858585604051602401610e9293929190611888565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610efa565b50505050565b6000610f5c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610fc19092919063ffffffff16565b9050600081511115610fbc5780806020019051810190610f7c91906118eb565b610fbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb29061198a565b60405180910390fd5b5b505050565b6060610fd08484600085610fd9565b90509392505050565b60608247101561101e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101590611a1c565b60405180910390fd5b611027856110ed565b611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d90611a88565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161108f9190611aef565b60006040518083038185875af1925050503d80600081146110cc576040519150601f19603f3d011682016040523d82523d6000602084013e6110d1565b606091505b50915091506110e1828286611110565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561112057829050611170565b6000835111156111335782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116791906116a6565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111a78261117c565b9050919050565b6111b78161119c565b81146111c257600080fd5b50565b6000813590506111d4816111ae565b92915050565b6000602082840312156111f0576111ef611177565b5b60006111fe848285016111c5565b91505092915050565b6000819050919050565b61121a81611207565b811461122557600080fd5b50565b60008135905061123781611211565b92915050565b60008060006060848603121561125657611255611177565b5b6000611264868287016111c5565b9350506020611275868287016111c5565b925050604061128686828701611228565b9150509250925092565b6000819050919050565b60006112b56112b06112ab8461117c565b611290565b61117c565b9050919050565b60006112c78261129a565b9050919050565b60006112d9826112bc565b9050919050565b6112e9816112ce565b82525050565b600060208201905061130460008301846112e0565b92915050565b6000806040838503121561132157611320611177565b5b600061132f858286016111c5565b925050602061134085828601611228565b9150509250929050565b61135381611207565b82525050565b600060208201905061136e600083018461134a565b92915050565b60008115159050919050565b61138981611374565b82525050565b60006020820190506113a46000830184611380565b92915050565b6113b38161119c565b82525050565b60006020820190506113ce60008301846113aa565b92915050565b600080604083850312156113eb576113ea611177565b5b60006113f9858286016111c5565b925050602061140a858286016111c5565b9150509250929050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061145b601f83611414565b915061146682611425565b602082019050919050565b6000602082019050818103600083015261148a8161144e565b9050919050565b7f52454445454d3a2021756e6465726c79696e6700000000000000000000000000600082015250565b60006114c7601383611414565b91506114d282611491565b602082019050919050565b600060208201905081810360008301526114f6816114ba565b9050919050565b7f52454445454d3a202162616c616e636500000000000000000000000000000000600082015250565b6000611533601083611414565b915061153e826114fd565b602082019050919050565b6000602082019050818103600083015261156281611526565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115a382611207565b91506115ae83611207565b9250828210156115c1576115c0611569565b5b828203905092915050565b60006040820190506115e160008301856113aa565b6115ee602083018461134a565b9392505050565b600060408201905061160a600083018561134a565b611617602083018461134a565b9392505050565b600081519050919050565b60005b8381101561164757808201518184015260208101905061162c565b83811115611656576000848401525b50505050565b6000601f19601f8301169050919050565b60006116788261161e565b6116828185611414565b9350611692818560208601611629565b61169b8161165c565b840191505092915050565b600060208201905081810360008301526116c0818461166d565b905092915050565b7f49535355453a2021756e6465726c79696e670000000000000000000000000000600082015250565b60006116fe601283611414565b9150611709826116c8565b602082019050919050565b6000602082019050818103600083015261172d816116f1565b9050919050565b600061173f82611207565b915061174a83611207565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561177f5761177e611569565b5b828201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006117e6602683611414565b91506117f18261178a565b604082019050919050565b60006020820190508181036000830152611815816117d9565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611852602083611414565b915061185d8261181c565b602082019050919050565b6000602082019050818103600083015261188181611845565b9050919050565b600060608201905061189d60008301866113aa565b6118aa60208301856113aa565b6118b7604083018461134a565b949350505050565b6118c881611374565b81146118d357600080fd5b50565b6000815190506118e5816118bf565b92915050565b60006020828403121561190157611900611177565b5b600061190f848285016118d6565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611974602a83611414565b915061197f82611918565b604082019050919050565b600060208201905081810360008301526119a381611967565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611a06602683611414565b9150611a11826119aa565b604082019050919050565b60006020820190508181036000830152611a35816119f9565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611a72601d83611414565b9150611a7d82611a3c565b602082019050919050565b60006020820190508181036000830152611aa181611a65565b9050919050565b600081519050919050565b600081905092915050565b6000611ac982611aa8565b611ad38185611ab3565b9350611ae3818560208601611629565b80840191505092915050565b6000611afb8284611abe565b91508190509291505056fea26469706673582212203c98c95649101b7ef7d4feafaf9343e282f7d15608b6a2f517ebdb134d964c9a64736f6c634300080e0033",
  "devdoc": {
    "author": "Kresko",
    "kind": "dev",
    "methods": {
      "fromKISS(address,uint256)": {
        "details": "TEST - no oracles - 1-1 ratio",
        "params": {
          "_kissIn": "amount of KISS",
          "_underlying": "underlying asset"
        },
        "returns": {
          "underlyingOut": "amount of underlying for `_kissIn`"
        }
      },
      "issue(address,address,uint256)": {
        "params": {
          "_to": "KISS recipient",
          "_underlying": "underlying asset",
          "_underlyingIn": "amount of underlying to convert into KISS"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(address,address,uint256)": {
        "params": {
          "_to": "address to send underlying",
          "_underlying": "underlying asset",
          "_underlyingOut": "amount of underlying to redeem"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "toKISS(address,uint256)": {
        "details": "TEST - no oracles - 1-1 ratio",
        "params": {
          "_underlying": "underlying asset",
          "_underlyingIn": "underlying asset amount"
        },
        "returns": {
          "kissOut": "amount of KISS for `_underlyingIn`"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "KISSConverter (TEST VERSION)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fromKISS(address,uint256)": {
        "notice": "Get equal amount of underlying for an amount of KISS"
      },
      "issue(address,address,uint256)": {
        "notice": "Issue KISS for amount of underlyingaddress(0) == _msgSender()"
      },
      "redeem(address,address,uint256)": {
        "notice": "Redeem underlying, destroy KISSaddress(0) == _msgSender()amount of KISS destroyed likely differs"
      },
      "toKISS(address,uint256)": {
        "notice": "Get equal amount of KISS for an amount of underlying"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4744,
        "contract": "src/contracts/kiss/KISSConverter.sol:KISSConverter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4968,
        "contract": "src/contracts/kiss/KISSConverter.sol:KISSConverter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 18701,
        "contract": "src/contracts/kiss/KISSConverter.sol:KISSConverter",
        "label": "underlyings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18707,
        "contract": "src/contracts/kiss/KISSConverter.sol:KISSConverter",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}