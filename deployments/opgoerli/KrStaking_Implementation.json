{
  "address": "0x353218308E0c72D166bF952E5feb36867cE2E945",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_allocPoint",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_startBlock",
          "type": "uint128"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "allPendingRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct KrStaking.Reward[]",
          "name": "allRewards",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_for",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        }
      ],
      "name": "claimFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        }
      ],
      "name": "getPidFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "found",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardPerBlocks",
          "type": "uint256[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_allocPoint",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_startBlock",
          "type": "uint128"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct KrStaking.Reward",
          "name": "rewards",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "allocPoint",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lastRewardBlock",
              "type": "uint128"
            },
            {
              "internalType": "uint256[]",
              "name": "accRewardPerShares",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "rewardTokens",
              "type": "address[]"
            }
          ],
          "internalType": "struct KrStaking.PoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenToRescue",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "rescueNonPoolToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardPerBlockFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "_newAllocPoint",
          "type": "uint128"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerBlockFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "allocPoint",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lastRewardBlock",
              "type": "uint128"
            },
            {
              "internalType": "uint256[]",
              "name": "accRewardPerShares",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "rewardTokens",
              "type": "address[]"
            }
          ],
          "internalType": "struct KrStaking.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "rewardDebts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct KrStaking.UserInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_for",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        }
      ],
      "name": "withdrawFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7432b352d2b484bca9aa53e729b97205d4622efc51f5355270b47ea49587afed",
  "receipt": {
    "to": null,
    "from": "0xd21040ab567F989E0E751BE56f74ca38804e53e9",
    "contractAddress": "0x353218308E0c72D166bF952E5feb36867cE2E945",
    "transactionIndex": 1,
    "gasUsed": "5054021",
    "logsBloom": "0x
    "blockHash": "0x897942586cd5b489985ca9d47c91462b91280667bab66a4c2bedb78194799d36",
    "transactionHash": "0x7432b352d2b484bca9aa53e729b97205d4622efc51f5355270b47ea49587afed",
    "logs": [],
    "blockNumber": 5252581,
    "cumulativeGasUsed": "5054021",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0ce1e08460d17f4712f59fc37114fb55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_startBlock\",\"type\":\"uint128\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"allPendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct KrStaking.Reward[]\",\"name\":\"allRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"getPidFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_startBlock\",\"type\":\"uint128\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct KrStaking.Reward\",\"name\":\"rewards\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastRewardBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"accRewardPerShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct KrStaking.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenToRescue\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueNonPoolToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerBlockFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_newAllocPoint\",\"type\":\"uint128\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlockFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastRewardBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"accRewardPerShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct KrStaking.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardDebts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct KrStaking.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool(address[],address,uint128,uint128)\":{\"params\":{\"_allocPoint\":\"weight of rewards this pool receives\",\"_depositToken\":\"token to deposit for rewards\",\"_rewardTokens\":\"tokens to reward from this pool\"}},\"allPendingRewards(address)\":{\"params\":{\"_account\":\"to get rewards for\"}},\"claim(uint256,address)\":{\"params\":{\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"address to send rewards to\"}},\"claimFor(address,uint256,address)\":{\"params\":{\"_for\":\"account to claim for\",\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"address that receives rewards\"}},\"deposit(address,uint256,uint256)\":{\"params\":{\"_amount\":\"amount of tokens to deposit\",\"_pid\":\"in `_poolInfo`\",\"_to\":\"address that msg.sender deposits tokens for\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"_pid\":\"pool id to withdraw tokens from\"}},\"getPidFor(address)\":{\"params\":{\"_depositToken\":\"depositToken in `_poolInfo`\"},\"returns\":{\"found\":\"ensure 0 index\",\"pid\":\"of pool with `_depositToken`\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pendingRewards(uint256,address)\":{\"params\":{\"_pid\":\"id in `_poolInfo`\",\"_user\":\"id in `_userInfo[_pid]`\"}},\"poolInfo(uint256)\":{\"params\":{\"_pid\":\"in `_poolInfo`\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setPool(uint256,uint128)\":{\"params\":{\"_newAllocPoint\":\"new allocation (weight) for rewards\",\"_pid\":\"pool to modify\"}},\"setRewardPerBlockFor(address,uint256)\":{\"params\":{\"_rewardPerBlock\":\"tokens to drip per block\",\"_rewardToken\":\"token to adjust the drip for\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"pool to update\"}},\"userInfo(uint256,address)\":{\"params\":{\"_account\":\"to get information for\",\"_pid\":\"in `_poolInfo`\"}},\"withdraw(uint256,uint256,address)\":{\"params\":{\"_amount\":\"amount to withdraw\",\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"address to send rewards to\"}},\"withdrawFor(address,uint256,uint256,address)\":{\"params\":{\"_amount\":\"amount to withdraw\",\"_for\":\"account to withdraw from\",\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"reward recipient\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256,uint256)\":{\"notice\":\"================================================== ============== Events ============================ ==================================================\"}},\"kind\":\"user\",\"methods\":{\"addPool(address[],address,uint128,uint128)\":{\"notice\":\"Adds a new reward poolUpdates reward token count in case of adding extra tokens\"},\"allPendingRewards(address)\":{\"notice\":\"Get all pending rewards for an account\"},\"claim(uint256,address)\":{\"notice\":\"Claim rewards only\"},\"claimFor(address,uint256,address)\":{\"notice\":\"Trusted helper contract can claim rewards on behalf of an account\"},\"deposit(address,uint256,uint256)\":{\"notice\":\"Deposits tokens for @param _to\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Emergency function, withdraws deposits from a poolThis will forfeit your rewards.\"},\"getPidFor(address)\":{\"notice\":\"Get id for a tokenUseful for external contracts\"},\"initialize(address[],uint256[],address,uint128,uint128)\":{\"notice\":\"Initialize the contract with a single poolSets initial reward token and ratesSets the caller as DEFAULT_ADMIN\"},\"massUpdatePools()\":{\"notice\":\"Updates all pools to be up-to date\"},\"pendingRewards(uint256,address)\":{\"notice\":\"Get pending rewards from a certain pool\"},\"poolInfo(uint256)\":{\"notice\":\"Get pool information\"},\"poolLength()\":{\"notice\":\"Amount of pools\"},\"rescueNative()\":{\"notice\":\"A rescue function for missent msg.valueSince we are using payable functions to save gas on calls\"},\"rescueNonPoolToken(address,uint256)\":{\"notice\":\"A rescue function for missent tokens / airdropsThis cannot withdraw any deposits due `ensurePoolDoesNotExist` modifier.\"},\"setPool(uint256,uint128)\":{\"notice\":\"Set new allocations for a poolSet `_newAllocPoint` to 0 to retire a pool\"},\"setRewardPerBlockFor(address,uint256)\":{\"notice\":\"Adjust/Set reward per block for a particular reward token\"},\"updatePool(uint256)\":{\"notice\":\"Updates a pools reward variables to be up-to date\"},\"userInfo(uint256,address)\":{\"notice\":\"Get account information on a pool\"},\"withdraw(uint256,uint256,address)\":{\"notice\":\"Withdraw deposited tokens and rewards.\"},\"withdrawFor(address,uint256,uint256,address)\":{\"notice\":\"Trusted helper contract can withdraw rewards and deposits on behalf of an accountFor eg. withdraw + remove liquidity\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/staking/KrStaking.sol\":\"KrStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"src/contracts/staking/KrStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract KrStaking is AccessControlUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    // keccak256(\\\"kresko.operator.role\\\")\\n    bytes32 public constant OPERATOR_ROLE = 0x8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd2;\\n\\n    /**\\n     * ==================================================\\n     * =============== Structs ==========================\\n     * ==================================================\\n     */\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256[] rewardDebts;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 depositToken; // Address of LP token contract.\\n        uint128 allocPoint; // How many allocation points assigned to this pool.\\n        uint128 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        uint256[] accRewardPerShares; // Accumulated rewards per share, times 1e12.\\n        address[] rewardTokens; // Reward tokens for this pool.\\n    }\\n\\n    struct Reward {\\n        uint256 pid;\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * =============== Storage ==========================\\n     * ==================================================\\n     */\\n\\n    // Info of each staked user.\\n    mapping(uint256 => mapping(address => UserInfo)) private _userInfo;\\n\\n    // Reward token drip per block\\n    mapping(address => uint256) public rewardPerBlockFor;\\n\\n    // Info of each pool.\\n    PoolInfo[] private _poolInfo;\\n\\n    // Total allocation points.\\n    uint128 public totalAllocPoint;\\n\\n    /**\\n     * ==================================================\\n     * ============== Events ============================\\n     * ==================================================\\n     */\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event ClaimRewards(address indexed user, address indexed rewardToken, uint256 indexed amount);\\n\\n    /**\\n     * ==================================================\\n     * ============== Initializer =======================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Initialize the contract with a single pool\\n     * @notice Sets initial reward token and rates\\n     * @notice Sets the caller as DEFAULT_ADMIN\\n     */\\n    function initialize(\\n        address[] calldata _rewardTokens,\\n        uint256[] calldata _rewardPerBlocks,\\n        IERC20 _depositToken,\\n        uint128 _allocPoint,\\n        uint128 _startBlock\\n    ) external initializer {\\n        require(_rewardPerBlocks.length == _rewardTokens.length, \\\"Reward tokens must have a rewardPerBlock value\\\");\\n\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        // Set initial reward tokens and allocations\\n        for (uint256 i; i < _rewardTokens.length; i++) {\\n            rewardPerBlockFor[_rewardTokens[i]] = _rewardPerBlocks[i];\\n        }\\n\\n        // Push the initial pool in.\\n        _poolInfo.push(\\n            PoolInfo({\\n                depositToken: _depositToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: _startBlock,\\n                accRewardPerShares: new uint256[](_rewardTokens.length),\\n                rewardTokens: _rewardTokens\\n            })\\n        );\\n\\n        totalAllocPoint += _allocPoint;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * =============== Modifiers ========================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Ensures no pool exists with this depositToken\\n     * @param _depositToken to check\\n     */\\n    modifier ensurePoolDoesNotExist(IERC20 _depositToken) {\\n        for (uint256 i; i < _poolInfo.length; i++) {\\n            require(address(_poolInfo[i].depositToken) != address(_depositToken), \\\"KR: poolExists\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Ensures this pool exists\\n     * @param _pid to check\\n     */\\n    modifier ensurePoolExists(uint256 _pid) {\\n        require(address(_poolInfo[_pid].depositToken) != address(0), \\\"KR: !poolExists\\\");\\n        _;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ================== Views =========================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Get pending rewards from a certain pool\\n     * @param _pid id in `_poolInfo`\\n     * @param _user id in `_userInfo[_pid]`\\n     */\\n    function pendingRewards(uint256 _pid, address _user) public view returns (Reward memory rewards) {\\n        PoolInfo memory pool = _poolInfo[_pid];\\n        UserInfo memory user = _userInfo[_pid][_user];\\n        uint256 depositTokenSupply = pool.depositToken.balanceOf(address(this));\\n        uint256 rewardTokensLength = pool.rewardTokens.length;\\n\\n        rewards = Reward({pid: _pid, tokens: pool.rewardTokens, amounts: new uint256[](rewardTokensLength)});\\n\\n        if (depositTokenSupply != 0 && user.amount > 0) {\\n            for (uint256 rewardIndex; rewardIndex < rewardTokensLength; rewardIndex++) {\\n                uint256 accRewardPerShare = pool.accRewardPerShares[rewardIndex];\\n\\n                uint256 rewardPerBlock = rewardPerBlockFor[pool.rewardTokens[rewardIndex]];\\n                uint256 blocks = block.number - pool.lastRewardBlock;\\n                uint256 reward = (rewardPerBlock * blocks * pool.allocPoint) / totalAllocPoint;\\n\\n                accRewardPerShare += (reward * 1e12) / depositTokenSupply;\\n\\n                rewards.amounts[rewardIndex] = (user.amount * accRewardPerShare) / 1e12 - user.rewardDebts[rewardIndex];\\n                rewards.tokens[rewardIndex] = pool.rewardTokens[rewardIndex];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get all pending rewards for an account\\n     * @param _account to get rewards for\\n     */\\n    function allPendingRewards(address _account) external view returns (Reward[] memory allRewards) {\\n        allRewards = new Reward[](_poolInfo.length);\\n        for (uint256 pid; pid < _poolInfo.length; pid++) {\\n            Reward memory poolReward = pendingRewards(pid, _account);\\n            allRewards[pid] = poolReward;\\n        }\\n    }\\n\\n    /**\\n     * @notice Amount of pools\\n     */\\n    function poolLength() external view returns (uint256) {\\n        return _poolInfo.length;\\n    }\\n\\n    /**\\n     * @notice Get pool information\\n     * @param _pid in `_poolInfo`\\n     */\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory) {\\n        return _poolInfo[_pid];\\n    }\\n\\n    /**\\n     * @notice Get id for a token\\n     * @notice Useful for external contracts\\n     * @param _depositToken depositToken in `_poolInfo`\\n     * @return pid of pool with `_depositToken`\\n     * @return found ensure 0 index\\n     */\\n    function getPidFor(address _depositToken) external view returns (uint256 pid, bool found) {\\n        for (pid; pid < _poolInfo.length; pid++) {\\n            if (address(_poolInfo[pid].depositToken) == _depositToken) {\\n                found = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get account information on a pool\\n     * @param _pid in `_poolInfo`\\n     * @param _account to get information for\\n     */\\n    function userInfo(uint256 _pid, address _account) external view returns (UserInfo memory) {\\n        return _userInfo[_pid][_account];\\n    }\\n\\n    /**\\n     * ==================================================\\n     * =========== Core public functions ================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Updates all pools to be up-to date\\n     */\\n    function massUpdatePools() public payable {\\n        for (uint256 pid; pid < _poolInfo.length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates a pools reward variables to be up-to date\\n     * @param _pid pool to update\\n     */\\n    function updatePool(uint256 _pid) public payable returns (PoolInfo memory pool) {\\n        pool = _poolInfo[_pid];\\n        // Updates once per block\\n        if (block.number > pool.lastRewardBlock) {\\n            uint256 deposits = pool.depositToken.balanceOf(address(this));\\n            // No rewards for 0 deposits\\n            if (deposits > 0) {\\n                for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n                    // Reward per block for a particular reward token\\n                    uint256 rewardPerBlock = rewardPerBlockFor[pool.rewardTokens[rewardIndex]];\\n                    // Blocks advanced since last update\\n                    uint256 blocks = block.number - pool.lastRewardBlock;\\n                    // Allocation for this particular pool\\n                    uint256 reward = (rewardPerBlock * blocks * pool.allocPoint) / totalAllocPoint;\\n                    // Increment accumulated rewards for new block height\\n                    pool.accRewardPerShares[rewardIndex] += (reward * 1e12) / deposits;\\n                }\\n            }\\n            // No further updates within same block height\\n            pool.lastRewardBlock = uint128(block.number);\\n            // storage\\n            _poolInfo[_pid] = pool;\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposits tokens for @param _to\\n     * @param _to address that msg.sender deposits tokens for\\n     * @param _pid in `_poolInfo`\\n     * @param _amount amount of tokens to deposit\\n     */\\n    function deposit(\\n        address _to,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external payable nonReentrant ensurePoolExists(_pid) {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][_to];\\n\\n        // Initialize rewardDebts\\n        if (user.rewardDebts.length == 0) {\\n            user.rewardDebts = new uint256[](pool.rewardTokens.length);\\n        }\\n\\n        pool.depositToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n        user.amount += _amount;\\n\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            user.rewardDebts[rewardIndex] += (_amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n        }\\n\\n        emit Deposit(_to, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw deposited tokens and rewards.\\n     * @param _pid id in `_poolInfo`\\n     * @param _amount amount to withdraw\\n     * @param _rewardRecipient address to send rewards to\\n     */\\n    function withdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _rewardRecipient\\n    ) external payable nonReentrant {\\n        require(_amount > 0, \\\"KR: 0-withdraw\\\");\\n        require(_rewardRecipient != address(0), \\\"KR: !rewardRecipient\\\");\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][msg.sender];\\n\\n        sendRewards(pool, user, _rewardRecipient);\\n\\n        // Send whole balance in case of amount exceeds deposits\\n        if (_amount > user.amount) {\\n            _amount = user.amount;\\n            user.amount = 0;\\n        } else {\\n            user.amount -= _amount;\\n        }\\n\\n        pool.depositToken.safeTransfer(address(msg.sender), _amount);\\n\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            user.rewardDebts[rewardIndex] = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Claim rewards only\\n     * @param _pid id in `_poolInfo`\\n     * @param _rewardRecipient address to send rewards to\\n     */\\n    function claim(uint256 _pid, address _rewardRecipient) external payable nonReentrant {\\n        require(_rewardRecipient != address(0), \\\"KR: !rewardRecipient\\\");\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][msg.sender];\\n\\n        if (user.amount > 0) {\\n            sendRewards(pool, user, _rewardRecipient);\\n\\n            for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n                user.rewardDebts[rewardIndex] = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Emergency function, withdraws deposits from a pool\\n     * @notice This will forfeit your rewards.\\n     * @param _pid pool id to withdraw tokens from\\n     */\\n    function emergencyWithdraw(uint256 _pid) external payable nonReentrant {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][msg.sender];\\n        pool.depositToken.safeTransfer(address(msg.sender), user.amount);\\n        user.amount = 0;\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            user.rewardDebts[rewardIndex] = 0;\\n        }\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============= Admin functions ====================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Adjust/Set reward per block for a particular reward token\\n     * @param _rewardToken token to adjust the drip for\\n     * @param _rewardPerBlock tokens to drip per block\\n     */\\n    function setRewardPerBlockFor(address _rewardToken, uint256 _rewardPerBlock)\\n        external\\n        payable\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        rewardPerBlockFor[_rewardToken] = _rewardPerBlock;\\n    }\\n\\n    /**\\n     * @notice Adds a new reward pool\\n     * @notice Updates reward token count in case of adding extra tokens\\n     * @param _rewardTokens tokens to reward from this pool\\n     * @param _depositToken token to deposit for rewards\\n     * @param _allocPoint weight of rewards this pool receives\\n     */\\n    function addPool(\\n        address[] calldata _rewardTokens,\\n        IERC20 _depositToken,\\n        uint128 _allocPoint,\\n        uint128 _startBlock\\n    ) external payable onlyRole(DEFAULT_ADMIN_ROLE) ensurePoolDoesNotExist(_depositToken) {\\n        require(_rewardTokens.length > 0, \\\"KR: !rewardTokens\\\");\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        _poolInfo.push(\\n            PoolInfo({\\n                depositToken: _depositToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: _startBlock != 0 ? _startBlock : uint128(block.number),\\n                accRewardPerShares: new uint256[](_rewardTokens.length),\\n                rewardTokens: _rewardTokens\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @notice Set new allocations for a pool\\n     * @notice Set `_newAllocPoint` to 0 to retire a pool\\n     * @param _pid pool to modify\\n     * @param _newAllocPoint new allocation (weight) for rewards\\n     */\\n    function setPool(uint256 _pid, uint128 _newAllocPoint)\\n        external\\n        payable\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        ensurePoolExists(_pid)\\n    {\\n        totalAllocPoint -= _poolInfo[_pid].allocPoint + _newAllocPoint;\\n        _poolInfo[_pid].allocPoint = _newAllocPoint;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============ Protected functions =================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Trusted helper contract can withdraw rewards and deposits on behalf of an account\\n     * @notice For eg. withdraw + remove liquidity\\n     * @param _for account to withdraw from\\n     * @param _pid id in `_poolInfo`\\n     * @param _amount amount to withdraw\\n     * @param _rewardRecipient reward recipient\\n     */\\n    function withdrawFor(\\n        address _for,\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _rewardRecipient\\n    ) external payable nonReentrant onlyRole(OPERATOR_ROLE) {\\n        require(_amount > 0, \\\"KR: 0-withdraw\\\");\\n        require(_rewardRecipient != address(0), \\\"KR: !rewardRecipient\\\");\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][_for];\\n\\n        sendRewards(pool, user, _rewardRecipient);\\n\\n        // Send whole balance in case of amount exceeds deposits\\n        if (_amount > user.amount) {\\n            _amount = user.amount;\\n            user.amount = 0;\\n        } else {\\n            user.amount -= _amount;\\n        }\\n\\n        pool.depositToken.safeTransfer(address(msg.sender), _amount);\\n\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            user.rewardDebts[rewardIndex] = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n        }\\n\\n        emit Withdraw(_for, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Trusted helper contract can claim rewards on behalf of an account\\n     * @param _for account to claim for\\n     * @param _pid id in `_poolInfo`\\n     * @param _rewardRecipient address that receives rewards\\n     */\\n    function claimFor(\\n        address _for,\\n        uint256 _pid,\\n        address _rewardRecipient\\n    ) external payable nonReentrant onlyRole(OPERATOR_ROLE) {\\n        require(_rewardRecipient != address(0), \\\"KR: !rewardRecipient\\\");\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][_for];\\n\\n        if (user.amount > 0) {\\n            sendRewards(pool, user, _rewardRecipient);\\n\\n            for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n                user.rewardDebts[rewardIndex] = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice A rescue function for missent msg.value\\n     * @notice Since we are using payable functions to save gas on calls\\n     */\\n    function rescueNative() external payable onlyRole(DEFAULT_ADMIN_ROLE) {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @notice A rescue function for missent tokens / airdrops\\n     * @notice This cannot withdraw any deposits due `ensurePoolDoesNotExist` modifier.\\n     */\\n    function rescueNonPoolToken(IERC20 _tokenToRescue, uint256 _amount)\\n        external\\n        payable\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        ensurePoolDoesNotExist(_tokenToRescue)\\n    {\\n        _tokenToRescue.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============= Internal functions =================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Loops over pools reward tokens and sends them to the user\\n     * @param pool pool to send rewards from in `_poolInfo`\\n     * @param user users info in the @param pool\\n     * @param recipient user to send rewards to\\n     */\\n    function sendRewards(\\n        PoolInfo memory pool,\\n        UserInfo memory user,\\n        address recipient\\n    ) internal {\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            uint256 rewardDebt = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n            uint256 pending = rewardDebt - user.rewardDebts[rewardIndex];\\n\\n            if (pending > 0) {\\n                IERC20(pool.rewardTokens[rewardIndex]).safeTransfer(recipient, pending);\\n                emit ClaimRewards(recipient, pool.rewardTokens[rewardIndex], pending);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b1e17435ae59fdecef563a52c8bf299201d8dca52bfcdbe660f67d017242118\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615ac180620000216000396000f3fe6080604052600436106101cd5760003560e01c80635ea3f4fa116100f7578063ba8fc5bf11610095578063ddd5e1b211610064578063ddd5e1b21461062a578063f5b541a614610646578063f619753d14610671578063fc82f0841461069a576101cd565b8063ba8fc5bf1461056a578063bf82b7b5146105a8578063d18df53c146105c4578063d547741f14610601576101cd565b806391d14854116100d157806391d14854146104a957806392bb9fbf146104e657806393f1a40b14610502578063a217fddf1461053f576101cd565b80635ea3f4fa14610425578063630b5ba11461046257806368e2f7b71461046c576101cd565b806317caf6f11161016f57806343a4534b1161013e57806343a4534b146103a15780634d7ee644146103bd57806351eb05a6146103d95780635312ea8e14610409576101cd565b806317caf6f1146102e7578063248a9ca3146103125780632f2ff15d1461034f57806336568abe14610378576101cd565b80630ad58d2f116101ab5780630ad58d2f146102565780630dbd1a38146102725780630efe6a8b1461028e5780631526fe27146102aa576101cd565b806301ffc9a7146101d25780630802f7681461020f578063081e3eda1461022b575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190614138565b6106a4565b6040516102069190614180565b60405180910390f35b610229600480360381019061022491906142b8565b61071e565b005b34801561023757600080fd5b50610240610aef565b60405161024d9190614359565b60405180910390f35b610270600480360381019061026b91906143cc565b610afc565b005b61028c6004803603810190610287919061441f565b610e1b565b005b6102a860048036038101906102a3919061445f565b610e71565b005b3480156102b657600080fd5b506102d160048036038101906102cc91906144b2565b61117f565b6040516102de9190614746565b60405180910390f35b3480156102f357600080fd5b506102fc61138b565b6040516103099190614777565b60405180910390f35b34801561031e57600080fd5b50610339600480360381019061033491906147c8565b6113ad565b6040516103469190614804565b60405180910390f35b34801561035b57600080fd5b506103766004803603810190610371919061481f565b6113cd565b005b34801561038457600080fd5b5061039f600480360381019061039a919061481f565b6113ee565b005b6103bb60048036038101906103b6919061485f565b611471565b005b6103d760048036038101906103d291906148c6565b6117bf565b005b6103f360048036038101906103ee91906144b2565b611992565b6040516104009190614746565b60405180910390f35b610423600480360381019061041e91906144b2565b611f08565b005b34801561043157600080fd5b5061044c60048036038101906104479190614906565b612093565b6040516104599190614a4c565b60405180910390f35b61046a612147565b005b34801561047857600080fd5b50610493600480360381019061048e9190614906565b612175565b6040516104a09190614359565b60405180910390f35b3480156104b557600080fd5b506104d060048036038101906104cb919061481f565b61218d565b6040516104dd9190614180565b60405180910390f35b61050060048036038101906104fb9190614a6e565b6121f8565b005b34801561050e57600080fd5b5061052960048036038101906105249190614aae565b61230e565b6040516105369190614b2b565b60405180910390f35b34801561054b57600080fd5b506105546123db565b6040516105619190614804565b60405180910390f35b34801561057657600080fd5b50610591600480360381019061058c9190614906565b6123e2565b60405161059f929190614b4d565b60405180910390f35b6105c260048036038101906105bd9190614b76565b61248c565b005b3480156105d057600080fd5b506105eb60048036038101906105e69190614aae565b6126f2565b6040516105f89190614c20565b60405180910390f35b34801561060d57600080fd5b506106286004803603810190610623919061481f565b612d15565b005b610644600480360381019061063f9190614aae565b612d36565b005b34801561065257600080fd5b5061065b612f6d565b6040516106689190614804565b60405180910390f35b34801561067d57600080fd5b5061069860048036038101906106939190614c98565b612f94565b005b6106a2613450565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107175750610716826134a7565b5b9050919050565b6000801b61072b81613511565b8360005b60cb80549050811015610802578173ffffffffffffffffffffffffffffffffffffffff1660cb828154811061076757610766614d54565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e690614de0565b60405180910390fd5b80806107fa90614e2f565b91505061072f565b5060008787905011610849576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084090614ec3565b60405180910390fd5b8360cc60008282829054906101000a90046fffffffffffffffffffffffffffffffff166108769190614ee3565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060cb6040518060a001604052808773ffffffffffffffffffffffffffffffffffffffff168152602001866fffffffffffffffffffffffffffffffff1681526020016000866fffffffffffffffffffffffffffffffff160361090d574361090f565b855b6fffffffffffffffffffffffffffffffff1681526020018989905067ffffffffffffffff81111561094357610942614f29565b5b6040519080825280602002602001820160405280156109715781602001602082028036833780820191505090505b508152602001898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506060820151816002019080519060200190610ac6929190613f3e565b506080820151816003019080519060200190610ae3929190613f8b565b50505050505050505050565b600060cb80549050905090565b600260975403610b41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3890614fa4565b60405180910390fd5b600260978190555060008211610b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8390615010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf29061507c565b60405180910390fd5b6000610c0684611992565b9050600060c9600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610cd482826040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610cc557602002820191906000526020600020905b815481526020019060010190808311610cb1575b50505050508152505085613525565b8060000154841115610cf6578060000154935060008160000181905550610d12565b83816000016000828254610d0a919061509c565b925050819055505b610d413385846000015173ffffffffffffffffffffffffffffffffffffffff1661368c9092919063ffffffff16565b60005b826080015151811015610dc65764e8d4a5100083606001518281518110610d6e57610d6d614d54565b5b60200260200101518360000154610d8591906150d0565b610d8f9190615159565b826001018281548110610da557610da4614d54565b5b90600052602060002001819055508080610dbe90614e2f565b915050610d44565b5083853373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56860405160405180910390a450506001609781905550505050565b6000801b610e2881613511565b8160ca60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600260975403610eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ead90614fa4565b60405180910390fd5b600260978190555081600073ffffffffffffffffffffffffffffffffffffffff1660cb8281548110610eeb57610eea614d54565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6a906151d6565b60405180910390fd5b6000610f7e84611992565b9050600060c9600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600101805490500361104a5781608001515167ffffffffffffffff81111561100257611001614f29565b5b6040519080825280602002602001820160405280156110305781602001602082028036833780820191505090505b50816001019080519060200190611048929190613f3e565b505b61107b333086856000015173ffffffffffffffffffffffffffffffffffffffff16613712909392919063ffffffff16565b8381600001600082825461108f91906151f6565b9250508190555060005b8260800151518110156111295764e8d4a51000836060015182815181106110c3576110c2614d54565b5b6020026020010151866110d691906150d0565b6110e09190615159565b8260010182815481106110f6576110f5614d54565b5b90600052602060002001600082825461110f91906151f6565b92505081905550808061112190614e2f565b915050611099565b5083858773ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1560405160405180910390a45050506001609781905550505050565b611187614015565b60cb828154811061119b5761119a614d54565b5b90600052602060002090600402016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001600282018054806020026020016040519081016040528092919081815260200182805480156112ed57602002820191906000526020600020905b8154815260200190600101908083116112d9575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561137b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611331575b5050505050815250509050919050565b60cc60009054906101000a90046fffffffffffffffffffffffffffffffff1681565b600060656000838152602001908152602001600020600101549050919050565b6113d6826113ad565b6113df81613511565b6113e9838361379b565b505050565b6113f661387c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145a906152be565b60405180910390fd5b61146d8282613884565b5050565b6002609754036114b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ad90614fa4565b60405180910390fd5b60026097819055507f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd260001b6114eb81613511565b6000831161152e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152590615010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361159d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115949061507c565b60405180910390fd5b60006115a885611992565b9050600060c9600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506116768282604051806040016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561166757602002820191906000526020600020905b815481526020019060010190808311611653575b50505050508152505086613525565b80600001548511156116985780600001549450600081600001819055506116b4565b848160000160008282546116ac919061509c565b925050819055505b6116e33386846000015173ffffffffffffffffffffffffffffffffffffffff1661368c9092919063ffffffff16565b60005b8260800151518110156117685764e8d4a51000836060015182815181106117105761170f614d54565b5b6020026020010151836000015461172791906150d0565b6117319190615159565b82600101828154811061174757611746614d54565b5b9060005260206000200181905550808061176090614e2f565b9150506116e6565b5084868873ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56860405160405180910390a4505050600160978190555050505050565b6000801b6117cc81613511565b82600073ffffffffffffffffffffffffffffffffffffffff1660cb82815481106117f9576117f8614d54565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611881576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611878906151d6565b60405180910390fd5b8260cb858154811061189657611895614d54565b5b906000526020600020906004020160010160009054906101000a90046fffffffffffffffffffffffffffffffff166118ce9190614ee3565b60cc60008282829054906101000a90046fffffffffffffffffffffffffffffffff166118fa91906152de565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508260cb858154811061194557611944614d54565b5b906000526020600020906004020160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505050565b61199a614015565b60cb82815481106119ae576119ad614d54565b5b90600052602060002090600402016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160028201805480602002602001604051908101604052809291908181526020018280548015611b0057602002820191906000526020600020905b815481526020019060010190808311611aec575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611b8e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611b44575b505050505081525050905080604001516fffffffffffffffffffffffffffffffff16431115611f03576000816000015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611bf69190615321565b602060405180830381865afa158015611c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c379190615351565b90506000811115611dac5760005b826080015151811015611daa57600060ca600085608001518481518110611c6f57611c6e614d54565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600084604001516fffffffffffffffffffffffffffffffff1643611cd8919061509c565b9050600060cc60009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1686602001516fffffffffffffffffffffffffffffffff168385611d3091906150d0565b611d3a91906150d0565b611d449190615159565b90508464e8d4a5100082611d5891906150d0565b611d629190615159565b86606001518581518110611d7957611d78614d54565b5b60200260200101818151611d8d91906151f6565b915081815250505050508080611da290614e2f565b915050611c45565b505b4382604001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508160cb8481548110611df157611df0614d54565b5b906000526020600020906004020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506060820151816002019080519060200190611ee0929190613f3e565b506080820151816003019080519060200190611efd929190613f8b565b50905050505b919050565b600260975403611f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4490614fa4565b60405180910390fd5b60026097819055506000611f6082611992565b9050600060c9600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611fe9338260000154846000015173ffffffffffffffffffffffffffffffffffffffff1661368c9092919063ffffffff16565b6000816000018190555060005b82608001515181101561203c57600082600101828154811061201b5761201a614d54565b5b9060005260206000200181905550808061203490614e2f565b915050611ff6565b508060000154833373ffffffffffffffffffffffffffffffffffffffff167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059560405160405180910390a45050600160978190555050565b606060cb8054905067ffffffffffffffff8111156120b4576120b3614f29565b5b6040519080825280602002602001820160405280156120ed57816020015b6120da61407e565b8152602001906001900390816120d25790505b50905060005b60cb8054905081101561214157600061210c82856126f2565b90508083838151811061212257612121614d54565b5b602002602001018190525050808061213990614e2f565b9150506120f3565b50919050565b60005b60cb805490508110156121725761216081611992565b508061216b90614e2f565b905061214a565b50565b60ca6020528060005260406000206000915090505481565b60006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b61220581613511565b8260005b60cb805490508110156122dc578173ffffffffffffffffffffffffffffffffffffffff1660cb828154811061224157612240614d54565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036122c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c090614de0565b60405180910390fd5b80806122d490614e2f565b915050612209565b5061230833848673ffffffffffffffffffffffffffffffffffffffff1661368c9092919063ffffffff16565b50505050565b61231661409f565b60c9600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156123ca57602002820191906000526020600020905b8154815260200190600101908083116123b6575b505050505081525050905092915050565b6000801b81565b6000805b60cb80549050821015612487578273ffffffffffffffffffffffffffffffffffffffff1660cb838154811061241e5761241d614d54565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036124745760019050612487565b818061247f90614e2f565b9250506123e6565b915091565b6002609754036124d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c890614fa4565b60405180910390fd5b60026097819055507f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd260001b61250681613511565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256c9061507c565b60405180910390fd5b600061258084611992565b9050600060c9600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015411156126e25761265b8282604051806040016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561264c57602002820191906000526020600020905b815481526020019060010190808311612638575b50505050508152505086613525565b60005b8260800151518110156126e05764e8d4a510008360600151828151811061268857612687614d54565b5b6020026020010151836000015461269f91906150d0565b6126a99190615159565b8260010182815481106126bf576126be614d54565b5b906000526020600020018190555080806126d890614e2f565b91505061265e565b505b5050506001609781905550505050565b6126fa61407e565b600060cb84815481106127105761270f614d54565b5b90600052602060002090600402016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820180548060200260200160405190810160405280929190818152602001828054801561286257602002820191906000526020600020905b81548152602001906001019080831161284e575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156128f057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116128a6575b5050505050815250509050600060c9600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156129b157602002820191906000526020600020905b81548152602001906001019080831161299d575b50505050508152505090506000826000015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016129fb9190615321565b602060405180830381865afa158015612a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3c9190615351565b9050600083608001515190506040518060600160405280888152602001856080015181526020018267ffffffffffffffff811115612a7d57612a7c614f29565b5b604051908082528060200260200182016040528015612aab5781602001602082028036833780820191505090505b50815250945060008214158015612ac6575060008360000151115b15612d0b5760005b81811015612d0957600085606001518281518110612aef57612aee614d54565b5b60200260200101519050600060ca600088608001518581518110612b1657612b15614d54565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600087604001516fffffffffffffffffffffffffffffffff1643612b7f919061509c565b9050600060cc60009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1689602001516fffffffffffffffffffffffffffffffff168385612bd791906150d0565b612be191906150d0565b612beb9190615159565b90508664e8d4a5100082612bff91906150d0565b612c099190615159565b84612c1491906151f6565b935087602001518581518110612c2d57612c2c614d54565b5b602002602001015164e8d4a51000858a60000151612c4b91906150d0565b612c559190615159565b612c5f919061509c565b8a604001518681518110612c7657612c75614d54565b5b60200260200101818152505088608001518581518110612c9957612c98614d54565b5b60200260200101518a602001518681518110612cb857612cb7614d54565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050505050508080612d0190614e2f565b915050612ace565b505b5050505092915050565b612d1e826113ad565b612d2781613511565b612d318383613884565b505050565b600260975403612d7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7290614fa4565b60405180910390fd5b6002609781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de99061507c565b60405180910390fd5b6000612dfd83611992565b9050600060c9600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541115612f5f57612ed882826040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015612ec957602002820191906000526020600020905b815481526020019060010190808311612eb5575b50505050508152505085613525565b60005b826080015151811015612f5d5764e8d4a5100083606001518281518110612f0557612f04614d54565b5b60200260200101518360000154612f1c91906150d0565b612f269190615159565b826001018281548110612f3c57612f3b614d54565b5b90600052602060002001819055508080612f5590614e2f565b915050612edb565b505b505060016097819055505050565b7f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd260001b81565b60008060019054906101000a900460ff16159050808015612fc55750600160008054906101000a900460ff1660ff16105b80612ff25750612fd430613966565b158015612ff15750600160008054906101000a900460ff1660ff16145b5b613031576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613028906153f0565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561306e576001600060016101000a81548160ff0219169083151502179055505b8787905086869050146130b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ad90615482565b60405180910390fd5b6130be613989565b6130cb6000801b336139da565b60005b88889050811015613170578686828181106130ec576130eb614d54565b5b9050602002013560ca60008b8b8581811061310a57613109614d54565b5b905060200201602081019061311f9190614906565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061316890614e2f565b9150506130ce565b5060cb6040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff168152602001846fffffffffffffffffffffffffffffffff1681526020018a8a905067ffffffffffffffff8111156131e7576131e6614f29565b5b6040519080825280602002602001820160405280156132155781602001602082028036833780820191505090505b5081526020018a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550606082015181600201908051906020019061336a929190613f3e565b506080820151816003019080519060200190613387929190613f8b565b5050508260cc60008282829054906101000a90046fffffffffffffffffffffffffffffffff166133b79190614ee3565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080156134465760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161343d91906154ea565b60405180910390a15b5050505050505050565b6000801b61345d81613511565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156134a3573d6000803e3d6000fd5b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6135228161351d61387c565b6139e8565b50565b60005b83608001515181101561368657600064e8d4a510008560600151838151811061355457613553614d54565b5b6020026020010151856000015161356b91906150d0565b6135759190615159565b90506000846020015183815181106135905761358f614d54565b5b6020026020010151826135a3919061509c565b90506000811115613671576135f78482886080015186815181106135ca576135c9614d54565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661368c9092919063ffffffff16565b808660800151848151811061360f5761360e614d54565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc960405160405180910390a45b5050808061367e90614e2f565b915050613528565b50505050565b61370d8363a9059cbb60e01b84846040516024016136ab929190615505565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a85565b505050565b613795846323b872dd60e01b8585856040516024016137339392919061552e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a85565b50505050565b6137a5828261218d565b6138785760016065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061381d61387c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b61388e828261218d565b156139625760006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061390761387c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166139d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139cf906155d7565b60405180910390fd5b565b6139e4828261379b565b5050565b6139f2828261218d565b613a8157613a178173ffffffffffffffffffffffffffffffffffffffff166014613b4c565b613a258360001c6020613b4c565b604051602001613a36929190615709565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a78919061578d565b60405180910390fd5b5050565b6000613ae7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613d889092919063ffffffff16565b9050600081511115613b475780806020019051810190613b0791906157db565b613b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b3d9061587a565b60405180910390fd5b5b505050565b606060006002836002613b5f91906150d0565b613b6991906151f6565b67ffffffffffffffff811115613b8257613b81614f29565b5b6040519080825280601f01601f191660200182016040528015613bb45781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613bec57613beb614d54565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613c5057613c4f614d54565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002613c9091906150d0565b613c9a91906151f6565b90505b6001811115613d3a577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613cdc57613cdb614d54565b5b1a60f81b828281518110613cf357613cf2614d54565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080613d339061589a565b9050613c9d565b5060008414613d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d759061590f565b60405180910390fd5b8091505092915050565b6060613d978484600085613da0565b90509392505050565b606082471015613de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ddc906159a1565b60405180910390fd5b613dee85613eb4565b613e2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e2490615a0d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613e569190615a74565b60006040518083038185875af1925050503d8060008114613e93576040519150601f19603f3d011682016040523d82523d6000602084013e613e98565b606091505b5091509150613ea8828286613ed7565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315613ee757829050613f37565b600083511115613efa5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f2e919061578d565b60405180910390fd5b9392505050565b828054828255906000526020600020908101928215613f7a579160200282015b82811115613f79578251825591602001919060010190613f5e565b5b509050613f8791906140b9565b5090565b828054828255906000526020600020908101928215614004579160200282015b828111156140035782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613fab565b5b50905061401191906140b9565b5090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b60405180606001604052806000815260200160608152602001606081525090565b604051806040016040528060008152602001606081525090565b5b808211156140d25760008160009055506001016140ba565b5090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614115816140e0565b811461412057600080fd5b50565b6000813590506141328161410c565b92915050565b60006020828403121561414e5761414d6140d6565b5b600061415c84828501614123565b91505092915050565b60008115159050919050565b61417a81614165565b82525050565b60006020820190506141956000830184614171565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126141c0576141bf61419b565b5b8235905067ffffffffffffffff8111156141dd576141dc6141a0565b5b6020830191508360208202830111156141f9576141f86141a5565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061422b82614200565b9050919050565b600061423d82614220565b9050919050565b61424d81614232565b811461425857600080fd5b50565b60008135905061426a81614244565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61429581614270565b81146142a057600080fd5b50565b6000813590506142b28161428c565b92915050565b6000806000806000608086880312156142d4576142d36140d6565b5b600086013567ffffffffffffffff8111156142f2576142f16140db565b5b6142fe888289016141aa565b955095505060206143118882890161425b565b9350506040614322888289016142a3565b9250506060614333888289016142a3565b9150509295509295909350565b6000819050919050565b61435381614340565b82525050565b600060208201905061436e600083018461434a565b92915050565b61437d81614340565b811461438857600080fd5b50565b60008135905061439a81614374565b92915050565b6143a981614220565b81146143b457600080fd5b50565b6000813590506143c6816143a0565b92915050565b6000806000606084860312156143e5576143e46140d6565b5b60006143f38682870161438b565b93505060206144048682870161438b565b9250506040614415868287016143b7565b9150509250925092565b60008060408385031215614436576144356140d6565b5b6000614444858286016143b7565b92505060206144558582860161438b565b9150509250929050565b600080600060608486031215614478576144776140d6565b5b6000614486868287016143b7565b93505060206144978682870161438b565b92505060406144a88682870161438b565b9150509250925092565b6000602082840312156144c8576144c76140d6565b5b60006144d68482850161438b565b91505092915050565b6000819050919050565b60006145046144ff6144fa84614200565b6144df565b614200565b9050919050565b6000614516826144e9565b9050919050565b60006145288261450b565b9050919050565b6145388161451d565b82525050565b61454781614270565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61458281614340565b82525050565b60006145948383614579565b60208301905092915050565b6000602082019050919050565b60006145b88261454d565b6145c28185614558565b93506145cd83614569565b8060005b838110156145fe5781516145e58882614588565b97506145f0836145a0565b9250506001810190506145d1565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61464081614220565b82525050565b60006146528383614637565b60208301905092915050565b6000602082019050919050565b60006146768261460b565b6146808185614616565b935061468b83614627565b8060005b838110156146bc5781516146a38882614646565b97506146ae8361465e565b92505060018101905061468f565b5085935050505092915050565b600060a0830160008301516146e1600086018261452f565b5060208301516146f4602086018261453e565b506040830151614707604086018261453e565b506060830151848203606086015261471f82826145ad565b91505060808301518482036080860152614739828261466b565b9150508091505092915050565b6000602082019050818103600083015261476081846146c9565b905092915050565b61477181614270565b82525050565b600060208201905061478c6000830184614768565b92915050565b6000819050919050565b6147a581614792565b81146147b057600080fd5b50565b6000813590506147c28161479c565b92915050565b6000602082840312156147de576147dd6140d6565b5b60006147ec848285016147b3565b91505092915050565b6147fe81614792565b82525050565b600060208201905061481960008301846147f5565b92915050565b60008060408385031215614836576148356140d6565b5b6000614844858286016147b3565b9250506020614855858286016143b7565b9150509250929050565b60008060008060808587031215614879576148786140d6565b5b6000614887878288016143b7565b94505060206148988782880161438b565b93505060406148a98782880161438b565b92505060606148ba878288016143b7565b91505092959194509250565b600080604083850312156148dd576148dc6140d6565b5b60006148eb8582860161438b565b92505060206148fc858286016142a3565b9150509250929050565b60006020828403121561491c5761491b6140d6565b5b600061492a848285016143b7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006060830160008301516149776000860182614579565b506020830151848203602086015261498f828261466b565b915050604083015184820360408601526149a982826145ad565b9150508091505092915050565b60006149c2838361495f565b905092915050565b6000602082019050919050565b60006149e282614933565b6149ec818561493e565b9350836020820285016149fe8561494f565b8060005b85811015614a3a5784840389528151614a1b85826149b6565b9450614a26836149ca565b925060208a01995050600181019050614a02565b50829750879550505050505092915050565b60006020820190508181036000830152614a6681846149d7565b905092915050565b60008060408385031215614a8557614a846140d6565b5b6000614a938582860161425b565b9250506020614aa48582860161438b565b9150509250929050565b60008060408385031215614ac557614ac46140d6565b5b6000614ad38582860161438b565b9250506020614ae4858286016143b7565b9150509250929050565b6000604083016000830151614b066000860182614579565b5060208301518482036020860152614b1e82826145ad565b9150508091505092915050565b60006020820190508181036000830152614b458184614aee565b905092915050565b6000604082019050614b62600083018561434a565b614b6f6020830184614171565b9392505050565b600080600060608486031215614b8f57614b8e6140d6565b5b6000614b9d868287016143b7565b9350506020614bae8682870161438b565b9250506040614bbf868287016143b7565b9150509250925092565b6000606083016000830151614be16000860182614579565b5060208301518482036020860152614bf9828261466b565b91505060408301518482036040860152614c1382826145ad565b9150508091505092915050565b60006020820190508181036000830152614c3a8184614bc9565b905092915050565b60008083601f840112614c5857614c5761419b565b5b8235905067ffffffffffffffff811115614c7557614c746141a0565b5b602083019150836020820283011115614c9157614c906141a5565b5b9250929050565b600080600080600080600060a0888a031215614cb757614cb66140d6565b5b600088013567ffffffffffffffff811115614cd557614cd46140db565b5b614ce18a828b016141aa565b9750975050602088013567ffffffffffffffff811115614d0457614d036140db565b5b614d108a828b01614c42565b95509550506040614d238a828b0161425b565b9350506060614d348a828b016142a3565b9250506080614d458a828b016142a3565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4b523a20706f6f6c457869737473000000000000000000000000000000000000600082015250565b6000614dca600e83614d83565b9150614dd582614d94565b602082019050919050565b60006020820190508181036000830152614df981614dbd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614e3a82614340565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614e6c57614e6b614e00565b5b600182019050919050565b7f4b523a2021726577617264546f6b656e73000000000000000000000000000000600082015250565b6000614ead601183614d83565b9150614eb882614e77565b602082019050919050565b60006020820190508181036000830152614edc81614ea0565b9050919050565b6000614eee82614270565b9150614ef983614270565b9250826fffffffffffffffffffffffffffffffff03821115614f1e57614f1d614e00565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614f8e601f83614d83565b9150614f9982614f58565b602082019050919050565b60006020820190508181036000830152614fbd81614f81565b9050919050565b7f4b523a20302d7769746864726177000000000000000000000000000000000000600082015250565b6000614ffa600e83614d83565b915061500582614fc4565b602082019050919050565b6000602082019050818103600083015261502981614fed565b9050919050565b7f4b523a2021726577617264526563697069656e74000000000000000000000000600082015250565b6000615066601483614d83565b915061507182615030565b602082019050919050565b6000602082019050818103600083015261509581615059565b9050919050565b60006150a782614340565b91506150b283614340565b9250828210156150c5576150c4614e00565b5b828203905092915050565b60006150db82614340565b91506150e683614340565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561511f5761511e614e00565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061516482614340565b915061516f83614340565b92508261517f5761517e61512a565b5b828204905092915050565b7f4b523a2021706f6f6c4578697374730000000000000000000000000000000000600082015250565b60006151c0600f83614d83565b91506151cb8261518a565b602082019050919050565b600060208201905081810360008301526151ef816151b3565b9050919050565b600061520182614340565b915061520c83614340565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561524157615240614e00565b5b828201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006152a8602f83614d83565b91506152b38261524c565b604082019050919050565b600060208201905081810360008301526152d78161529b565b9050919050565b60006152e982614270565b91506152f483614270565b92508282101561530757615306614e00565b5b828203905092915050565b61531b81614220565b82525050565b60006020820190506153366000830184615312565b92915050565b60008151905061534b81614374565b92915050565b600060208284031215615367576153666140d6565b5b60006153758482850161533c565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006153da602e83614d83565b91506153e58261537e565b604082019050919050565b60006020820190508181036000830152615409816153cd565b9050919050565b7f52657761726420746f6b656e73206d757374206861766520612072657761726460008201527f506572426c6f636b2076616c7565000000000000000000000000000000000000602082015250565b600061546c602e83614d83565b915061547782615410565b604082019050919050565b6000602082019050818103600083015261549b8161545f565b9050919050565b6000819050919050565b600060ff82169050919050565b60006154d46154cf6154ca846154a2565b6144df565b6154ac565b9050919050565b6154e4816154b9565b82525050565b60006020820190506154ff60008301846154db565b92915050565b600060408201905061551a6000830185615312565b615527602083018461434a565b9392505050565b60006060820190506155436000830186615312565b6155506020830185615312565b61555d604083018461434a565b949350505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006155c1602b83614d83565b91506155cc82615565565b604082019050919050565b600060208201905081810360008301526155f0816155b4565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006156386017836155f7565b915061564382615602565b601782019050919050565b600081519050919050565b60005b8381101561567757808201518184015260208101905061565c565b83811115615686576000848401525b50505050565b60006156978261564e565b6156a181856155f7565b93506156b1818560208601615659565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006156f36011836155f7565b91506156fe826156bd565b601182019050919050565b60006157148261562b565b9150615720828561568c565b915061572b826156e6565b9150615737828461568c565b91508190509392505050565b6000601f19601f8301169050919050565b600061575f8261564e565b6157698185614d83565b9350615779818560208601615659565b61578281615743565b840191505092915050565b600060208201905081810360008301526157a78184615754565b905092915050565b6157b881614165565b81146157c357600080fd5b50565b6000815190506157d5816157af565b92915050565b6000602082840312156157f1576157f06140d6565b5b60006157ff848285016157c6565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615864602a83614d83565b915061586f82615808565b604082019050919050565b6000602082019050818103600083015261589381615857565b9050919050565b60006158a582614340565b9150600082036158b8576158b7614e00565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006158f9602083614d83565b9150615904826158c3565b602082019050919050565b60006020820190508181036000830152615928816158ec565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061598b602683614d83565b91506159968261592f565b604082019050919050565b600060208201905081810360008301526159ba8161597e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006159f7601d83614d83565b9150615a02826159c1565b602082019050919050565b60006020820190508181036000830152615a26816159ea565b9050919050565b600081519050919050565b600081905092915050565b6000615a4e82615a2d565b615a588185615a38565b9350615a68818560208601615659565b80840191505092915050565b6000615a808284615a43565b91508190509291505056fea2646970667358221220a6d8fcd130ab0457fb3dab1c476c95ea0acd188f7e0d4d663cfd9f2c3158168964736f6c634300080e0033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80635ea3f4fa116100f7578063ba8fc5bf11610095578063ddd5e1b211610064578063ddd5e1b21461062a578063f5b541a614610646578063f619753d14610671578063fc82f0841461069a576101cd565b8063ba8fc5bf1461056a578063bf82b7b5146105a8578063d18df53c146105c4578063d547741f14610601576101cd565b806391d14854116100d157806391d14854146104a957806392bb9fbf146104e657806393f1a40b14610502578063a217fddf1461053f576101cd565b80635ea3f4fa14610425578063630b5ba11461046257806368e2f7b71461046c576101cd565b806317caf6f11161016f57806343a4534b1161013e57806343a4534b146103a15780634d7ee644146103bd57806351eb05a6146103d95780635312ea8e14610409576101cd565b806317caf6f1146102e7578063248a9ca3146103125780632f2ff15d1461034f57806336568abe14610378576101cd565b80630ad58d2f116101ab5780630ad58d2f146102565780630dbd1a38146102725780630efe6a8b1461028e5780631526fe27146102aa576101cd565b806301ffc9a7146101d25780630802f7681461020f578063081e3eda1461022b575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190614138565b6106a4565b6040516102069190614180565b60405180910390f35b610229600480360381019061022491906142b8565b61071e565b005b34801561023757600080fd5b50610240610aef565b60405161024d9190614359565b60405180910390f35b610270600480360381019061026b91906143cc565b610afc565b005b61028c6004803603810190610287919061441f565b610e1b565b005b6102a860048036038101906102a3919061445f565b610e71565b005b3480156102b657600080fd5b506102d160048036038101906102cc91906144b2565b61117f565b6040516102de9190614746565b60405180910390f35b3480156102f357600080fd5b506102fc61138b565b6040516103099190614777565b60405180910390f35b34801561031e57600080fd5b50610339600480360381019061033491906147c8565b6113ad565b6040516103469190614804565b60405180910390f35b34801561035b57600080fd5b506103766004803603810190610371919061481f565b6113cd565b005b34801561038457600080fd5b5061039f600480360381019061039a919061481f565b6113ee565b005b6103bb60048036038101906103b6919061485f565b611471565b005b6103d760048036038101906103d291906148c6565b6117bf565b005b6103f360048036038101906103ee91906144b2565b611992565b6040516104009190614746565b60405180910390f35b610423600480360381019061041e91906144b2565b611f08565b005b34801561043157600080fd5b5061044c60048036038101906104479190614906565b612093565b6040516104599190614a4c565b60405180910390f35b61046a612147565b005b34801561047857600080fd5b50610493600480360381019061048e9190614906565b612175565b6040516104a09190614359565b60405180910390f35b3480156104b557600080fd5b506104d060048036038101906104cb919061481f565b61218d565b6040516104dd9190614180565b60405180910390f35b61050060048036038101906104fb9190614a6e565b6121f8565b005b34801561050e57600080fd5b5061052960048036038101906105249190614aae565b61230e565b6040516105369190614b2b565b60405180910390f35b34801561054b57600080fd5b506105546123db565b6040516105619190614804565b60405180910390f35b34801561057657600080fd5b50610591600480360381019061058c9190614906565b6123e2565b60405161059f929190614b4d565b60405180910390f35b6105c260048036038101906105bd9190614b76565b61248c565b005b3480156105d057600080fd5b506105eb60048036038101906105e69190614aae565b6126f2565b6040516105f89190614c20565b60405180910390f35b34801561060d57600080fd5b506106286004803603810190610623919061481f565b612d15565b005b610644600480360381019061063f9190614aae565b612d36565b005b34801561065257600080fd5b5061065b612f6d565b6040516106689190614804565b60405180910390f35b34801561067d57600080fd5b5061069860048036038101906106939190614c98565b612f94565b005b6106a2613450565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107175750610716826134a7565b5b9050919050565b6000801b61072b81613511565b8360005b60cb80549050811015610802578173ffffffffffffffffffffffffffffffffffffffff1660cb828154811061076757610766614d54565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e690614de0565b60405180910390fd5b80806107fa90614e2f565b91505061072f565b5060008787905011610849576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084090614ec3565b60405180910390fd5b8360cc60008282829054906101000a90046fffffffffffffffffffffffffffffffff166108769190614ee3565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060cb6040518060a001604052808773ffffffffffffffffffffffffffffffffffffffff168152602001866fffffffffffffffffffffffffffffffff1681526020016000866fffffffffffffffffffffffffffffffff160361090d574361090f565b855b6fffffffffffffffffffffffffffffffff1681526020018989905067ffffffffffffffff81111561094357610942614f29565b5b6040519080825280602002602001820160405280156109715781602001602082028036833780820191505090505b508152602001898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506060820151816002019080519060200190610ac6929190613f3e565b506080820151816003019080519060200190610ae3929190613f8b565b50505050505050505050565b600060cb80549050905090565b600260975403610b41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3890614fa4565b60405180910390fd5b600260978190555060008211610b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8390615010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf29061507c565b60405180910390fd5b6000610c0684611992565b9050600060c9600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610cd482826040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610cc557602002820191906000526020600020905b815481526020019060010190808311610cb1575b50505050508152505085613525565b8060000154841115610cf6578060000154935060008160000181905550610d12565b83816000016000828254610d0a919061509c565b925050819055505b610d413385846000015173ffffffffffffffffffffffffffffffffffffffff1661368c9092919063ffffffff16565b60005b826080015151811015610dc65764e8d4a5100083606001518281518110610d6e57610d6d614d54565b5b60200260200101518360000154610d8591906150d0565b610d8f9190615159565b826001018281548110610da557610da4614d54565b5b90600052602060002001819055508080610dbe90614e2f565b915050610d44565b5083853373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56860405160405180910390a450506001609781905550505050565b6000801b610e2881613511565b8160ca60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600260975403610eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ead90614fa4565b60405180910390fd5b600260978190555081600073ffffffffffffffffffffffffffffffffffffffff1660cb8281548110610eeb57610eea614d54565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6a906151d6565b60405180910390fd5b6000610f7e84611992565b9050600060c9600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600101805490500361104a5781608001515167ffffffffffffffff81111561100257611001614f29565b5b6040519080825280602002602001820160405280156110305781602001602082028036833780820191505090505b50816001019080519060200190611048929190613f3e565b505b61107b333086856000015173ffffffffffffffffffffffffffffffffffffffff16613712909392919063ffffffff16565b8381600001600082825461108f91906151f6565b9250508190555060005b8260800151518110156111295764e8d4a51000836060015182815181106110c3576110c2614d54565b5b6020026020010151866110d691906150d0565b6110e09190615159565b8260010182815481106110f6576110f5614d54565b5b90600052602060002001600082825461110f91906151f6565b92505081905550808061112190614e2f565b915050611099565b5083858773ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1560405160405180910390a45050506001609781905550505050565b611187614015565b60cb828154811061119b5761119a614d54565b5b90600052602060002090600402016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001600282018054806020026020016040519081016040528092919081815260200182805480156112ed57602002820191906000526020600020905b8154815260200190600101908083116112d9575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561137b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611331575b5050505050815250509050919050565b60cc60009054906101000a90046fffffffffffffffffffffffffffffffff1681565b600060656000838152602001908152602001600020600101549050919050565b6113d6826113ad565b6113df81613511565b6113e9838361379b565b505050565b6113f661387c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145a906152be565b60405180910390fd5b61146d8282613884565b5050565b6002609754036114b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ad90614fa4565b60405180910390fd5b60026097819055507f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd260001b6114eb81613511565b6000831161152e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152590615010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361159d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115949061507c565b60405180910390fd5b60006115a885611992565b9050600060c9600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506116768282604051806040016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561166757602002820191906000526020600020905b815481526020019060010190808311611653575b50505050508152505086613525565b80600001548511156116985780600001549450600081600001819055506116b4565b848160000160008282546116ac919061509c565b925050819055505b6116e33386846000015173ffffffffffffffffffffffffffffffffffffffff1661368c9092919063ffffffff16565b60005b8260800151518110156117685764e8d4a51000836060015182815181106117105761170f614d54565b5b6020026020010151836000015461172791906150d0565b6117319190615159565b82600101828154811061174757611746614d54565b5b9060005260206000200181905550808061176090614e2f565b9150506116e6565b5084868873ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56860405160405180910390a4505050600160978190555050505050565b6000801b6117cc81613511565b82600073ffffffffffffffffffffffffffffffffffffffff1660cb82815481106117f9576117f8614d54565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611881576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611878906151d6565b60405180910390fd5b8260cb858154811061189657611895614d54565b5b906000526020600020906004020160010160009054906101000a90046fffffffffffffffffffffffffffffffff166118ce9190614ee3565b60cc60008282829054906101000a90046fffffffffffffffffffffffffffffffff166118fa91906152de565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508260cb858154811061194557611944614d54565b5b906000526020600020906004020160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505050565b61199a614015565b60cb82815481106119ae576119ad614d54565b5b90600052602060002090600402016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160028201805480602002602001604051908101604052809291908181526020018280548015611b0057602002820191906000526020600020905b815481526020019060010190808311611aec575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611b8e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611b44575b505050505081525050905080604001516fffffffffffffffffffffffffffffffff16431115611f03576000816000015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611bf69190615321565b602060405180830381865afa158015611c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c379190615351565b90506000811115611dac5760005b826080015151811015611daa57600060ca600085608001518481518110611c6f57611c6e614d54565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600084604001516fffffffffffffffffffffffffffffffff1643611cd8919061509c565b9050600060cc60009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1686602001516fffffffffffffffffffffffffffffffff168385611d3091906150d0565b611d3a91906150d0565b611d449190615159565b90508464e8d4a5100082611d5891906150d0565b611d629190615159565b86606001518581518110611d7957611d78614d54565b5b60200260200101818151611d8d91906151f6565b915081815250505050508080611da290614e2f565b915050611c45565b505b4382604001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508160cb8481548110611df157611df0614d54565b5b906000526020600020906004020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506060820151816002019080519060200190611ee0929190613f3e565b506080820151816003019080519060200190611efd929190613f8b565b50905050505b919050565b600260975403611f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4490614fa4565b60405180910390fd5b60026097819055506000611f6082611992565b9050600060c9600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611fe9338260000154846000015173ffffffffffffffffffffffffffffffffffffffff1661368c9092919063ffffffff16565b6000816000018190555060005b82608001515181101561203c57600082600101828154811061201b5761201a614d54565b5b9060005260206000200181905550808061203490614e2f565b915050611ff6565b508060000154833373ffffffffffffffffffffffffffffffffffffffff167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae059560405160405180910390a45050600160978190555050565b606060cb8054905067ffffffffffffffff8111156120b4576120b3614f29565b5b6040519080825280602002602001820160405280156120ed57816020015b6120da61407e565b8152602001906001900390816120d25790505b50905060005b60cb8054905081101561214157600061210c82856126f2565b90508083838151811061212257612121614d54565b5b602002602001018190525050808061213990614e2f565b9150506120f3565b50919050565b60005b60cb805490508110156121725761216081611992565b508061216b90614e2f565b905061214a565b50565b60ca6020528060005260406000206000915090505481565b60006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b61220581613511565b8260005b60cb805490508110156122dc578173ffffffffffffffffffffffffffffffffffffffff1660cb828154811061224157612240614d54565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036122c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c090614de0565b60405180910390fd5b80806122d490614e2f565b915050612209565b5061230833848673ffffffffffffffffffffffffffffffffffffffff1661368c9092919063ffffffff16565b50505050565b61231661409f565b60c9600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156123ca57602002820191906000526020600020905b8154815260200190600101908083116123b6575b505050505081525050905092915050565b6000801b81565b6000805b60cb80549050821015612487578273ffffffffffffffffffffffffffffffffffffffff1660cb838154811061241e5761241d614d54565b5b906000526020600020906004020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036124745760019050612487565b818061247f90614e2f565b9250506123e6565b915091565b6002609754036124d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c890614fa4565b60405180910390fd5b60026097819055507f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd260001b61250681613511565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256c9061507c565b60405180910390fd5b600061258084611992565b9050600060c9600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015411156126e25761265b8282604051806040016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561264c57602002820191906000526020600020905b815481526020019060010190808311612638575b50505050508152505086613525565b60005b8260800151518110156126e05764e8d4a510008360600151828151811061268857612687614d54565b5b6020026020010151836000015461269f91906150d0565b6126a99190615159565b8260010182815481106126bf576126be614d54565b5b906000526020600020018190555080806126d890614e2f565b91505061265e565b505b5050506001609781905550505050565b6126fa61407e565b600060cb84815481106127105761270f614d54565b5b90600052602060002090600402016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820180548060200260200160405190810160405280929190818152602001828054801561286257602002820191906000526020600020905b81548152602001906001019080831161284e575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156128f057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116128a6575b5050505050815250509050600060c9600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156129b157602002820191906000526020600020905b81548152602001906001019080831161299d575b50505050508152505090506000826000015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016129fb9190615321565b602060405180830381865afa158015612a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3c9190615351565b9050600083608001515190506040518060600160405280888152602001856080015181526020018267ffffffffffffffff811115612a7d57612a7c614f29565b5b604051908082528060200260200182016040528015612aab5781602001602082028036833780820191505090505b50815250945060008214158015612ac6575060008360000151115b15612d0b5760005b81811015612d0957600085606001518281518110612aef57612aee614d54565b5b60200260200101519050600060ca600088608001518581518110612b1657612b15614d54565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600087604001516fffffffffffffffffffffffffffffffff1643612b7f919061509c565b9050600060cc60009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1689602001516fffffffffffffffffffffffffffffffff168385612bd791906150d0565b612be191906150d0565b612beb9190615159565b90508664e8d4a5100082612bff91906150d0565b612c099190615159565b84612c1491906151f6565b935087602001518581518110612c2d57612c2c614d54565b5b602002602001015164e8d4a51000858a60000151612c4b91906150d0565b612c559190615159565b612c5f919061509c565b8a604001518681518110612c7657612c75614d54565b5b60200260200101818152505088608001518581518110612c9957612c98614d54565b5b60200260200101518a602001518681518110612cb857612cb7614d54565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050505050508080612d0190614e2f565b915050612ace565b505b5050505092915050565b612d1e826113ad565b612d2781613511565b612d318383613884565b505050565b600260975403612d7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7290614fa4565b60405180910390fd5b6002609781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de99061507c565b60405180910390fd5b6000612dfd83611992565b9050600060c9600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541115612f5f57612ed882826040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015612ec957602002820191906000526020600020905b815481526020019060010190808311612eb5575b50505050508152505085613525565b60005b826080015151811015612f5d5764e8d4a5100083606001518281518110612f0557612f04614d54565b5b60200260200101518360000154612f1c91906150d0565b612f269190615159565b826001018281548110612f3c57612f3b614d54565b5b90600052602060002001819055508080612f5590614e2f565b915050612edb565b505b505060016097819055505050565b7f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd260001b81565b60008060019054906101000a900460ff16159050808015612fc55750600160008054906101000a900460ff1660ff16105b80612ff25750612fd430613966565b158015612ff15750600160008054906101000a900460ff1660ff16145b5b613031576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613028906153f0565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561306e576001600060016101000a81548160ff0219169083151502179055505b8787905086869050146130b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ad90615482565b60405180910390fd5b6130be613989565b6130cb6000801b336139da565b60005b88889050811015613170578686828181106130ec576130eb614d54565b5b9050602002013560ca60008b8b8581811061310a57613109614d54565b5b905060200201602081019061311f9190614906565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061316890614e2f565b9150506130ce565b5060cb6040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff168152602001846fffffffffffffffffffffffffffffffff1681526020018a8a905067ffffffffffffffff8111156131e7576131e6614f29565b5b6040519080825280602002602001820160405280156132155781602001602082028036833780820191505090505b5081526020018a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550606082015181600201908051906020019061336a929190613f3e565b506080820151816003019080519060200190613387929190613f8b565b5050508260cc60008282829054906101000a90046fffffffffffffffffffffffffffffffff166133b79190614ee3565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080156134465760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161343d91906154ea565b60405180910390a15b5050505050505050565b6000801b61345d81613511565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156134a3573d6000803e3d6000fd5b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6135228161351d61387c565b6139e8565b50565b60005b83608001515181101561368657600064e8d4a510008560600151838151811061355457613553614d54565b5b6020026020010151856000015161356b91906150d0565b6135759190615159565b90506000846020015183815181106135905761358f614d54565b5b6020026020010151826135a3919061509c565b90506000811115613671576135f78482886080015186815181106135ca576135c9614d54565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661368c9092919063ffffffff16565b808660800151848151811061360f5761360e614d54565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc960405160405180910390a45b5050808061367e90614e2f565b915050613528565b50505050565b61370d8363a9059cbb60e01b84846040516024016136ab929190615505565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a85565b505050565b613795846323b872dd60e01b8585856040516024016137339392919061552e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a85565b50505050565b6137a5828261218d565b6138785760016065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061381d61387c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b61388e828261218d565b156139625760006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061390761387c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166139d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139cf906155d7565b60405180910390fd5b565b6139e4828261379b565b5050565b6139f2828261218d565b613a8157613a178173ffffffffffffffffffffffffffffffffffffffff166014613b4c565b613a258360001c6020613b4c565b604051602001613a36929190615709565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a78919061578d565b60405180910390fd5b5050565b6000613ae7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613d889092919063ffffffff16565b9050600081511115613b475780806020019051810190613b0791906157db565b613b46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b3d9061587a565b60405180910390fd5b5b505050565b606060006002836002613b5f91906150d0565b613b6991906151f6565b67ffffffffffffffff811115613b8257613b81614f29565b5b6040519080825280601f01601f191660200182016040528015613bb45781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613bec57613beb614d54565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613c5057613c4f614d54565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002613c9091906150d0565b613c9a91906151f6565b90505b6001811115613d3a577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613cdc57613cdb614d54565b5b1a60f81b828281518110613cf357613cf2614d54565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080613d339061589a565b9050613c9d565b5060008414613d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d759061590f565b60405180910390fd5b8091505092915050565b6060613d978484600085613da0565b90509392505050565b606082471015613de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ddc906159a1565b60405180910390fd5b613dee85613eb4565b613e2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e2490615a0d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613e569190615a74565b60006040518083038185875af1925050503d8060008114613e93576040519150601f19603f3d011682016040523d82523d6000602084013e613e98565b606091505b5091509150613ea8828286613ed7565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315613ee757829050613f37565b600083511115613efa5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f2e919061578d565b60405180910390fd5b9392505050565b828054828255906000526020600020908101928215613f7a579160200282015b82811115613f79578251825591602001919060010190613f5e565b5b509050613f8791906140b9565b5090565b828054828255906000526020600020908101928215614004579160200282015b828111156140035782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613fab565b5b50905061401191906140b9565b5090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b60405180606001604052806000815260200160608152602001606081525090565b604051806040016040528060008152602001606081525090565b5b808211156140d25760008160009055506001016140ba565b5090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614115816140e0565b811461412057600080fd5b50565b6000813590506141328161410c565b92915050565b60006020828403121561414e5761414d6140d6565b5b600061415c84828501614123565b91505092915050565b60008115159050919050565b61417a81614165565b82525050565b60006020820190506141956000830184614171565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126141c0576141bf61419b565b5b8235905067ffffffffffffffff8111156141dd576141dc6141a0565b5b6020830191508360208202830111156141f9576141f86141a5565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061422b82614200565b9050919050565b600061423d82614220565b9050919050565b61424d81614232565b811461425857600080fd5b50565b60008135905061426a81614244565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61429581614270565b81146142a057600080fd5b50565b6000813590506142b28161428c565b92915050565b6000806000806000608086880312156142d4576142d36140d6565b5b600086013567ffffffffffffffff8111156142f2576142f16140db565b5b6142fe888289016141aa565b955095505060206143118882890161425b565b9350506040614322888289016142a3565b9250506060614333888289016142a3565b9150509295509295909350565b6000819050919050565b61435381614340565b82525050565b600060208201905061436e600083018461434a565b92915050565b61437d81614340565b811461438857600080fd5b50565b60008135905061439a81614374565b92915050565b6143a981614220565b81146143b457600080fd5b50565b6000813590506143c6816143a0565b92915050565b6000806000606084860312156143e5576143e46140d6565b5b60006143f38682870161438b565b93505060206144048682870161438b565b9250506040614415868287016143b7565b9150509250925092565b60008060408385031215614436576144356140d6565b5b6000614444858286016143b7565b92505060206144558582860161438b565b9150509250929050565b600080600060608486031215614478576144776140d6565b5b6000614486868287016143b7565b93505060206144978682870161438b565b92505060406144a88682870161438b565b9150509250925092565b6000602082840312156144c8576144c76140d6565b5b60006144d68482850161438b565b91505092915050565b6000819050919050565b60006145046144ff6144fa84614200565b6144df565b614200565b9050919050565b6000614516826144e9565b9050919050565b60006145288261450b565b9050919050565b6145388161451d565b82525050565b61454781614270565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61458281614340565b82525050565b60006145948383614579565b60208301905092915050565b6000602082019050919050565b60006145b88261454d565b6145c28185614558565b93506145cd83614569565b8060005b838110156145fe5781516145e58882614588565b97506145f0836145a0565b9250506001810190506145d1565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61464081614220565b82525050565b60006146528383614637565b60208301905092915050565b6000602082019050919050565b60006146768261460b565b6146808185614616565b935061468b83614627565b8060005b838110156146bc5781516146a38882614646565b97506146ae8361465e565b92505060018101905061468f565b5085935050505092915050565b600060a0830160008301516146e1600086018261452f565b5060208301516146f4602086018261453e565b506040830151614707604086018261453e565b506060830151848203606086015261471f82826145ad565b91505060808301518482036080860152614739828261466b565b9150508091505092915050565b6000602082019050818103600083015261476081846146c9565b905092915050565b61477181614270565b82525050565b600060208201905061478c6000830184614768565b92915050565b6000819050919050565b6147a581614792565b81146147b057600080fd5b50565b6000813590506147c28161479c565b92915050565b6000602082840312156147de576147dd6140d6565b5b60006147ec848285016147b3565b91505092915050565b6147fe81614792565b82525050565b600060208201905061481960008301846147f5565b92915050565b60008060408385031215614836576148356140d6565b5b6000614844858286016147b3565b9250506020614855858286016143b7565b9150509250929050565b60008060008060808587031215614879576148786140d6565b5b6000614887878288016143b7565b94505060206148988782880161438b565b93505060406148a98782880161438b565b92505060606148ba878288016143b7565b91505092959194509250565b600080604083850312156148dd576148dc6140d6565b5b60006148eb8582860161438b565b92505060206148fc858286016142a3565b9150509250929050565b60006020828403121561491c5761491b6140d6565b5b600061492a848285016143b7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006060830160008301516149776000860182614579565b506020830151848203602086015261498f828261466b565b915050604083015184820360408601526149a982826145ad565b9150508091505092915050565b60006149c2838361495f565b905092915050565b6000602082019050919050565b60006149e282614933565b6149ec818561493e565b9350836020820285016149fe8561494f565b8060005b85811015614a3a5784840389528151614a1b85826149b6565b9450614a26836149ca565b925060208a01995050600181019050614a02565b50829750879550505050505092915050565b60006020820190508181036000830152614a6681846149d7565b905092915050565b60008060408385031215614a8557614a846140d6565b5b6000614a938582860161425b565b9250506020614aa48582860161438b565b9150509250929050565b60008060408385031215614ac557614ac46140d6565b5b6000614ad38582860161438b565b9250506020614ae4858286016143b7565b9150509250929050565b6000604083016000830151614b066000860182614579565b5060208301518482036020860152614b1e82826145ad565b9150508091505092915050565b60006020820190508181036000830152614b458184614aee565b905092915050565b6000604082019050614b62600083018561434a565b614b6f6020830184614171565b9392505050565b600080600060608486031215614b8f57614b8e6140d6565b5b6000614b9d868287016143b7565b9350506020614bae8682870161438b565b9250506040614bbf868287016143b7565b9150509250925092565b6000606083016000830151614be16000860182614579565b5060208301518482036020860152614bf9828261466b565b91505060408301518482036040860152614c1382826145ad565b9150508091505092915050565b60006020820190508181036000830152614c3a8184614bc9565b905092915050565b60008083601f840112614c5857614c5761419b565b5b8235905067ffffffffffffffff811115614c7557614c746141a0565b5b602083019150836020820283011115614c9157614c906141a5565b5b9250929050565b600080600080600080600060a0888a031215614cb757614cb66140d6565b5b600088013567ffffffffffffffff811115614cd557614cd46140db565b5b614ce18a828b016141aa565b9750975050602088013567ffffffffffffffff811115614d0457614d036140db565b5b614d108a828b01614c42565b95509550506040614d238a828b0161425b565b9350506060614d348a828b016142a3565b9250506080614d458a828b016142a3565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4b523a20706f6f6c457869737473000000000000000000000000000000000000600082015250565b6000614dca600e83614d83565b9150614dd582614d94565b602082019050919050565b60006020820190508181036000830152614df981614dbd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614e3a82614340565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614e6c57614e6b614e00565b5b600182019050919050565b7f4b523a2021726577617264546f6b656e73000000000000000000000000000000600082015250565b6000614ead601183614d83565b9150614eb882614e77565b602082019050919050565b60006020820190508181036000830152614edc81614ea0565b9050919050565b6000614eee82614270565b9150614ef983614270565b9250826fffffffffffffffffffffffffffffffff03821115614f1e57614f1d614e00565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614f8e601f83614d83565b9150614f9982614f58565b602082019050919050565b60006020820190508181036000830152614fbd81614f81565b9050919050565b7f4b523a20302d7769746864726177000000000000000000000000000000000000600082015250565b6000614ffa600e83614d83565b915061500582614fc4565b602082019050919050565b6000602082019050818103600083015261502981614fed565b9050919050565b7f4b523a2021726577617264526563697069656e74000000000000000000000000600082015250565b6000615066601483614d83565b915061507182615030565b602082019050919050565b6000602082019050818103600083015261509581615059565b9050919050565b60006150a782614340565b91506150b283614340565b9250828210156150c5576150c4614e00565b5b828203905092915050565b60006150db82614340565b91506150e683614340565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561511f5761511e614e00565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061516482614340565b915061516f83614340565b92508261517f5761517e61512a565b5b828204905092915050565b7f4b523a2021706f6f6c4578697374730000000000000000000000000000000000600082015250565b60006151c0600f83614d83565b91506151cb8261518a565b602082019050919050565b600060208201905081810360008301526151ef816151b3565b9050919050565b600061520182614340565b915061520c83614340565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561524157615240614e00565b5b828201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006152a8602f83614d83565b91506152b38261524c565b604082019050919050565b600060208201905081810360008301526152d78161529b565b9050919050565b60006152e982614270565b91506152f483614270565b92508282101561530757615306614e00565b5b828203905092915050565b61531b81614220565b82525050565b60006020820190506153366000830184615312565b92915050565b60008151905061534b81614374565b92915050565b600060208284031215615367576153666140d6565b5b60006153758482850161533c565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006153da602e83614d83565b91506153e58261537e565b604082019050919050565b60006020820190508181036000830152615409816153cd565b9050919050565b7f52657761726420746f6b656e73206d757374206861766520612072657761726460008201527f506572426c6f636b2076616c7565000000000000000000000000000000000000602082015250565b600061546c602e83614d83565b915061547782615410565b604082019050919050565b6000602082019050818103600083015261549b8161545f565b9050919050565b6000819050919050565b600060ff82169050919050565b60006154d46154cf6154ca846154a2565b6144df565b6154ac565b9050919050565b6154e4816154b9565b82525050565b60006020820190506154ff60008301846154db565b92915050565b600060408201905061551a6000830185615312565b615527602083018461434a565b9392505050565b60006060820190506155436000830186615312565b6155506020830185615312565b61555d604083018461434a565b949350505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006155c1602b83614d83565b91506155cc82615565565b604082019050919050565b600060208201905081810360008301526155f0816155b4565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006156386017836155f7565b915061564382615602565b601782019050919050565b600081519050919050565b60005b8381101561567757808201518184015260208101905061565c565b83811115615686576000848401525b50505050565b60006156978261564e565b6156a181856155f7565b93506156b1818560208601615659565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006156f36011836155f7565b91506156fe826156bd565b601182019050919050565b60006157148261562b565b9150615720828561568c565b915061572b826156e6565b9150615737828461568c565b91508190509392505050565b6000601f19601f8301169050919050565b600061575f8261564e565b6157698185614d83565b9350615779818560208601615659565b61578281615743565b840191505092915050565b600060208201905081810360008301526157a78184615754565b905092915050565b6157b881614165565b81146157c357600080fd5b50565b6000815190506157d5816157af565b92915050565b6000602082840312156157f1576157f06140d6565b5b60006157ff848285016157c6565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615864602a83614d83565b915061586f82615808565b604082019050919050565b6000602082019050818103600083015261589381615857565b9050919050565b60006158a582614340565b9150600082036158b8576158b7614e00565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006158f9602083614d83565b9150615904826158c3565b602082019050919050565b60006020820190508181036000830152615928816158ec565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061598b602683614d83565b91506159968261592f565b604082019050919050565b600060208201905081810360008301526159ba8161597e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006159f7601d83614d83565b9150615a02826159c1565b602082019050919050565b60006020820190508181036000830152615a26816159ea565b9050919050565b600081519050919050565b600081905092915050565b6000615a4e82615a2d565b615a588185615a38565b9350615a68818560208601615659565b80840191505092915050565b6000615a808284615a43565b91508190509291505056fea2646970667358221220a6d8fcd130ab0457fb3dab1c476c95ea0acd188f7e0d4d663cfd9f2c3158168964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool(address[],address,uint128,uint128)": {
        "params": {
          "_allocPoint": "weight of rewards this pool receives",
          "_depositToken": "token to deposit for rewards",
          "_rewardTokens": "tokens to reward from this pool"
        }
      },
      "allPendingRewards(address)": {
        "params": {
          "_account": "to get rewards for"
        }
      },
      "claim(uint256,address)": {
        "params": {
          "_pid": "id in `_poolInfo`",
          "_rewardRecipient": "address to send rewards to"
        }
      },
      "claimFor(address,uint256,address)": {
        "params": {
          "_for": "account to claim for",
          "_pid": "id in `_poolInfo`",
          "_rewardRecipient": "address that receives rewards"
        }
      },
      "deposit(address,uint256,uint256)": {
        "params": {
          "_amount": "amount of tokens to deposit",
          "_pid": "in `_poolInfo`",
          "_to": "address that msg.sender deposits tokens for"
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "_pid": "pool id to withdraw tokens from"
        }
      },
      "getPidFor(address)": {
        "params": {
          "_depositToken": "depositToken in `_poolInfo`"
        },
        "returns": {
          "found": "ensure 0 index",
          "pid": "of pool with `_depositToken`"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pendingRewards(uint256,address)": {
        "params": {
          "_pid": "id in `_poolInfo`",
          "_user": "id in `_userInfo[_pid]`"
        }
      },
      "poolInfo(uint256)": {
        "params": {
          "_pid": "in `_poolInfo`"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setPool(uint256,uint128)": {
        "params": {
          "_newAllocPoint": "new allocation (weight) for rewards",
          "_pid": "pool to modify"
        }
      },
      "setRewardPerBlockFor(address,uint256)": {
        "params": {
          "_rewardPerBlock": "tokens to drip per block",
          "_rewardToken": "token to adjust the drip for"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updatePool(uint256)": {
        "params": {
          "_pid": "pool to update"
        }
      },
      "userInfo(uint256,address)": {
        "params": {
          "_account": "to get information for",
          "_pid": "in `_poolInfo`"
        }
      },
      "withdraw(uint256,uint256,address)": {
        "params": {
          "_amount": "amount to withdraw",
          "_pid": "id in `_poolInfo`",
          "_rewardRecipient": "address to send rewards to"
        }
      },
      "withdrawFor(address,uint256,uint256,address)": {
        "params": {
          "_amount": "amount to withdraw",
          "_for": "account to withdraw from",
          "_pid": "id in `_poolInfo`",
          "_rewardRecipient": "reward recipient"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,uint256,uint256)": {
        "notice": "================================================== ============== Events ============================ =================================================="
      }
    },
    "kind": "user",
    "methods": {
      "addPool(address[],address,uint128,uint128)": {
        "notice": "Adds a new reward poolUpdates reward token count in case of adding extra tokens"
      },
      "allPendingRewards(address)": {
        "notice": "Get all pending rewards for an account"
      },
      "claim(uint256,address)": {
        "notice": "Claim rewards only"
      },
      "claimFor(address,uint256,address)": {
        "notice": "Trusted helper contract can claim rewards on behalf of an account"
      },
      "deposit(address,uint256,uint256)": {
        "notice": "Deposits tokens for @param _to"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Emergency function, withdraws deposits from a poolThis will forfeit your rewards."
      },
      "getPidFor(address)": {
        "notice": "Get id for a tokenUseful for external contracts"
      },
      "initialize(address[],uint256[],address,uint128,uint128)": {
        "notice": "Initialize the contract with a single poolSets initial reward token and ratesSets the caller as DEFAULT_ADMIN"
      },
      "massUpdatePools()": {
        "notice": "Updates all pools to be up-to date"
      },
      "pendingRewards(uint256,address)": {
        "notice": "Get pending rewards from a certain pool"
      },
      "poolInfo(uint256)": {
        "notice": "Get pool information"
      },
      "poolLength()": {
        "notice": "Amount of pools"
      },
      "rescueNative()": {
        "notice": "A rescue function for missent msg.valueSince we are using payable functions to save gas on calls"
      },
      "rescueNonPoolToken(address,uint256)": {
        "notice": "A rescue function for missent tokens / airdropsThis cannot withdraw any deposits due `ensurePoolDoesNotExist` modifier."
      },
      "setPool(uint256,uint128)": {
        "notice": "Set new allocations for a poolSet `_newAllocPoint` to 0 to retire a pool"
      },
      "setRewardPerBlockFor(address,uint256)": {
        "notice": "Adjust/Set reward per block for a particular reward token"
      },
      "updatePool(uint256)": {
        "notice": "Updates a pools reward variables to be up-to date"
      },
      "userInfo(uint256,address)": {
        "notice": "Get account information on a pool"
      },
      "withdraw(uint256,uint256,address)": {
        "notice": "Withdraw deposited tokens and rewards."
      },
      "withdrawFor(address,uint256,uint256,address)": {
        "notice": "Trusted helper contract can withdraw rewards and deposits on behalf of an accountFor eg. withdraw + remove liquidity"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2028,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2031,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2910,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3180,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1623,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1618_storage)"
      },
      {
        "astId": 1922,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2186,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 2230,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 28435,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_userInfo",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)28404_storage))"
      },
      {
        "astId": 28439,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "rewardPerBlockFor",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28443,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "_poolInfo",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_struct(PoolInfo)28418_storage)dyn_storage"
      },
      {
        "astId": 28445,
        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "204",
        "type": "t_uint128"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)28418_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)28418_storage",
        "encoding": "dynamic_array",
        "label": "struct KrStaking.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)5483": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)28404_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct KrStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)28404_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1618_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1618_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)28404_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct KrStaking.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)28404_storage)"
      },
      "t_struct(PoolInfo)28418_storage": {
        "encoding": "inplace",
        "label": "struct KrStaking.PoolInfo",
        "members": [
          {
            "astId": 28407,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "depositToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)5483"
          },
          {
            "astId": 28409,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 28411,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "lastRewardBlock",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 28414,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "accRewardPerShares",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 28417,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "rewardTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)1618_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 1615,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1617,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)28404_storage": {
        "encoding": "inplace",
        "label": "struct KrStaking.UserInfo",
        "members": [
          {
            "astId": 28400,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 28403,
            "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
            "label": "rewardDebts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}