{
    "address": "0x7FBC9e9e6976E4F43aDCaF5BDd2946067A02bd54",
    "abi": [
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "user",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "rewardToken",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "ClaimRewards",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "user",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "pid",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "Deposit",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "user",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "pid",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "EmergencyWithdraw",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint8",
                    "name": "version",
                    "type": "uint8"
                }
            ],
            "name": "Initialized",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "previousAdminRole",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "newAdminRole",
                    "type": "bytes32"
                }
            ],
            "name": "RoleAdminChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }
            ],
            "name": "RoleGranted",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }
            ],
            "name": "RoleRevoked",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "user",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "pid",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "Withdraw",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "DEFAULT_ADMIN_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "OPERATOR_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "_rewardTokens",
                    "type": "address[]"
                },
                {
                    "internalType": "contract IERC20",
                    "name": "_depositToken",
                    "type": "address"
                },
                {
                    "internalType": "uint128",
                    "name": "_allocPoint",
                    "type": "uint128"
                },
                {
                    "internalType": "uint128",
                    "name": "_startBlock",
                    "type": "uint128"
                }
            ],
            "name": "addPool",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "allPendingRewards",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "pid",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address[]",
                            "name": "tokens",
                            "type": "address[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "amounts",
                            "type": "uint256[]"
                        }
                    ],
                    "internalType": "struct KrStaking.Reward[]",
                    "name": "allRewards",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_rewardRecipient",
                    "type": "address"
                }
            ],
            "name": "claim",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_for",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_rewardRecipient",
                    "type": "address"
                }
            ],
            "name": "claimFor",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                }
            ],
            "name": "emergencyWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_depositToken",
                    "type": "address"
                }
            ],
            "name": "getPidFor",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "pid",
                    "type": "uint256"
                },
                {
                    "internalType": "bool",
                    "name": "found",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                }
            ],
            "name": "getRoleAdmin",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "grantRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "hasRole",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "_rewardTokens",
                    "type": "address[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "_rewardPerBlocks",
                    "type": "uint256[]"
                },
                {
                    "internalType": "contract IERC20",
                    "name": "_depositToken",
                    "type": "address"
                },
                {
                    "internalType": "uint128",
                    "name": "_allocPoint",
                    "type": "uint128"
                },
                {
                    "internalType": "uint128",
                    "name": "_startBlock",
                    "type": "uint128"
                },
                {
                    "internalType": "address",
                    "name": "_admin",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_operator",
                    "type": "address"
                }
            ],
            "name": "initialize",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "massUpdatePools",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_user",
                    "type": "address"
                }
            ],
            "name": "pendingRewards",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "pid",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address[]",
                            "name": "tokens",
                            "type": "address[]"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "amounts",
                            "type": "uint256[]"
                        }
                    ],
                    "internalType": "struct KrStaking.Reward",
                    "name": "rewards",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                }
            ],
            "name": "poolInfo",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "contract IERC20",
                            "name": "depositToken",
                            "type": "address"
                        },
                        {
                            "internalType": "uint128",
                            "name": "allocPoint",
                            "type": "uint128"
                        },
                        {
                            "internalType": "uint128",
                            "name": "lastRewardBlock",
                            "type": "uint128"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "accRewardPerShares",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "address[]",
                            "name": "rewardTokens",
                            "type": "address[]"
                        }
                    ],
                    "internalType": "struct KrStaking.PoolInfo",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "poolLength",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "renounceRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "rescueNative",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IERC20",
                    "name": "_tokenToRescue",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "rescueNonPoolToken",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "revokeRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "rewardPerBlockFor",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                },
                {
                    "internalType": "uint128",
                    "name": "_newAllocPoint",
                    "type": "uint128"
                }
            ],
            "name": "setPool",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_rewardToken",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_rewardPerBlock",
                    "type": "uint256"
                }
            ],
            "name": "setRewardPerBlockFor",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes4",
                    "name": "interfaceId",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalAllocPoint",
            "outputs": [
                {
                    "internalType": "uint128",
                    "name": "",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                }
            ],
            "name": "updatePool",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "contract IERC20",
                            "name": "depositToken",
                            "type": "address"
                        },
                        {
                            "internalType": "uint128",
                            "name": "allocPoint",
                            "type": "uint128"
                        },
                        {
                            "internalType": "uint128",
                            "name": "lastRewardBlock",
                            "type": "uint128"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "accRewardPerShares",
                            "type": "uint256[]"
                        },
                        {
                            "internalType": "address[]",
                            "name": "rewardTokens",
                            "type": "address[]"
                        }
                    ],
                    "internalType": "struct KrStaking.PoolInfo",
                    "name": "pool",
                    "type": "tuple"
                }
            ],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "userInfo",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "rewardDebts",
                            "type": "uint256[]"
                        }
                    ],
                    "internalType": "struct KrStaking.UserInfo",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_rewardRecipient",
                    "type": "address"
                }
            ],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_for",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_pid",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_rewardRecipient",
                    "type": "address"
                }
            ],
            "name": "withdrawFor",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        }
    ],
    "transactionHash": "0xd1954218be0388c8b743e1d22a274a6138260c2ba678da41ef81a40905960f2c",
    "receipt": {
        "to": null,
        "from": "0xDc46c7eA52c6b2ca13D1dB949F79F81Cc0E7193C",
        "contractAddress": "0x7FBC9e9e6976E4F43aDCaF5BDd2946067A02bd54",
        "transactionIndex": 1,
        "gasUsed": "3153147",
        "logsBloom": "0x
        "blockHash": "0x5e616cefa4942b4a0860e5968f83c4f51fdab1b8a4e6a73dd33213758c85c840",
        "transactionHash": "0xd1954218be0388c8b743e1d22a274a6138260c2ba678da41ef81a40905960f2c",
        "logs": [],
        "blockNumber": 7376939,
        "cumulativeGasUsed": "3203648",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "7f151a4c133817a4db425d2f7225b297",
    "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_startBlock\",\"type\":\"uint128\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"allPendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct KrStaking.Reward[]\",\"name\":\"allRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"getPidFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"found\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_startBlock\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct KrStaking.Reward\",\"name\":\"rewards\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastRewardBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"accRewardPerShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct KrStaking.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenToRescue\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueNonPoolToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerBlockFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_newAllocPoint\",\"type\":\"uint128\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlockFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"allocPoint\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastRewardBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"accRewardPerShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct KrStaking.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardDebts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct KrStaking.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool(address[],address,uint128,uint128)\":{\"params\":{\"_allocPoint\":\"weight of rewards this pool receives\",\"_depositToken\":\"token to deposit for rewards\",\"_rewardTokens\":\"tokens to reward from this pool\"}},\"allPendingRewards(address)\":{\"params\":{\"_account\":\"to get rewards for\"}},\"claim(uint256,address)\":{\"params\":{\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"address to send rewards to\"}},\"claimFor(address,uint256,address)\":{\"params\":{\"_for\":\"account to claim for\",\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"address that receives rewards\"}},\"deposit(address,uint256,uint256)\":{\"params\":{\"_amount\":\"amount of tokens to deposit\",\"_pid\":\"in `_poolInfo`\",\"_to\":\"address that msg.sender deposits tokens for\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"_pid\":\"pool id to withdraw tokens from\"}},\"getPidFor(address)\":{\"params\":{\"_depositToken\":\"depositToken in `_poolInfo`\"},\"returns\":{\"found\":\"ensure 0 index\",\"pid\":\"of pool with `_depositToken`\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pendingRewards(uint256,address)\":{\"params\":{\"_pid\":\"id in `_poolInfo`\",\"_user\":\"id in `_userInfo[_pid]`\"}},\"poolInfo(uint256)\":{\"params\":{\"_pid\":\"in `_poolInfo`\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setPool(uint256,uint128)\":{\"params\":{\"_newAllocPoint\":\"new allocation (weight) for rewards\",\"_pid\":\"pool to modify\"}},\"setRewardPerBlockFor(address,uint256)\":{\"params\":{\"_rewardPerBlock\":\"tokens to drip per block\",\"_rewardToken\":\"token to adjust the drip for\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"pool to update\"}},\"userInfo(uint256,address)\":{\"params\":{\"_account\":\"to get information for\",\"_pid\":\"in `_poolInfo`\"}},\"withdraw(uint256,uint256,address)\":{\"params\":{\"_amount\":\"amount to withdraw\",\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"address to send rewards to\"}},\"withdrawFor(address,uint256,uint256,address)\":{\"params\":{\"_amount\":\"amount to withdraw\",\"_for\":\"account to withdraw from\",\"_pid\":\"id in `_poolInfo`\",\"_rewardRecipient\":\"reward recipient\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256,uint256)\":{\"notice\":\"================================================== ============== Events ============================ ==================================================\"}},\"kind\":\"user\",\"methods\":{\"addPool(address[],address,uint128,uint128)\":{\"notice\":\"Adds a new reward poolUpdates reward token count in case of adding extra tokens\"},\"allPendingRewards(address)\":{\"notice\":\"Get all pending rewards for an account\"},\"claim(uint256,address)\":{\"notice\":\"Claim rewards only\"},\"claimFor(address,uint256,address)\":{\"notice\":\"Trusted helper contract can claim rewards on behalf of an account\"},\"deposit(address,uint256,uint256)\":{\"notice\":\"Deposits tokens for @param _to\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Emergency function, withdraws deposits from a poolThis will forfeit your rewards.\"},\"getPidFor(address)\":{\"notice\":\"Get id for a tokenUseful for external contracts\"},\"initialize(address[],uint256[],address,uint128,uint128,address,address)\":{\"notice\":\"Initialize the contract with a single poolSets initial reward token and ratesSets the caller as DEFAULT_ADMIN\"},\"massUpdatePools()\":{\"notice\":\"Updates all pools to be up-to date\"},\"pendingRewards(uint256,address)\":{\"notice\":\"Get pending rewards from a certain pool\"},\"poolInfo(uint256)\":{\"notice\":\"Get pool information\"},\"poolLength()\":{\"notice\":\"Amount of pools\"},\"rescueNative()\":{\"notice\":\"A rescue function for missent msg.valueSince we are using payable functions to save gas on calls\"},\"rescueNonPoolToken(address,uint256)\":{\"notice\":\"A rescue function for missent tokens / airdropsThis cannot withdraw any deposits due `ensurePoolDoesNotExist` modifier.\"},\"setPool(uint256,uint128)\":{\"notice\":\"Set new allocations for a poolSet `_newAllocPoint` to 0 to retire a pool\"},\"setRewardPerBlockFor(address,uint256)\":{\"notice\":\"Adjust/Set reward per block for a particular reward token\"},\"updatePool(uint256)\":{\"notice\":\"Updates a pools reward variables to be up-to date\"},\"userInfo(uint256,address)\":{\"notice\":\"Get account information on a pool\"},\"withdraw(uint256,uint256,address)\":{\"notice\":\"Withdraw deposited tokens and rewards.\"},\"withdrawFor(address,uint256,uint256,address)\":{\"notice\":\"Trusted helper contract can withdraw rewards and deposits on behalf of an accountFor eg. withdraw + remove liquidity\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/staking/KrStaking.sol\":\"KrStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"src/contracts/staking/KrStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract KrStaking is AccessControlUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    // keccak256(\\\"kresko.operator.role\\\")\\n    bytes32 public constant OPERATOR_ROLE = 0x8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd2;\\n\\n    /**\\n     * ==================================================\\n     * =============== Structs ==========================\\n     * ==================================================\\n     */\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256[] rewardDebts;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 depositToken; // Address of LP token contract.\\n        uint128 allocPoint; // How many allocation points assigned to this pool.\\n        uint128 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        uint256[] accRewardPerShares; // Accumulated rewards per share, times 1e12.\\n        address[] rewardTokens; // Reward tokens for this pool.\\n    }\\n\\n    struct Reward {\\n        uint256 pid;\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * =============== Storage ==========================\\n     * ==================================================\\n     */\\n\\n    // Info of each staked user.\\n    mapping(uint256 => mapping(address => UserInfo)) private _userInfo;\\n\\n    // Reward token drip per block\\n    mapping(address => uint256) public rewardPerBlockFor;\\n\\n    // Info of each pool.\\n    PoolInfo[] private _poolInfo;\\n\\n    // Total allocation points.\\n    uint128 public totalAllocPoint;\\n\\n    /**\\n     * ==================================================\\n     * ============== Events ============================\\n     * ==================================================\\n     */\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event ClaimRewards(address indexed user, address indexed rewardToken, uint256 indexed amount);\\n\\n    /**\\n     * ==================================================\\n     * ============== Initializer =======================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Initialize the contract with a single pool\\n     * @notice Sets initial reward token and rates\\n     * @notice Sets the caller as DEFAULT_ADMIN\\n     */\\n    function initialize(\\n        address[] calldata _rewardTokens,\\n        uint256[] calldata _rewardPerBlocks,\\n        IERC20 _depositToken,\\n        uint128 _allocPoint,\\n        uint128 _startBlock,\\n        address _admin,\\n        address _operator\\n    ) external initializer {\\n        require(_rewardPerBlocks.length == _rewardTokens.length, \\\"Reward tokens must have a rewardPerBlock value\\\");\\n\\n        __AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(OPERATOR_ROLE, _operator);\\n        _setupRole(OPERATOR_ROLE, msg.sender);\\n\\n        // Set initial reward tokens and allocations\\n        for (uint256 i; i < _rewardTokens.length; i++) {\\n            rewardPerBlockFor[_rewardTokens[i]] = _rewardPerBlocks[i];\\n        }\\n\\n        // Push the initial pool in.\\n        _poolInfo.push(\\n            PoolInfo({\\n                depositToken: _depositToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: _startBlock,\\n                accRewardPerShares: new uint256[](_rewardTokens.length),\\n                rewardTokens: _rewardTokens\\n            })\\n        );\\n\\n        totalAllocPoint += _allocPoint;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * =============== Modifiers ========================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Ensures no pool exists with this depositToken\\n     * @param _depositToken to check\\n     */\\n    modifier ensurePoolDoesNotExist(IERC20 _depositToken) {\\n        for (uint256 i; i < _poolInfo.length; i++) {\\n            require(address(_poolInfo[i].depositToken) != address(_depositToken), \\\"KR: poolExists\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Ensures this pool exists\\n     * @param _pid to check\\n     */\\n    modifier ensurePoolExists(uint256 _pid) {\\n        require(address(_poolInfo[_pid].depositToken) != address(0), \\\"KR: !poolExists\\\");\\n        _;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ================== Views =========================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Get pending rewards from a certain pool\\n     * @param _pid id in `_poolInfo`\\n     * @param _user id in `_userInfo[_pid]`\\n     */\\n    function pendingRewards(uint256 _pid, address _user) public view returns (Reward memory rewards) {\\n        PoolInfo memory pool = _poolInfo[_pid];\\n        UserInfo memory user = _userInfo[_pid][_user];\\n        uint256 depositTokenSupply = pool.depositToken.balanceOf(address(this));\\n        uint256 rewardTokensLength = pool.rewardTokens.length;\\n\\n        rewards = Reward({pid: _pid, tokens: pool.rewardTokens, amounts: new uint256[](rewardTokensLength)});\\n\\n        if (depositTokenSupply != 0 && user.amount > 0) {\\n            for (uint256 rewardIndex; rewardIndex < rewardTokensLength; rewardIndex++) {\\n                uint256 accRewardPerShare = pool.accRewardPerShares[rewardIndex];\\n\\n                uint256 rewardPerBlock = rewardPerBlockFor[pool.rewardTokens[rewardIndex]];\\n                uint256 blocks = block.number - pool.lastRewardBlock;\\n                uint256 reward = (rewardPerBlock * blocks * pool.allocPoint) / totalAllocPoint;\\n\\n                accRewardPerShare += (reward * 1e12) / depositTokenSupply;\\n\\n                rewards.amounts[rewardIndex] = (user.amount * accRewardPerShare) / 1e12 - user.rewardDebts[rewardIndex];\\n                rewards.tokens[rewardIndex] = pool.rewardTokens[rewardIndex];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get all pending rewards for an account\\n     * @param _account to get rewards for\\n     */\\n    function allPendingRewards(address _account) external view returns (Reward[] memory allRewards) {\\n        allRewards = new Reward[](_poolInfo.length);\\n        for (uint256 pid; pid < _poolInfo.length; pid++) {\\n            Reward memory poolReward = pendingRewards(pid, _account);\\n            allRewards[pid] = poolReward;\\n        }\\n    }\\n\\n    /**\\n     * @notice Amount of pools\\n     */\\n    function poolLength() external view returns (uint256) {\\n        return _poolInfo.length;\\n    }\\n\\n    /**\\n     * @notice Get pool information\\n     * @param _pid in `_poolInfo`\\n     */\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory) {\\n        return _poolInfo[_pid];\\n    }\\n\\n    /**\\n     * @notice Get id for a token\\n     * @notice Useful for external contracts\\n     * @param _depositToken depositToken in `_poolInfo`\\n     * @return pid of pool with `_depositToken`\\n     * @return found ensure 0 index\\n     */\\n    function getPidFor(address _depositToken) external view returns (uint256 pid, bool found) {\\n        for (pid; pid < _poolInfo.length; pid++) {\\n            if (address(_poolInfo[pid].depositToken) == _depositToken) {\\n                found = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get account information on a pool\\n     * @param _pid in `_poolInfo`\\n     * @param _account to get information for\\n     */\\n    function userInfo(uint256 _pid, address _account) external view returns (UserInfo memory) {\\n        return _userInfo[_pid][_account];\\n    }\\n\\n    /**\\n     * ==================================================\\n     * =========== Core public functions ================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Updates all pools to be up-to date\\n     */\\n    function massUpdatePools() public payable {\\n        for (uint256 pid; pid < _poolInfo.length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates a pools reward variables to be up-to date\\n     * @param _pid pool to update\\n     */\\n    function updatePool(uint256 _pid) public payable returns (PoolInfo memory pool) {\\n        pool = _poolInfo[_pid];\\n        // Updates once per block\\n        if (block.number > pool.lastRewardBlock) {\\n            uint256 deposits = pool.depositToken.balanceOf(address(this));\\n            // No rewards for 0 deposits\\n            if (deposits > 0) {\\n                for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n                    // Reward per block for a particular reward token\\n                    uint256 rewardPerBlock = rewardPerBlockFor[pool.rewardTokens[rewardIndex]];\\n                    // Blocks advanced since last update\\n                    uint256 blocks = block.number - pool.lastRewardBlock;\\n                    // Allocation for this particular pool\\n                    uint256 reward = (rewardPerBlock * blocks * pool.allocPoint) / totalAllocPoint;\\n                    // Increment accumulated rewards for new block height\\n                    pool.accRewardPerShares[rewardIndex] += (reward * 1e12) / deposits;\\n                }\\n            }\\n            // No further updates within same block height\\n            pool.lastRewardBlock = uint128(block.number);\\n            // storage\\n            _poolInfo[_pid] = pool;\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposits tokens for @param _to\\n     * @param _to address that msg.sender deposits tokens for\\n     * @param _pid in `_poolInfo`\\n     * @param _amount amount of tokens to deposit\\n     */\\n    function deposit(\\n        address _to,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external payable nonReentrant ensurePoolExists(_pid) {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][_to];\\n\\n        // Initialize rewardDebts\\n        if (user.rewardDebts.length == 0) {\\n            user.rewardDebts = new uint256[](pool.rewardTokens.length);\\n        }\\n\\n        pool.depositToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n        user.amount += _amount;\\n\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            user.rewardDebts[rewardIndex] += (_amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n        }\\n\\n        emit Deposit(_to, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw deposited tokens and rewards.\\n     * @param _pid id in `_poolInfo`\\n     * @param _amount amount to withdraw\\n     * @param _rewardRecipient address to send rewards to\\n     */\\n    function withdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _rewardRecipient\\n    ) external payable nonReentrant {\\n        require(_amount > 0, \\\"KR: 0-withdraw\\\");\\n        require(_rewardRecipient != address(0), \\\"KR: !rewardRecipient\\\");\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][msg.sender];\\n\\n        sendRewards(pool, user, _rewardRecipient);\\n\\n        // Send whole balance in case of amount exceeds deposits\\n        if (_amount > user.amount) {\\n            _amount = user.amount;\\n            user.amount = 0;\\n        } else {\\n            user.amount -= _amount;\\n        }\\n\\n        pool.depositToken.safeTransfer(address(msg.sender), _amount);\\n\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            user.rewardDebts[rewardIndex] = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Claim rewards only\\n     * @param _pid id in `_poolInfo`\\n     * @param _rewardRecipient address to send rewards to\\n     */\\n    function claim(uint256 _pid, address _rewardRecipient) external payable nonReentrant {\\n        require(_rewardRecipient != address(0), \\\"KR: !rewardRecipient\\\");\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][msg.sender];\\n\\n        if (user.amount > 0) {\\n            sendRewards(pool, user, _rewardRecipient);\\n\\n            for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n                user.rewardDebts[rewardIndex] = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Emergency function, withdraws deposits from a pool\\n     * @notice This will forfeit your rewards.\\n     * @param _pid pool id to withdraw tokens from\\n     */\\n    function emergencyWithdraw(uint256 _pid) external payable nonReentrant {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][msg.sender];\\n        pool.depositToken.safeTransfer(address(msg.sender), user.amount);\\n        user.amount = 0;\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            user.rewardDebts[rewardIndex] = 0;\\n        }\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============= Admin functions ====================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Adjust/Set reward per block for a particular reward token\\n     * @param _rewardToken token to adjust the drip for\\n     * @param _rewardPerBlock tokens to drip per block\\n     */\\n    function setRewardPerBlockFor(address _rewardToken, uint256 _rewardPerBlock)\\n        external\\n        payable\\n        onlyRole(OPERATOR_ROLE)\\n    {\\n        rewardPerBlockFor[_rewardToken] = _rewardPerBlock;\\n    }\\n\\n    /**\\n     * @notice Adds a new reward pool\\n     * @notice Updates reward token count in case of adding extra tokens\\n     * @param _rewardTokens tokens to reward from this pool\\n     * @param _depositToken token to deposit for rewards\\n     * @param _allocPoint weight of rewards this pool receives\\n     */\\n    function addPool(\\n        address[] calldata _rewardTokens,\\n        IERC20 _depositToken,\\n        uint128 _allocPoint,\\n        uint128 _startBlock\\n    ) external payable onlyRole(OPERATOR_ROLE) ensurePoolDoesNotExist(_depositToken) {\\n        require(_rewardTokens.length > 0, \\\"KR: !rewardTokens\\\");\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        _poolInfo.push(\\n            PoolInfo({\\n                depositToken: _depositToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: _startBlock != 0 ? _startBlock : uint128(block.number),\\n                accRewardPerShares: new uint256[](_rewardTokens.length),\\n                rewardTokens: _rewardTokens\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @notice Set new allocations for a pool\\n     * @notice Set `_newAllocPoint` to 0 to retire a pool\\n     * @param _pid pool to modify\\n     * @param _newAllocPoint new allocation (weight) for rewards\\n     */\\n    function setPool(uint256 _pid, uint128 _newAllocPoint)\\n        external\\n        payable\\n        onlyRole(OPERATOR_ROLE)\\n        ensurePoolExists(_pid)\\n    {\\n        totalAllocPoint -= _poolInfo[_pid].allocPoint + _newAllocPoint;\\n        _poolInfo[_pid].allocPoint = _newAllocPoint;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============ Protected functions =================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Trusted helper contract can withdraw rewards and deposits on behalf of an account\\n     * @notice For eg. withdraw + remove liquidity\\n     * @param _for account to withdraw from\\n     * @param _pid id in `_poolInfo`\\n     * @param _amount amount to withdraw\\n     * @param _rewardRecipient reward recipient\\n     */\\n    function withdrawFor(\\n        address _for,\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _rewardRecipient\\n    ) external payable nonReentrant onlyRole(OPERATOR_ROLE) {\\n        require(_amount > 0, \\\"KR: 0-withdraw\\\");\\n        require(_rewardRecipient != address(0), \\\"KR: !rewardRecipient\\\");\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][_for];\\n\\n        sendRewards(pool, user, _rewardRecipient);\\n\\n        // Send whole balance in case of amount exceeds deposits\\n        if (_amount > user.amount) {\\n            _amount = user.amount;\\n            user.amount = 0;\\n        } else {\\n            user.amount -= _amount;\\n        }\\n\\n        pool.depositToken.safeTransfer(address(msg.sender), _amount);\\n\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            user.rewardDebts[rewardIndex] = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n        }\\n\\n        emit Withdraw(_for, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Trusted helper contract can claim rewards on behalf of an account\\n     * @param _for account to claim for\\n     * @param _pid id in `_poolInfo`\\n     * @param _rewardRecipient address that receives rewards\\n     */\\n    function claimFor(\\n        address _for,\\n        uint256 _pid,\\n        address _rewardRecipient\\n    ) external payable nonReentrant onlyRole(OPERATOR_ROLE) {\\n        require(_rewardRecipient != address(0), \\\"KR: !rewardRecipient\\\");\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = _userInfo[_pid][_for];\\n\\n        if (user.amount > 0) {\\n            sendRewards(pool, user, _rewardRecipient);\\n\\n            for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n                user.rewardDebts[rewardIndex] = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice A rescue function for missent msg.value\\n     * @notice Since we are using payable functions to save gas on calls\\n     */\\n    function rescueNative() external payable onlyRole(OPERATOR_ROLE) {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @notice A rescue function for missent tokens / airdrops\\n     * @notice This cannot withdraw any deposits due `ensurePoolDoesNotExist` modifier.\\n     */\\n    function rescueNonPoolToken(IERC20 _tokenToRescue, uint256 _amount)\\n        external\\n        payable\\n        onlyRole(OPERATOR_ROLE)\\n        ensurePoolDoesNotExist(_tokenToRescue)\\n    {\\n        _tokenToRescue.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============= Internal functions =================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Loops over pools reward tokens and sends them to the user\\n     * @param pool pool to send rewards from in `_poolInfo`\\n     * @param user users info in the @param pool\\n     * @param recipient user to send rewards to\\n     */\\n    function sendRewards(\\n        PoolInfo memory pool,\\n        UserInfo memory user,\\n        address recipient\\n    ) internal {\\n        for (uint256 rewardIndex; rewardIndex < pool.rewardTokens.length; rewardIndex++) {\\n            uint256 rewardDebt = (user.amount * pool.accRewardPerShares[rewardIndex]) / 1e12;\\n            uint256 pending = rewardDebt - user.rewardDebts[rewardIndex];\\n\\n            if (pending > 0) {\\n                IERC20(pool.rewardTokens[rewardIndex]).safeTransfer(recipient, pending);\\n                emit ClaimRewards(recipient, pool.rewardTokens[rewardIndex], pending);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x825fd75500c822657cb816ed63a2da365c01e617607d3532e5332413b8f65975\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x608080604052346100165761383f908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461026b5780630802f76814610262578063081e3eda146102595780630ad58d2f146102505780630dbd1a38146102475780630efe6a8b1461023e5780631526fe271461023557806317caf6f11461022c578063248a9ca3146102235780632f2ff15d1461021a57806336568abe1461021157806343a4534b146102085780634d7ee644146101ff57806351eb05a6146101f65780635312ea8e146101ed5780635ea3f4fa146101e4578063630b5ba1146101db57806368e2f7b7146101d2578063759be515146101c957806391d14854146101c057806392bb9fbf146101b757806393f1a40b146101ae578063a217fddf146101a5578063ba8fc5bf1461019c578063bf82b7b514610193578063d18df53c1461018a578063d547741f14610181578063ddd5e1b214610178578063f5b541a61461016f5763fc82f0841461016757600080fd5b61000e611a6a565b5061000e611a10565b5061000e611915565b5061000e6118b4565b5061000e611856565b5061000e611720565b5061000e611670565b5061000e611635565b5061000e6115ac565b5061000e611523565b5061000e6114ae565b5061000e6113ec565b5061000e611390565b5061000e611346565b5061000e611275565b5061000e6110cd565b5061000e611094565b5061000e610f95565b5061000e610df1565b5061000e610d07565b5061000e610bf1565b5061000e610ba3565b5061000e610b54565b5061000e610af4565b5061000e61083d565b5061000e6107d3565b5061000e610605565b5061000e6105c8565b5061000e61039f565b503461000e576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043563ffffffff60e01b811680910361000e576020907f7965db0b0000000000000000000000000000000000000000000000000000000081149081156102e8575b506040519015158152f35b7f01ffc9a700000000000000000000000000000000000000000000000000000000149050386102dd565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b604435906fffffffffffffffffffffffffffffffff8216820361000e57565b606435906fffffffffffffffffffffffffffffffff8216820361000e57565b506080367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043567ffffffffffffffff811161000e576103ea903690600401610312565b602435906103f782610343565b6103ff610361565b92610408610380565b91610411611ab3565b60cb5473ffffffffffffffffffffffffffffffffffffffff8581169060005b8381106105a257505050508015610543578461052261052e946104a16104736105389961046e60cc546fffffffffffffffffffffffffffffffff1690565b6128d5565b6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1960cc54161760cc55565b6fffffffffffffffffffffffffffffffff8181161561053a57505b6105096104c8856125c3565b936104f06104d46120d3565b73ffffffffffffffffffffffffffffffffffffffff909a168a52565b6fffffffffffffffffffffffffffffffff166020890152565b6fffffffffffffffffffffffffffffffff166040870152565b606085015236916125f5565b608082015261289a565b005b905043166104bc565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4b523a2021726577617264546f6b656e730000000000000000000000000000006044820152606490fd5b806105be84846105b46105c39561264d565b50541614156136cd565b61254c565b610430565b503461000e576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57602060cb54604051908152f35b506060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760243560043560443561064281610343565b610651600260975414156131c1565b6002609755829061066384151561357e565b61068473ffffffffffffffffffffffffffffffffffffffff821615156135e4565b61068d83612fa1565b936106cb6106bb6106a88660005260c9602052604060002090565b3360009081526020919091526040902090565b926106c584612bee565b87613733565b8154808211156107c257505080546000825591505b835161070a908390339073ffffffffffffffffffffffffffffffffffffffff1661364a565b61364a565b600180820194909160608201916080016000845b61075c575b6000878760405191337ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688585a461075a6001609755565bf35b8151518110156107bd576107b7906105be6107926107878654610780858a51612c2f565b51906120ac565b64e8d4a51000900490565b61079c838c61328d565b90919082549060031b600019811b9283911b16911916179055565b8461071e565b610723565b906107cc91612c51565b81556106e0565b506040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043561080a81610343565b610812611ab3565b73ffffffffffffffffffffffffffffffffffffffff16600090815260ca602052604090206024359055005b506060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043561087481610343565b6024359060443561088a600260975414156131c1565b60026097556108988361264d565b505473ffffffffffffffffffffffffffffffffffffffff93906108be9085161515613227565b6108c781612fa1565b936108f7846108e08460005260c9602052604060002090565b9060018060a01b0316600052602052604060002090565b946001808701968754156109e8575b9181926109268761091d845160018060a01b031690565b309033906132b3565b6109318782546120bf565b905560006060608083019201925b61097d575b60008888888860405193167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158585a461075a6001609755565b8151518110156109e357806105be8a6109c46109ae846109a86107878e6107806109dd9a8d51612c2f565b9361328d565b9190926109bf8385549060031b1c90565b6120bf565b9082549060031b600019811b9283911b16911916179055565b8361093f565b610944565b6109ff6109f96080850151516125c3565b896126c9565b610906565b90815180825260208080930193019160005b828110610a24575050505090565b835185529381019392810192600101610a16565b90815180825260208080930193019160005b828110610a58575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610a4a565b90610af1916020815260018060a01b0382511660208201526fffffffffffffffffffffffffffffffff80602084015116604083015260408301511660608201526080610adc606084015160a08385015260c0840190610a04565b9201519060a0601f1982850301910152610a38565b90565b503461000e576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57610b2c612f74565b50610b50610b44610b3e60043561264d565b50612b3d565b60405191829182610a82565b0390f35b503461000e576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760206fffffffffffffffffffffffffffffffff60cc5416604051908152f35b503461000e576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043560005260656020526020600160406000200154604051908152f35b503461000e5760408060031936011261000e5760043590602435610c1481610343565b6000928084526065602052610c2e60018486200154611bbb565b8084526065602090815283852073ffffffffffffffffffffffffffffffffffffffff841660009081529152604090205460ff1615610c6b57505051f35b8084526065602090815283852073ffffffffffffffffffffffffffffffffffffffff8416600090815291526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558251339273ffffffffffffffffffffffffffffffffffffffff1691907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d908690a451f35b503461000e576040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57602435610d4381610343565b3373ffffffffffffffffffffffffffffffffffffffff821603610d6c5761053890600435611f9a565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608490fd5b506080367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57600435610e2881610343565b60443590606435602435610e3b82610343565b610e4a600260975414156131c1565b6002609755610e57611ab3565b83610e6385151561357e565b73ffffffffffffffffffffffffffffffffffffffff90610e8684831615156135e4565b610e8f83612fa1565b95610ebb610eab876108e08760005260c9602052604060002090565b95610eb587612bee565b89613733565b845480821115610f8157505050825492600081555b8551610ef590859073ffffffffffffffffffffffffffffffffffffffff16339061364a565b600180820196909160608201916080016000845b610f47575b60008989898960405193167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688585a461075a6001609755565b815151811015610f7c57806105be8b61079c610f7694610f706107878954610780848d51612c2f565b9261328d565b84610f09565b610f0e565b90610f8e91959295612c51565b8155610ed0565b506040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576fffffffffffffffffffffffffffffffff602435600435828216820361000e5761105860019161053894610ff2611ab3565b61100f610ffe8361264d565b50858060a01b039054161515613227565b61102785828661101e8661264d565b500154166128d5565b60cc5491908116828216818110611087575b0316906fffffffffffffffffffffffffffffffff19161760cc5561264d565b5001906fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff19825416179055565b61108f61206f565b611039565b506020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57610b50610b44600435612fa1565b506020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043561110a600260975414156131c1565b600260975561111881612fa1565b600082815260c9602090815260408083203380855292528220835181549395949193919261115c929173ffffffffffffffffffffffffffffffffffffffff1661364a565b83825560018083019160800185825b6111a8575b505050505460405191337fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958585a461075a6001609755565b8151518110156111da57806105be6111c36111d4938761328d565b8154906000199060031b1b19169055565b8261116b565b611170565b610af1918151815260406112026020840151606060208501526060840190610a38565b920151906040818403910152610a04565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106112475750505050505090565b9091929394958480611265600193603f198682030187528a516111df565b9801930193019194939290611237565b503461000e5760208060031936011261000e5760043561129481610343565b60cb54906112a1826125a2565b926112af6040519485611d31565b8284527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06112dc846125a2565b0160005b8181106113305750505060005b8281106113025760405180610b508682611213565b806113108361132b93612c88565b61131a8287612c2f565b526113258186612c2f565b5061254c565b6112ed565b829061133a612aaf565b828289010152016112e0565b506000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760005b60cb54811015610538578061132561138b92612fa1565b611374565b503461000e576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576004356113cc81610343565b60018060a01b031660005260ca6020526020604060002054604051908152f35b503461000e5760e0367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5767ffffffffffffffff60043581811161000e5761143d903690600401610312565b9160243590811161000e57611456903690600401610312565b60449391933561146581610343565b61146d610380565b90608435926fffffffffffffffffffffffffffffffff8416840361000e576105389660a4359561149c87610343565b60c435976114a989610343565b612365565b503461000e576040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57602060ff6115176024356114f181610343565b6004356000526065845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b506040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043561155a81610343565b611562611ab3565b60cb5473ffffffffffffffffffffffffffffffffffffffff8281169060005b83811061159557610538602435338761364a565b806105be84846105b46115a79561264d565b611581565b503461000e5760408060031936011261000e57602090610b506116156116106024356115d781610343565b60608686516115e581611cec565b60008152015260043560005260c98652846000209060018060a01b0316600052602052604060002090565b612bee565b918051938493818552805182860152015190808401526060830190610a04565b503461000e576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57602060405160008152f35b503461000e576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576004356116ac81610343565b60cb5490600090819073ffffffffffffffffffffffffffffffffffffffff908116905b8484106116e8575b604080518581528415156020820152f35b90919282826116f68361264d565b5054161461170f576117079061254c565b9291906116cf565b9250505060409150600138806116d7565b506060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043561175781610343565b602435906117d66044359161176b83610343565b61177a600260975414156131c1565b6002609755611787611ab3565b6117a873ffffffffffffffffffffffffffffffffffffffff841615156135e4565b6117b184612fa1565b9360005260c960205260406000209060018060a01b0316600052602052604060002090565b9081546117e8575b6105386001609755565b6117fd906117f7839493612bee565b83613733565b6060810191600191828201906080016000845b61181d575b5050506117de565b8151518110156118515761184b906105be6118416107878754610780858c51612c2f565b61079c838761328d565b84611810565b611815565b503461000e576040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57610b506118a060243561189881610343565b600435612c88565b6040519182916020835260208301906111df565b503461000e576040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576105386024356004356118f682610343565b806000526065602052611910600160406000200154611bbb565b611f9a565b506040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043560243561194f81610343565b61195e600260975414156131c1565b600260975561198473ffffffffffffffffffffffffffffffffffffffff821615156135e4565b61198d82612fa1565b600092835260c9602090815260408085203386529091529092209081546119b8576105386001609755565b6119c7906117f7839493612bee565b6060810191600191828201906080016000845b6119e6575050506117de565b81515181101561185157611a0a906105be6118416107878754610780858c51612c2f565b846119da565b503461000e576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760206040517f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd28152f35b50600080600319360112611ab057611a80611ab3565b8080808047818115611aa7575b3390f115611a9a57604051f35b611aa2612c22565b604051f35b506108fc611a8d565b80fd5b3360009081527f36445a9eff22e9b54d9de8c6cce3c202b8c41b22158fd9c5163f843551e37e72602052604090205460ff1615611aec57565b611bb76048611b85611afd3361221d565b611b77611b086122c8565b6040519485937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000006020860152611b48815180926020603789019101611c89565b84017f206973206d697373696e6720726f6c652000000000000000000000000000000060378201520190611cbe565b03601f198101835282611d31565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815291829160048301611d53565b0390fd5b600081815260656020908152604080832033845290915290205460ff1615611be05750565b611be93361221d565b90611bf2612102565b906030611bfe83612153565b536078611c0a83612169565b5360415b60018111611c2d57611bb76048611b8586611b7787611b0888156121d2565b9080600f611c7792166010811015611c7c575b7f3031323334353637383961626364656600000000000000000000000000000000901a611c6d848661217a565b5360041c91612199565b611c0e565b611c8461213c565b611c40565b918091926000905b828210611ca9575011611ca2575050565b6000910152565b91508060209183015181860152018291611c91565b90611cd160209282815194859201611c89565b0190565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611d0857604052565b611d10611cd5565b604052565b60a0810190811067ffffffffffffffff821117611d0857604052565b90601f8019910116810190811067ffffffffffffffff821117611d0857604052565b60409160208252611d738151809281602086015260208686019101611c89565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010190565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b602052604081205460ff1615611dee575050565b80805260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff851660009081529252902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055604051339273ffffffffffffffffffffffffffffffffffffffff1691907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d908290a4565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f36445a9eff22e9b54d9de8c6cce3c202b8c41b22158fd9c5163f843551e37e7260205260409020547f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd29060ff1615611efd575050565b600081815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055604051339273ffffffffffffffffffffffffffffffffffffffff1691907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a4565b600081815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16611fd5575050565b600081815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055604051339273ffffffffffffffffffffffffffffffffffffffff1691907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a4565b50634e487b7160e01b600052601160045260246000fd5b64e8d4a510009080600019048211811515166120a0570290565b6120a861206f565b0290565b80600019048211811515166120a0570290565b811981116120cb570190565b611cd161206f565b604051906120e082611d15565b565b604051906060820182811067ffffffffffffffff821117611d0857604052565b604051906080820182811067ffffffffffffffff82111761212f575b604052604282526060366020840137565b612137611cd5565b61211e565b50634e487b7160e01b600052603260045260246000fd5b602090805115612161570190565b611cd161213c565b602190805160011015612161570190565b90602091805182101561218c57010190565b61219461213c565b010190565b80156121c5575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6121cd61206f565b6121a0565b156121d957565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b604051906060820182811067ffffffffffffffff8211176122bb575b604052602a82526040366020840137603061225383612153565b53607861225f83612169565b536029905b6001821161227757610af19150156121d2565b80600f6122b592166010811015611c7c577f3031323334353637383961626364656600000000000000000000000000000000901a611c6d848661217a565b90612264565b6122c3611cd5565b612239565b7f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd26122f1612102565b9060306122fd83612153565b53607861230983612169565b536041905b6001821161232157610af19150156121d2565b80600f61235f92166010811015611c7c577f3031323334353637383961626364656600000000000000000000000000000000901a611c6d848661217a565b9061230e565b96949290979593916000549860ff8a60081c1615809a819b6124b2575b8115612492575b501561240d576123af988a6123a6600160ff196000541617600055565b6123f4576128fa565b6123b557565b6123c561ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1565b61240861010061ff00196000541617600055565b6128fa565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b303b159150816124a4575b5038612389565b6001915060ff16143861249d565b600160ff8216109150612382565b156124c757565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f52657761726420746f6b656e73206d757374206861766520612072657761726460448201527f506572426c6f636b2076616c75650000000000000000000000000000000000006064820152608490fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146120cb570190565b919081101561258b575b60051b0190565b61259361213c565b612584565b35610af181610343565b60209067ffffffffffffffff81116125bb5760051b0190565b612593611cd5565b906125cd826125a2565b6125da6040519182611d31565b82815280926125eb601f19916125a2565b0190602036910137565b9291612600826125a2565b9161260e6040519384611d31565b829481845260208094019160051b810192831161000e57905b8282106126345750505050565b838091833561264281610343565b815201910190612627565b60cb54811015612688575b60cb60005260021b7fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0190600090565b61269061213c565b612658565b90918281106126a357505050565b60009182526020822092830192015b8281106126be57505050565b8181556001016126b2565b815191680100000000000000008311612720575b6126ec83835481855584612695565b602080910191600052806000206000925b84841061270b575050505050565b600183828293518555019201930192906126fd565b612728611cd5565b6126dd565b8151916801000000000000000083116127c3575b61275083835481855584612695565b602080910191600052806000206000925b84841061276f575050505050565b805182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9190911617825560019384019391909101908201612761565b6127cb611cd5565b612741565b9061288457815181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178155602082015160408301516fffffffffffffffffffffffffffffffff9091167fffffffffffffffffffffffffffffffff00000000000000000000000000000000608092831b1617600183015560608301516120e0936003929161287b90600286016126c9565b0151910161272d565b634e487b7160e01b600052600060045260246000fd5b6120e0906128c260cb54680100000000000000008110156128c8575b6001810160cb5561264d565b906127d0565b6128d0611cd5565b6128b6565b906fffffffffffffffffffffffffffffffff80809316911680920381116120cb570190565b9593969761292b6129309296999493946129158886146124c0565b61291d612a1a565b61292633611d9d565b611d9d565b611e8a565b61293933611e8a565b60005b8481106129c2575050509261052e6120e0959383610473966105226129636129a8976125c3565b9161298b61296f6120d3565b73ffffffffffffffffffffffffffffffffffffffff9098168852565b6fffffffffffffffffffffffffffffffff89166020880152610509565b60cc546fffffffffffffffffffffffffffffffff166128d5565b806129d1612a1592848661257a565b35612a0f6129e86129e3848a8c61257a565b612598565b73ffffffffffffffffffffffffffffffffffffffff16600090815260ca6020526040902090565b5561254c565b61293c565b60ff60005460081c1615612a2a57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608490fd5b604051906060820182811067ffffffffffffffff821117612ae1575b6040526060604083600081528260208201520152565b612ae9611cd5565b612acb565b9060405191828154918282526020928383019160005283600020936000905b828210612b23575050506120e092500383611d31565b855484526001958601958895509381019390910190612b0d565b9060405191612b4b83611d15565b8260018060a01b03808354168252600192600384820154916020926fffffffffffffffffffffffffffffffff81168487015260801c6040860152612b9160028201612aee565b606086015201906040519485869483855492838152019460005283600020936000915b838310612bd45750505050505060809291612bd0910384611d31565b0152565b855481168752899750958101959484019491840191612bb4565b90604051612bfb81611cec565b6020612c0e600183958054855201612aee565b910152565b9081602091031261000e575190565b506040513d6000823e3d90fd5b6020918151811015612c44575b60051b010190565b612c4c61213c565b612c3c565b818110612c5c570390565b612c6461206f565b0390565b8115612c72570490565b634e487b7160e01b600052601260045260246000fd5b9190612c92612aaf565b50612cba611610612ca5610b3e8661264d565b926108e08660005260c9602052604060002090565b8151612cf09073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015294602093918490879060249082905afa958615612f67575b600096612f38575b506080820191825193845191612d51836125c3565b93612d5a6120e2565b908152878101968752604081019485529880151580612f2e575b612d83575b5050505050505050565b600097939793606083018160408501940190612dc8612db360cc546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff1690565b928601965b8b8110612ddd5750505050612d79565b80825190612dea91612c2f565b518585838d5190612dfa91612c2f565b5173ffffffffffffffffffffffffffffffffffffffff16600090815260ca60205260409020548951612e3e906fffffffffffffffffffffffffffffffff1643612c51565b612e47916120ac565b86516fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16612e76916120ac565b90612e8091612c68565b612e8990612086565b90612e9391612c68565b612e9c916120bf565b875190612ea8916120ac565b64e8d4a51000900481895190612ebd91612c2f565b51612ec791612c51565b818a5190612ed491612c2f565b52808a5190612ee291612c2f565b5173ffffffffffffffffffffffffffffffffffffffff16818c5190612f0691612c2f565b73ffffffffffffffffffffffffffffffffffffffff9091169052612f299061254c565b612dcd565b5082511515612d74565b612f59919650843d8611612f60575b612f518183611d31565b810190612c13565b9438612d3c565b503d612f47565b612f6f612c22565b612d34565b60405190612f8182611d15565b606060808360008152600060208201526000604082015282808201520152565b90612faa612f74565b50612fb7610b3e8361264d565b9160408301612fd9612db382516fffffffffffffffffffffffffffffffff1690565b4311612fe3575050565b83516130049073ffffffffffffffffffffffffffffffffffffffff16612cd7565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290602090829060249082905afa9081156131b4575b600091613196575b5080613079575b50436fffffffffffffffffffffffffffffffff1690526120e09083906128c29061264d565b90939192600092608081019460208201916130a8612db360cc546fffffffffffffffffffffffffffffffff1690565b9360608201965b8851805182101561317d57906131528861314861314d8a8f8b61312b612db36131316131489461312b613125612db36131789f8f6130f36129e89161310d93612c2f565b5173ffffffffffffffffffffffffffffffffffffffff1690565b5493516fffffffffffffffffffffffffffffffff1690565b43612c51565b906120ac565b92516fffffffffffffffffffffffffffffffff1690565b612c68565b612086565b6131728261316c8c51936131668386612c2f565b516120bf565b92612c2f565b5261254c565b6130af565b5091989097509195509093506128c29250613054915050565b6131ae915060203d8111612f6057612f518183611d31565b3861304d565b6131bc612c22565b613045565b156131c857565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b1561322e57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4b523a2021706f6f6c45786973747300000000000000000000000000000000006044820152606490fd5b80548210156132a6575b60005260206000200190600090565b6132ae61213c565b613297565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff92831660248201529290911660448301526064808301939093529181526120e09161331b82611d15565b6133c4565b9081602091031261000e5751801515810361000e5790565b1561333f57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b60405173ffffffffffffffffffffffffffffffffffffffff91909116916133ea82611cec565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b15613461576000828192828761343c9796519301915af16134366134c0565b9061352c565b8051908161344957505050565b826120e09361345c938301019101613320565b613338565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d15613527573d9067ffffffffffffffff821161351a575b6040519161350e601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184611d31565b82523d6000602084013e565b613522611cd5565b6134d8565b606090565b90919015613538575090565b8151156135485750805190602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152908190611bb79060048301611d53565b1561358557565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4b523a20302d77697468647261770000000000000000000000000000000000006044820152606490fd5b156135eb57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4b523a2021726577617264526563697069656e740000000000000000000000006044820152606490fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff90921660248301526044808301939093529181526120e0916080820167ffffffffffffffff8111838210176136c0575b6040526133c4565b6136c8611cd5565b6136b8565b156136d457565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4b523a20706f6f6c4578697374730000000000000000000000000000000000006044820152606490fd5b919290926000805b60808501805151821015613800579061378d918161377e6137696107878a6107808560608f51930151612c2f565b6137778360208d0151612c2f565b5190612c51565b9182613792575b50505061254c565b61373b565b6137a88388610705612cd76130f3878751612c2f565b5173ffffffffffffffffffffffffffffffffffffffff9182916137ce916130f391612c2f565b169086167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc986604051a4388181613785565b5050505091505056fea2646970667358221220ebae36fd69b0f03c9bd48d9ad3c732c013239919294f91927441dda5c0c6f1c364736f6c634300080e0033",
    "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461026b5780630802f76814610262578063081e3eda146102595780630ad58d2f146102505780630dbd1a38146102475780630efe6a8b1461023e5780631526fe271461023557806317caf6f11461022c578063248a9ca3146102235780632f2ff15d1461021a57806336568abe1461021157806343a4534b146102085780634d7ee644146101ff57806351eb05a6146101f65780635312ea8e146101ed5780635ea3f4fa146101e4578063630b5ba1146101db57806368e2f7b7146101d2578063759be515146101c957806391d14854146101c057806392bb9fbf146101b757806393f1a40b146101ae578063a217fddf146101a5578063ba8fc5bf1461019c578063bf82b7b514610193578063d18df53c1461018a578063d547741f14610181578063ddd5e1b214610178578063f5b541a61461016f5763fc82f0841461016757600080fd5b61000e611a6a565b5061000e611a10565b5061000e611915565b5061000e6118b4565b5061000e611856565b5061000e611720565b5061000e611670565b5061000e611635565b5061000e6115ac565b5061000e611523565b5061000e6114ae565b5061000e6113ec565b5061000e611390565b5061000e611346565b5061000e611275565b5061000e6110cd565b5061000e611094565b5061000e610f95565b5061000e610df1565b5061000e610d07565b5061000e610bf1565b5061000e610ba3565b5061000e610b54565b5061000e610af4565b5061000e61083d565b5061000e6107d3565b5061000e610605565b5061000e6105c8565b5061000e61039f565b503461000e576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043563ffffffff60e01b811680910361000e576020907f7965db0b0000000000000000000000000000000000000000000000000000000081149081156102e8575b506040519015158152f35b7f01ffc9a700000000000000000000000000000000000000000000000000000000149050386102dd565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b604435906fffffffffffffffffffffffffffffffff8216820361000e57565b606435906fffffffffffffffffffffffffffffffff8216820361000e57565b506080367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043567ffffffffffffffff811161000e576103ea903690600401610312565b602435906103f782610343565b6103ff610361565b92610408610380565b91610411611ab3565b60cb5473ffffffffffffffffffffffffffffffffffffffff8581169060005b8381106105a257505050508015610543578461052261052e946104a16104736105389961046e60cc546fffffffffffffffffffffffffffffffff1690565b6128d5565b6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1960cc54161760cc55565b6fffffffffffffffffffffffffffffffff8181161561053a57505b6105096104c8856125c3565b936104f06104d46120d3565b73ffffffffffffffffffffffffffffffffffffffff909a168a52565b6fffffffffffffffffffffffffffffffff166020890152565b6fffffffffffffffffffffffffffffffff166040870152565b606085015236916125f5565b608082015261289a565b005b905043166104bc565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4b523a2021726577617264546f6b656e730000000000000000000000000000006044820152606490fd5b806105be84846105b46105c39561264d565b50541614156136cd565b61254c565b610430565b503461000e576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57602060cb54604051908152f35b506060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760243560043560443561064281610343565b610651600260975414156131c1565b6002609755829061066384151561357e565b61068473ffffffffffffffffffffffffffffffffffffffff821615156135e4565b61068d83612fa1565b936106cb6106bb6106a88660005260c9602052604060002090565b3360009081526020919091526040902090565b926106c584612bee565b87613733565b8154808211156107c257505080546000825591505b835161070a908390339073ffffffffffffffffffffffffffffffffffffffff1661364a565b61364a565b600180820194909160608201916080016000845b61075c575b6000878760405191337ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688585a461075a6001609755565bf35b8151518110156107bd576107b7906105be6107926107878654610780858a51612c2f565b51906120ac565b64e8d4a51000900490565b61079c838c61328d565b90919082549060031b600019811b9283911b16911916179055565b8461071e565b610723565b906107cc91612c51565b81556106e0565b506040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043561080a81610343565b610812611ab3565b73ffffffffffffffffffffffffffffffffffffffff16600090815260ca602052604090206024359055005b506060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043561087481610343565b6024359060443561088a600260975414156131c1565b60026097556108988361264d565b505473ffffffffffffffffffffffffffffffffffffffff93906108be9085161515613227565b6108c781612fa1565b936108f7846108e08460005260c9602052604060002090565b9060018060a01b0316600052602052604060002090565b946001808701968754156109e8575b9181926109268761091d845160018060a01b031690565b309033906132b3565b6109318782546120bf565b905560006060608083019201925b61097d575b60008888888860405193167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158585a461075a6001609755565b8151518110156109e357806105be8a6109c46109ae846109a86107878e6107806109dd9a8d51612c2f565b9361328d565b9190926109bf8385549060031b1c90565b6120bf565b9082549060031b600019811b9283911b16911916179055565b8361093f565b610944565b6109ff6109f96080850151516125c3565b896126c9565b610906565b90815180825260208080930193019160005b828110610a24575050505090565b835185529381019392810192600101610a16565b90815180825260208080930193019160005b828110610a58575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610a4a565b90610af1916020815260018060a01b0382511660208201526fffffffffffffffffffffffffffffffff80602084015116604083015260408301511660608201526080610adc606084015160a08385015260c0840190610a04565b9201519060a0601f1982850301910152610a38565b90565b503461000e576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57610b2c612f74565b50610b50610b44610b3e60043561264d565b50612b3d565b60405191829182610a82565b0390f35b503461000e576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760206fffffffffffffffffffffffffffffffff60cc5416604051908152f35b503461000e576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043560005260656020526020600160406000200154604051908152f35b503461000e5760408060031936011261000e5760043590602435610c1481610343565b6000928084526065602052610c2e60018486200154611bbb565b8084526065602090815283852073ffffffffffffffffffffffffffffffffffffffff841660009081529152604090205460ff1615610c6b57505051f35b8084526065602090815283852073ffffffffffffffffffffffffffffffffffffffff8416600090815291526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558251339273ffffffffffffffffffffffffffffffffffffffff1691907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d908690a451f35b503461000e576040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57602435610d4381610343565b3373ffffffffffffffffffffffffffffffffffffffff821603610d6c5761053890600435611f9a565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608490fd5b506080367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57600435610e2881610343565b60443590606435602435610e3b82610343565b610e4a600260975414156131c1565b6002609755610e57611ab3565b83610e6385151561357e565b73ffffffffffffffffffffffffffffffffffffffff90610e8684831615156135e4565b610e8f83612fa1565b95610ebb610eab876108e08760005260c9602052604060002090565b95610eb587612bee565b89613733565b845480821115610f8157505050825492600081555b8551610ef590859073ffffffffffffffffffffffffffffffffffffffff16339061364a565b600180820196909160608201916080016000845b610f47575b60008989898960405193167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688585a461075a6001609755565b815151811015610f7c57806105be8b61079c610f7694610f706107878954610780848d51612c2f565b9261328d565b84610f09565b610f0e565b90610f8e91959295612c51565b8155610ed0565b506040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576fffffffffffffffffffffffffffffffff602435600435828216820361000e5761105860019161053894610ff2611ab3565b61100f610ffe8361264d565b50858060a01b039054161515613227565b61102785828661101e8661264d565b500154166128d5565b60cc5491908116828216818110611087575b0316906fffffffffffffffffffffffffffffffff19161760cc5561264d565b5001906fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff19825416179055565b61108f61206f565b611039565b506020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57610b50610b44600435612fa1565b506020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043561110a600260975414156131c1565b600260975561111881612fa1565b600082815260c9602090815260408083203380855292528220835181549395949193919261115c929173ffffffffffffffffffffffffffffffffffffffff1661364a565b83825560018083019160800185825b6111a8575b505050505460405191337fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958585a461075a6001609755565b8151518110156111da57806105be6111c36111d4938761328d565b8154906000199060031b1b19169055565b8261116b565b611170565b610af1918151815260406112026020840151606060208501526060840190610a38565b920151906040818403910152610a04565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106112475750505050505090565b9091929394958480611265600193603f198682030187528a516111df565b9801930193019194939290611237565b503461000e5760208060031936011261000e5760043561129481610343565b60cb54906112a1826125a2565b926112af6040519485611d31565b8284527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06112dc846125a2565b0160005b8181106113305750505060005b8281106113025760405180610b508682611213565b806113108361132b93612c88565b61131a8287612c2f565b526113258186612c2f565b5061254c565b6112ed565b829061133a612aaf565b828289010152016112e0565b506000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760005b60cb54811015610538578061132561138b92612fa1565b611374565b503461000e576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576004356113cc81610343565b60018060a01b031660005260ca6020526020604060002054604051908152f35b503461000e5760e0367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5767ffffffffffffffff60043581811161000e5761143d903690600401610312565b9160243590811161000e57611456903690600401610312565b60449391933561146581610343565b61146d610380565b90608435926fffffffffffffffffffffffffffffffff8416840361000e576105389660a4359561149c87610343565b60c435976114a989610343565b612365565b503461000e576040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57602060ff6115176024356114f181610343565b6004356000526065845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b506040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043561155a81610343565b611562611ab3565b60cb5473ffffffffffffffffffffffffffffffffffffffff8281169060005b83811061159557610538602435338761364a565b806105be84846105b46115a79561264d565b611581565b503461000e5760408060031936011261000e57602090610b506116156116106024356115d781610343565b60608686516115e581611cec565b60008152015260043560005260c98652846000209060018060a01b0316600052602052604060002090565b612bee565b918051938493818552805182860152015190808401526060830190610a04565b503461000e576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57602060405160008152f35b503461000e576020367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576004356116ac81610343565b60cb5490600090819073ffffffffffffffffffffffffffffffffffffffff908116905b8484106116e8575b604080518581528415156020820152f35b90919282826116f68361264d565b5054161461170f576117079061254c565b9291906116cf565b9250505060409150600138806116d7565b506060367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043561175781610343565b602435906117d66044359161176b83610343565b61177a600260975414156131c1565b6002609755611787611ab3565b6117a873ffffffffffffffffffffffffffffffffffffffff841615156135e4565b6117b184612fa1565b9360005260c960205260406000209060018060a01b0316600052602052604060002090565b9081546117e8575b6105386001609755565b6117fd906117f7839493612bee565b83613733565b6060810191600191828201906080016000845b61181d575b5050506117de565b8151518110156118515761184b906105be6118416107878754610780858c51612c2f565b61079c838761328d565b84611810565b611815565b503461000e576040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e57610b506118a060243561189881610343565b600435612c88565b6040519182916020835260208301906111df565b503461000e576040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e576105386024356004356118f682610343565b806000526065602052611910600160406000200154611bbb565b611f9a565b506040367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760043560243561194f81610343565b61195e600260975414156131c1565b600260975561198473ffffffffffffffffffffffffffffffffffffffff821615156135e4565b61198d82612fa1565b600092835260c9602090815260408085203386529091529092209081546119b8576105386001609755565b6119c7906117f7839493612bee565b6060810191600191828201906080016000845b6119e6575050506117de565b81515181101561185157611a0a906105be6118416107878754610780858c51612c2f565b846119da565b503461000e576000367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc011261000e5760206040517f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd28152f35b50600080600319360112611ab057611a80611ab3565b8080808047818115611aa7575b3390f115611a9a57604051f35b611aa2612c22565b604051f35b506108fc611a8d565b80fd5b3360009081527f36445a9eff22e9b54d9de8c6cce3c202b8c41b22158fd9c5163f843551e37e72602052604090205460ff1615611aec57565b611bb76048611b85611afd3361221d565b611b77611b086122c8565b6040519485937f416363657373436f6e74726f6c3a206163636f756e74200000000000000000006020860152611b48815180926020603789019101611c89565b84017f206973206d697373696e6720726f6c652000000000000000000000000000000060378201520190611cbe565b03601f198101835282611d31565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815291829160048301611d53565b0390fd5b600081815260656020908152604080832033845290915290205460ff1615611be05750565b611be93361221d565b90611bf2612102565b906030611bfe83612153565b536078611c0a83612169565b5360415b60018111611c2d57611bb76048611b8586611b7787611b0888156121d2565b9080600f611c7792166010811015611c7c575b7f3031323334353637383961626364656600000000000000000000000000000000901a611c6d848661217a565b5360041c91612199565b611c0e565b611c8461213c565b611c40565b918091926000905b828210611ca9575011611ca2575050565b6000910152565b91508060209183015181860152018291611c91565b90611cd160209282815194859201611c89565b0190565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611d0857604052565b611d10611cd5565b604052565b60a0810190811067ffffffffffffffff821117611d0857604052565b90601f8019910116810190811067ffffffffffffffff821117611d0857604052565b60409160208252611d738151809281602086015260208686019101611c89565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010190565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fffdfc1249c027f9191656349feb0761381bb32c9f557e01f419fd08754bf5a1b602052604081205460ff1615611dee575050565b80805260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff851660009081529252902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055604051339273ffffffffffffffffffffffffffffffffffffffff1691907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d908290a4565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f36445a9eff22e9b54d9de8c6cce3c202b8c41b22158fd9c5163f843551e37e7260205260409020547f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd29060ff1615611efd575050565b600081815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055604051339273ffffffffffffffffffffffffffffffffffffffff1691907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d90600090a4565b600081815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16611fd5575050565b600081815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055604051339273ffffffffffffffffffffffffffffffffffffffff1691907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90600090a4565b50634e487b7160e01b600052601160045260246000fd5b64e8d4a510009080600019048211811515166120a0570290565b6120a861206f565b0290565b80600019048211811515166120a0570290565b811981116120cb570190565b611cd161206f565b604051906120e082611d15565b565b604051906060820182811067ffffffffffffffff821117611d0857604052565b604051906080820182811067ffffffffffffffff82111761212f575b604052604282526060366020840137565b612137611cd5565b61211e565b50634e487b7160e01b600052603260045260246000fd5b602090805115612161570190565b611cd161213c565b602190805160011015612161570190565b90602091805182101561218c57010190565b61219461213c565b010190565b80156121c5575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6121cd61206f565b6121a0565b156121d957565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b604051906060820182811067ffffffffffffffff8211176122bb575b604052602a82526040366020840137603061225383612153565b53607861225f83612169565b536029905b6001821161227757610af19150156121d2565b80600f6122b592166010811015611c7c577f3031323334353637383961626364656600000000000000000000000000000000901a611c6d848661217a565b90612264565b6122c3611cd5565b612239565b7f8952ae23cc3fea91b9dba0cefa16d18a26ca2bf124b54f42b5d04bce3aacecd26122f1612102565b9060306122fd83612153565b53607861230983612169565b536041905b6001821161232157610af19150156121d2565b80600f61235f92166010811015611c7c577f3031323334353637383961626364656600000000000000000000000000000000901a611c6d848661217a565b9061230e565b96949290979593916000549860ff8a60081c1615809a819b6124b2575b8115612492575b501561240d576123af988a6123a6600160ff196000541617600055565b6123f4576128fa565b6123b557565b6123c561ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1565b61240861010061ff00196000541617600055565b6128fa565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608490fd5b303b159150816124a4575b5038612389565b6001915060ff16143861249d565b600160ff8216109150612382565b156124c757565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f52657761726420746f6b656e73206d757374206861766520612072657761726460448201527f506572426c6f636b2076616c75650000000000000000000000000000000000006064820152608490fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146120cb570190565b919081101561258b575b60051b0190565b61259361213c565b612584565b35610af181610343565b60209067ffffffffffffffff81116125bb5760051b0190565b612593611cd5565b906125cd826125a2565b6125da6040519182611d31565b82815280926125eb601f19916125a2565b0190602036910137565b9291612600826125a2565b9161260e6040519384611d31565b829481845260208094019160051b810192831161000e57905b8282106126345750505050565b838091833561264281610343565b815201910190612627565b60cb54811015612688575b60cb60005260021b7fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0190600090565b61269061213c565b612658565b90918281106126a357505050565b60009182526020822092830192015b8281106126be57505050565b8181556001016126b2565b815191680100000000000000008311612720575b6126ec83835481855584612695565b602080910191600052806000206000925b84841061270b575050505050565b600183828293518555019201930192906126fd565b612728611cd5565b6126dd565b8151916801000000000000000083116127c3575b61275083835481855584612695565b602080910191600052806000206000925b84841061276f575050505050565b805182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9190911617825560019384019391909101908201612761565b6127cb611cd5565b612741565b9061288457815181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178155602082015160408301516fffffffffffffffffffffffffffffffff9091167fffffffffffffffffffffffffffffffff00000000000000000000000000000000608092831b1617600183015560608301516120e0936003929161287b90600286016126c9565b0151910161272d565b634e487b7160e01b600052600060045260246000fd5b6120e0906128c260cb54680100000000000000008110156128c8575b6001810160cb5561264d565b906127d0565b6128d0611cd5565b6128b6565b906fffffffffffffffffffffffffffffffff80809316911680920381116120cb570190565b9593969761292b6129309296999493946129158886146124c0565b61291d612a1a565b61292633611d9d565b611d9d565b611e8a565b61293933611e8a565b60005b8481106129c2575050509261052e6120e0959383610473966105226129636129a8976125c3565b9161298b61296f6120d3565b73ffffffffffffffffffffffffffffffffffffffff9098168852565b6fffffffffffffffffffffffffffffffff89166020880152610509565b60cc546fffffffffffffffffffffffffffffffff166128d5565b806129d1612a1592848661257a565b35612a0f6129e86129e3848a8c61257a565b612598565b73ffffffffffffffffffffffffffffffffffffffff16600090815260ca6020526040902090565b5561254c565b61293c565b60ff60005460081c1615612a2a57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608490fd5b604051906060820182811067ffffffffffffffff821117612ae1575b6040526060604083600081528260208201520152565b612ae9611cd5565b612acb565b9060405191828154918282526020928383019160005283600020936000905b828210612b23575050506120e092500383611d31565b855484526001958601958895509381019390910190612b0d565b9060405191612b4b83611d15565b8260018060a01b03808354168252600192600384820154916020926fffffffffffffffffffffffffffffffff81168487015260801c6040860152612b9160028201612aee565b606086015201906040519485869483855492838152019460005283600020936000915b838310612bd45750505050505060809291612bd0910384611d31565b0152565b855481168752899750958101959484019491840191612bb4565b90604051612bfb81611cec565b6020612c0e600183958054855201612aee565b910152565b9081602091031261000e575190565b506040513d6000823e3d90fd5b6020918151811015612c44575b60051b010190565b612c4c61213c565b612c3c565b818110612c5c570390565b612c6461206f565b0390565b8115612c72570490565b634e487b7160e01b600052601260045260246000fd5b9190612c92612aaf565b50612cba611610612ca5610b3e8661264d565b926108e08660005260c9602052604060002090565b8151612cf09073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015294602093918490879060249082905afa958615612f67575b600096612f38575b506080820191825193845191612d51836125c3565b93612d5a6120e2565b908152878101968752604081019485529880151580612f2e575b612d83575b5050505050505050565b600097939793606083018160408501940190612dc8612db360cc546fffffffffffffffffffffffffffffffff1690565b6fffffffffffffffffffffffffffffffff1690565b928601965b8b8110612ddd5750505050612d79565b80825190612dea91612c2f565b518585838d5190612dfa91612c2f565b5173ffffffffffffffffffffffffffffffffffffffff16600090815260ca60205260409020548951612e3e906fffffffffffffffffffffffffffffffff1643612c51565b612e47916120ac565b86516fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16612e76916120ac565b90612e8091612c68565b612e8990612086565b90612e9391612c68565b612e9c916120bf565b875190612ea8916120ac565b64e8d4a51000900481895190612ebd91612c2f565b51612ec791612c51565b818a5190612ed491612c2f565b52808a5190612ee291612c2f565b5173ffffffffffffffffffffffffffffffffffffffff16818c5190612f0691612c2f565b73ffffffffffffffffffffffffffffffffffffffff9091169052612f299061254c565b612dcd565b5082511515612d74565b612f59919650843d8611612f60575b612f518183611d31565b810190612c13565b9438612d3c565b503d612f47565b612f6f612c22565b612d34565b60405190612f8182611d15565b606060808360008152600060208201526000604082015282808201520152565b90612faa612f74565b50612fb7610b3e8361264d565b9160408301612fd9612db382516fffffffffffffffffffffffffffffffff1690565b4311612fe3575050565b83516130049073ffffffffffffffffffffffffffffffffffffffff16612cd7565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290602090829060249082905afa9081156131b4575b600091613196575b5080613079575b50436fffffffffffffffffffffffffffffffff1690526120e09083906128c29061264d565b90939192600092608081019460208201916130a8612db360cc546fffffffffffffffffffffffffffffffff1690565b9360608201965b8851805182101561317d57906131528861314861314d8a8f8b61312b612db36131316131489461312b613125612db36131789f8f6130f36129e89161310d93612c2f565b5173ffffffffffffffffffffffffffffffffffffffff1690565b5493516fffffffffffffffffffffffffffffffff1690565b43612c51565b906120ac565b92516fffffffffffffffffffffffffffffffff1690565b612c68565b612086565b6131728261316c8c51936131668386612c2f565b516120bf565b92612c2f565b5261254c565b6130af565b5091989097509195509093506128c29250613054915050565b6131ae915060203d8111612f6057612f518183611d31565b3861304d565b6131bc612c22565b613045565b156131c857565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b1561322e57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4b523a2021706f6f6c45786973747300000000000000000000000000000000006044820152606490fd5b80548210156132a6575b60005260206000200190600090565b6132ae61213c565b613297565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff92831660248201529290911660448301526064808301939093529181526120e09161331b82611d15565b6133c4565b9081602091031261000e5751801515810361000e5790565b1561333f57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b60405173ffffffffffffffffffffffffffffffffffffffff91909116916133ea82611cec565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b15613461576000828192828761343c9796519301915af16134366134c0565b9061352c565b8051908161344957505050565b826120e09361345c938301019101613320565b613338565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d15613527573d9067ffffffffffffffff821161351a575b6040519161350e601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200184611d31565b82523d6000602084013e565b613522611cd5565b6134d8565b606090565b90919015613538575090565b8151156135485750805190602001fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152908190611bb79060048301611d53565b1561358557565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4b523a20302d77697468647261770000000000000000000000000000000000006044820152606490fd5b156135eb57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4b523a2021726577617264526563697069656e740000000000000000000000006044820152606490fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff90921660248301526044808301939093529181526120e0916080820167ffffffffffffffff8111838210176136c0575b6040526133c4565b6136c8611cd5565b6136b8565b156136d457565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4b523a20706f6f6c4578697374730000000000000000000000000000000000006044820152606490fd5b919290926000805b60808501805151821015613800579061378d918161377e6137696107878a6107808560608f51930151612c2f565b6137778360208d0151612c2f565b5190612c51565b9182613792575b50505061254c565b61373b565b6137a88388610705612cd76130f3878751612c2f565b5173ffffffffffffffffffffffffffffffffffffffff9182916137ce916130f391612c2f565b169086167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc986604051a4388181613785565b5050505091505056fea2646970667358221220ebae36fd69b0f03c9bd48d9ad3c732c013239919294f91927441dda5c0c6f1c364736f6c634300080e0033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "addPool(address[],address,uint128,uint128)": {
                "params": {
                    "_allocPoint": "weight of rewards this pool receives",
                    "_depositToken": "token to deposit for rewards",
                    "_rewardTokens": "tokens to reward from this pool"
                }
            },
            "allPendingRewards(address)": {
                "params": {
                    "_account": "to get rewards for"
                }
            },
            "claim(uint256,address)": {
                "params": {
                    "_pid": "id in `_poolInfo`",
                    "_rewardRecipient": "address to send rewards to"
                }
            },
            "claimFor(address,uint256,address)": {
                "params": {
                    "_for": "account to claim for",
                    "_pid": "id in `_poolInfo`",
                    "_rewardRecipient": "address that receives rewards"
                }
            },
            "deposit(address,uint256,uint256)": {
                "params": {
                    "_amount": "amount of tokens to deposit",
                    "_pid": "in `_poolInfo`",
                    "_to": "address that msg.sender deposits tokens for"
                }
            },
            "emergencyWithdraw(uint256)": {
                "params": {
                    "_pid": "pool id to withdraw tokens from"
                }
            },
            "getPidFor(address)": {
                "params": {
                    "_depositToken": "depositToken in `_poolInfo`"
                },
                "returns": {
                    "found": "ensure 0 index",
                    "pid": "of pool with `_depositToken`"
                }
            },
            "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
            },
            "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
            },
            "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
            },
            "pendingRewards(uint256,address)": {
                "params": {
                    "_pid": "id in `_poolInfo`",
                    "_user": "id in `_userInfo[_pid]`"
                }
            },
            "poolInfo(uint256)": {
                "params": {
                    "_pid": "in `_poolInfo`"
                }
            },
            "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
            },
            "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
            },
            "setPool(uint256,uint128)": {
                "params": {
                    "_newAllocPoint": "new allocation (weight) for rewards",
                    "_pid": "pool to modify"
                }
            },
            "setRewardPerBlockFor(address,uint256)": {
                "params": {
                    "_rewardPerBlock": "tokens to drip per block",
                    "_rewardToken": "token to adjust the drip for"
                }
            },
            "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
            },
            "updatePool(uint256)": {
                "params": {
                    "_pid": "pool to update"
                }
            },
            "userInfo(uint256,address)": {
                "params": {
                    "_account": "to get information for",
                    "_pid": "in `_poolInfo`"
                }
            },
            "withdraw(uint256,uint256,address)": {
                "params": {
                    "_amount": "amount to withdraw",
                    "_pid": "id in `_poolInfo`",
                    "_rewardRecipient": "address to send rewards to"
                }
            },
            "withdrawFor(address,uint256,uint256,address)": {
                "params": {
                    "_amount": "amount to withdraw",
                    "_for": "account to withdraw from",
                    "_pid": "id in `_poolInfo`",
                    "_rewardRecipient": "reward recipient"
                }
            }
        },
        "version": 1
    },
    "userdoc": {
        "events": {
            "Deposit(address,uint256,uint256)": {
                "notice": "================================================== ============== Events ============================ =================================================="
            }
        },
        "kind": "user",
        "methods": {
            "addPool(address[],address,uint128,uint128)": {
                "notice": "Adds a new reward poolUpdates reward token count in case of adding extra tokens"
            },
            "allPendingRewards(address)": {
                "notice": "Get all pending rewards for an account"
            },
            "claim(uint256,address)": {
                "notice": "Claim rewards only"
            },
            "claimFor(address,uint256,address)": {
                "notice": "Trusted helper contract can claim rewards on behalf of an account"
            },
            "deposit(address,uint256,uint256)": {
                "notice": "Deposits tokens for @param _to"
            },
            "emergencyWithdraw(uint256)": {
                "notice": "Emergency function, withdraws deposits from a poolThis will forfeit your rewards."
            },
            "getPidFor(address)": {
                "notice": "Get id for a tokenUseful for external contracts"
            },
            "initialize(address[],uint256[],address,uint128,uint128,address,address)": {
                "notice": "Initialize the contract with a single poolSets initial reward token and ratesSets the caller as DEFAULT_ADMIN"
            },
            "massUpdatePools()": {
                "notice": "Updates all pools to be up-to date"
            },
            "pendingRewards(uint256,address)": {
                "notice": "Get pending rewards from a certain pool"
            },
            "poolInfo(uint256)": {
                "notice": "Get pool information"
            },
            "poolLength()": {
                "notice": "Amount of pools"
            },
            "rescueNative()": {
                "notice": "A rescue function for missent msg.valueSince we are using payable functions to save gas on calls"
            },
            "rescueNonPoolToken(address,uint256)": {
                "notice": "A rescue function for missent tokens / airdropsThis cannot withdraw any deposits due `ensurePoolDoesNotExist` modifier."
            },
            "setPool(uint256,uint128)": {
                "notice": "Set new allocations for a poolSet `_newAllocPoint` to 0 to retire a pool"
            },
            "setRewardPerBlockFor(address,uint256)": {
                "notice": "Adjust/Set reward per block for a particular reward token"
            },
            "updatePool(uint256)": {
                "notice": "Updates a pools reward variables to be up-to date"
            },
            "userInfo(uint256,address)": {
                "notice": "Get account information on a pool"
            },
            "withdraw(uint256,uint256,address)": {
                "notice": "Withdraw deposited tokens and rewards."
            },
            "withdrawFor(address,uint256,uint256,address)": {
                "notice": "Trusted helper contract can withdraw rewards and deposits on behalf of an accountFor eg. withdraw + remove liquidity"
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 589,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "_initialized",
                "offset": 0,
                "slot": "0",
                "type": "t_uint8"
            },
            {
                "astId": 592,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "_initializing",
                "offset": 1,
                "slot": "0",
                "type": "t_bool"
            },
            {
                "astId": 1471,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "__gap",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_uint256)50_storage"
            },
            {
                "astId": 1741,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "__gap",
                "offset": 0,
                "slot": "51",
                "type": "t_array(t_uint256)50_storage"
            },
            {
                "astId": 184,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "_roles",
                "offset": 0,
                "slot": "101",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)"
            },
            {
                "astId": 483,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "__gap",
                "offset": 0,
                "slot": "102",
                "type": "t_array(t_uint256)49_storage"
            },
            {
                "astId": 747,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "_status",
                "offset": 0,
                "slot": "151",
                "type": "t_uint256"
            },
            {
                "astId": 791,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "__gap",
                "offset": 0,
                "slot": "152",
                "type": "t_array(t_uint256)49_storage"
            },
            {
                "astId": 26450,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "_userInfo",
                "offset": 0,
                "slot": "201",
                "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)26419_storage))"
            },
            {
                "astId": 26454,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "rewardPerBlockFor",
                "offset": 0,
                "slot": "202",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 26458,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "_poolInfo",
                "offset": 0,
                "slot": "203",
                "type": "t_array(t_struct(PoolInfo)26433_storage)dyn_storage"
            },
            {
                "astId": 26460,
                "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                "label": "totalAllocPoint",
                "offset": 0,
                "slot": "204",
                "type": "t_uint128"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_array(t_struct(PoolInfo)26433_storage)dyn_storage": {
                "base": "t_struct(PoolInfo)26433_storage",
                "encoding": "dynamic_array",
                "label": "struct KrStaking.PoolInfo[]",
                "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
                "base": "t_uint256",
                "encoding": "inplace",
                "label": "uint256[49]",
                "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
                "base": "t_uint256",
                "encoding": "inplace",
                "label": "uint256[50]",
                "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
                "base": "t_uint256",
                "encoding": "dynamic_array",
                "label": "uint256[]",
                "numberOfBytes": "32"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
            },
            "t_contract(IERC20)4044": {
                "encoding": "inplace",
                "label": "contract IERC20",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_address,t_struct(UserInfo)26419_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct KrStaking.UserInfo)",
                "numberOfBytes": "32",
                "value": "t_struct(UserInfo)26419_storage"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
                "numberOfBytes": "32",
                "value": "t_struct(RoleData)179_storage"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)26419_storage))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(address => struct KrStaking.UserInfo))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_struct(UserInfo)26419_storage)"
            },
            "t_struct(PoolInfo)26433_storage": {
                "encoding": "inplace",
                "label": "struct KrStaking.PoolInfo",
                "members": [
                    {
                        "astId": 26422,
                        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                        "label": "depositToken",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_contract(IERC20)4044"
                    },
                    {
                        "astId": 26424,
                        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                        "label": "allocPoint",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_uint128"
                    },
                    {
                        "astId": 26426,
                        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                        "label": "lastRewardBlock",
                        "offset": 16,
                        "slot": "1",
                        "type": "t_uint128"
                    },
                    {
                        "astId": 26429,
                        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                        "label": "accRewardPerShares",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_array(t_uint256)dyn_storage"
                    },
                    {
                        "astId": 26432,
                        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                        "label": "rewardTokens",
                        "offset": 0,
                        "slot": "3",
                        "type": "t_array(t_address)dyn_storage"
                    }
                ],
                "numberOfBytes": "128"
            },
            "t_struct(RoleData)179_storage": {
                "encoding": "inplace",
                "label": "struct AccessControlUpgradeable.RoleData",
                "members": [
                    {
                        "astId": 176,
                        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                        "label": "members",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_mapping(t_address,t_bool)"
                    },
                    {
                        "astId": 178,
                        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                        "label": "adminRole",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_bytes32"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(UserInfo)26419_storage": {
                "encoding": "inplace",
                "label": "struct KrStaking.UserInfo",
                "members": [
                    {
                        "astId": 26415,
                        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                        "label": "amount",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 26418,
                        "contract": "src/contracts/staking/KrStaking.sol:KrStaking",
                        "label": "rewardDebts",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_array(t_uint256)dyn_storage"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_uint128": {
                "encoding": "inplace",
                "label": "uint128",
                "numberOfBytes": "16"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            },
            "t_uint8": {
                "encoding": "inplace",
                "label": "uint8",
                "numberOfBytes": "1"
            }
        }
    }
}
