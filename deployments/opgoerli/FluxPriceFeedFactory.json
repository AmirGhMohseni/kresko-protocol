{
  "address": "0x46D194E3f1D06B4765c2750C95123caFE6B2D184",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "FluxPriceFeedCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pricePair",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "addressOfPricePair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "addressOfPricePairId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fluxPriceFeeds",
      "outputs": [
        {
          "internalType": "contract FluxPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pricePair",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "getId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_pricePairs",
          "type": "string[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_decimals",
          "type": "uint8[]"
        },
        {
          "internalType": "int192[]",
          "name": "_answers",
          "type": "int192[]"
        },
        {
          "internalType": "bool[]",
          "name": "_marketStatusAnswers",
          "type": "bool[]"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "transmit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typeAndVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "valueFor",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4e734835e8b2591735e3d9ae1499126bf0a95496a19f30238670c26c7aa81434",
  "receipt": {
    "to": null,
    "from": "0x2121245dcAD697f11244068AaD6EcbC301811239",
    "contractAddress": "0x46D194E3f1D06B4765c2750C95123caFE6B2D184",
    "transactionIndex": 0,
    "gasUsed": "4186655",
    "logsBloom": "0x
    "blockHash": "0x586cf57f0c38bf7bbe81cc76702b502cb78442935ab473ab899194eb36e7ea5f",
    "transactionHash": "0x4e734835e8b2591735e3d9ae1499126bf0a95496a19f30238670c26c7aa81434",
    "logs": [],
    "blockNumber": 3096322,
    "cumulativeGasUsed": "4186655",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0f255c2c16398eb4b842c58a97c4e1fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"FluxPriceFeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VALIDATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pricePair\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"addressOfPricePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"addressOfPricePairId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fluxPriceFeeds\",\"outputs\":[{\"internalType\":\"contract FluxPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pricePair\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_pricePairs\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"int192[]\",\"name\":\"_answers\",\"type\":\"int192[]\"},{\"internalType\":\"bool[]\",\"name\":\"_marketStatusAnswers\",\"type\":\"bool[]\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"valueFor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"fluxprotocol.org\",\"events\":{\"FluxPriceFeedCreated(bytes32,address)\":{\"params\":{\"id\":\"hash of the price pair of the deployed oracle\",\"oracle\":\"address of the deployed oracle\"}},\"Log(string)\":{\"params\":{\"message\":\"the logged message\"}}},\"kind\":\"dev\",\"methods\":{\"addressOfPricePair(string,uint8,address)\":{\"params\":{\"_decimals\":\"decimal of the price pair\",\"_pricePair\":\"ETH/USD\",\"_provider\":\"original provider of the price pair\"}},\"addressOfPricePairId(bytes32)\":{\"params\":{\"_id\":\"hash of the price pair string to query\"}},\"getId(string,uint8,address)\":{\"params\":{\"_decimals\":\"decimal of the price pair\",\"_pricePair\":\"ETH/USD\",\"_provider\":\"original provider of the price pair\"}},\"transmit(string[],uint8[],int192[],bool[],address)\":{\"params\":{\"_answers\":\"array of prices for associated price pairs\",\"_decimals\":\"array of decimals for associated price pairs (e.g. 3)\",\"_marketStatusAnswers\":\"array of market open/closed statuses\",\"_pricePairs\":\"array of price pairs strings (e.g. ETH/USD)\",\"_provider\":\"optional address of the provider, if different from msg.sender\"}},\"valueFor(bytes32)\":{\"params\":{\"_id\":\"hash of the price pair string to query\"}}},\"title\":\"Flux first-party price feed factory\",\"version\":1},\"userdoc\":{\"events\":{\"FluxPriceFeedCreated(bytes32,address)\":{\"notice\":\"indicates that a new oracle was created\"},\"Log(string)\":{\"notice\":\"to log error messages\"}},\"kind\":\"user\",\"methods\":{\"addressOfPricePair(string,uint8,address)\":{\"notice\":\"returns address of a price feed id\"},\"addressOfPricePairId(bytes32)\":{\"notice\":\"returns address of a price feed id\"},\"getId(string,uint8,address)\":{\"notice\":\"returns the hash of a price pair\"},\"transmit(string[],uint8[],int192[],bool[],address)\":{\"notice\":\"transmit submits an answer to a price feed or creates a new one if it does not exist\"},\"typeAndVersion()\":{\"notice\":\"returns factory's type and version\"},\"valueFor(bytes32)\":{\"notice\":\"answer from the most recent report of a certain price pair from factory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/vendor/flux/FluxPriceFeedFactory.sol\":\"FluxPriceFeedFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/FluxPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/**\\n * @notice Simple data posting on chain of a scalar value, compatible with Chainlink V2 and V3 aggregator interface\\n */\\ncontract FluxPriceFeed is AccessControl, AggregatorV2V3Interface {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\\\"VALIDATOR_ROLE\\\");\\n    uint32 public latestAggregatorRoundId;\\n\\n    // Transmission records the answer from the transmit transaction at\\n    // time timestamp\\n    struct Transmission {\\n        int192 answer; // 192 bits ought to be enough for anyone\\n        uint64 timestamp;\\n        bool marketOpen;\\n    }\\n    mapping(uint32 => Transmission) s_transmissions; /* aggregator round ID */\\n       \\n\\n    /**\\n     * @param _validator the initial validator that can post data to this contract\\n     * @param _decimals answers are stored in fixed-point format, with this many digits of precision\\n     * @param _description short human-readable description of observable this contract's answers pertain to\\n     */\\n    constructor(\\n        address _validator,\\n        uint8 _decimals,\\n        string memory _description\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setupRole(VALIDATOR_ROLE, _validator);\\n        decimals = _decimals;\\n        s_description = _description;\\n    }\\n\\n    /*\\n     * Versioning\\n     */\\n    function typeAndVersion() external pure virtual returns (string memory) {\\n        return \\\"FluxPriceFeed 1.0.0\\\";\\n    }\\n\\n    /*\\n     * Transmission logic\\n     */\\n\\n    /**\\n     * @notice indicates that a new report was transmitted\\n     * @param aggregatorRoundId the round to which this report was assigned\\n     * @param answer value posted by validator\\n     * @param marketOpen bool indicating if the market is open\\n     * @param transmitter address from which the report was transmitted\\n     */\\n    event NewTransmission(uint32 indexed aggregatorRoundId, int192 answer, bool marketOpen, address transmitter);\\n        \\n    /**\\n     * @notice details about the most recent report\\n     * @return _latestAnswer value from latest report\\n     * @return _latestTimestamp when the latest report was transmitted\\n     * @return _marketOpen value from latest report\\n     */\\n    function latestTransmissionDetails() external view returns (int192 _latestAnswer, uint64 _latestTimestamp, bool _marketOpen) {\\n        require(msg.sender == tx.origin, \\\"Only callable by EOA\\\");\\n        return (\\n            s_transmissions[latestAggregatorRoundId].answer,\\n            s_transmissions[latestAggregatorRoundId].timestamp,\\n            s_transmissions[latestAggregatorRoundId].marketOpen\\n        );\\n    }\\n\\n    /**\\n     * @notice transmit is called to post a new report to the contract\\n     * @param _answer latest answer\\n     */\\n    function transmit(int192 _answer, bool _marketOpen) external {\\n        require(hasRole(VALIDATOR_ROLE, msg.sender), \\\"Caller is not a validator\\\");\\n\\n        // Check the report contents, and record the result\\n        latestAggregatorRoundId++;\\n        s_transmissions[latestAggregatorRoundId] = Transmission(_answer, uint64(block.timestamp), _marketOpen);\\n\\n        emit NewTransmission(latestAggregatorRoundId, _answer, _marketOpen, msg.sender);\\n    }\\n\\n    /*\\n     * v2 Aggregator interface\\n     */\\n\\n    /**\\n     * @notice answer from the most recent report\\n     */\\n    function latestAnswer() public view virtual override returns (int256) {\\n        return s_transmissions[latestAggregatorRoundId].answer;\\n    }\\n\\n    /**\\n     * @notice timestamp of block in which last report was transmitted\\n     */\\n    function latestTimestamp() public view virtual override returns (uint256) {\\n        return s_transmissions[latestAggregatorRoundId].timestamp;\\n    }\\n\\n     /**\\n     * @notice market open indicator from the most recent report\\n     */\\n    function latestMarketOpen() public view virtual override returns (bool) {\\n        return s_transmissions[latestAggregatorRoundId].marketOpen;\\n    }\\n\\n    /**\\n     * @notice Aggregator round in which last report was transmitted\\n     */\\n    function latestRound() public view virtual override returns (uint256) {\\n        return latestAggregatorRoundId;\\n    }\\n\\n    /**\\n     * @notice answer of report from given aggregator round\\n     * @param _roundId the aggregator round of the target report\\n     */\\n    function getAnswer(uint256 _roundId) public view virtual override returns (int256) {\\n        if (_roundId > 0xFFFFFFFF) {\\n            return 0;\\n        }\\n        return s_transmissions[uint32(_roundId)].answer;\\n    }\\n\\n    /**\\n     * @notice timestamp of block in which report from given aggregator round was transmitted\\n     * @param _roundId aggregator round of target report\\n     */\\n    function getTimestamp(uint256 _roundId) public view virtual override returns (uint256) {\\n        if (_roundId > 0xFFFFFFFF) {\\n            return 0;\\n        }\\n        return s_transmissions[uint32(_roundId)].timestamp;\\n    }\\n\\n    /**\\n     * @notice market open of report from given aggregator round\\n     * @param _roundId the aggregator round of the target report\\n     */\\n    function getMarketOpen(uint256 _roundId) public view virtual override returns (bool) {\\n        require(_roundId <= 0xFFFFFFFF, \\\"FluxPriceFeed: round ID\\\");\\n        return s_transmissions[uint32(_roundId)].marketOpen;\\n    }\\n\\n    /*\\n     * v3 Aggregator interface\\n     */\\n\\n    string private constant V3_NO_DATA_ERROR = \\\"No data present\\\";\\n\\n    /**\\n     * @return answers are stored in fixed-point format, with this many digits of precision\\n     */\\n    uint8 public immutable override decimals;\\n\\n    /**\\n     * @notice aggregator contract version\\n     */\\n    uint256 public constant override version = 1;\\n\\n    string internal s_description;\\n\\n    /**\\n     * @notice human-readable description of observable this contract is reporting on\\n     */\\n    function description() public view virtual override returns (string memory) {\\n        return s_description;\\n    }\\n\\n    /**\\n     * @notice details for the given aggregator round\\n     * @param _roundId target aggregator round. Must fit in uint32\\n     * @return roundId _roundId\\n     * @return answer answer of report from given _roundId\\n     * @return marketOpen of report from given _roundId\\n     * @return startedAt timestamp of block in which report from given _roundId was transmitted\\n     * @return updatedAt timestamp of block in which report from given _roundId was transmitted\\n     * @return answeredInRound _roundId\\n     */\\n    function getRoundData(uint80 _roundId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        require(_roundId <= 0xFFFFFFFF, V3_NO_DATA_ERROR);\\n        Transmission memory transmission = s_transmissions[uint32(_roundId)];\\n        return (_roundId, transmission.answer, transmission.marketOpen, transmission.timestamp, transmission.timestamp, _roundId);\\n    }\\n\\n    /**\\n     * @notice aggregator details for the most recently transmitted report\\n     * @return roundId aggregator round of latest report\\n     * @return answer answer of latest report\\n     * @return marketOpen of latest report\\n     * @return startedAt timestamp of block containing latest report\\n     * @return updatedAt timestamp of block containing latest report\\n     * @return answeredInRound aggregator round of latest report\\n     */\\n    function latestRoundData()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        roundId = latestAggregatorRoundId;\\n\\n        // Skipped for compatability with existing FluxAggregator in which latestRoundData never reverts.\\n        // require(roundId != 0, V3_NO_DATA_ERROR);\\n\\n        Transmission memory transmission = s_transmissions[uint32(roundId)];\\n        return (roundId, transmission.answer, transmission.marketOpen, transmission.timestamp, transmission.timestamp, roundId);\\n    }\\n}\\n\",\"keccak256\":\"0x6a0475ddbb18ad5befbc81669ac68183d40bd77da380afcc496f69da46ceb724\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/FluxPriceFeedFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./FluxPriceFeed.sol\\\";\\n\\n/**\\n * @title Flux first-party price feed factory\\n * @author fluxprotocol.org\\n */\\ncontract FluxPriceFeedFactory {\\n    address public owner;\\n    // roles\\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\\\"VALIDATOR_ROLE\\\");\\n\\n    // mapping of id to FluxPriceFeed\\n    mapping(bytes32 => FluxPriceFeed) public fluxPriceFeeds;\\n\\n    /**\\n     * @notice indicates that a new oracle was created\\n     * @param id hash of the price pair of the deployed oracle\\n     * @param oracle address of the deployed oracle\\n     */\\n    event FluxPriceFeedCreated(bytes32 indexed id, address indexed oracle);\\n\\n    /**\\n     * @notice to log error messages\\n     * @param message the logged message\\n     */\\n    event Log(string message);\\n\\n    constructor () {\\n        owner = msg.sender;\\n    }\\n\\n    function transferOwnership(address newOwner) external {\\n        require(msg.sender == owner, \\\"!owner\\\");\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice transmit submits an answer to a price feed or creates a new one if it does not exist\\n     * @param _pricePairs array of price pairs strings (e.g. ETH/USD)\\n     * @param _decimals array of decimals for associated price pairs (e.g. 3)\\n     * @param _answers array of prices for associated price pairs\\n     * @param _marketStatusAnswers array of market open/closed statuses\\n     * @param _provider optional address of the provider, if different from msg.sender\\n     */\\n    function transmit(\\n        string[] calldata _pricePairs,\\n        uint8[] calldata _decimals,\\n        int192[] calldata _answers,\\n        bool[] calldata _marketStatusAnswers,\\n        address _provider\\n    ) external {\\n        require(\\n            (_pricePairs.length == _decimals.length) && (_pricePairs.length == _answers.length) && (_pricePairs.length == _marketStatusAnswers.length),\\n            \\\"Transmitted arrays must be equal\\\"\\n        );\\n        // if no provider is provided, use the msg.sender\\n        address provider = (_provider == address(0)) ? msg.sender : _provider;\\n\\n        // Iterate through each transmitted price pair\\n        for (uint256 i = 0; i < _pricePairs.length; i++) {\\n            string memory str = string(\\n                abi.encodePacked(\\\"Price-\\\", _pricePairs[i], \\\"-\\\", Strings.toString(_decimals[i]), \\\"-\\\", provider)\\n            );\\n            bytes32 id = keccak256(bytes(str));\\n\\n            // deploy a new oracle if there's none previously deployed and this is the original provider\\n            if (address(fluxPriceFeeds[id]) == address(0x0)) { \\n                _deployOracle(id, _pricePairs[i], _decimals[i], _provider);\\n            }\\n\\n            require(address(fluxPriceFeeds[id]) != address(0x0), \\\"Provider doesn't exist\\\");\\n\\n            require(fluxPriceFeeds[id].hasRole(VALIDATOR_ROLE, msg.sender), \\\"Only validators can transmit\\\");\\n\\n            // try transmitting values to the oracle\\n            /* solhint-disable-next-line no-empty-blocks */\\n            try fluxPriceFeeds[id].transmit(_answers[i], _marketStatusAnswers[i]) {\\n                // transmission is successful, nothing to do\\n            } catch Error(string memory reason) {\\n                // catch failing revert() and require()\\n                emit Log(reason);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice internal function to create a new FluxPriceFeed\\n     * @dev only a validator should be able to call this function\\n     */\\n    function _deployOracle(\\n        bytes32 _id,\\n        string calldata _pricePair,\\n        uint8 _decimals,\\n        address _provider\\n    ) internal {\\n        require(msg.sender == owner, \\\"!owner\\\");\\n        // deploy the new contract and store it in the mapping\\n        FluxPriceFeed newPriceFeed = new FluxPriceFeed(address(this), _decimals, _pricePair);\\n\\n        fluxPriceFeeds[_id] = newPriceFeed;\\n\\n        // grant the provider DEFAULT_ADMIN_ROLE and VALIDATOR_ROLE on the new FluxPriceFeed\\n        newPriceFeed.grantRole(0x00, msg.sender);\\n        newPriceFeed.grantRole(VALIDATOR_ROLE, msg.sender);\\n        newPriceFeed.grantRole(VALIDATOR_ROLE, _provider);\\n\\n        emit FluxPriceFeedCreated(_id, address(newPriceFeed));\\n    }\\n\\n    /**\\n     * @notice answer from the most recent report of a certain price pair from factory\\n     * @param _id hash of the price pair string to query\\n     */\\n    function valueFor(bytes32 _id)\\n        external\\n        view\\n        returns (\\n            int256,\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // if oracle exists then fetch values\\n        if (address(fluxPriceFeeds[_id]) != address(0x0)) {\\n            // fetch the price feed contract and read its latest answer and timestamp\\n            try fluxPriceFeeds[_id].latestRoundData() returns (\\n                uint80,\\n                int256 answer,\\n                bool marketOpen,\\n                uint256,\\n                uint256 updatedAt,\\n                uint80\\n            ) {\\n                return (answer,marketOpen, updatedAt, 200);\\n            } catch {\\n                // catch failing revert() and require()\\n                return (0, false, 0, 404);\\n            }\\n\\n            // else return not found\\n        } else {\\n            return (0, false, 0, 404);\\n        }\\n    }\\n\\n    /**\\n     * @notice returns address of a price feed id\\n     * @param _id hash of the price pair string to query\\n     */\\n    function addressOfPricePairId(bytes32 _id) external view returns (address) {\\n        return address(fluxPriceFeeds[_id]);\\n    }\\n\\n    /**\\n     * @notice returns the hash of a price pair\\n     * @param _pricePair ETH/USD\\n     * @param _decimals decimal of the price pair\\n     * @param _provider original provider of the price pair\\n     */\\n    function getId(\\n        string calldata _pricePair,\\n        uint8 _decimals,\\n        address _provider\\n    ) external pure returns (bytes32) {\\n        string memory str = string(\\n            abi.encodePacked(\\\"Price-\\\", _pricePair, \\\"-\\\", Strings.toString(_decimals), \\\"-\\\", _provider)\\n        );\\n        bytes32 id = keccak256(bytes(str));\\n        return id;\\n    }\\n\\n    /**\\n     * @notice returns address of a price feed id\\n     * @param _pricePair ETH/USD\\n     * @param _decimals decimal of the price pair\\n     * @param _provider original provider of the price pair\\n     */\\n    function addressOfPricePair(\\n        string calldata _pricePair,\\n        uint8 _decimals,\\n        address _provider\\n    ) external view returns (address) {\\n        bytes32 id = this.getId(_pricePair, _decimals, _provider);\\n        return address(fluxPriceFeeds[id]);\\n    }\\n\\n    /**\\n     * @notice returns factory's type and version\\n     */\\n    function typeAndVersion() external pure virtual returns (string memory) {\\n        return \\\"FluxPriceFeedFactory 2.0.0\\\";\\n    }\\n}\",\"keccak256\":\"0xcec49c741d487d949287c8abac790e1cc139137f569f1d816e3b8bcde60721d7\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestMarketOpen() external view returns (bool);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    function getMarketOpen(uint256 roundId) external view returns (bool);\\n\\n    event AnswerUpdated(int256 indexed current, bool marketOpen, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xe542890a51377bca4d1d6ce9b85cd180433deab789e8b63b8c306aff0bc4c446\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcb2f40bda00b52487beb7940f2da015deb59968c858bf7973d9a4313961f5392\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0xee09296984474e4b236cc5b3730940c9d6b33a2818d7b4b66e8326af06dc0a6a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614ac2806100606000396000f3fe60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c806390509fad116200006f57806390509fad1462000181578063ab8be68914620001b7578063c49baebe14620001ed578063f2fde38b146200020f578063f78eea83146200022f57620000ac565b8063181f5a7714620000b15780632383c3f114620000d35780632f8cc3b514620001095780636cee6b86146200013f5780638da5cb5b146200015f575b600080fd5b620000bb62000268565b604051620000ca919062001155565b60405180910390f35b620000f16004803603810190620000eb9190620011c8565b620002a5565b60405162000100919062001285565b60405180910390f35b620001276004803603810190620001219190620011c8565b620002d8565b604051620001369190620012c7565b60405180910390f35b6200015d6004803603810190620001579190620014a0565b62000315565b005b6200016962000894565b604051620001789190620012c7565b60405180910390f35b6200019f600480360381019062000199919062001652565b620008b8565b604051620001ae9190620016e3565b60405180910390f35b620001d56004803603810190620001cf919062001652565b6200090b565b604051620001e49190620012c7565b60405180910390f35b620001f7620009d4565b604051620002069190620016e3565b60405180910390f35b6200022d600480360381019062000227919062001700565b620009f8565b005b6200024d6004803603810190620002479190620011c8565b62000acc565b6040516200025f949392919062001785565b60405180910390f35b60606040518060400160405280601a81526020017f466c7578507269636546656564466163746f727920322e302e30000000000000815250905090565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b86869050898990501480156200033057508484905089899050145b80156200034257508282905089899050145b62000384576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037b9062001822565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614620003c15781620003c3565b335b905060005b8a8a9050811015620008875760008b8b83818110620003ec57620003eb62001844565b5b905060200281019062000400919062001882565b6200043a8c8c868181106200041a576200041962001844565b5b9050602002016020810190620004319190620018ee565b60ff1662000c24565b8560405160200162000450949392919062001a8a565b6040516020818303038152906040529050600081805190602001209050600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603620005395762000538818e8e86818110620004f057620004ef62001844565b5b905060200281019062000504919062001882565b8e8e888181106200051a576200051962001844565b5b9050602002016020810190620005319190620018ee565b8962000d9d565b5b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603620005de576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005d59062001b3e565b60405180910390fd5b6001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926336040518363ffffffff1660e01b81526004016200066e92919062001b60565b602060405180830381865afa1580156200068c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006b2919062001bbe565b620006f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006eb9062001c40565b60405180910390fd5b6001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663541780fd8a8a8681811062000759576200075862001844565b5b905060200201602081019062000770919062001ca0565b89898781811062000786576200078562001844565b5b90506020020160208101906200079d919062001ce9565b6040518363ffffffff1660e01b8152600401620007bc92919062001d2c565b600060405180830381600087803b158015620007d757600080fd5b505af1925050508015620007e9575060015b6200086e57620007f862001d66565b806308c379a0036200085c57506200080f62001df0565b806200081c57506200085e565b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040516200084d919062001155565b60405180910390a15062000868565b505b3d6000803e3d6000fd5b6200086f565b5b505080806200087e9062001eba565b915050620003c8565b5050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808585620008cb8660ff1662000c24565b85604051602001620008e1949392919062001a8a565b60405160208183030381529060405290506000818051906020012090508092505050949350505050565b6000803073ffffffffffffffffffffffffffffffffffffffff166390509fad878787876040518563ffffffff1660e01b81526004016200094f949392919062001f4b565b602060405180830381865afa1580156200096d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000993919062001fa8565b90506001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050949350505050565b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000a89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a80906200202a565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600073ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000c0c576001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160c060405180830381865afa92505050801562000bd857506040513d601f19601f8201168201806040525081019062000bd59190620020f5565b60015b62000bf3576000806000610194935093509350935062000c1d565b84848360c8995099509950995050505050505062000c1d565b600080600061019493509350935093505b9193509193565b60606000820362000c6d576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905062000d98565b600082905060005b6000821462000ca557808062000c8b9062001eba565b915050600a8262000c9d9190620021c0565b915062000c75565b60008167ffffffffffffffff81111562000cc45762000cc362001d8b565b5b6040519080825280601f01601f19166020018201604052801562000cf75781602001600182028036833780820191505090505b5090505b6000851462000d915760018262000d139190620021f8565b9150600a8562000d24919062002233565b603062000d3291906200226b565b60f81b81838151811062000d4b5762000d4a62001844565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8562000d899190620021c0565b945062000cfb565b8093505050505b919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000e2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e25906200202a565b60405180910390fd5b60003083868660405162000e4290620010a3565b62000e519493929190620022c8565b604051809103906000f08015801562000e6e573d6000803e3d6000fd5b509050806001600088815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16632f2ff15d6000336040518363ffffffff1660e01b815260040162000f019291906200235e565b600060405180830381600087803b15801562000f1c57600080fd5b505af115801562000f31573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632f2ff15d7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926336040518363ffffffff1660e01b815260040162000f9292919062001b60565b600060405180830381600087803b15801562000fad57600080fd5b505af115801562000fc2573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632f2ff15d7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926846040518363ffffffff1660e01b81526004016200102392919062001b60565b600060405180830381600087803b1580156200103e57600080fd5b505af115801562001053573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16867f5d69a870251b4a642b49099b0af2fb83c0a520f170f251792be62ea45aa53b6b60405160405180910390a3505050505050565b612701806200238c83390190565b600081519050919050565b600082825260208201905092915050565b60005b83811015620010ed578082015181840152602081019050620010d0565b83811115620010fd576000848401525b50505050565b6000601f19601f8301169050919050565b60006200112182620010b1565b6200112d8185620010bc565b93506200113f818560208601620010cd565b6200114a8162001103565b840191505092915050565b6000602082019050818103600083015262001171818462001114565b905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620011a2816200118d565b8114620011ae57600080fd5b50565b600081359050620011c28162001197565b92915050565b600060208284031215620011e157620011e062001183565b5b6000620011f184828501620011b1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620012456200123f6200123984620011fa565b6200121a565b620011fa565b9050919050565b6000620012598262001224565b9050919050565b60006200126d826200124c565b9050919050565b6200127f8162001260565b82525050565b60006020820190506200129c600083018462001274565b92915050565b6000620012af82620011fa565b9050919050565b620012c181620012a2565b82525050565b6000602082019050620012de6000830184620012b6565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126200130c576200130b620012e4565b5b8235905067ffffffffffffffff8111156200132c576200132b620012e9565b5b6020830191508360208202830111156200134b576200134a620012ee565b5b9250929050565b60008083601f8401126200136b576200136a620012e4565b5b8235905067ffffffffffffffff8111156200138b576200138a620012e9565b5b602083019150836020820283011115620013aa57620013a9620012ee565b5b9250929050565b60008083601f840112620013ca57620013c9620012e4565b5b8235905067ffffffffffffffff811115620013ea57620013e9620012e9565b5b602083019150836020820283011115620014095762001408620012ee565b5b9250929050565b60008083601f840112620014295762001428620012e4565b5b8235905067ffffffffffffffff811115620014495762001448620012e9565b5b602083019150836020820283011115620014685762001467620012ee565b5b9250929050565b6200147a81620012a2565b81146200148657600080fd5b50565b6000813590506200149a816200146f565b92915050565b600080600080600080600080600060a08a8c031215620014c557620014c462001183565b5b60008a013567ffffffffffffffff811115620014e657620014e562001188565b5b620014f48c828d01620012f3565b995099505060208a013567ffffffffffffffff8111156200151a576200151962001188565b5b620015288c828d0162001352565b975097505060408a013567ffffffffffffffff8111156200154e576200154d62001188565b5b6200155c8c828d01620013b1565b955095505060608a013567ffffffffffffffff81111562001582576200158162001188565b5b620015908c828d0162001410565b93509350506080620015a58c828d0162001489565b9150509295985092959850929598565b60008083601f840112620015ce57620015cd620012e4565b5b8235905067ffffffffffffffff811115620015ee57620015ed620012e9565b5b6020830191508360018202830111156200160d576200160c620012ee565b5b9250929050565b600060ff82169050919050565b6200162c8162001614565b81146200163857600080fd5b50565b6000813590506200164c8162001621565b92915050565b600080600080606085870312156200166f576200166e62001183565b5b600085013567ffffffffffffffff81111562001690576200168f62001188565b5b6200169e87828801620015b5565b94509450506020620016b3878288016200163b565b9250506040620016c68782880162001489565b91505092959194509250565b620016dd816200118d565b82525050565b6000602082019050620016fa6000830184620016d2565b92915050565b60006020828403121562001719576200171862001183565b5b6000620017298482850162001489565b91505092915050565b6000819050919050565b620017478162001732565b82525050565b60008115159050919050565b62001764816200174d565b82525050565b6000819050919050565b6200177f816200176a565b82525050565b60006080820190506200179c60008301876200173c565b620017ab602083018662001759565b620017ba604083018562001774565b620017c9606083018462001774565b95945050505050565b7f5472616e736d697474656420617272617973206d75737420626520657175616c600082015250565b60006200180a602083620010bc565b91506200181782620017d2565b602082019050919050565b600060208201905081810360008301526200183d81620017fb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112620018a257620018a162001873565b5b80840192508235915067ffffffffffffffff821115620018c757620018c662001878565b5b602083019250600182023603831315620018e657620018e56200187d565b5b509250929050565b60006020828403121562001907576200190662001183565b5b600062001917848285016200163b565b91505092915050565b600081905092915050565b7f50726963652d0000000000000000000000000000000000000000000000000000600082015250565b60006200196360068362001920565b915062001970826200192b565b600682019050919050565b82818337600083830152505050565b600062001998838562001920565b9350620019a78385846200197b565b82840190509392505050565b7f2d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000620019eb60018362001920565b9150620019f882620019b3565b600182019050919050565b600062001a1082620010b1565b62001a1c818562001920565b935062001a2e818560208601620010cd565b80840191505092915050565b60008160601b9050919050565b600062001a548262001a3a565b9050919050565b600062001a688262001a47565b9050919050565b62001a8462001a7e82620012a2565b62001a5b565b82525050565b600062001a978262001954565b915062001aa68286886200198a565b915062001ab382620019dc565b915062001ac1828562001a03565b915062001ace82620019dc565b915062001adc828462001a6f565b60148201915081905095945050505050565b7f50726f766964657220646f65736e277420657869737400000000000000000000600082015250565b600062001b26601683620010bc565b915062001b338262001aee565b602082019050919050565b6000602082019050818103600083015262001b598162001b17565b9050919050565b600060408201905062001b776000830185620016d2565b62001b866020830184620012b6565b9392505050565b62001b98816200174d565b811462001ba457600080fd5b50565b60008151905062001bb88162001b8d565b92915050565b60006020828403121562001bd75762001bd662001183565b5b600062001be78482850162001ba7565b91505092915050565b7f4f6e6c792076616c696461746f72732063616e207472616e736d697400000000600082015250565b600062001c28601c83620010bc565b915062001c358262001bf0565b602082019050919050565b6000602082019050818103600083015262001c5b8162001c19565b9050919050565b60008160170b9050919050565b62001c7a8162001c62565b811462001c8657600080fd5b50565b60008135905062001c9a8162001c6f565b92915050565b60006020828403121562001cb95762001cb862001183565b5b600062001cc98482850162001c89565b91505092915050565b60008135905062001ce38162001b8d565b92915050565b60006020828403121562001d025762001d0162001183565b5b600062001d128482850162001cd2565b91505092915050565b62001d268162001c62565b82525050565b600060408201905062001d43600083018562001d1b565b62001d52602083018462001759565b9392505050565b60008160e01c9050919050565b600060033d111562001d885760046000803e62001d8560005162001d59565b90505b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62001dc58262001103565b810181811067ffffffffffffffff8211171562001de75762001de662001d8b565b5b80604052505050565b600060443d1062001e885762001e0562001179565b60043d036004823e80513d602482011167ffffffffffffffff8211171562001e2f57505062001e88565b808201805167ffffffffffffffff81111562001e4f575050505062001e88565b80602083010160043d03850181111562001e6e57505050505062001e88565b62001e7f8260200185018662001dba565b82955050505050505b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001ec7826200176a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001efc5762001efb62001e8b565b5b600182019050919050565b600062001f158385620010bc565b935062001f248385846200197b565b62001f2f8362001103565b840190509392505050565b62001f458162001614565b82525050565b6000606082019050818103600083015262001f6881868862001f07565b905062001f79602083018562001f3a565b62001f886040830184620012b6565b95945050505050565b60008151905062001fa28162001197565b92915050565b60006020828403121562001fc15762001fc062001183565b5b600062001fd18482850162001f91565b91505092915050565b7f216f776e65720000000000000000000000000000000000000000000000000000600082015250565b600062002012600683620010bc565b91506200201f8262001fda565b602082019050919050565b60006020820190508181036000830152620020458162002003565b9050919050565b600069ffffffffffffffffffff82169050919050565b6200206d816200204c565b81146200207957600080fd5b50565b6000815190506200208d8162002062565b92915050565b6200209e8162001732565b8114620020aa57600080fd5b50565b600081519050620020be8162002093565b92915050565b620020cf816200176a565b8114620020db57600080fd5b50565b600081519050620020ef81620020c4565b92915050565b60008060008060008060c0878903121562002115576200211462001183565b5b60006200212589828a016200207c565b96505060206200213889828a01620020ad565b95505060406200214b89828a0162001ba7565b94505060606200215e89828a01620020de565b93505060806200217189828a01620020de565b92505060a06200218489828a016200207c565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620021cd826200176a565b9150620021da836200176a565b925082620021ed57620021ec62002191565b5b828204905092915050565b600062002205826200176a565b915062002212836200176a565b92508282101562002228576200222762001e8b565b5b828203905092915050565b600062002240826200176a565b91506200224d836200176a565b92508262002260576200225f62002191565b5b828206905092915050565b600062002278826200176a565b915062002285836200176a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620022bd57620022bc62001e8b565b5b828201905092915050565b6000606082019050620022df6000830187620012b6565b620022ee602083018662001f3a565b81810360408301526200230381848662001f07565b905095945050505050565b6000819050919050565b60008160001b9050919050565b600062002346620023406200233a846200230e565b62002318565b6200118d565b9050919050565b620023588162002325565b82525050565b60006040820190506200237560008301856200234d565b620023846020830184620012b6565b939250505056fe60a06040523480156200001157600080fd5b506040516200270138038062002701833981810160405281019062000037919062000549565b6200004c6000801b33620000e060201b60201c565b6200007e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533620000e060201b60201c565b620000b07f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892684620000e060201b60201c565b8160ff1660808160ff16815250508060039080519060200190620000d692919062000259565b5050505062000628565b620000f28282620000f660201b60201c565b5050565b620001088282620001e760201b60201c565b620001e357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001886200025160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b8280546200026790620005f3565b90600052602060002090601f0160209004810192826200028b5760008555620002d7565b82601f10620002a657805160ff1916838001178555620002d7565b82800160010185558215620002d7579182015b82811115620002d6578251825591602001919060010190620002b9565b5b509050620002e69190620002ea565b5090565b5b8082111562000305576000816000905550600101620002eb565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200034a826200031d565b9050919050565b6200035c816200033d565b81146200036857600080fd5b50565b6000815190506200037c8162000351565b92915050565b600060ff82169050919050565b6200039a8162000382565b8114620003a657600080fd5b50565b600081519050620003ba816200038f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200041582620003ca565b810181811067ffffffffffffffff82111715620004375762000436620003db565b5b80604052505050565b60006200044c62000309565b90506200045a82826200040a565b919050565b600067ffffffffffffffff8211156200047d576200047c620003db565b5b6200048882620003ca565b9050602081019050919050565b60005b83811015620004b557808201518184015260208101905062000498565b83811115620004c5576000848401525b50505050565b6000620004e2620004dc846200045f565b62000440565b905082815260208101848484011115620005015762000500620003c5565b5b6200050e84828562000495565b509392505050565b600082601f8301126200052e576200052d620003c0565b5b815162000540848260208601620004cb565b91505092915050565b60008060006060848603121562000565576200056462000313565b5b600062000575868287016200036b565b93505060206200058886828701620003a9565b925050604084015167ffffffffffffffff811115620005ac57620005ab62000318565b5b620005ba8682870162000516565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200060c57607f821691505b602082108103620006225762000621620005c4565b5b50919050565b6080516120bd6200064460003960006105e101526120bd6000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806375b238fc116100de578063b5ab58dc11610097578063c6b050c111610071578063c6b050c11461046b578063d547741f14610489578063e5fe4577146104a5578063feaf968c146104c557610173565b8063b5ab58dc146103ed578063b633620c1461041d578063c49baebe1461044d57610173565b806375b238fc146102fe5780638205bf6a1461031c57806384b0f3491461033a57806391d148541461036a5780639a6fc8f51461039a578063a217fddf146103cf57610173565b806350d25bcd1161013057806350d25bcd1461024c578063541780fd1461026a57806354fd4d50146102865780635ed63b40146102a4578063668a0f02146102c25780637284e416146102e057610173565b806301ffc9a714610178578063181f5a77146101a8578063248a9ca3146101c65780632f2ff15d146101f6578063313ce5671461021257806336568abe14610230575b600080fd5b610192600480360381019061018d9190611597565b6104e8565b60405161019f91906115df565b60405180910390f35b6101b0610562565b6040516101bd9190611693565b60405180910390f35b6101e060048036038101906101db91906116eb565b61059f565b6040516101ed9190611727565b60405180910390f35b610210600480360381019061020b91906117a0565b6105be565b005b61021a6105df565b60405161022791906117fc565b60405180910390f35b61024a600480360381019061024591906117a0565b610603565b005b610254610686565b6040516102619190611830565b60405180910390f35b610284600480360381019061027f91906118b0565b6106d2565b005b61028e6108d3565b60405161029b9190611909565b60405180910390f35b6102ac6108d8565b6040516102b99190611943565b60405180910390f35b6102ca6108ee565b6040516102d79190611909565b60405180910390f35b6102e861090e565b6040516102f59190611693565b60405180910390f35b6103066109a0565b6040516103139190611727565b60405180910390f35b6103246109c4565b6040516103319190611909565b60405180910390f35b610354600480360381019061034f919061198a565b610a1e565b60405161036191906115df565b60405180910390f35b610384600480360381019061037f91906117a0565b610a9e565b60405161039191906115df565b60405180910390f35b6103b460048036038101906103af91906119f9565b610b08565b6040516103c696959493929190611a35565b60405180910390f35b6103d7610c81565b6040516103e49190611727565b60405180910390f35b6104076004803603810190610402919061198a565b610c88565b6040516104149190611830565b60405180910390f35b6104376004803603810190610432919061198a565b610cda565b6040516104449190611909565b60405180910390f35b610455610d3a565b6040516104629190611727565b60405180910390f35b610473610d5e565b60405161048091906115df565b60405180910390f35b6104a3600480360381019061049e91906117a0565b610da7565b005b6104ad610dc8565b6040516104bc93929190611ac8565b60405180910390f35b6104cd610f13565b6040516104df96959493929190611a35565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061055b575061055a8261101a565b5b9050919050565b60606040518060400160405280601381526020017f466c757850726963654665656420312e302e3000000000000000000000000000815250905090565b6000806000838152602001908152602001600020600101549050919050565b6105c78261059f565b6105d081611084565b6105da8383611098565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61060b611178565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066f90611b71565b60405180910390fd5b6106828282611180565b5050565b600060026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900460170b60170b905090565b6106fc7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892633610a9e565b61073b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073290611bdd565b60405180910390fd5b6001600081819054906101000a900463ffffffff168092919061075d90611c2c565b91906101000a81548163ffffffff021916908363ffffffff1602179055505060405180606001604052808360170b81526020014267ffffffffffffffff16815260200182151581525060026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160006101000a81548160ff021916908315150217905550905050600160009054906101000a900463ffffffff1663ffffffff167f14763f9653228cd12887f43c05db1caec15aa7c42f8d1edabe741dcecf48c0048383336040516108c793929190611c67565b60405180910390a25050565b600181565b600160009054906101000a900463ffffffff1681565b6000600160009054906101000a900463ffffffff1663ffffffff16905090565b60606003805461091d90611ccd565b80601f016020809104026020016040519081016040528092919081815260200182805461094990611ccd565b80156109965780601f1061096b57610100808354040283529160200191610996565b820191906000526020600020905b81548152906001019060200180831161097957829003601f168201915b5050505050905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b600060026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160189054906101000a900467ffffffffffffffff1667ffffffffffffffff16905090565b600063ffffffff821115610a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5e90611d4a565b60405180910390fd5b600260008363ffffffff1663ffffffff16815260200190815260200160002060010160009054906101000a900460ff169050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008060008060008063ffffffff8769ffffffffffffffffffff1611156040518060400160405280600f81526020017f4e6f20646174612070726573656e74000000000000000000000000000000000081525090610b9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b939190611693565b60405180910390fd5b506000600260008963ffffffff1663ffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460170b60170b60170b81526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900460ff16151515158152505090508781600001518260400151836020015184602001518c8460170b94508267ffffffffffffffff1692508167ffffffffffffffff1691509650965096509650965096505091939550919395565b6000801b81565b600063ffffffff821115610c9f5760009050610cd5565b600260008363ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900460170b60170b90505b919050565b600063ffffffff821115610cf15760009050610d35565b600260008363ffffffff1663ffffffff16815260200190815260200160002060000160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1690505b919050565b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892681565b600060026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060010160009054906101000a900460ff16905090565b610db08261059f565b610db981611084565b610dc38383611180565b505050565b60008060003273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3290611db6565b60405180910390fd5b60026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900460170b60026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160189054906101000a900467ffffffffffffffff1660026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060010160009054906101000a900460ff16925092509250909192565b600080600080600080600160009054906101000a900463ffffffff1663ffffffff1695506000600260008863ffffffff1663ffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460170b60170b60170b81526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900460ff16151515158152505090508681600001518260400151836020015184602001518b8460170b94508267ffffffffffffffff1692508167ffffffffffffffff16915096509650965096509650965050909192939495565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61109581611090611178565b611261565b50565b6110a28282610a9e565b61117457600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611119611178565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b61118a8282610a9e565b1561125d57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611202611178565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b61126b8282610a9e565b6112fa576112908173ffffffffffffffffffffffffffffffffffffffff1660146112fe565b61129e8360001c60206112fe565b6040516020016112af929190611eaa565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f19190611693565b60405180910390fd5b5050565b6060600060028360026113119190611ee4565b61131b9190611f3e565b67ffffffffffffffff81111561133457611333611f94565b5b6040519080825280601f01601f1916602001820160405280156113665781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061139e5761139d611fc3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061140257611401611fc3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026114429190611ee4565b61144c9190611f3e565b90505b60018111156114ec577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061148e5761148d611fc3565b5b1a60f81b8282815181106114a5576114a4611fc3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806114e590611ff2565b905061144f565b5060008414611530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152790612067565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6115748161153f565b811461157f57600080fd5b50565b6000813590506115918161156b565b92915050565b6000602082840312156115ad576115ac61153a565b5b60006115bb84828501611582565b91505092915050565b60008115159050919050565b6115d9816115c4565b82525050565b60006020820190506115f460008301846115d0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611634578082015181840152602081019050611619565b83811115611643576000848401525b50505050565b6000601f19601f8301169050919050565b6000611665826115fa565b61166f8185611605565b935061167f818560208601611616565b61168881611649565b840191505092915050565b600060208201905081810360008301526116ad818461165a565b905092915050565b6000819050919050565b6116c8816116b5565b81146116d357600080fd5b50565b6000813590506116e5816116bf565b92915050565b6000602082840312156117015761170061153a565b5b600061170f848285016116d6565b91505092915050565b611721816116b5565b82525050565b600060208201905061173c6000830184611718565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061176d82611742565b9050919050565b61177d81611762565b811461178857600080fd5b50565b60008135905061179a81611774565b92915050565b600080604083850312156117b7576117b661153a565b5b60006117c5858286016116d6565b92505060206117d68582860161178b565b9150509250929050565b600060ff82169050919050565b6117f6816117e0565b82525050565b600060208201905061181160008301846117ed565b92915050565b6000819050919050565b61182a81611817565b82525050565b60006020820190506118456000830184611821565b92915050565b60008160170b9050919050565b6118618161184b565b811461186c57600080fd5b50565b60008135905061187e81611858565b92915050565b61188d816115c4565b811461189857600080fd5b50565b6000813590506118aa81611884565b92915050565b600080604083850312156118c7576118c661153a565b5b60006118d58582860161186f565b92505060206118e68582860161189b565b9150509250929050565b6000819050919050565b611903816118f0565b82525050565b600060208201905061191e60008301846118fa565b92915050565b600063ffffffff82169050919050565b61193d81611924565b82525050565b60006020820190506119586000830184611934565b92915050565b611967816118f0565b811461197257600080fd5b50565b6000813590506119848161195e565b92915050565b6000602082840312156119a05761199f61153a565b5b60006119ae84828501611975565b91505092915050565b600069ffffffffffffffffffff82169050919050565b6119d6816119b7565b81146119e157600080fd5b50565b6000813590506119f3816119cd565b92915050565b600060208284031215611a0f57611a0e61153a565b5b6000611a1d848285016119e4565b91505092915050565b611a2f816119b7565b82525050565b600060c082019050611a4a6000830189611a26565b611a576020830188611821565b611a6460408301876115d0565b611a7160608301866118fa565b611a7e60808301856118fa565b611a8b60a0830184611a26565b979650505050505050565b611a9f8161184b565b82525050565b600067ffffffffffffffff82169050919050565b611ac281611aa5565b82525050565b6000606082019050611add6000830186611a96565b611aea6020830185611ab9565b611af760408301846115d0565b949350505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000611b5b602f83611605565b9150611b6682611aff565b604082019050919050565b60006020820190508181036000830152611b8a81611b4e565b9050919050565b7f43616c6c6572206973206e6f7420612076616c696461746f7200000000000000600082015250565b6000611bc7601983611605565b9150611bd282611b91565b602082019050919050565b60006020820190508181036000830152611bf681611bba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c3782611924565b915063ffffffff8203611c4d57611c4c611bfd565b5b600182019050919050565b611c6181611762565b82525050565b6000606082019050611c7c6000830186611a96565b611c8960208301856115d0565b611c966040830184611c58565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ce557607f821691505b602082108103611cf857611cf7611c9e565b5b50919050565b7f466c75785072696365466565643a20726f756e64204944000000000000000000600082015250565b6000611d34601783611605565b9150611d3f82611cfe565b602082019050919050565b60006020820190508181036000830152611d6381611d27565b9050919050565b7f4f6e6c792063616c6c61626c6520627920454f41000000000000000000000000600082015250565b6000611da0601483611605565b9150611dab82611d6a565b602082019050919050565b60006020820190508181036000830152611dcf81611d93565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000611e17601783611dd6565b9150611e2282611de1565b601782019050919050565b6000611e38826115fa565b611e428185611dd6565b9350611e52818560208601611616565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000611e94601183611dd6565b9150611e9f82611e5e565b601182019050919050565b6000611eb582611e0a565b9150611ec18285611e2d565b9150611ecc82611e87565b9150611ed88284611e2d565b91508190509392505050565b6000611eef826118f0565b9150611efa836118f0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f3357611f32611bfd565b5b828202905092915050565b6000611f49826118f0565b9150611f54836118f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f8957611f88611bfd565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611ffd826118f0565b9150600082036120105761200f611bfd565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612051602083611605565b915061205c8261201b565b602082019050919050565b6000602082019050818103600083015261208081612044565b905091905056fea26469706673582212202e016b20950fa3da4682e66b4619af4b5c631f26deea0843dfaf72de097d439464736f6c634300080e0033a2646970667358221220e81a7b4dbb3201bce4c2c54135c48fce51545812f0f1b3c65810b0f0fa77920b64736f6c634300080e0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c806390509fad116200006f57806390509fad1462000181578063ab8be68914620001b7578063c49baebe14620001ed578063f2fde38b146200020f578063f78eea83146200022f57620000ac565b8063181f5a7714620000b15780632383c3f114620000d35780632f8cc3b514620001095780636cee6b86146200013f5780638da5cb5b146200015f575b600080fd5b620000bb62000268565b604051620000ca919062001155565b60405180910390f35b620000f16004803603810190620000eb9190620011c8565b620002a5565b60405162000100919062001285565b60405180910390f35b620001276004803603810190620001219190620011c8565b620002d8565b604051620001369190620012c7565b60405180910390f35b6200015d6004803603810190620001579190620014a0565b62000315565b005b6200016962000894565b604051620001789190620012c7565b60405180910390f35b6200019f600480360381019062000199919062001652565b620008b8565b604051620001ae9190620016e3565b60405180910390f35b620001d56004803603810190620001cf919062001652565b6200090b565b604051620001e49190620012c7565b60405180910390f35b620001f7620009d4565b604051620002069190620016e3565b60405180910390f35b6200022d600480360381019062000227919062001700565b620009f8565b005b6200024d6004803603810190620002479190620011c8565b62000acc565b6040516200025f949392919062001785565b60405180910390f35b60606040518060400160405280601a81526020017f466c7578507269636546656564466163746f727920322e302e30000000000000815250905090565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b86869050898990501480156200033057508484905089899050145b80156200034257508282905089899050145b62000384576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037b9062001822565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614620003c15781620003c3565b335b905060005b8a8a9050811015620008875760008b8b83818110620003ec57620003eb62001844565b5b905060200281019062000400919062001882565b6200043a8c8c868181106200041a576200041962001844565b5b9050602002016020810190620004319190620018ee565b60ff1662000c24565b8560405160200162000450949392919062001a8a565b6040516020818303038152906040529050600081805190602001209050600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603620005395762000538818e8e86818110620004f057620004ef62001844565b5b905060200281019062000504919062001882565b8e8e888181106200051a576200051962001844565b5b9050602002016020810190620005319190620018ee565b8962000d9d565b5b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603620005de576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005d59062001b3e565b60405180910390fd5b6001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926336040518363ffffffff1660e01b81526004016200066e92919062001b60565b602060405180830381865afa1580156200068c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006b2919062001bbe565b620006f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006eb9062001c40565b60405180910390fd5b6001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663541780fd8a8a8681811062000759576200075862001844565b5b905060200201602081019062000770919062001ca0565b89898781811062000786576200078562001844565b5b90506020020160208101906200079d919062001ce9565b6040518363ffffffff1660e01b8152600401620007bc92919062001d2c565b600060405180830381600087803b158015620007d757600080fd5b505af1925050508015620007e9575060015b6200086e57620007f862001d66565b806308c379a0036200085c57506200080f62001df0565b806200081c57506200085e565b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040516200084d919062001155565b60405180910390a15062000868565b505b3d6000803e3d6000fd5b6200086f565b5b505080806200087e9062001eba565b915050620003c8565b5050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808585620008cb8660ff1662000c24565b85604051602001620008e1949392919062001a8a565b60405160208183030381529060405290506000818051906020012090508092505050949350505050565b6000803073ffffffffffffffffffffffffffffffffffffffff166390509fad878787876040518563ffffffff1660e01b81526004016200094f949392919062001f4b565b602060405180830381865afa1580156200096d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000993919062001fa8565b90506001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050949350505050565b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000a89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a80906200202a565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600073ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000c0c576001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160c060405180830381865afa92505050801562000bd857506040513d601f19601f8201168201806040525081019062000bd59190620020f5565b60015b62000bf3576000806000610194935093509350935062000c1d565b84848360c8995099509950995050505050505062000c1d565b600080600061019493509350935093505b9193509193565b60606000820362000c6d576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905062000d98565b600082905060005b6000821462000ca557808062000c8b9062001eba565b915050600a8262000c9d9190620021c0565b915062000c75565b60008167ffffffffffffffff81111562000cc45762000cc362001d8b565b5b6040519080825280601f01601f19166020018201604052801562000cf75781602001600182028036833780820191505090505b5090505b6000851462000d915760018262000d139190620021f8565b9150600a8562000d24919062002233565b603062000d3291906200226b565b60f81b81838151811062000d4b5762000d4a62001844565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8562000d899190620021c0565b945062000cfb565b8093505050505b919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000e2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e25906200202a565b60405180910390fd5b60003083868660405162000e4290620010a3565b62000e519493929190620022c8565b604051809103906000f08015801562000e6e573d6000803e3d6000fd5b509050806001600088815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16632f2ff15d6000336040518363ffffffff1660e01b815260040162000f019291906200235e565b600060405180830381600087803b15801562000f1c57600080fd5b505af115801562000f31573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632f2ff15d7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926336040518363ffffffff1660e01b815260040162000f9292919062001b60565b600060405180830381600087803b15801562000fad57600080fd5b505af115801562000fc2573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632f2ff15d7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926846040518363ffffffff1660e01b81526004016200102392919062001b60565b600060405180830381600087803b1580156200103e57600080fd5b505af115801562001053573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16867f5d69a870251b4a642b49099b0af2fb83c0a520f170f251792be62ea45aa53b6b60405160405180910390a3505050505050565b612701806200238c83390190565b600081519050919050565b600082825260208201905092915050565b60005b83811015620010ed578082015181840152602081019050620010d0565b83811115620010fd576000848401525b50505050565b6000601f19601f8301169050919050565b60006200112182620010b1565b6200112d8185620010bc565b93506200113f818560208601620010cd565b6200114a8162001103565b840191505092915050565b6000602082019050818103600083015262001171818462001114565b905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620011a2816200118d565b8114620011ae57600080fd5b50565b600081359050620011c28162001197565b92915050565b600060208284031215620011e157620011e062001183565b5b6000620011f184828501620011b1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620012456200123f6200123984620011fa565b6200121a565b620011fa565b9050919050565b6000620012598262001224565b9050919050565b60006200126d826200124c565b9050919050565b6200127f8162001260565b82525050565b60006020820190506200129c600083018462001274565b92915050565b6000620012af82620011fa565b9050919050565b620012c181620012a2565b82525050565b6000602082019050620012de6000830184620012b6565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126200130c576200130b620012e4565b5b8235905067ffffffffffffffff8111156200132c576200132b620012e9565b5b6020830191508360208202830111156200134b576200134a620012ee565b5b9250929050565b60008083601f8401126200136b576200136a620012e4565b5b8235905067ffffffffffffffff8111156200138b576200138a620012e9565b5b602083019150836020820283011115620013aa57620013a9620012ee565b5b9250929050565b60008083601f840112620013ca57620013c9620012e4565b5b8235905067ffffffffffffffff811115620013ea57620013e9620012e9565b5b602083019150836020820283011115620014095762001408620012ee565b5b9250929050565b60008083601f840112620014295762001428620012e4565b5b8235905067ffffffffffffffff811115620014495762001448620012e9565b5b602083019150836020820283011115620014685762001467620012ee565b5b9250929050565b6200147a81620012a2565b81146200148657600080fd5b50565b6000813590506200149a816200146f565b92915050565b600080600080600080600080600060a08a8c031215620014c557620014c462001183565b5b60008a013567ffffffffffffffff811115620014e657620014e562001188565b5b620014f48c828d01620012f3565b995099505060208a013567ffffffffffffffff8111156200151a576200151962001188565b5b620015288c828d0162001352565b975097505060408a013567ffffffffffffffff8111156200154e576200154d62001188565b5b6200155c8c828d01620013b1565b955095505060608a013567ffffffffffffffff81111562001582576200158162001188565b5b620015908c828d0162001410565b93509350506080620015a58c828d0162001489565b9150509295985092959850929598565b60008083601f840112620015ce57620015cd620012e4565b5b8235905067ffffffffffffffff811115620015ee57620015ed620012e9565b5b6020830191508360018202830111156200160d576200160c620012ee565b5b9250929050565b600060ff82169050919050565b6200162c8162001614565b81146200163857600080fd5b50565b6000813590506200164c8162001621565b92915050565b600080600080606085870312156200166f576200166e62001183565b5b600085013567ffffffffffffffff81111562001690576200168f62001188565b5b6200169e87828801620015b5565b94509450506020620016b3878288016200163b565b9250506040620016c68782880162001489565b91505092959194509250565b620016dd816200118d565b82525050565b6000602082019050620016fa6000830184620016d2565b92915050565b60006020828403121562001719576200171862001183565b5b6000620017298482850162001489565b91505092915050565b6000819050919050565b620017478162001732565b82525050565b60008115159050919050565b62001764816200174d565b82525050565b6000819050919050565b6200177f816200176a565b82525050565b60006080820190506200179c60008301876200173c565b620017ab602083018662001759565b620017ba604083018562001774565b620017c9606083018462001774565b95945050505050565b7f5472616e736d697474656420617272617973206d75737420626520657175616c600082015250565b60006200180a602083620010bc565b91506200181782620017d2565b602082019050919050565b600060208201905081810360008301526200183d81620017fb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112620018a257620018a162001873565b5b80840192508235915067ffffffffffffffff821115620018c757620018c662001878565b5b602083019250600182023603831315620018e657620018e56200187d565b5b509250929050565b60006020828403121562001907576200190662001183565b5b600062001917848285016200163b565b91505092915050565b600081905092915050565b7f50726963652d0000000000000000000000000000000000000000000000000000600082015250565b60006200196360068362001920565b915062001970826200192b565b600682019050919050565b82818337600083830152505050565b600062001998838562001920565b9350620019a78385846200197b565b82840190509392505050565b7f2d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000620019eb60018362001920565b9150620019f882620019b3565b600182019050919050565b600062001a1082620010b1565b62001a1c818562001920565b935062001a2e818560208601620010cd565b80840191505092915050565b60008160601b9050919050565b600062001a548262001a3a565b9050919050565b600062001a688262001a47565b9050919050565b62001a8462001a7e82620012a2565b62001a5b565b82525050565b600062001a978262001954565b915062001aa68286886200198a565b915062001ab382620019dc565b915062001ac1828562001a03565b915062001ace82620019dc565b915062001adc828462001a6f565b60148201915081905095945050505050565b7f50726f766964657220646f65736e277420657869737400000000000000000000600082015250565b600062001b26601683620010bc565b915062001b338262001aee565b602082019050919050565b6000602082019050818103600083015262001b598162001b17565b9050919050565b600060408201905062001b776000830185620016d2565b62001b866020830184620012b6565b9392505050565b62001b98816200174d565b811462001ba457600080fd5b50565b60008151905062001bb88162001b8d565b92915050565b60006020828403121562001bd75762001bd662001183565b5b600062001be78482850162001ba7565b91505092915050565b7f4f6e6c792076616c696461746f72732063616e207472616e736d697400000000600082015250565b600062001c28601c83620010bc565b915062001c358262001bf0565b602082019050919050565b6000602082019050818103600083015262001c5b8162001c19565b9050919050565b60008160170b9050919050565b62001c7a8162001c62565b811462001c8657600080fd5b50565b60008135905062001c9a8162001c6f565b92915050565b60006020828403121562001cb95762001cb862001183565b5b600062001cc98482850162001c89565b91505092915050565b60008135905062001ce38162001b8d565b92915050565b60006020828403121562001d025762001d0162001183565b5b600062001d128482850162001cd2565b91505092915050565b62001d268162001c62565b82525050565b600060408201905062001d43600083018562001d1b565b62001d52602083018462001759565b9392505050565b60008160e01c9050919050565b600060033d111562001d885760046000803e62001d8560005162001d59565b90505b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62001dc58262001103565b810181811067ffffffffffffffff8211171562001de75762001de662001d8b565b5b80604052505050565b600060443d1062001e885762001e0562001179565b60043d036004823e80513d602482011167ffffffffffffffff8211171562001e2f57505062001e88565b808201805167ffffffffffffffff81111562001e4f575050505062001e88565b80602083010160043d03850181111562001e6e57505050505062001e88565b62001e7f8260200185018662001dba565b82955050505050505b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001ec7826200176a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001efc5762001efb62001e8b565b5b600182019050919050565b600062001f158385620010bc565b935062001f248385846200197b565b62001f2f8362001103565b840190509392505050565b62001f458162001614565b82525050565b6000606082019050818103600083015262001f6881868862001f07565b905062001f79602083018562001f3a565b62001f886040830184620012b6565b95945050505050565b60008151905062001fa28162001197565b92915050565b60006020828403121562001fc15762001fc062001183565b5b600062001fd18482850162001f91565b91505092915050565b7f216f776e65720000000000000000000000000000000000000000000000000000600082015250565b600062002012600683620010bc565b91506200201f8262001fda565b602082019050919050565b60006020820190508181036000830152620020458162002003565b9050919050565b600069ffffffffffffffffffff82169050919050565b6200206d816200204c565b81146200207957600080fd5b50565b6000815190506200208d8162002062565b92915050565b6200209e8162001732565b8114620020aa57600080fd5b50565b600081519050620020be8162002093565b92915050565b620020cf816200176a565b8114620020db57600080fd5b50565b600081519050620020ef81620020c4565b92915050565b60008060008060008060c0878903121562002115576200211462001183565b5b60006200212589828a016200207c565b96505060206200213889828a01620020ad565b95505060406200214b89828a0162001ba7565b94505060606200215e89828a01620020de565b93505060806200217189828a01620020de565b92505060a06200218489828a016200207c565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620021cd826200176a565b9150620021da836200176a565b925082620021ed57620021ec62002191565b5b828204905092915050565b600062002205826200176a565b915062002212836200176a565b92508282101562002228576200222762001e8b565b5b828203905092915050565b600062002240826200176a565b91506200224d836200176a565b92508262002260576200225f62002191565b5b828206905092915050565b600062002278826200176a565b915062002285836200176a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620022bd57620022bc62001e8b565b5b828201905092915050565b6000606082019050620022df6000830187620012b6565b620022ee602083018662001f3a565b81810360408301526200230381848662001f07565b905095945050505050565b6000819050919050565b60008160001b9050919050565b600062002346620023406200233a846200230e565b62002318565b6200118d565b9050919050565b620023588162002325565b82525050565b60006040820190506200237560008301856200234d565b620023846020830184620012b6565b939250505056fe60a06040523480156200001157600080fd5b506040516200270138038062002701833981810160405281019062000037919062000549565b6200004c6000801b33620000e060201b60201c565b6200007e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533620000e060201b60201c565b620000b07f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892684620000e060201b60201c565b8160ff1660808160ff16815250508060039080519060200190620000d692919062000259565b5050505062000628565b620000f28282620000f660201b60201c565b5050565b620001088282620001e760201b60201c565b620001e357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001886200025160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b8280546200026790620005f3565b90600052602060002090601f0160209004810192826200028b5760008555620002d7565b82601f10620002a657805160ff1916838001178555620002d7565b82800160010185558215620002d7579182015b82811115620002d6578251825591602001919060010190620002b9565b5b509050620002e69190620002ea565b5090565b5b8082111562000305576000816000905550600101620002eb565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200034a826200031d565b9050919050565b6200035c816200033d565b81146200036857600080fd5b50565b6000815190506200037c8162000351565b92915050565b600060ff82169050919050565b6200039a8162000382565b8114620003a657600080fd5b50565b600081519050620003ba816200038f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200041582620003ca565b810181811067ffffffffffffffff82111715620004375762000436620003db565b5b80604052505050565b60006200044c62000309565b90506200045a82826200040a565b919050565b600067ffffffffffffffff8211156200047d576200047c620003db565b5b6200048882620003ca565b9050602081019050919050565b60005b83811015620004b557808201518184015260208101905062000498565b83811115620004c5576000848401525b50505050565b6000620004e2620004dc846200045f565b62000440565b905082815260208101848484011115620005015762000500620003c5565b5b6200050e84828562000495565b509392505050565b600082601f8301126200052e576200052d620003c0565b5b815162000540848260208601620004cb565b91505092915050565b60008060006060848603121562000565576200056462000313565b5b600062000575868287016200036b565b93505060206200058886828701620003a9565b925050604084015167ffffffffffffffff811115620005ac57620005ab62000318565b5b620005ba8682870162000516565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200060c57607f821691505b602082108103620006225762000621620005c4565b5b50919050565b6080516120bd6200064460003960006105e101526120bd6000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806375b238fc116100de578063b5ab58dc11610097578063c6b050c111610071578063c6b050c11461046b578063d547741f14610489578063e5fe4577146104a5578063feaf968c146104c557610173565b8063b5ab58dc146103ed578063b633620c1461041d578063c49baebe1461044d57610173565b806375b238fc146102fe5780638205bf6a1461031c57806384b0f3491461033a57806391d148541461036a5780639a6fc8f51461039a578063a217fddf146103cf57610173565b806350d25bcd1161013057806350d25bcd1461024c578063541780fd1461026a57806354fd4d50146102865780635ed63b40146102a4578063668a0f02146102c25780637284e416146102e057610173565b806301ffc9a714610178578063181f5a77146101a8578063248a9ca3146101c65780632f2ff15d146101f6578063313ce5671461021257806336568abe14610230575b600080fd5b610192600480360381019061018d9190611597565b6104e8565b60405161019f91906115df565b60405180910390f35b6101b0610562565b6040516101bd9190611693565b60405180910390f35b6101e060048036038101906101db91906116eb565b61059f565b6040516101ed9190611727565b60405180910390f35b610210600480360381019061020b91906117a0565b6105be565b005b61021a6105df565b60405161022791906117fc565b60405180910390f35b61024a600480360381019061024591906117a0565b610603565b005b610254610686565b6040516102619190611830565b60405180910390f35b610284600480360381019061027f91906118b0565b6106d2565b005b61028e6108d3565b60405161029b9190611909565b60405180910390f35b6102ac6108d8565b6040516102b99190611943565b60405180910390f35b6102ca6108ee565b6040516102d79190611909565b60405180910390f35b6102e861090e565b6040516102f59190611693565b60405180910390f35b6103066109a0565b6040516103139190611727565b60405180910390f35b6103246109c4565b6040516103319190611909565b60405180910390f35b610354600480360381019061034f919061198a565b610a1e565b60405161036191906115df565b60405180910390f35b610384600480360381019061037f91906117a0565b610a9e565b60405161039191906115df565b60405180910390f35b6103b460048036038101906103af91906119f9565b610b08565b6040516103c696959493929190611a35565b60405180910390f35b6103d7610c81565b6040516103e49190611727565b60405180910390f35b6104076004803603810190610402919061198a565b610c88565b6040516104149190611830565b60405180910390f35b6104376004803603810190610432919061198a565b610cda565b6040516104449190611909565b60405180910390f35b610455610d3a565b6040516104629190611727565b60405180910390f35b610473610d5e565b60405161048091906115df565b60405180910390f35b6104a3600480360381019061049e91906117a0565b610da7565b005b6104ad610dc8565b6040516104bc93929190611ac8565b60405180910390f35b6104cd610f13565b6040516104df96959493929190611a35565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061055b575061055a8261101a565b5b9050919050565b60606040518060400160405280601381526020017f466c757850726963654665656420312e302e3000000000000000000000000000815250905090565b6000806000838152602001908152602001600020600101549050919050565b6105c78261059f565b6105d081611084565b6105da8383611098565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61060b611178565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066f90611b71565b60405180910390fd5b6106828282611180565b5050565b600060026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900460170b60170b905090565b6106fc7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892633610a9e565b61073b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073290611bdd565b60405180910390fd5b6001600081819054906101000a900463ffffffff168092919061075d90611c2c565b91906101000a81548163ffffffff021916908363ffffffff1602179055505060405180606001604052808360170b81526020014267ffffffffffffffff16815260200182151581525060026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160006101000a81548160ff021916908315150217905550905050600160009054906101000a900463ffffffff1663ffffffff167f14763f9653228cd12887f43c05db1caec15aa7c42f8d1edabe741dcecf48c0048383336040516108c793929190611c67565b60405180910390a25050565b600181565b600160009054906101000a900463ffffffff1681565b6000600160009054906101000a900463ffffffff1663ffffffff16905090565b60606003805461091d90611ccd565b80601f016020809104026020016040519081016040528092919081815260200182805461094990611ccd565b80156109965780601f1061096b57610100808354040283529160200191610996565b820191906000526020600020905b81548152906001019060200180831161097957829003601f168201915b5050505050905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b600060026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160189054906101000a900467ffffffffffffffff1667ffffffffffffffff16905090565b600063ffffffff821115610a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5e90611d4a565b60405180910390fd5b600260008363ffffffff1663ffffffff16815260200190815260200160002060010160009054906101000a900460ff169050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008060008060008063ffffffff8769ffffffffffffffffffff1611156040518060400160405280600f81526020017f4e6f20646174612070726573656e74000000000000000000000000000000000081525090610b9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b939190611693565b60405180910390fd5b506000600260008963ffffffff1663ffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460170b60170b60170b81526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900460ff16151515158152505090508781600001518260400151836020015184602001518c8460170b94508267ffffffffffffffff1692508167ffffffffffffffff1691509650965096509650965096505091939550919395565b6000801b81565b600063ffffffff821115610c9f5760009050610cd5565b600260008363ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900460170b60170b90505b919050565b600063ffffffff821115610cf15760009050610d35565b600260008363ffffffff1663ffffffff16815260200190815260200160002060000160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1690505b919050565b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892681565b600060026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060010160009054906101000a900460ff16905090565b610db08261059f565b610db981611084565b610dc38383611180565b505050565b60008060003273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3290611db6565b60405180910390fd5b60026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900460170b60026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160189054906101000a900467ffffffffffffffff1660026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060010160009054906101000a900460ff16925092509250909192565b600080600080600080600160009054906101000a900463ffffffff1663ffffffff1695506000600260008863ffffffff1663ffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460170b60170b60170b81526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900460ff16151515158152505090508681600001518260400151836020015184602001518b8460170b94508267ffffffffffffffff1692508167ffffffffffffffff16915096509650965096509650965050909192939495565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61109581611090611178565b611261565b50565b6110a28282610a9e565b61117457600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611119611178565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b61118a8282610a9e565b1561125d57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611202611178565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b61126b8282610a9e565b6112fa576112908173ffffffffffffffffffffffffffffffffffffffff1660146112fe565b61129e8360001c60206112fe565b6040516020016112af929190611eaa565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f19190611693565b60405180910390fd5b5050565b6060600060028360026113119190611ee4565b61131b9190611f3e565b67ffffffffffffffff81111561133457611333611f94565b5b6040519080825280601f01601f1916602001820160405280156113665781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061139e5761139d611fc3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061140257611401611fc3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026114429190611ee4565b61144c9190611f3e565b90505b60018111156114ec577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061148e5761148d611fc3565b5b1a60f81b8282815181106114a5576114a4611fc3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806114e590611ff2565b905061144f565b5060008414611530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152790612067565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6115748161153f565b811461157f57600080fd5b50565b6000813590506115918161156b565b92915050565b6000602082840312156115ad576115ac61153a565b5b60006115bb84828501611582565b91505092915050565b60008115159050919050565b6115d9816115c4565b82525050565b60006020820190506115f460008301846115d0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611634578082015181840152602081019050611619565b83811115611643576000848401525b50505050565b6000601f19601f8301169050919050565b6000611665826115fa565b61166f8185611605565b935061167f818560208601611616565b61168881611649565b840191505092915050565b600060208201905081810360008301526116ad818461165a565b905092915050565b6000819050919050565b6116c8816116b5565b81146116d357600080fd5b50565b6000813590506116e5816116bf565b92915050565b6000602082840312156117015761170061153a565b5b600061170f848285016116d6565b91505092915050565b611721816116b5565b82525050565b600060208201905061173c6000830184611718565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061176d82611742565b9050919050565b61177d81611762565b811461178857600080fd5b50565b60008135905061179a81611774565b92915050565b600080604083850312156117b7576117b661153a565b5b60006117c5858286016116d6565b92505060206117d68582860161178b565b9150509250929050565b600060ff82169050919050565b6117f6816117e0565b82525050565b600060208201905061181160008301846117ed565b92915050565b6000819050919050565b61182a81611817565b82525050565b60006020820190506118456000830184611821565b92915050565b60008160170b9050919050565b6118618161184b565b811461186c57600080fd5b50565b60008135905061187e81611858565b92915050565b61188d816115c4565b811461189857600080fd5b50565b6000813590506118aa81611884565b92915050565b600080604083850312156118c7576118c661153a565b5b60006118d58582860161186f565b92505060206118e68582860161189b565b9150509250929050565b6000819050919050565b611903816118f0565b82525050565b600060208201905061191e60008301846118fa565b92915050565b600063ffffffff82169050919050565b61193d81611924565b82525050565b60006020820190506119586000830184611934565b92915050565b611967816118f0565b811461197257600080fd5b50565b6000813590506119848161195e565b92915050565b6000602082840312156119a05761199f61153a565b5b60006119ae84828501611975565b91505092915050565b600069ffffffffffffffffffff82169050919050565b6119d6816119b7565b81146119e157600080fd5b50565b6000813590506119f3816119cd565b92915050565b600060208284031215611a0f57611a0e61153a565b5b6000611a1d848285016119e4565b91505092915050565b611a2f816119b7565b82525050565b600060c082019050611a4a6000830189611a26565b611a576020830188611821565b611a6460408301876115d0565b611a7160608301866118fa565b611a7e60808301856118fa565b611a8b60a0830184611a26565b979650505050505050565b611a9f8161184b565b82525050565b600067ffffffffffffffff82169050919050565b611ac281611aa5565b82525050565b6000606082019050611add6000830186611a96565b611aea6020830185611ab9565b611af760408301846115d0565b949350505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000611b5b602f83611605565b9150611b6682611aff565b604082019050919050565b60006020820190508181036000830152611b8a81611b4e565b9050919050565b7f43616c6c6572206973206e6f7420612076616c696461746f7200000000000000600082015250565b6000611bc7601983611605565b9150611bd282611b91565b602082019050919050565b60006020820190508181036000830152611bf681611bba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c3782611924565b915063ffffffff8203611c4d57611c4c611bfd565b5b600182019050919050565b611c6181611762565b82525050565b6000606082019050611c7c6000830186611a96565b611c8960208301856115d0565b611c966040830184611c58565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ce557607f821691505b602082108103611cf857611cf7611c9e565b5b50919050565b7f466c75785072696365466565643a20726f756e64204944000000000000000000600082015250565b6000611d34601783611605565b9150611d3f82611cfe565b602082019050919050565b60006020820190508181036000830152611d6381611d27565b9050919050565b7f4f6e6c792063616c6c61626c6520627920454f41000000000000000000000000600082015250565b6000611da0601483611605565b9150611dab82611d6a565b602082019050919050565b60006020820190508181036000830152611dcf81611d93565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000611e17601783611dd6565b9150611e2282611de1565b601782019050919050565b6000611e38826115fa565b611e428185611dd6565b9350611e52818560208601611616565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000611e94601183611dd6565b9150611e9f82611e5e565b601182019050919050565b6000611eb582611e0a565b9150611ec18285611e2d565b9150611ecc82611e87565b9150611ed88284611e2d565b91508190509392505050565b6000611eef826118f0565b9150611efa836118f0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f3357611f32611bfd565b5b828202905092915050565b6000611f49826118f0565b9150611f54836118f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f8957611f88611bfd565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611ffd826118f0565b9150600082036120105761200f611bfd565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612051602083611605565b915061205c8261201b565b602082019050919050565b6000602082019050818103600083015261208081612044565b905091905056fea26469706673582212202e016b20950fa3da4682e66b4619af4b5c631f26deea0843dfaf72de097d439464736f6c634300080e0033a2646970667358221220e81a7b4dbb3201bce4c2c54135c48fce51545812f0f1b3c65810b0f0fa77920b64736f6c634300080e0033",
  "devdoc": {
    "author": "fluxprotocol.org",
    "events": {
      "FluxPriceFeedCreated(bytes32,address)": {
        "params": {
          "id": "hash of the price pair of the deployed oracle",
          "oracle": "address of the deployed oracle"
        }
      },
      "Log(string)": {
        "params": {
          "message": "the logged message"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addressOfPricePair(string,uint8,address)": {
        "params": {
          "_decimals": "decimal of the price pair",
          "_pricePair": "ETH/USD",
          "_provider": "original provider of the price pair"
        }
      },
      "addressOfPricePairId(bytes32)": {
        "params": {
          "_id": "hash of the price pair string to query"
        }
      },
      "getId(string,uint8,address)": {
        "params": {
          "_decimals": "decimal of the price pair",
          "_pricePair": "ETH/USD",
          "_provider": "original provider of the price pair"
        }
      },
      "transmit(string[],uint8[],int192[],bool[],address)": {
        "params": {
          "_answers": "array of prices for associated price pairs",
          "_decimals": "array of decimals for associated price pairs (e.g. 3)",
          "_marketStatusAnswers": "array of market open/closed statuses",
          "_pricePairs": "array of price pairs strings (e.g. ETH/USD)",
          "_provider": "optional address of the provider, if different from msg.sender"
        }
      },
      "valueFor(bytes32)": {
        "params": {
          "_id": "hash of the price pair string to query"
        }
      }
    },
    "title": "Flux first-party price feed factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FluxPriceFeedCreated(bytes32,address)": {
        "notice": "indicates that a new oracle was created"
      },
      "Log(string)": {
        "notice": "to log error messages"
      }
    },
    "kind": "user",
    "methods": {
      "addressOfPricePair(string,uint8,address)": {
        "notice": "returns address of a price feed id"
      },
      "addressOfPricePairId(bytes32)": {
        "notice": "returns address of a price feed id"
      },
      "getId(string,uint8,address)": {
        "notice": "returns the hash of a price pair"
      },
      "transmit(string[],uint8[],int192[],bool[],address)": {
        "notice": "transmit submits an answer to a price feed or creates a new one if it does not exist"
      },
      "typeAndVersion()": {
        "notice": "returns factory's type and version"
      },
      "valueFor(bytes32)": {
        "notice": "answer from the most recent report of a certain price pair from factory"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1091,
        "contract": "src/contracts/vendor/flux/FluxPriceFeedFactory.sol:FluxPriceFeedFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1101,
        "contract": "src/contracts/vendor/flux/FluxPriceFeedFactory.sol:FluxPriceFeedFactory",
        "label": "fluxPriceFeeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_contract(FluxPriceFeed)1084)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(FluxPriceFeed)1084": {
        "encoding": "inplace",
        "label": "contract FluxPriceFeed",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_contract(FluxPriceFeed)1084)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract FluxPriceFeed)",
        "numberOfBytes": "32",
        "value": "t_contract(FluxPriceFeed)1084"
      }
    }
  }
}