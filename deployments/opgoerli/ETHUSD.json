{
  "address": "0x768e9a68bA9657C170649A642Abf81370183168E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_validator",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "aggregatorRoundId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int192",
          "name": "answer",
          "type": "int192"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "transmitter",
          "type": "address"
        }
      ],
      "name": "NewTransmission",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VALIDATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAggregatorRoundId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTransmissionDetails",
      "outputs": [
        {
          "internalType": "int192",
          "name": "_latestAnswer",
          "type": "int192"
        },
        {
          "internalType": "uint64",
          "name": "_latestTimestamp",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int192",
          "name": "_answer",
          "type": "int192"
        }
      ],
      "name": "transmit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typeAndVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x48ec8833ad8ca745bb2a5d269121cceb9ef2fb5a74848d5d547e603b2d5a625d",
  "receipt": {
    "to": null,
    "from": "0x2121245dcAD697f11244068AaD6EcbC301811239",
    "contractAddress": "0x768e9a68bA9657C170649A642Abf81370183168E",
    "transactionIndex": 0,
    "gasUsed": "1797450",
    "logsBloom": "0x
    "blockHash": "0xef56392fbe0852228ecb4c8208c6fe889ebf1303689d71f33db02ac63d59e840",
    "transactionHash": "0x48ec8833ad8ca745bb2a5d269121cceb9ef2fb5a74848d5d547e603b2d5a625d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2061276,
        "transactionHash": "0x48ec8833ad8ca745bb2a5d269121cceb9ef2fb5a74848d5d547e603b2d5a625d",
        "address": "0x768e9a68bA9657C170649A642Abf81370183168E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000002121245dcad697f11244068aad6ecbc301811239",
          "0x0000000000000000000000002121245dcad697f11244068aad6ecbc301811239"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xef56392fbe0852228ecb4c8208c6fe889ebf1303689d71f33db02ac63d59e840"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2061276,
        "transactionHash": "0x48ec8833ad8ca745bb2a5d269121cceb9ef2fb5a74848d5d547e603b2d5a625d",
        "address": "0x768e9a68bA9657C170649A642Abf81370183168E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926",
          "0x0000000000000000000000002121245dcad697f11244068aad6ecbc301811239",
          "0x0000000000000000000000002121245dcad697f11244068aad6ecbc301811239"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xef56392fbe0852228ecb4c8208c6fe889ebf1303689d71f33db02ac63d59e840"
      }
    ],
    "blockNumber": 2061276,
    "cumulativeGasUsed": "1797450",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2121245dcAD697f11244068AaD6EcbC301811239",
    8,
    "ETH/USD"
  ],
  "numDeployments": 1,
  "solcInputHash": "83713c02c02640d2cd1e3b8340799402",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"aggregatorRoundId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int192\",\"name\":\"answer\",\"type\":\"int192\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"}],\"name\":\"NewTransmission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAggregatorRoundId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTransmissionDetails\",\"outputs\":[{\"internalType\":\"int192\",\"name\":\"_latestAnswer\",\"type\":\"int192\"},{\"internalType\":\"uint64\",\"name\":\"_latestTimestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int192\",\"name\":\"_answer\",\"type\":\"int192\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"NewTransmission(uint32,int192,address)\":{\"params\":{\"aggregatorRoundId\":\"the round to which this report was assigned\",\"answer\":\"value posted by validator\",\"transmitter\":\"address from which the report was transmitted\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_decimals\":\"answers are stored in fixed-point format, with this many digits of precision\",\"_description\":\"short human-readable description of observable this contract's answers pertain to\",\"_validator\":\"the initial validator that can post data to this contract\"}},\"getAnswer(uint256)\":{\"params\":{\"_roundId\":\"the aggregator round of the target report\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoundData(uint80)\":{\"params\":{\"_roundId\":\"target aggregator round. Must fit in uint32\"},\"returns\":{\"answer\":\"answer of report from given _roundId\",\"answeredInRound\":\"_roundId\",\"roundId\":\"_roundId\",\"startedAt\":\"timestamp of block in which report from given _roundId was transmitted\",\"updatedAt\":\"timestamp of block in which report from given _roundId was transmitted\"}},\"getTimestamp(uint256)\":{\"params\":{\"_roundId\":\"aggregator round of target report\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"latestRoundData()\":{\"returns\":{\"answer\":\"answer of latest report\",\"answeredInRound\":\"aggregator round of latest report\",\"roundId\":\"aggregator round of latest report\",\"startedAt\":\"timestamp of block containing latest report\",\"updatedAt\":\"timestamp of block containing latest report\"}},\"latestTransmissionDetails()\":{\"returns\":{\"_latestAnswer\":\"value from latest report\",\"_latestTimestamp\":\"when the latest report was transmitted\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transmit(int192)\":{\"params\":{\"_answer\":\"latest answer\"}}},\"stateVariables\":{\"decimals\":{\"return\":\"answers are stored in fixed-point format, with this many digits of precision\",\"returns\":{\"_0\":\"answers are stored in fixed-point format, with this many digits of precision\"}}},\"version\":1},\"userdoc\":{\"events\":{\"NewTransmission(uint32,int192,address)\":{\"notice\":\"indicates that a new report was transmitted\"}},\"kind\":\"user\",\"methods\":{\"description()\":{\"notice\":\"human-readable description of observable this contract is reporting on\"},\"getAnswer(uint256)\":{\"notice\":\"answer of report from given aggregator round\"},\"getRoundData(uint80)\":{\"notice\":\"details for the given aggregator round\"},\"getTimestamp(uint256)\":{\"notice\":\"timestamp of block in which report from given aggregator round was transmitted\"},\"latestAnswer()\":{\"notice\":\"answer from the most recent report\"},\"latestRound()\":{\"notice\":\"Aggregator round in which last report was transmitted\"},\"latestRoundData()\":{\"notice\":\"aggregator details for the most recently transmitted report\"},\"latestTimestamp()\":{\"notice\":\"timestamp of block in which last report was transmitted\"},\"latestTransmissionDetails()\":{\"notice\":\"details about the most recent report\"},\"transmit(int192)\":{\"notice\":\"transmit is called to post a new report to the contract\"},\"version()\":{\"notice\":\"aggregator contract version\"}},\"notice\":\"Simple data posting on chain of a scalar value, compatible with Chainlink V2 and V3 aggregator interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/vendor/flux/FluxPriceFeed.sol\":\"FluxPriceFeed\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/FluxPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/**\\n * @notice Simple data posting on chain of a scalar value, compatible with Chainlink V2 and V3 aggregator interface\\n */\\ncontract FluxPriceFeed is AccessControl, AggregatorV2V3Interface {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\\\"VALIDATOR_ROLE\\\");\\n    uint32 public latestAggregatorRoundId;\\n\\n    // Transmission records the answer from the transmit transaction at\\n    // time timestamp\\n    struct Transmission {\\n        int192 answer; // 192 bits ought to be enough for anyone\\n        uint64 timestamp;\\n    }\\n    mapping(uint32 => Transmission) /* aggregator round ID */\\n        internal s_transmissions;\\n\\n    /**\\n     * @param _validator the initial validator that can post data to this contract\\n     * @param _decimals answers are stored in fixed-point format, with this many digits of precision\\n     * @param _description short human-readable description of observable this contract's answers pertain to\\n     */\\n    constructor(\\n        address _validator,\\n        uint8 _decimals,\\n        string memory _description\\n    ) {\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setupRole(VALIDATOR_ROLE, _validator);\\n        decimals = _decimals;\\n        s_description = _description;\\n    }\\n\\n    /*\\n     * Versioning\\n     */\\n    function typeAndVersion() external pure virtual returns (string memory) {\\n        return \\\"FluxPriceFeed 1.0.0\\\";\\n    }\\n\\n    /*\\n     * Transmission logic\\n     */\\n\\n    /**\\n     * @notice indicates that a new report was transmitted\\n     * @param aggregatorRoundId the round to which this report was assigned\\n     * @param answer value posted by validator\\n     * @param transmitter address from which the report was transmitted\\n     */\\n    event NewTransmission(uint32 indexed aggregatorRoundId, int192 answer, address transmitter);\\n\\n    /**\\n     * @notice details about the most recent report\\n     * @return _latestAnswer value from latest report\\n     * @return _latestTimestamp when the latest report was transmitted\\n     */\\n    function latestTransmissionDetails() external view returns (int192 _latestAnswer, uint64 _latestTimestamp) {\\n        require(msg.sender == tx.origin, \\\"Only callable by EOA\\\");\\n        return (s_transmissions[latestAggregatorRoundId].answer, s_transmissions[latestAggregatorRoundId].timestamp);\\n    }\\n\\n    /**\\n     * @notice transmit is called to post a new report to the contract\\n     * @param _answer latest answer\\n     */\\n    function transmit(int192 _answer) external {\\n        require(hasRole(VALIDATOR_ROLE, msg.sender), \\\"Caller is not a validator\\\");\\n\\n        // Check the report contents, and record the result\\n        latestAggregatorRoundId++;\\n        s_transmissions[latestAggregatorRoundId] = Transmission(_answer, uint64(block.timestamp));\\n\\n        emit NewTransmission(latestAggregatorRoundId, _answer, msg.sender);\\n    }\\n\\n    /*\\n     * v2 Aggregator interface\\n     */\\n\\n    /**\\n     * @notice answer from the most recent report\\n     */\\n    function latestAnswer() public view virtual override returns (int256) {\\n        return s_transmissions[latestAggregatorRoundId].answer;\\n    }\\n\\n    /**\\n     * @notice timestamp of block in which last report was transmitted\\n     */\\n    function latestTimestamp() public view virtual override returns (uint256) {\\n        return s_transmissions[latestAggregatorRoundId].timestamp;\\n    }\\n\\n    /**\\n     * @notice Aggregator round in which last report was transmitted\\n     */\\n    function latestRound() public view virtual override returns (uint256) {\\n        return latestAggregatorRoundId;\\n    }\\n\\n    /**\\n     * @notice answer of report from given aggregator round\\n     * @param _roundId the aggregator round of the target report\\n     */\\n    function getAnswer(uint256 _roundId) public view virtual override returns (int256) {\\n        if (_roundId > 0xFFFFFFFF) {\\n            return 0;\\n        }\\n        return s_transmissions[uint32(_roundId)].answer;\\n    }\\n\\n    /**\\n     * @notice timestamp of block in which report from given aggregator round was transmitted\\n     * @param _roundId aggregator round of target report\\n     */\\n    function getTimestamp(uint256 _roundId) public view virtual override returns (uint256) {\\n        if (_roundId > 0xFFFFFFFF) {\\n            return 0;\\n        }\\n        return s_transmissions[uint32(_roundId)].timestamp;\\n    }\\n\\n    /*\\n     * v3 Aggregator interface\\n     */\\n\\n    string private constant V3_NO_DATA_ERROR = \\\"No data present\\\";\\n\\n    /**\\n     * @return answers are stored in fixed-point format, with this many digits of precision\\n     */\\n    uint8 public immutable override decimals;\\n\\n    /**\\n     * @notice aggregator contract version\\n     */\\n    uint256 public constant override version = 1;\\n\\n    string internal s_description;\\n\\n    /**\\n     * @notice human-readable description of observable this contract is reporting on\\n     */\\n    function description() public view virtual override returns (string memory) {\\n        return s_description;\\n    }\\n\\n    /**\\n     * @notice details for the given aggregator round\\n     * @param _roundId target aggregator round. Must fit in uint32\\n     * @return roundId _roundId\\n     * @return answer answer of report from given _roundId\\n     * @return startedAt timestamp of block in which report from given _roundId was transmitted\\n     * @return updatedAt timestamp of block in which report from given _roundId was transmitted\\n     * @return answeredInRound _roundId\\n     */\\n    function getRoundData(uint80 _roundId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        require(_roundId <= 0xFFFFFFFF, V3_NO_DATA_ERROR);\\n        Transmission memory transmission = s_transmissions[uint32(_roundId)];\\n        return (_roundId, transmission.answer, transmission.timestamp, transmission.timestamp, _roundId);\\n    }\\n\\n    /**\\n     * @notice aggregator details for the most recently transmitted report\\n     * @return roundId aggregator round of latest report\\n     * @return answer answer of latest report\\n     * @return startedAt timestamp of block containing latest report\\n     * @return updatedAt timestamp of block containing latest report\\n     * @return answeredInRound aggregator round of latest report\\n     */\\n    function latestRoundData()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        roundId = latestAggregatorRoundId;\\n\\n        // Skipped for compatability with existing FluxAggregator in which latestRoundData never reverts.\\n        // require(roundId != 0, V3_NO_DATA_ERROR);\\n\\n        Transmission memory transmission = s_transmissions[uint32(roundId)];\\n        return (roundId, transmission.answer, transmission.timestamp, transmission.timestamp, roundId);\\n    }\\n}\\n\",\"keccak256\":\"0xd7c30bb96043508ea049ed6b7653d974981bb641bc8314531ce8a511064c8bf2\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x02a9c18fd33c5de5de54df13d923ddf7d76f70bc033bc27975374bf641207c85\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcb2f40bda00b52487beb7940f2da015deb59968c858bf7973d9a4313961f5392\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x582a2837f5116408a826d9600a23b87cbc64ea00a234ad43da459df69697a5fa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200241e3803806200241e833981810160405281019062000037919062000534565b620000697fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533620000cb60201b60201c565b6200009b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892684620000cb60201b60201c565b8160ff1660808160ff16815250508060039080519060200190620000c192919062000244565b5050505062000613565b620000dd8282620000e160201b60201c565b5050565b620000f38282620001d260201b60201c565b620001ce57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001736200023c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b8280546200025290620005de565b90600052602060002090601f016020900481019282620002765760008555620002c2565b82601f106200029157805160ff1916838001178555620002c2565b82800160010185558215620002c2579182015b82811115620002c1578251825591602001919060010190620002a4565b5b509050620002d19190620002d5565b5090565b5b80821115620002f0576000816000905550600101620002d6565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003358262000308565b9050919050565b620003478162000328565b81146200035357600080fd5b50565b60008151905062000367816200033c565b92915050565b600060ff82169050919050565b62000385816200036d565b81146200039157600080fd5b50565b600081519050620003a5816200037a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200040082620003b5565b810181811067ffffffffffffffff82111715620004225762000421620003c6565b5b80604052505050565b600062000437620002f4565b9050620004458282620003f5565b919050565b600067ffffffffffffffff821115620004685762000467620003c6565b5b6200047382620003b5565b9050602081019050919050565b60005b83811015620004a057808201518184015260208101905062000483565b83811115620004b0576000848401525b50505050565b6000620004cd620004c7846200044a565b6200042b565b905082815260208101848484011115620004ec57620004eb620003b0565b5b620004f984828562000480565b509392505050565b600082601f830112620005195762000518620003ab565b5b81516200052b848260208601620004b6565b91505092915050565b60008060006060848603121562000550576200054f620002fe565b5b6000620005608682870162000356565b9350506020620005738682870162000394565b925050604084015167ffffffffffffffff81111562000597576200059662000303565b5b620005a58682870162000501565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005f757607f821691505b6020821081036200060d576200060c620005af565b5b50919050565b608051611def6200062f600039600061056a0152611def6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806375b238fc116100c3578063b5ab58dc1161007c578063b5ab58dc14610396578063b633620c146103c6578063c49baebe146103f6578063d547741f14610414578063e5fe457714610430578063feaf968c1461044f5761014d565b806375b238fc146102bc5780638205bf6a146102da57806382b8ebc7146102f857806391d14854146103145780639a6fc8f514610344578063a217fddf146103785761014d565b806336568abe1161011557806336568abe1461020a57806350d25bcd1461022657806354fd4d50146102445780635ed63b4014610262578063668a0f02146102805780637284e4161461029e5761014d565b806301ffc9a714610152578063181f5a7714610182578063248a9ca3146101a05780632f2ff15d146101d0578063313ce567146101ec575b600080fd5b61016c6004803603810190610167919061139e565b610471565b60405161017991906113e6565b60405180910390f35b61018a6104eb565b604051610197919061149a565b60405180910390f35b6101ba60048036038101906101b591906114f2565b610528565b6040516101c7919061152e565b60405180910390f35b6101ea60048036038101906101e591906115a7565b610547565b005b6101f4610568565b6040516102019190611603565b60405180910390f35b610224600480360381019061021f91906115a7565b61058c565b005b61022e61060f565b60405161023b9190611637565b60405180910390f35b61024c61065b565b604051610259919061166b565b60405180910390f35b61026a610660565b60405161027791906116a5565b60405180910390f35b610288610676565b604051610295919061166b565b60405180910390f35b6102a6610696565b6040516102b3919061149a565b60405180910390f35b6102c4610728565b6040516102d1919061152e565b60405180910390f35b6102e261074c565b6040516102ef919061166b565b60405180910390f35b610312600480360381019061030d91906116f9565b6107a6565b005b61032e600480360381019061032991906115a7565b61097c565b60405161033b91906113e6565b60405180910390f35b61035e60048036038101906103599190611768565b6109e6565b60405161036f9594939291906117a4565b60405180910390f35b610380610b3c565b60405161038d919061152e565b60405180910390f35b6103b060048036038101906103ab9190611823565b610b43565b6040516103bd9190611637565b60405180910390f35b6103e060048036038101906103db9190611823565b610b95565b6040516103ed919061166b565b60405180910390f35b6103fe610bf5565b60405161040b919061152e565b60405180910390f35b61042e600480360381019061042991906115a7565b610c19565b005b610438610c3a565b604051610446929190611882565b60405180910390f35b610457610d3e565b6040516104689594939291906117a4565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104e457506104e382610e21565b5b9050919050565b60606040518060400160405280601381526020017f466c757850726963654665656420312e302e3000000000000000000000000000815250905090565b6000806000838152602001908152602001600020600101549050919050565b61055082610528565b61055981610e8b565b6105638383610e9f565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610594610f7f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f89061191d565b60405180910390fd5b61060b8282610f87565b5050565b600060026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900460170b60170b905090565b600181565b600160009054906101000a900463ffffffff1681565b6000600160009054906101000a900463ffffffff1663ffffffff16905090565b6060600380546106a59061196c565b80601f01602080910402602001604051908101604052809291908181526020018280546106d19061196c565b801561071e5780601f106106f35761010080835404028352916020019161071e565b820191906000526020600020905b81548152906001019060200180831161070157829003601f168201915b5050505050905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b600060026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160189054906101000a900467ffffffffffffffff1667ffffffffffffffff16905090565b6107d07f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c989263361097c565b61080f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610806906119e9565b60405180910390fd5b6001600081819054906101000a900463ffffffff168092919061083190611a38565b91906101000a81548163ffffffff021916908363ffffffff1602179055505060405180604001604052808260170b81526020014267ffffffffffffffff1681525060026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908360170b77ffffffffffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550905050600160009054906101000a900463ffffffff1663ffffffff167f17eabd0a66fa631f7537cefdd5df6aa25d5ac904cf7596e958d43a75a00d0d688233604051610971929190611a73565b60405180910390a250565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600080600063ffffffff8669ffffffffffffffffffff1611156040518060400160405280600f81526020017f4e6f20646174612070726573656e74000000000000000000000000000000000081525090610a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a70919061149a565b60405180910390fd5b506000600260008863ffffffff1663ffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900460170b60170b60170b81526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050868160000151826020015183602001518a8360170b93508267ffffffffffffffff1692508167ffffffffffffffff169150955095509550955095505091939590929450565b6000801b81565b600063ffffffff821115610b5a5760009050610b90565b600260008363ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900460170b60170b90505b919050565b600063ffffffff821115610bac5760009050610bf0565b600260008363ffffffff1663ffffffff16815260200190815260200160002060000160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1690505b919050565b7f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892681565b610c2282610528565b610c2b81610e8b565b610c358383610f87565b505050565b6000803273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca290611ae8565b60405180910390fd5b60026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900460170b60026000600160009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060000160189054906101000a900467ffffffffffffffff16915091509091565b6000806000806000600160009054906101000a900463ffffffff1663ffffffff1694506000600260008763ffffffff1663ffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900460170b60170b60170b81526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905085816000015182602001518360200151898360170b93508267ffffffffffffffff1692508167ffffffffffffffff16915095509550955095509550509091929394565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610e9c81610e97610f7f565b611068565b50565b610ea9828261097c565b610f7b57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610f20610f7f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b610f91828261097c565b1561106457600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611009610f7f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611072828261097c565b611101576110978173ffffffffffffffffffffffffffffffffffffffff166014611105565b6110a58360001c6020611105565b6040516020016110b6929190611bdc565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f8919061149a565b60405180910390fd5b5050565b6060600060028360026111189190611c16565b6111229190611c70565b67ffffffffffffffff81111561113b5761113a611cc6565b5b6040519080825280601f01601f19166020018201604052801561116d5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106111a5576111a4611cf5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061120957611208611cf5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026112499190611c16565b6112539190611c70565b90505b60018111156112f3577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061129557611294611cf5565b5b1a60f81b8282815181106112ac576112ab611cf5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806112ec90611d24565b9050611256565b5060008414611337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132e90611d99565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61137b81611346565b811461138657600080fd5b50565b60008135905061139881611372565b92915050565b6000602082840312156113b4576113b3611341565b5b60006113c284828501611389565b91505092915050565b60008115159050919050565b6113e0816113cb565b82525050565b60006020820190506113fb60008301846113d7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561143b578082015181840152602081019050611420565b8381111561144a576000848401525b50505050565b6000601f19601f8301169050919050565b600061146c82611401565b611476818561140c565b935061148681856020860161141d565b61148f81611450565b840191505092915050565b600060208201905081810360008301526114b48184611461565b905092915050565b6000819050919050565b6114cf816114bc565b81146114da57600080fd5b50565b6000813590506114ec816114c6565b92915050565b60006020828403121561150857611507611341565b5b6000611516848285016114dd565b91505092915050565b611528816114bc565b82525050565b6000602082019050611543600083018461151f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061157482611549565b9050919050565b61158481611569565b811461158f57600080fd5b50565b6000813590506115a18161157b565b92915050565b600080604083850312156115be576115bd611341565b5b60006115cc858286016114dd565b92505060206115dd85828601611592565b9150509250929050565b600060ff82169050919050565b6115fd816115e7565b82525050565b600060208201905061161860008301846115f4565b92915050565b6000819050919050565b6116318161161e565b82525050565b600060208201905061164c6000830184611628565b92915050565b6000819050919050565b61166581611652565b82525050565b6000602082019050611680600083018461165c565b92915050565b600063ffffffff82169050919050565b61169f81611686565b82525050565b60006020820190506116ba6000830184611696565b92915050565b60008160170b9050919050565b6116d6816116c0565b81146116e157600080fd5b50565b6000813590506116f3816116cd565b92915050565b60006020828403121561170f5761170e611341565b5b600061171d848285016116e4565b91505092915050565b600069ffffffffffffffffffff82169050919050565b61174581611726565b811461175057600080fd5b50565b6000813590506117628161173c565b92915050565b60006020828403121561177e5761177d611341565b5b600061178c84828501611753565b91505092915050565b61179e81611726565b82525050565b600060a0820190506117b96000830188611795565b6117c66020830187611628565b6117d3604083018661165c565b6117e0606083018561165c565b6117ed6080830184611795565b9695505050505050565b61180081611652565b811461180b57600080fd5b50565b60008135905061181d816117f7565b92915050565b60006020828403121561183957611838611341565b5b60006118478482850161180e565b91505092915050565b611859816116c0565b82525050565b600067ffffffffffffffff82169050919050565b61187c8161185f565b82525050565b60006040820190506118976000830185611850565b6118a46020830184611873565b9392505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000611907602f8361140c565b9150611912826118ab565b604082019050919050565b60006020820190508181036000830152611936816118fa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061198457607f821691505b6020821081036119975761199661193d565b5b50919050565b7f43616c6c6572206973206e6f7420612076616c696461746f7200000000000000600082015250565b60006119d360198361140c565b91506119de8261199d565b602082019050919050565b60006020820190508181036000830152611a02816119c6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a4382611686565b915063ffffffff8203611a5957611a58611a09565b5b600182019050919050565b611a6d81611569565b82525050565b6000604082019050611a886000830185611850565b611a956020830184611a64565b9392505050565b7f4f6e6c792063616c6c61626c6520627920454f41000000000000000000000000600082015250565b6000611ad260148361140c565b9150611add82611a9c565b602082019050919050565b60006020820190508181036000830152611b0181611ac5565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000611b49601783611b08565b9150611b5482611b13565b601782019050919050565b6000611b6a82611401565b611b748185611b08565b9350611b8481856020860161141d565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000611bc6601183611b08565b9150611bd182611b90565b601182019050919050565b6000611be782611b3c565b9150611bf38285611b5f565b9150611bfe82611bb9565b9150611c0a8284611b5f565b91508190509392505050565b6000611c2182611652565b9150611c2c83611652565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c6557611c64611a09565b5b828202905092915050565b6000611c7b82611652565b9150611c8683611652565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611cbb57611cba611a09565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611d2f82611652565b915060008203611d4257611d41611a09565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611d8360208361140c565b9150611d8e82611d4d565b602082019050919050565b60006020820190508181036000830152611db281611d76565b905091905056fea26469706673582212203a6799693fdcf95066a6d37c6127babb9499a7c905c4e2a0966618139ae5cfbe64736f6c634300080e0033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "NewTransmission(uint32,int192,address)": {
        "params": {
          "aggregatorRoundId": "the round to which this report was assigned",
          "answer": "value posted by validator",
          "transmitter": "address from which the report was transmitted"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_decimals": "answers are stored in fixed-point format, with this many digits of precision",
          "_description": "short human-readable description of observable this contract's answers pertain to",
          "_validator": "the initial validator that can post data to this contract"
        }
      },
      "getAnswer(uint256)": {
        "params": {
          "_roundId": "the aggregator round of the target report"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoundData(uint80)": {
        "params": {
          "_roundId": "target aggregator round. Must fit in uint32"
        },
        "returns": {
          "answer": "answer of report from given _roundId",
          "answeredInRound": "_roundId",
          "roundId": "_roundId",
          "startedAt": "timestamp of block in which report from given _roundId was transmitted",
          "updatedAt": "timestamp of block in which report from given _roundId was transmitted"
        }
      },
      "getTimestamp(uint256)": {
        "params": {
          "_roundId": "aggregator round of target report"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "latestRoundData()": {
        "returns": {
          "answer": "answer of latest report",
          "answeredInRound": "aggregator round of latest report",
          "roundId": "aggregator round of latest report",
          "startedAt": "timestamp of block containing latest report",
          "updatedAt": "timestamp of block containing latest report"
        }
      },
      "latestTransmissionDetails()": {
        "returns": {
          "_latestAnswer": "value from latest report",
          "_latestTimestamp": "when the latest report was transmitted"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transmit(int192)": {
        "params": {
          "_answer": "latest answer"
        }
      }
    },
    "stateVariables": {
      "decimals": {
        "return": "answers are stored in fixed-point format, with this many digits of precision",
        "returns": {
          "_0": "answers are stored in fixed-point format, with this many digits of precision"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewTransmission(uint32,int192,address)": {
        "notice": "indicates that a new report was transmitted"
      }
    },
    "kind": "user",
    "methods": {
      "description()": {
        "notice": "human-readable description of observable this contract is reporting on"
      },
      "getAnswer(uint256)": {
        "notice": "answer of report from given aggregator round"
      },
      "getRoundData(uint80)": {
        "notice": "details for the given aggregator round"
      },
      "getTimestamp(uint256)": {
        "notice": "timestamp of block in which report from given aggregator round was transmitted"
      },
      "latestAnswer()": {
        "notice": "answer from the most recent report"
      },
      "latestRound()": {
        "notice": "Aggregator round in which last report was transmitted"
      },
      "latestRoundData()": {
        "notice": "aggregator details for the most recently transmitted report"
      },
      "latestTimestamp()": {
        "notice": "timestamp of block in which last report was transmitted"
      },
      "latestTransmissionDetails()": {
        "notice": "details about the most recent report"
      },
      "transmit(int192)": {
        "notice": "transmit is called to post a new report to the contract"
      },
      "version()": {
        "notice": "aggregator contract version"
      }
    },
    "notice": "Simple data posting on chain of a scalar value, compatible with Chainlink V2 and V3 aggregator interface",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4218,
        "contract": "src/contracts/vendor/flux/FluxPriceFeed.sol:FluxPriceFeed",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4213_storage)"
      },
      {
        "astId": 35908,
        "contract": "src/contracts/vendor/flux/FluxPriceFeed.sol:FluxPriceFeed",
        "label": "latestAggregatorRoundId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 35918,
        "contract": "src/contracts/vendor/flux/FluxPriceFeed.sol:FluxPriceFeed",
        "label": "s_transmissions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_struct(Transmission)35913_storage)"
      },
      {
        "astId": 36132,
        "contract": "src/contracts/vendor/flux/FluxPriceFeed.sol:FluxPriceFeed",
        "label": "s_description",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int192": {
        "encoding": "inplace",
        "label": "int192",
        "numberOfBytes": "24"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4213_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4213_storage"
      },
      "t_mapping(t_uint32,t_struct(Transmission)35913_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct FluxPriceFeed.Transmission)",
        "numberOfBytes": "32",
        "value": "t_struct(Transmission)35913_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)4213_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4210,
            "contract": "src/contracts/vendor/flux/FluxPriceFeed.sol:FluxPriceFeed",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4212,
            "contract": "src/contracts/vendor/flux/FluxPriceFeed.sol:FluxPriceFeed",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transmission)35913_storage": {
        "encoding": "inplace",
        "label": "struct FluxPriceFeed.Transmission",
        "members": [
          {
            "astId": 35910,
            "contract": "src/contracts/vendor/flux/FluxPriceFeed.sol:FluxPriceFeed",
            "label": "answer",
            "offset": 0,
            "slot": "0",
            "type": "t_int192"
          },
          {
            "astId": 35912,
            "contract": "src/contracts/vendor/flux/FluxPriceFeed.sol:FluxPriceFeed",
            "label": "timestamp",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}