{
  "address": "0x51770cb17ae85cB7CEFeCB5BF86eD6547697801a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_updatePeriod",
          "type": "uint256"
        }
      ],
      "name": "configurePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "consultKrAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_kreskoAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_updatePeriod",
          "type": "uint256"
        }
      ],
      "name": "initPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "krAssets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "internalType": "struct UQ.uq112x112",
          "name": "price0Average",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint224",
              "name": "_x",
              "type": "uint224"
            }
          ],
          "internalType": "struct UQ.uq112x112",
          "name": "price1Average",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price0CumulativeLast",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price1CumulativeLast",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "blockTimestampLast",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "updatePeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3550f9dbb179fb3a6021ccf82710b51e3d45dddaae5699af37a0a52bd9c8c22c",
  "receipt": {
    "to": null,
    "from": "0x2121245dcAD697f11244068AaD6EcbC301811239",
    "contractAddress": "0x51770cb17ae85cB7CEFeCB5BF86eD6547697801a",
    "transactionIndex": 0,
    "gasUsed": "2256951",
    "logsBloom": "0x
    "blockHash": "0xb4eb87767acc168a707a2e0bcf3d3cd6dc92a5412738ab62a9f3b00bf5e7b55f",
    "transactionHash": "0x3550f9dbb179fb3a6021ccf82710b51e3d45dddaae5699af37a0a52bd9c8c22c",
    "logs": [],
    "blockNumber": 3601044,
    "cumulativeGasUsed": "2256951",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x38bf03AA1a152AAF696e79b4b4772a4F95Ef21f0"
  ],
  "numDeployments": 1,
  "solcInputHash": "04fc497da52931b7da2a9429110f9986",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_updatePeriod\",\"type\":\"uint256\"}],\"name\":\"configurePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"consultKrAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_updatePeriod\",\"type\":\"uint256\"}],\"name\":\"initPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"krAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price0Average\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price1Average\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"configurePair(address,uint256)\":{\"params\":{\"_pairAddress\":\"Pair address\",\"_updatePeriod\":\"Update period (TWAP)\"}},\"consult(address,address,uint256)\":{\"params\":{\"_amountIn\":\"Amount in of the asset\",\"_pairAddress\":\"Pair address\",\"_token\":\"Token address\"}},\"consultKrAsset(address,uint256)\":{\"params\":{\"_amountIn\":\"Amount to get value for\",\"_kreskoAsset\":\"Kresko asset address\"}},\"initPair(address,address,uint256)\":{\"params\":{\"_kreskoAsset\":\"Kresko asset in the pair\",\"_pairAddress\":\"Pair address\",\"_updatePeriod\":\"Update period (TWAP)\"}},\"update(address)\":{\"params\":{\"_pairAddress\":\"Pair address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configurePair(address,uint256)\":{\"notice\":\"Configures existing values of an AMM pair\"},\"consult(address,address,uint256)\":{\"notice\":\"General consult function, gets a value for _amountIn\"},\"consultKrAsset(address,uint256)\":{\"notice\":\"Get the AMM price for an amount of krAsset\"},\"initPair(address,address,uint256)\":{\"notice\":\"Initializes an AMM pair to the oracle\"},\"update(address)\":{\"notice\":\"Updates the oracle values for a pair\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/minter/UniswapV2Oracle.sol\":\"UniswapV2Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity <0.9.0;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @author Kresko\\n * @title Error codes\\n * @notice Kresko-specific revert return values and their explanation\\n * @dev First number indicates the domain for the error\\n */\\nlibrary Error {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Diamond                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // Preserve readability for the diamond proxy\\n    string public constant DIAMOND_INVALID_FUNCTION_SIGNATURE = \\\"krDiamond: function does not exist\\\";\\n    string public constant DIAMOND_INVALID_PENDING_OWNER = \\\"krDiamond: Must be pending contract owner\\\";\\n    string public constant DIAMOND_INVALID_OWNER = \\\"krDiamond: Must be diamond owner\\\";\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   1. General                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_OWNER = \\\"100\\\"; // The sender must be owner\\n    string public constant NOT_OPERATOR = \\\"101\\\"; // The sender must be operator\\n    string public constant ZERO_WITHDRAW = \\\"102\\\"; // Withdraw must be greater than 0\\n    string public constant ZERO_DEPOSIT = \\\"103\\\"; // Deposit must be greater than 0\\n    string public constant ZERO_ADDRESS = \\\"104\\\"; // Address provided cannot be address(0)\\n    string public constant ALREADY_INITIALIZED = \\\"105\\\"; // Contract has already been initialized\\n    string public constant RE_ENTRANCY = \\\"106\\\"; // Function does not allow re-entrant calls\\n    string public constant NOT_ENOUGH_BALANCE = \\\"107\\\"; // Transfer of rebasing token exceeds value\\n    string public constant NOT_ENOUGH_ALLOWANCE = \\\"108\\\"; // TransferFrom of rebasing token exceeds allowance\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   2. Minter                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_LIQUIDATABLE = \\\"200\\\"; // Account has collateral deposits exceeding minCollateralValue\\n    string public constant ZERO_MINT = \\\"201\\\"; // Mint amount must be greater than 0\\n    string public constant ZERO_BURN = \\\"202\\\"; // Burn amount must be greater than 0\\n    string public constant ADDRESS_INVALID_ORACLE = \\\"203\\\"; // Oracle address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_NRWT = \\\"204\\\"; // Underlying rebasing token address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_FEERECIPIENT = \\\"205\\\"; // Fee recipient address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_COLLATERAL = \\\"206\\\"; // Collateral address cant be set to address(0)\\n    string public constant COLLATERAL_EXISTS = \\\"207\\\"; // Collateral has already been added into the protocol\\n    string public constant COLLATERAL_INVALID_FACTOR = \\\"208\\\"; // cFactor must be greater than 1FP\\n    string public constant COLLATERAL_WITHDRAW_OVERFLOW = \\\"209\\\"; // Withdraw amount cannot reduce accounts collateral value under minCollateralValue\\n    string public constant KRASSET_INVALID_FACTOR = \\\"210\\\"; // kFactor must be greater than 1FP\\n    string public constant KRASSET_BURN_AMOUNT_OVERFLOW = \\\"211\\\"; // Repaying more than account has debt\\n    string public constant KRASSET_EXISTS = \\\"212\\\"; // KrAsset is already added\\n    string public constant PARAM_CLOSE_FEE_TOO_HIGH = \\\"213\\\"; // \\\"Close fee exceeds MAX_CLOSE_FEE\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_LOW = \\\"214\\\"; // \\\"Liquidation incentive less than MIN_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_HIGH = \\\"215\\\"; // \\\"Liquidation incentive greater than MAX_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_MIN_COLLATERAL_RATIO_LOW = \\\"216\\\"; // Minimum collateral ratio less than MIN_COLLATERALIZATION_RATIO\\n    string public constant PARAM_MIN_DEBT_AMOUNT_HIGH = \\\"217\\\"; // Minimum debt param argument exceeds MAX_DEBT_VALUE\\n    string public constant COLLATERAL_DOESNT_EXIST = \\\"218\\\"; // Collateral does not exist within the protocol\\n    string public constant KRASSET_DOESNT_EXIST = \\\"219\\\"; // KrAsset does not exist within the protocol\\n    string public constant KRASSET_NOT_MINTABLE = \\\"220\\\"; // KrAsset is not mintable\\n    string public constant KRASSET_SYMBOL_EXISTS = \\\"221\\\"; // KrAsset with this symbol is already within the protocl\\n    string public constant KRASSET_COLLATERAL_LOW = \\\"222\\\"; // Collateral deposits do not cover the amount being minted\\n    string public constant KRASSET_MINT_AMOUNT_LOW = \\\"223\\\"; // Debt position must be greater than the minimum debt position value\\n    string public constant KRASSET_MAX_SUPPLY_REACHED = \\\"224\\\"; // KrAsset being minted has reached its current supply limit\\n    string public constant SELF_LIQUIDATION = \\\"225\\\"; // Account cannot liquidate itself\\n    string public constant ZERO_REPAY = \\\"226\\\"; // Account cannot liquidate itself\\n    string public constant STALE_PRICE = \\\"227\\\"; // Price for the asset is stale\\n    string public constant LIQUIDATION_OVERFLOW = \\\"228\\\"; // Repaying more USD value than allowed\\n    string public constant ADDRESS_INVALID_SAFETY_COUNCIL = \\\"229\\\"; // Account responsible for the safety council role must be a multisig\\n    string public constant SAFETY_COUNCIL_EXISTS = \\\"230\\\"; // Only one council role can exist\\n    string public constant NOT_SAFETY_COUNCIL = \\\"231\\\"; // Sender must have the role `Role.SAFETY_COUNCIL`\\n    string public constant ACTION_PAUSED_FOR_ASSET = \\\"232\\\"; // This action is currently paused for this asset\\n    string public constant INVALID_ASSET_SUPPLIED = \\\"233\\\"; // Asset supplied is not a collateral nor a krAsset\\n    string public constant KRASSET_NOT_ANCHOR = \\\"234\\\"; // Address is not the anchor for the krAsset\\n    string public constant INVALID_LT = \\\"235\\\"; // Liquidation threshold is greater than minimum collateralization ratio\\n    string public constant COLLATERAL_INSUFFICIENT_AMOUNT = \\\"236\\\"; // Insufficient amount of collateral to complete the operation\\n    string public constant MULTISIG_NOT_ENOUGH_OWNERS = \\\"237\\\"; // Multisig has invalid amount of owners\\n    string public constant PARAM_OPEN_FEE_TOO_HIGH = \\\"238\\\"; // \\\"Close fee exceeds MAX_OPEN_FEE\\\"\\n    string public constant INVALID_FEE_TYPE = \\\"239\\\"; // \\\"Invalid fee type\\n    string public constant KRASSET_INVALID_ANCHOR = \\\"240\\\"; // krAsset anchor does not support the correct interfaceId\\n    string public constant KRASSET_INVALID_CONTRACT = \\\"241\\\"; // krAsset does not support the correct interfaceId\\n    string public constant KRASSET_MARKET_CLOSED = \\\"242\\\"; // KrAsset's market is currently closed\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   3. Staking                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REWARD_PER_BLOCK_MISSING = \\\"300\\\"; // Each reward token must have a reward per block value\\n    string public constant REWARD_TOKENS_MISSING = \\\"301\\\"; // Pool must include an array of reward token addresses\\n    string public constant POOL_EXISTS = \\\"302\\\"; // Pool with this deposit token already exists\\n    string public constant POOL_DOESNT_EXIST = \\\"303\\\"; // Pool with this deposit token does not exist\\n    string public constant ADDRESS_INVALID_REWARD_RECIPIENT = \\\"304\\\"; // Reward recipient cant be address(0)\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   4. Libraries                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant ARRAY_OUT_OF_BOUNDS = \\\"400\\\"; // Array out of bounds error\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   5. KrAsset                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REBASING_DENOMINATOR_LOW = \\\"500\\\"; // denominator of rebases must be >= 1\\n    string public constant ISSUER_NOT_KRESKO = \\\"501\\\"; // issue must be done by kresko\\n    string public constant REDEEMER_NOT_KRESKO = \\\"502\\\"; // redeem must be done by kresko\\n    string public constant DESTROY_OVERFLOW = \\\"503\\\"; // trying to destroy more than allowed\\n    string public constant ISSUE_OVERFLOW = \\\"504\\\"; // trying to destroy more than allowed\\n    string public constant MINT_OVERFLOW = \\\"505\\\"; // trying to destroy more than allowed\\n    string public constant DEPOSIT_OVERFLOW = \\\"506\\\"; // trying to destroy more than allowed\\n    string public constant REDEEM_OVERFLOW = \\\"507\\\"; // trying to destroy more than allowed\\n    string public constant WITHDRAW_OVERFLOW = \\\"508\\\"; // trying to destroy more than allowed\\n    string public constant ZERO_SHARES = \\\"509\\\"; // amount of shares must be greater than 0\\n    string public constant ZERO_ASSETS = \\\"510\\\"; // amount of assets must be greater than 0\\n    string public constant INVALID_SCALED_AMOUNT = \\\"511\\\"; // amount of debt scaled must be greater than 0\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              6. STABILITY RATES                            */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant STABILITY_RATES_ALREADY_INITIALIZED = \\\"601\\\"; // stability rates for the asset are already initialized\\n    string public constant INVALID_OPTIMAL_RATE = \\\"602\\\"; // the optimal price rate configured is less than 1e27 for the asset\\n    string public constant INVALID_PRICE_RATE_DELTA = \\\"603\\\"; // the price rate delta configured is less than 1e27 for the asset\\n    string public constant STABILITY_RATES_NOT_INITIALIZED = \\\"604\\\"; // the stability rates for the asset are not initialized\\n    string public constant STABILITY_RATE_OVERFLOW = \\\"605\\\"; // the stability rates is > max uint128\\n    string public constant DEBT_INDEX_OVERFLOW = \\\"606\\\"; // the debt index is > max uint128\\n    string public constant KISS_NOT_SET = \\\"607\\\"; // the debt index is > max uint128\\n    string public constant STABILITY_RATE_REPAYMENT_AMOUNT_ZERO = \\\"608\\\"; // interest being repaid cannot be 0\\n    string public constant STABILITY_RATE_INTEREST_IS_ZERO = \\\"609\\\"; // account must have accrued interest to repay it\\n    string public constant INTEREST_REPAY_NOT_PARTIAL = \\\"610\\\"; // account must have accrued interest to repay it\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              7. AMM ORACLE                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant PAIR_ADDRESS_IS_ZERO = \\\"701\\\"; // Pair address to configure cannot be zero\\n    string public constant INVALID_UPDATE_PERIOD = \\\"702\\\"; // Update period must be greater than the minimum\\n    string public constant PAIR_ALREADY_EXISTS = \\\"703\\\"; // Pair with the address is already initialized\\n    string public constant PAIR_DOES_NOT_EXIST = \\\"704\\\"; // Pair supplied does not exist\\n    string public constant INVALID_LIQUIDITY = \\\"706\\\"; // Pair initializaition requires that the pair has liquidity\\n    string public constant UPDATE_PERIOD_NOT_FINISHED = \\\"707\\\"; // Update can only be called once per update period\\n    string public constant INVALID_PAIR = \\\"708\\\"; // Pair being consulted does not have the token that the price was requested for\\n}\\n\",\"keccak256\":\"0x4535599010fb8a0c4d4155feecd7f3890097ddb3041e69eb55d3f85cfe408212\",\"license\":\"MIT\"},\"src/contracts/minter/UniswapV2Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../vendor/uniswap/v2-periphery/libraries/UQ.sol\\\";\\nimport \\\"../vendor/uniswap/v2-periphery/libraries/UniswapV2Library.sol\\\";\\nimport \\\"../libs/Errors.sol\\\";\\n\\ncontract UniswapV2Oracle {\\n    using UQ for *;\\n\\n    struct PairData {\\n        UQ.uq112x112 price0Average;\\n        UQ.uq112x112 price1Average;\\n        address token0;\\n        address token1;\\n        uint256 price0CumulativeLast;\\n        uint256 price1CumulativeLast;\\n        uint32 blockTimestampLast;\\n        uint256 updatePeriod;\\n    }\\n    mapping(address => PairData) public pairs;\\n    mapping(address => address) public krAssets;\\n\\n    IUniswapV2Factory public immutable factory;\\n    address public owner;\\n\\n    constructor(address _factory) {\\n        factory = IUniswapV2Factory(_factory);\\n        owner = msg.sender;\\n    }\\n\\n    ///@notice Returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        // solhint-disable not-rely-on-time\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    /**\\n     * @notice Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n     * @param _pairAddress Pair address\\n     */\\n    function currentCumulativePrices(address _pairAddress)\\n        internal\\n        view\\n        returns (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(_pairAddress).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(_pairAddress).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(_pairAddress).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint256(UQ.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint256(UQ.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n\\n    /**\\n     * @notice Initializes an AMM pair to the oracle\\n     * @param _pairAddress Pair address\\n     * @param _kreskoAsset Kresko asset in the pair\\n     * @param _updatePeriod Update period (TWAP)\\n     */\\n    function initPair(\\n        address _pairAddress,\\n        address _kreskoAsset,\\n        uint256 _updatePeriod\\n    ) external {\\n        require(msg.sender == owner, Error.NOT_OWNER);\\n        require(_pairAddress != address(0), Error.PAIR_ADDRESS_IS_ZERO);\\n        require(_updatePeriod > 15 minutes, Error.INVALID_UPDATE_PERIOD);\\n        require(pairs[_pairAddress].token0 == address(0), Error.PAIR_ALREADY_EXISTS);\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_pairAddress);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n        require(token0 != address(0) && token1 != address(0), Error.PAIR_DOES_NOT_EXIST);\\n        if (_kreskoAsset == token0 || _kreskoAsset == token1) {\\n            krAssets[_kreskoAsset] = _pairAddress;\\n        }\\n\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, Error.INVALID_LIQUIDITY); // ensure that there's liquidity in the pair\\n        pairs[_pairAddress].token0 = token0;\\n        pairs[_pairAddress].token1 = token1;\\n        pairs[_pairAddress].price0CumulativeLast = pair.price0CumulativeLast();\\n        pairs[_pairAddress].price1CumulativeLast = pair.price1CumulativeLast();\\n        pairs[_pairAddress].updatePeriod = _updatePeriod;\\n        pairs[_pairAddress].blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    /**\\n     * @notice Configures existing values of an AMM pair\\n     * @param _pairAddress Pair address\\n     * @param _updatePeriod Update period (TWAP)\\n     */\\n    function configurePair(address _pairAddress, uint256 _updatePeriod) external {\\n        require(msg.sender == owner, Error.NOT_OWNER);\\n        require(\\n            pairs[_pairAddress].token0 != address(0) && pairs[_pairAddress].token1 != address(0),\\n            Error.PAIR_DOES_NOT_EXIST\\n        );\\n        pairs[_pairAddress].updatePeriod = _updatePeriod;\\n    }\\n\\n    /**\\n     * @notice Updates the oracle values for a pair\\n     * @param _pairAddress Pair address\\n     */\\n    function update(address _pairAddress) external {\\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = currentCumulativePrices(\\n            _pairAddress\\n        );\\n\\n        PairData storage data = pairs[_pairAddress];\\n        require(data.blockTimestampLast != 0, Error.PAIR_DOES_NOT_EXIST);\\n\\n        uint32 timeElapsed = blockTimestamp - data.blockTimestampLast; // overflow is desired\\n        // ensure that at least one full period has passed since the last update\\n        require(timeElapsed >= data.updatePeriod, Error.UPDATE_PERIOD_NOT_FINISHED);\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        data.price0Average = UQ.uq112x112(uint224((price0Cumulative - data.price0CumulativeLast) / timeElapsed));\\n        data.price1Average = UQ.uq112x112(uint224((price1Cumulative - data.price1CumulativeLast) / timeElapsed));\\n\\n        data.price0CumulativeLast = price0Cumulative;\\n        data.price1CumulativeLast = price1Cumulative;\\n        data.blockTimestampLast = blockTimestamp;\\n    }\\n\\n    /**\\n     * @notice Get the AMM price for an amount of krAsset\\n     * @param _kreskoAsset Kresko asset address\\n     * @param _amountIn Amount to get value for\\n     */\\n    function consultKrAsset(address _kreskoAsset, uint256 _amountIn) external view returns (uint256 amountOut) {\\n        PairData memory data = pairs[krAssets[_kreskoAsset]];\\n        if (_kreskoAsset == data.token0) {\\n            amountOut = data.price0Average.mul(_amountIn).decode144();\\n        } else {\\n            if (_kreskoAsset != data.token1) {\\n                amountOut = 0;\\n            } else {\\n                amountOut = data.price1Average.mul(_amountIn).decode144();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice General consult function, gets a value for _amountIn\\n     * @param _pairAddress Pair address\\n     * @param _token Token address\\n     * @param _amountIn Amount in of the asset\\n     */\\n    function consult(\\n        address _pairAddress,\\n        address _token,\\n        uint256 _amountIn\\n    ) external view returns (uint256 amountOut) {\\n        PairData memory data = pairs[_pairAddress];\\n        if (_token == data.token0) {\\n            amountOut = data.price0Average.mul(_amountIn).decode144();\\n        } else {\\n            require(_token == data.token1, Error.INVALID_PAIR);\\n            amountOut = data.price1Average.mul(_amountIn).decode144();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4707ebdcfbdac001b457ffec53bf0a4de90da5b4533ef02c18d7ee441b4193e7\",\"license\":\"MIT\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x77483b717fd86de5cd25e59fb77d890a631951dd2b50152c237e4293cc9ce5f1\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x26726f18a897fb67275ebf22b5d24c14c8f45d423d3d800d64abe0d0cf4d4df2\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\",\"keccak256\":\"0xee2a1432dfe3a83486a1482e1e1f150f71b5bdf59164d25ef1692d0b2b0fcf00\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity <=0.8.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\",\"keccak256\":\"0x7cb78d9f46e455ec0aa17e06457826de705c8e9f96cbe231a0834db6af15223c\",\"license\":\"GPL-2.0-or-later\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x72f209fb342d59f56d357592a08f9f41d9f2f68f22d9f5c8c29b2347b148ba06\",\"license\":\"MIT\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/SafeMath.sol\":{\"content\":\"pragma solidity >=0.6.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x735bec1062e7378a3cdb8570f0134b5ede54e4b51a35b316ffee2a1994eb56be\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/UQ.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.4.0 <0.8.0;\\n\\nimport \\\"./BitMath.sol\\\";\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./Babylonian.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary UQ {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\\"UQ::mul: overflow\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, \\\"UQ::muli: overflow\\\");\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= uint112(-1), \\\"UQ::muluq: upper overflow\\\");\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= type(uint224).max, \\\"UQ::muluq: sum overflow\\\");\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x > 0, \\\"UQ::divuq: division by zero\\\");\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x <= uint144(-1)) {\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n            require(value <= type(uint224).max, \\\"UQ::divuq: overflow\\\");\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result <= type(uint224).max, \\\"UQ::divuq: overflow\\\");\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"UQ::fraction: division by zero\\\");\\n        if (numerator == 0) return UQ.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= type(uint224).max, \\\"UQ::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= type(uint224).max, \\\"UQ::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"UQ::reciprocal: reciprocal of zero\\\");\\n        require(self._x != 1, \\\"UQ::reciprocal: overflow\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0x9f142568eb70302964701f8c3049a5830d9bbf47eeaaf6105db488b57dea4fae\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../v2-core/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../v2-core/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        pair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a2bca1971809444c9bf86f192fec864a0fb3e8b9d7c9fd681742bb12d623efe\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620028f1380380620028f18339818101604052810190620000379190620000cd565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000147565b600081519050620000c7816200012d565b92915050565b600060208284031215620000e057600080fd5b6000620000f084828501620000b6565b91505092915050565b600062000106826200010d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200013881620000f9565b81146200014457600080fd5b50565b60805160601c61278c6200016560003980611972525061278c6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063813c3c9311610066578063813c3c931461011c5780638da5cb5b1461014c578063b50d882c1461016a578063c45a01551461019a578063fe33b302146101b857610093565b80631c1b87721461009857806352244ec8146100b45780635b10f7ac146100d0578063636cfa0c146100ec575b600080fd5b6100b260048036038101906100ad9190612302565b6101ef565b005b6100ce60048036038101906100c991906123a3565b6104fa565b005b6100ea60048036038101906100e59190612354565b6107b1565b005b61010660048036038101906101019190612354565b6111e7565b60405161011391906125cd565b60405180910390f35b61013660048036038101906101319190612302565b611585565b60405161014391906124f7565b60405180910390f35b6101546115b8565b60405161016191906124f7565b60405180910390f35b610184600480360381019061017f91906123a3565b6115de565b60405161019191906125cd565b60405180910390f35b6101a2611970565b6040516101af9190612512565b60405180910390f35b6101d260048036038101906101cd9190612302565b611994565b6040516101e698979695949392919061254f565b60405180910390f35b60008060006101fd84611b1c565b92509250925060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160060160009054906101000a900463ffffffff1663ffffffff1614156040518060400160405280600381526020017f3730340000000000000000000000000000000000000000000000000000000000815250906102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d2919061252d565b60405180910390fd5b5060008160060160009054906101000a900463ffffffff168303905081600701548163ffffffff1610156040518060400160405280600381526020017f37303700000000000000000000000000000000000000000000000000000000008152509061037c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610373919061252d565b60405180910390fd5b5060405180602001604052808263ffffffff16846004015488038161039d57fe5b047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152508260000160008201518160000160006101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555090505060405180602001604052808263ffffffff16846005015487038161043d57fe5b047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152508260010160008201518160000160006101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550905050848260040181905550838260050181905550828260060160006101000a81548163ffffffff021916908363ffffffff160217905550505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600381526020017f3130300000000000000000000000000000000000000000000000000000000000815250906105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b9919061252d565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156106ef5750600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b6040518060400160405280600381526020017f373034000000000000000000000000000000000000000000000000000000000081525090610766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d919061252d565b60405180910390fd5b50806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701819055505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600381526020017f313030000000000000000000000000000000000000000000000000000000000081525090610879576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610870919061252d565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600381526020017f373031000000000000000000000000000000000000000000000000000000000081525090610922576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610919919061252d565b60405180910390fd5b5061038481116040518060400160405280600381526020017f37303200000000000000000000000000000000000000000000000000000000008152509061099f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610996919061252d565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff166000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600381526020017f373033000000000000000000000000000000000000000000000000000000000081525090610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f919061252d565b60405180910390fd5b50600083905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610af657600080fd5b505afa158015610b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2e919061232b565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7857600080fd5b505afa158015610b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb0919061232b565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610c1c5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b6040518060400160405280600381526020017f373034000000000000000000000000000000000000000000000000000000000081525090610c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8a919061252d565b60405180910390fd5b508173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610cf957508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15610d7d5785600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60008060008573ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0091906123df565b9250925092506000836dffffffffffffffffffffffffffff1614158015610e3857506000826dffffffffffffffffffffffffffff1614155b6040518060400160405280600381526020017f373036000000000000000000000000000000000000000000000000000000000081525090610eaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea6919061252d565b60405180910390fd5b50846000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff16635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610ff657600080fd5b505afa15801561100a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102e919061242e565b6000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055508573ffffffffffffffffffffffffffffffffffffffff16635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b957600080fd5b505afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f1919061242e565b6000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050181905550866000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070181905550806000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160006101000a81548163ffffffff021916908363ffffffff160217905550505050505050505050565b6000806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250508152602001600182016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016007820154815250509050806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561149c5761148161147c848360000151611d8a90919063ffffffff16565b611e7d565b71ffffffffffffffffffffffffffffffffffff16915061157d565b806060015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600381526020017f373038000000000000000000000000000000000000000000000000000000000081525090611546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153d919061252d565b60405180910390fd5b50611566611561848360200151611d8a90919063ffffffff16565b611e7d565b71ffffffffffffffffffffffffffffffffffff1691505b509392505050565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250508152602001600182016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016007820154815250509050806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156118f2576118d76118d2848360000151611d8a90919063ffffffff16565b611e7d565b71ffffffffffffffffffffffffffffffffffff169150611969565b806060015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146119325760009150611968565b61195161194c848360200151611d8a90919063ffffffff16565b611e7d565b71ffffffffffffffffffffffffffffffffffff1691505b5b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000602052806000526040600020600091509050806000016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152505090806001016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154908060060160009054906101000a900463ffffffff16908060070154905088565b6000806000611b29611e92565b90508373ffffffffffffffffffffffffffffffffffffffff16635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611b7157600080fd5b505afa158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba9919061242e565b92508373ffffffffffffffffffffffffffffffffffffffff16635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b158015611bf157600080fd5b505afa158015611c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c29919061242e565b915060008060008673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae91906123df565b9250925092508363ffffffff168163ffffffff1614611d8057600081850390508063ffffffff16611cff846dffffffffffffffffffffffffffff16866dffffffffffffffffffffffffffff16611ea8565b600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1602870196508063ffffffff16611d57856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16611ea8565b600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160286019550505b5050509193909250565b611d92612240565b600080831480611df3575083600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16838486600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160292508281611df057fe5b04145b611e65576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f55513a3a6d756c3a206f766572666c6f7700000000000000000000000000000081525060200191505060405180910390fd5b60405180602001604052808281525091505092915050565b6000607060ff168260000151901c9050919050565b60006401000000004281611ea257fe5b06905090565b611eb0612253565b60008211611f26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f55513a3a6672616374696f6e3a206469766973696f6e206279207a65726f000081525060200191505060405180910390fd5b6000831415611f6457604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509050612160565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff71ffffffffffffffffffffffffffffffffffff16831161207d57600082607060ff1685901b81611fb157fe5b0490507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016811115612048576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f55513a3a6672616374696f6e3a206f766572666c6f770000000000000000000081525060200191505060405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250915050612160565b6000612099846e01000000000000000000000000000085612166565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff801681111561212f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f55513a3a6672616374696f6e3a206f766572666c6f770000000000000000000081525060200191505060405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150505b92915050565b6000806000801985870985870292508281108382030391505060008114156121a1576000841161219557600080fd5b83820492505050612239565b8084116121ad57600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b6040518060200160405280600081525090565b604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b600081359050612293816126fa565b92915050565b6000815190506122a8816126fa565b92915050565b6000815190506122bd81612711565b92915050565b6000813590506122d281612728565b92915050565b6000815190506122e781612728565b92915050565b6000815190506122fc8161273f565b92915050565b60006020828403121561231457600080fd5b600061232284828501612284565b91505092915050565b60006020828403121561233d57600080fd5b600061234b84828501612299565b91505092915050565b60008060006060848603121561236957600080fd5b600061237786828701612284565b935050602061238886828701612284565b9250506040612399868287016122c3565b9150509250925092565b600080604083850312156123b657600080fd5b60006123c485828601612284565b92505060206123d5858286016122c3565b9150509250929050565b6000806000606084860312156123f457600080fd5b6000612402868287016122ae565b9350506020612413868287016122ae565b9250506040612424868287016122ed565b9150509250925092565b60006020828403121561244057600080fd5b600061244e848285016122d8565b91505092915050565b61246081612604565b82525050565b61246f81612692565b82525050565b6000612480826125e8565b61248a81856125f3565b935061249a8185602086016126b6565b6124a3816126e9565b840191505092915050565b6020820160008201516124c460008501826124ca565b50505050565b6124d381612650565b82525050565b6124e281612678565b82525050565b6124f181612682565b82525050565b600060208201905061250c6000830184612457565b92915050565b60006020820190506125276000830184612466565b92915050565b600060208201905081810360008301526125478184612475565b905092915050565b600061010082019050612565600083018b6124ae565b612572602083018a6124ae565b61257f6040830189612457565b61258c6060830188612457565b61259960808301876124d9565b6125a660a08301866124d9565b6125b360c08301856124e8565b6125c060e08301846124d9565b9998505050505050505050565b60006020820190506125e260008301846124d9565b92915050565b600081519050919050565b600082825260208201905092915050565b600061260f82612630565b9050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600061269d826126a4565b9050919050565b60006126af82612630565b9050919050565b60005b838110156126d45780820151818401526020810190506126b9565b838111156126e3576000848401525b50505050565b6000601f19601f8301169050919050565b61270381612604565b811461270e57600080fd5b50565b61271a81612616565b811461272557600080fd5b50565b61273181612678565b811461273c57600080fd5b50565b61274881612682565b811461275357600080fd5b5056fea26469706673582212203972d6dc7b5abbbe9223d54387a73869625353cdf51323f1830edc2349183fbb64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063813c3c9311610066578063813c3c931461011c5780638da5cb5b1461014c578063b50d882c1461016a578063c45a01551461019a578063fe33b302146101b857610093565b80631c1b87721461009857806352244ec8146100b45780635b10f7ac146100d0578063636cfa0c146100ec575b600080fd5b6100b260048036038101906100ad9190612302565b6101ef565b005b6100ce60048036038101906100c991906123a3565b6104fa565b005b6100ea60048036038101906100e59190612354565b6107b1565b005b61010660048036038101906101019190612354565b6111e7565b60405161011391906125cd565b60405180910390f35b61013660048036038101906101319190612302565b611585565b60405161014391906124f7565b60405180910390f35b6101546115b8565b60405161016191906124f7565b60405180910390f35b610184600480360381019061017f91906123a3565b6115de565b60405161019191906125cd565b60405180910390f35b6101a2611970565b6040516101af9190612512565b60405180910390f35b6101d260048036038101906101cd9190612302565b611994565b6040516101e698979695949392919061254f565b60405180910390f35b60008060006101fd84611b1c565b92509250925060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160060160009054906101000a900463ffffffff1663ffffffff1614156040518060400160405280600381526020017f3730340000000000000000000000000000000000000000000000000000000000815250906102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d2919061252d565b60405180910390fd5b5060008160060160009054906101000a900463ffffffff168303905081600701548163ffffffff1610156040518060400160405280600381526020017f37303700000000000000000000000000000000000000000000000000000000008152509061037c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610373919061252d565b60405180910390fd5b5060405180602001604052808263ffffffff16846004015488038161039d57fe5b047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152508260000160008201518160000160006101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555090505060405180602001604052808263ffffffff16846005015487038161043d57fe5b047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152508260010160008201518160000160006101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160217905550905050848260040181905550838260050181905550828260060160006101000a81548163ffffffff021916908363ffffffff160217905550505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600381526020017f3130300000000000000000000000000000000000000000000000000000000000815250906105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b9919061252d565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156106ef5750600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b6040518060400160405280600381526020017f373034000000000000000000000000000000000000000000000000000000000081525090610766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d919061252d565b60405180910390fd5b50806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701819055505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600381526020017f313030000000000000000000000000000000000000000000000000000000000081525090610879576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610870919061252d565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600381526020017f373031000000000000000000000000000000000000000000000000000000000081525090610922576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610919919061252d565b60405180910390fd5b5061038481116040518060400160405280600381526020017f37303200000000000000000000000000000000000000000000000000000000008152509061099f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610996919061252d565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff166000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600381526020017f373033000000000000000000000000000000000000000000000000000000000081525090610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f919061252d565b60405180910390fd5b50600083905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610af657600080fd5b505afa158015610b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2e919061232b565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7857600080fd5b505afa158015610b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb0919061232b565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610c1c5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b6040518060400160405280600381526020017f373034000000000000000000000000000000000000000000000000000000000081525090610c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8a919061252d565b60405180910390fd5b508173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610cf957508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15610d7d5785600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60008060008573ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0091906123df565b9250925092506000836dffffffffffffffffffffffffffff1614158015610e3857506000826dffffffffffffffffffffffffffff1614155b6040518060400160405280600381526020017f373036000000000000000000000000000000000000000000000000000000000081525090610eaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea6919061252d565b60405180910390fd5b50846000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff16635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610ff657600080fd5b505afa15801561100a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102e919061242e565b6000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055508573ffffffffffffffffffffffffffffffffffffffff16635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b957600080fd5b505afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f1919061242e565b6000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050181905550866000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070181905550806000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160006101000a81548163ffffffff021916908363ffffffff160217905550505050505050505050565b6000806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250508152602001600182016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016007820154815250509050806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561149c5761148161147c848360000151611d8a90919063ffffffff16565b611e7d565b71ffffffffffffffffffffffffffffffffffff16915061157d565b806060015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600381526020017f373038000000000000000000000000000000000000000000000000000000000081525090611546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153d919061252d565b60405180910390fd5b50611566611561848360200151611d8a90919063ffffffff16565b611e7d565b71ffffffffffffffffffffffffffffffffffff1691505b509392505050565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610100016040529081600082016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250508152602001600182016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016007820154815250509050806040015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156118f2576118d76118d2848360000151611d8a90919063ffffffff16565b611e7d565b71ffffffffffffffffffffffffffffffffffff169150611969565b806060015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146119325760009150611968565b61195161194c848360200151611d8a90919063ffffffff16565b611e7d565b71ffffffffffffffffffffffffffffffffffff1691505b5b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000602052806000526040600020600091509050806000016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152505090806001016040518060200160405290816000820160009054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050154908060060160009054906101000a900463ffffffff16908060070154905088565b6000806000611b29611e92565b90508373ffffffffffffffffffffffffffffffffffffffff16635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611b7157600080fd5b505afa158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba9919061242e565b92508373ffffffffffffffffffffffffffffffffffffffff16635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b158015611bf157600080fd5b505afa158015611c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c29919061242e565b915060008060008673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae91906123df565b9250925092508363ffffffff168163ffffffff1614611d8057600081850390508063ffffffff16611cff846dffffffffffffffffffffffffffff16866dffffffffffffffffffffffffffff16611ea8565b600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1602870196508063ffffffff16611d57856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16611ea8565b600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160286019550505b5050509193909250565b611d92612240565b600080831480611df3575083600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16838486600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff160292508281611df057fe5b04145b611e65576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f55513a3a6d756c3a206f766572666c6f7700000000000000000000000000000081525060200191505060405180910390fd5b60405180602001604052808281525091505092915050565b6000607060ff168260000151901c9050919050565b60006401000000004281611ea257fe5b06905090565b611eb0612253565b60008211611f26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f55513a3a6672616374696f6e3a206469766973696f6e206279207a65726f000081525060200191505060405180910390fd5b6000831415611f6457604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509050612160565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff71ffffffffffffffffffffffffffffffffffff16831161207d57600082607060ff1685901b81611fb157fe5b0490507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8016811115612048576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f55513a3a6672616374696f6e3a206f766572666c6f770000000000000000000081525060200191505060405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16815250915050612160565b6000612099846e01000000000000000000000000000085612166565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff801681111561212f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f55513a3a6672616374696f6e3a206f766572666c6f770000000000000000000081525060200191505060405180910390fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509150505b92915050565b6000806000801985870985870292508281108382030391505060008114156121a1576000841161219557600080fd5b83820492505050612239565b8084116121ad57600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b6040518060200160405280600081525090565b604051806020016040528060007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b600081359050612293816126fa565b92915050565b6000815190506122a8816126fa565b92915050565b6000815190506122bd81612711565b92915050565b6000813590506122d281612728565b92915050565b6000815190506122e781612728565b92915050565b6000815190506122fc8161273f565b92915050565b60006020828403121561231457600080fd5b600061232284828501612284565b91505092915050565b60006020828403121561233d57600080fd5b600061234b84828501612299565b91505092915050565b60008060006060848603121561236957600080fd5b600061237786828701612284565b935050602061238886828701612284565b9250506040612399868287016122c3565b9150509250925092565b600080604083850312156123b657600080fd5b60006123c485828601612284565b92505060206123d5858286016122c3565b9150509250929050565b6000806000606084860312156123f457600080fd5b6000612402868287016122ae565b9350506020612413868287016122ae565b9250506040612424868287016122ed565b9150509250925092565b60006020828403121561244057600080fd5b600061244e848285016122d8565b91505092915050565b61246081612604565b82525050565b61246f81612692565b82525050565b6000612480826125e8565b61248a81856125f3565b935061249a8185602086016126b6565b6124a3816126e9565b840191505092915050565b6020820160008201516124c460008501826124ca565b50505050565b6124d381612650565b82525050565b6124e281612678565b82525050565b6124f181612682565b82525050565b600060208201905061250c6000830184612457565b92915050565b60006020820190506125276000830184612466565b92915050565b600060208201905081810360008301526125478184612475565b905092915050565b600061010082019050612565600083018b6124ae565b612572602083018a6124ae565b61257f6040830189612457565b61258c6060830188612457565b61259960808301876124d9565b6125a660a08301866124d9565b6125b360c08301856124e8565b6125c060e08301846124d9565b9998505050505050505050565b60006020820190506125e260008301846124d9565b92915050565b600081519050919050565b600082825260208201905092915050565b600061260f82612630565b9050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600061269d826126a4565b9050919050565b60006126af82612630565b9050919050565b60005b838110156126d45780820151818401526020810190506126b9565b838111156126e3576000848401525b50505050565b6000601f19601f8301169050919050565b61270381612604565b811461270e57600080fd5b50565b61271a81612616565b811461272557600080fd5b50565b61273181612678565b811461273c57600080fd5b50565b61274881612682565b811461275357600080fd5b5056fea26469706673582212203972d6dc7b5abbbe9223d54387a73869625353cdf51323f1830edc2349183fbb64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "configurePair(address,uint256)": {
        "params": {
          "_pairAddress": "Pair address",
          "_updatePeriod": "Update period (TWAP)"
        }
      },
      "consult(address,address,uint256)": {
        "params": {
          "_amountIn": "Amount in of the asset",
          "_pairAddress": "Pair address",
          "_token": "Token address"
        }
      },
      "consultKrAsset(address,uint256)": {
        "params": {
          "_amountIn": "Amount to get value for",
          "_kreskoAsset": "Kresko asset address"
        }
      },
      "initPair(address,address,uint256)": {
        "params": {
          "_kreskoAsset": "Kresko asset in the pair",
          "_pairAddress": "Pair address",
          "_updatePeriod": "Update period (TWAP)"
        }
      },
      "update(address)": {
        "params": {
          "_pairAddress": "Pair address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "configurePair(address,uint256)": {
        "notice": "Configures existing values of an AMM pair"
      },
      "consult(address,address,uint256)": {
        "notice": "General consult function, gets a value for _amountIn"
      },
      "consultKrAsset(address,uint256)": {
        "notice": "Get the AMM price for an amount of krAsset"
      },
      "initPair(address,address,uint256)": {
        "notice": "Initializes an AMM pair to the oracle"
      },
      "update(address)": {
        "notice": "Updates the oracle values for a pair"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 302,
        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
        "label": "pairs",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(PairData)298_storage)"
      },
      {
        "astId": 306,
        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
        "label": "krAssets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 310,
        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(PairData)298_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UniswapV2Oracle.PairData)",
        "numberOfBytes": "32",
        "value": "t_struct(PairData)298_storage"
      },
      "t_struct(PairData)298_storage": {
        "encoding": "inplace",
        "label": "struct UniswapV2Oracle.PairData",
        "members": [
          {
            "astId": 283,
            "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "price0Average",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(uq112x112)1908_storage"
          },
          {
            "astId": 285,
            "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "price1Average",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(uq112x112)1908_storage"
          },
          {
            "astId": 287,
            "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "token0",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 289,
            "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "token1",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 291,
            "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "price0CumulativeLast",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 293,
            "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "price1CumulativeLast",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 295,
            "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "blockTimestampLast",
            "offset": 0,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 297,
            "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "updatePeriod",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(uq112x112)1908_storage": {
        "encoding": "inplace",
        "label": "struct UQ.uq112x112",
        "members": [
          {
            "astId": 1907,
            "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
            "label": "_x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}