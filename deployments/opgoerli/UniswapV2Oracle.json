{
    "address": "0x48A88C2E4cBedCf0A4Fe86BC803D892E1a41d5A4",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_factory",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_admin",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "NewAdmin",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "krAsset",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pairAddress",
                    "type": "address"
                }
            ],
            "name": "NewKrAssetPair",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newMinUpdatePeriod",
                    "type": "uint256"
                }
            ],
            "name": "NewMinUpdatePeriod",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pair",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "token0",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "token1",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "updatePeriod",
                    "type": "uint256"
                }
            ],
            "name": "NewPair",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "token0",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "token1",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint32",
                    "name": "blockTimestampLast",
                    "type": "uint32"
                },
                {
                    "components": [
                        {
                            "internalType": "uint224",
                            "name": "_x",
                            "type": "uint224"
                        }
                    ],
                    "indexed": false,
                    "internalType": "struct UQ.uq112x112",
                    "name": "price0CumulativeLast",
                    "type": "tuple"
                },
                {
                    "components": [
                        {
                            "internalType": "uint224",
                            "name": "_x",
                            "type": "uint224"
                        }
                    ],
                    "indexed": false,
                    "internalType": "struct UQ.uq112x112",
                    "name": "price1CumulativeLast",
                    "type": "tuple"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "updatePeriod",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "timeElapsed",
                    "type": "uint256"
                }
            ],
            "name": "NewPrice",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pair",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "token0",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "token1",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "updatePeriod",
                    "type": "uint256"
                }
            ],
            "name": "PairUpdated",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "admin",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_pairAddress",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_updatePeriod",
                    "type": "uint256"
                }
            ],
            "name": "configurePair",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_pairAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_token",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amountIn",
                    "type": "uint256"
                }
            ],
            "name": "consult",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "amountOut",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_kreskoAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amountIn",
                    "type": "uint256"
                }
            ],
            "name": "consultKrAsset",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "amountOut",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "factory",
            "outputs": [
                {
                    "internalType": "contract IUniswapV2Factory",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_pairAddress",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_kreskoAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_updatePeriod",
                    "type": "uint256"
                }
            ],
            "name": "initPair",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "krAssets",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "minUpdatePeriod",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "pairs",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint224",
                            "name": "_x",
                            "type": "uint224"
                        }
                    ],
                    "internalType": "struct UQ.uq112x112",
                    "name": "price0Average",
                    "type": "tuple"
                },
                {
                    "components": [
                        {
                            "internalType": "uint224",
                            "name": "_x",
                            "type": "uint224"
                        }
                    ],
                    "internalType": "struct UQ.uq112x112",
                    "name": "price1Average",
                    "type": "tuple"
                },
                {
                    "internalType": "address",
                    "name": "token0",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "token1",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "price0CumulativeLast",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "price1CumulativeLast",
                    "type": "uint256"
                },
                {
                    "internalType": "uint32",
                    "name": "blockTimestampLast",
                    "type": "uint32"
                },
                {
                    "internalType": "uint256",
                    "name": "updatePeriod",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_newAdmin",
                    "type": "address"
                }
            ],
            "name": "setAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_minUpdatePeriod",
                    "type": "uint256"
                }
            ],
            "name": "setMinUpdatePeriod",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_pairAddress",
                    "type": "address"
                }
            ],
            "name": "update",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x56f0714b374984c962e1a763d795037aa762d6f65778701eb54ae4c898ab0b0c",
    "receipt": {
        "to": null,
        "from": "0xDc46c7eA52c6b2ca13D1dB949F79F81Cc0E7193C",
        "contractAddress": "0x48A88C2E4cBedCf0A4Fe86BC803D892E1a41d5A4",
        "transactionIndex": 2,
        "gasUsed": "1345047",
        "logsBloom": "0x
        "blockHash": "0x7816cb93ae414bc0e881617cd903aaa94808a25ecff741f14ff3ef8641b8f8b9",
        "transactionHash": "0x56f0714b374984c962e1a763d795037aa762d6f65778701eb54ae4c898ab0b0c",
        "logs": [],
        "blockNumber": 7376805,
        "cumulativeGasUsed": "1518274",
        "status": 1,
        "byzantium": true
    },
    "args": ["0xc88508156D93BfF0Adce6c84d4269Efc82D4C827", "0xDc46c7eA52c6b2ca13D1dB949F79F81Cc0E7193C"],
    "numDeployments": 1,
    "solcInputHash": "41e4719252854300e2aa58bd53a725db",
    "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"krAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"NewKrAssetPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinUpdatePeriod\",\"type\":\"uint256\"}],\"name\":\"NewMinUpdatePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"}],\"name\":\"NewPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"indexed\":false,\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price0CumulativeLast\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"indexed\":false,\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price1CumulativeLast\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeElapsed\",\"type\":\"uint256\"}],\"name\":\"NewPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"}],\"name\":\"PairUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_updatePeriod\",\"type\":\"uint256\"}],\"name\":\"configurePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"consultKrAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_updatePeriod\",\"type\":\"uint256\"}],\"name\":\"initPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"krAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUpdatePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price0Average\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"internalType\":\"struct UQ.uq112x112\",\"name\":\"price1Average\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"updatePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUpdatePeriod\",\"type\":\"uint256\"}],\"name\":\"setMinUpdatePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kresko\",\"kind\":\"dev\",\"methods\":{\"configurePair(address,uint256)\":{\"params\":{\"_pairAddress\":\"Pair address\",\"_updatePeriod\":\"Update period (TWAP)\"}},\"consult(address,address,uint256)\":{\"params\":{\"_amountIn\":\"Amount of token to get value for\",\"_pairAddress\":\"Address of the pair that contains the token\",\"_token\":\"Address of the token to get value for\"}},\"consultKrAsset(address,uint256)\":{\"params\":{\"_amountIn\":\"Amount of Kresko Asset to get value for\",\"_kreskoAsset\":\"Kresko asset address\"}},\"initPair(address,address,uint256)\":{\"params\":{\"_kreskoAsset\":\"Kresko Asset in the pair we want to add helper functionality for\",\"_pairAddress\":\"Liquidity token address for the pair\",\"_updatePeriod\":\"The update period (TWAP) for this AMM pair\"}},\"setAdmin(address)\":{\"params\":{\"_newAdmin\":\"New admin address\"}},\"setMinUpdatePeriod(uint256)\":{\"params\":{\"_minUpdatePeriod\":\"The new minimum period that can be set for a pair\"}},\"update(address)\":{\"params\":{\"_pairAddress\":\"Pair address\"}}},\"title\":\"Kresko AMM Oracle (Uniswap V2) Keeps track of time-weighted average prices for tokens in a Uniswap V2 pair. This oracle is intended to be used with Kresko AMM. This oracle is updated by calling the `update` with the liquidity token address. The prices can be queried by calling `consult` or `consultKrAsset` for quality-of-life with Kresko Assets, it does not need the pair address. Bookkeeping is done in terms of time-weighted average prices, and that period has a lower bound of `minUpdatePeriod`. Logic is pretty much what's laid out in https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol This contract just extends some storage to deal with many pairs with their own configuration.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configurePair(address,uint256)\":{\"notice\":\"Configures existing values of an AMM pair\"},\"consult(address,address,uint256)\":{\"notice\":\"General consult function, gets a value for _amountIn\"},\"consultKrAsset(address,uint256)\":{\"notice\":\"Get the AMM price for an amount of krAsset\"},\"initPair(address,address,uint256)\":{\"notice\":\"Initializes an Uniswap V2 pair to be tracked by this oracle. The criteria for a pair to be tracked: The pair must not already be tracked by this oracle. The pair must exist. The pair must have reserves. The update period must be greater than the minimum update period.\"},\"setAdmin(address)\":{\"notice\":\"Sets a new admin\"},\"setMinUpdatePeriod(uint256)\":{\"notice\":\"Set a new min update period\"},\"update(address)\":{\"notice\":\"Updates the oracle values for a pair\"}},\"notice\":\"Kresko gives _NO GUARANTEES_ for the correctness of the prices provided by this oracle.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/minter/UniswapV2Oracle.sol\":\"UniswapV2Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity <0.9.0;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @author Kresko\\n * @title Error codes\\n * @notice Kresko-specific revert return values and their explanation\\n * @dev First number indicates the domain for the error\\n */\\nlibrary Error {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Diamond                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // Preserve readability for the diamond proxy\\n    string public constant DIAMOND_INVALID_FUNCTION_SIGNATURE = \\\"krDiamond: function does not exist\\\";\\n    string public constant DIAMOND_INVALID_PENDING_OWNER = \\\"krDiamond: Must be pending contract owner\\\";\\n    string public constant DIAMOND_INVALID_OWNER = \\\"krDiamond: Must be diamond owner\\\";\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   1. General                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_OWNER = \\\"100\\\"; // The sender must be owner\\n    string public constant NOT_OPERATOR = \\\"101\\\"; // The sender must be operator\\n    string public constant ZERO_WITHDRAW = \\\"102\\\"; // Withdraw must be greater than 0\\n    string public constant ZERO_DEPOSIT = \\\"103\\\"; // Deposit must be greater than 0\\n    string public constant ZERO_ADDRESS = \\\"104\\\"; // Address provided cannot be address(0)\\n    string public constant ALREADY_INITIALIZED = \\\"105\\\"; // Contract has already been initialized\\n    string public constant RE_ENTRANCY = \\\"106\\\"; // Function does not allow re-entrant calls\\n    string public constant NOT_ENOUGH_BALANCE = \\\"107\\\"; // Transfer of rebasing token exceeds value\\n    string public constant NOT_ENOUGH_ALLOWANCE = \\\"108\\\"; // TransferFrom of rebasing token exceeds allowance\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   2. Minter                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_LIQUIDATABLE = \\\"200\\\"; // Account has collateral deposits exceeding minCollateralValue\\n    string public constant ZERO_MINT = \\\"201\\\"; // Mint amount must be greater than 0\\n    string public constant ZERO_BURN = \\\"202\\\"; // Burn amount must be greater than 0\\n    string public constant ADDRESS_INVALID_ORACLE = \\\"203\\\"; // Oracle address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_NRWT = \\\"204\\\"; // Underlying rebasing token address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_FEERECIPIENT = \\\"205\\\"; // Fee recipient address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_COLLATERAL = \\\"206\\\"; // Collateral address cant be set to address(0)\\n    string public constant COLLATERAL_EXISTS = \\\"207\\\"; // Collateral has already been added into the protocol\\n    string public constant COLLATERAL_INVALID_FACTOR = \\\"208\\\"; // cFactor must be greater than 1FP\\n    string public constant COLLATERAL_WITHDRAW_OVERFLOW = \\\"209\\\"; // Withdraw amount cannot reduce accounts collateral value under minCollateralValue\\n    string public constant KRASSET_INVALID_FACTOR = \\\"210\\\"; // kFactor must be greater than 1FP\\n    string public constant KRASSET_BURN_AMOUNT_OVERFLOW = \\\"211\\\"; // Repaying more than account has debt\\n    string public constant KRASSET_EXISTS = \\\"212\\\"; // KrAsset is already added\\n    string public constant PARAM_CLOSE_FEE_TOO_HIGH = \\\"213\\\"; // \\\"Close fee exceeds MAX_CLOSE_FEE\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_LOW = \\\"214\\\"; // \\\"Liquidation incentive less than MIN_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_HIGH = \\\"215\\\"; // \\\"Liquidation incentive greater than MAX_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_MIN_COLLATERAL_RATIO_LOW = \\\"216\\\"; // Minimum collateral ratio less than MIN_COLLATERALIZATION_RATIO\\n    string public constant PARAM_MIN_DEBT_AMOUNT_HIGH = \\\"217\\\"; // Minimum debt param argument exceeds MAX_DEBT_VALUE\\n    string public constant COLLATERAL_DOESNT_EXIST = \\\"218\\\"; // Collateral does not exist within the protocol\\n    string public constant KRASSET_DOESNT_EXIST = \\\"219\\\"; // KrAsset does not exist within the protocol\\n    string public constant KRASSET_NOT_MINTABLE = \\\"220\\\"; // KrAsset is not mintable\\n    string public constant KRASSET_SYMBOL_EXISTS = \\\"221\\\"; // KrAsset with this symbol is already within the protocl\\n    string public constant KRASSET_COLLATERAL_LOW = \\\"222\\\"; // Collateral deposits do not cover the amount being minted\\n    string public constant KRASSET_MINT_AMOUNT_LOW = \\\"223\\\"; // Debt position must be greater than the minimum debt position value\\n    string public constant KRASSET_MAX_SUPPLY_REACHED = \\\"224\\\"; // KrAsset being minted has reached its current supply limit\\n    string public constant SELF_LIQUIDATION = \\\"225\\\"; // Account cannot liquidate itself\\n    string public constant ZERO_REPAY = \\\"226\\\"; // Account cannot liquidate itself\\n    string public constant STALE_PRICE = \\\"227\\\"; // Price for the asset is stale\\n    string public constant LIQUIDATION_OVERFLOW = \\\"228\\\"; // Repaying more USD value than allowed\\n    string public constant ADDRESS_INVALID_SAFETY_COUNCIL = \\\"229\\\"; // Account responsible for the safety council role must be a multisig\\n    string public constant SAFETY_COUNCIL_EXISTS = \\\"230\\\"; // Only one council role can exist\\n    string public constant NOT_SAFETY_COUNCIL = \\\"231\\\"; // Sender must have the role `Role.SAFETY_COUNCIL`\\n    string public constant ACTION_PAUSED_FOR_ASSET = \\\"232\\\"; // This action is currently paused for this asset\\n    string public constant INVALID_ASSET_SUPPLIED = \\\"233\\\"; // Asset supplied is not a collateral nor a krAsset\\n    string public constant KRASSET_NOT_ANCHOR = \\\"234\\\"; // Address is not the anchor for the krAsset\\n    string public constant INVALID_LT = \\\"235\\\"; // Liquidation threshold is greater than minimum collateralization ratio\\n    string public constant COLLATERAL_INSUFFICIENT_AMOUNT = \\\"236\\\"; // Insufficient amount of collateral to complete the operation\\n    string public constant MULTISIG_NOT_ENOUGH_OWNERS = \\\"237\\\"; // Multisig has invalid amount of owners\\n    string public constant PARAM_OPEN_FEE_TOO_HIGH = \\\"238\\\"; // \\\"Close fee exceeds MAX_OPEN_FEE\\\"\\n    string public constant INVALID_FEE_TYPE = \\\"239\\\"; // \\\"Invalid fee type\\n    string public constant KRASSET_INVALID_ANCHOR = \\\"240\\\"; // krAsset anchor does not support the correct interfaceId\\n    string public constant KRASSET_INVALID_CONTRACT = \\\"241\\\"; // krAsset does not support the correct interfaceId\\n    string public constant KRASSET_MARKET_CLOSED = \\\"242\\\"; // KrAsset's market is currently closed\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   3. Staking                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REWARD_PER_BLOCK_MISSING = \\\"300\\\"; // Each reward token must have a reward per block value\\n    string public constant REWARD_TOKENS_MISSING = \\\"301\\\"; // Pool must include an array of reward token addresses\\n    string public constant POOL_EXISTS = \\\"302\\\"; // Pool with this deposit token already exists\\n    string public constant POOL_DOESNT_EXIST = \\\"303\\\"; // Pool with this deposit token does not exist\\n    string public constant ADDRESS_INVALID_REWARD_RECIPIENT = \\\"304\\\"; // Reward recipient cant be address(0)\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   4. Libraries                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant ARRAY_OUT_OF_BOUNDS = \\\"400\\\"; // Array out of bounds error\\n    string public constant PRICEFEEDS_MUST_MATCH_STATUS_FEEDS = \\\"401\\\"; // Supplied price feeds must match status feeds in length\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   5. KrAsset                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REBASING_DENOMINATOR_LOW = \\\"500\\\"; // denominator of rebases must be >= 1\\n    string public constant ISSUER_NOT_KRESKO = \\\"501\\\"; // issue must be done by kresko\\n    string public constant REDEEMER_NOT_KRESKO = \\\"502\\\"; // redeem must be done by kresko\\n    string public constant DESTROY_OVERFLOW = \\\"503\\\"; // trying to destroy more than allowed\\n    string public constant ISSUE_OVERFLOW = \\\"504\\\"; // trying to destroy more than allowed\\n    string public constant MINT_OVERFLOW = \\\"505\\\"; // trying to destroy more than allowed\\n    string public constant DEPOSIT_OVERFLOW = \\\"506\\\"; // trying to destroy more than allowed\\n    string public constant REDEEM_OVERFLOW = \\\"507\\\"; // trying to destroy more than allowed\\n    string public constant WITHDRAW_OVERFLOW = \\\"508\\\"; // trying to destroy more than allowed\\n    string public constant ZERO_SHARES = \\\"509\\\"; // amount of shares must be greater than 0\\n    string public constant ZERO_ASSETS = \\\"510\\\"; // amount of assets must be greater than 0\\n    string public constant INVALID_SCALED_AMOUNT = \\\"511\\\"; // amount of debt scaled must be greater than 0\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              6. STABILITY RATES                            */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant STABILITY_RATES_ALREADY_INITIALIZED = \\\"601\\\"; // stability rates for the asset are already initialized\\n    string public constant INVALID_OPTIMAL_RATE = \\\"602\\\"; // the optimal price rate configured is less than 1e27 for the asset\\n    string public constant INVALID_PRICE_RATE_DELTA = \\\"603\\\"; // the price rate delta configured is less than 1e27 for the asset\\n    string public constant STABILITY_RATES_NOT_INITIALIZED = \\\"604\\\"; // the stability rates for the asset are not initialized\\n    string public constant STABILITY_RATE_OVERFLOW = \\\"605\\\"; // the stability rates is > max uint128\\n    string public constant DEBT_INDEX_OVERFLOW = \\\"606\\\"; // the debt index is > max uint128\\n    string public constant KISS_NOT_SET = \\\"607\\\"; // the debt index is > max uint128\\n    string public constant STABILITY_RATE_REPAYMENT_AMOUNT_ZERO = \\\"608\\\"; // interest being repaid cannot be 0\\n    string public constant STABILITY_RATE_INTEREST_IS_ZERO = \\\"609\\\"; // account must have accrued interest to repay it\\n    string public constant INTEREST_REPAY_NOT_PARTIAL = \\\"610\\\"; // account must have accrued interest to repay it\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              7. AMM ORACLE                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant PAIR_ADDRESS_IS_ZERO = \\\"701\\\"; // Pair address to configure cannot be zero\\n    string public constant INVALID_UPDATE_PERIOD = \\\"702\\\"; // Update period must be greater than the minimum\\n    string public constant PAIR_ALREADY_EXISTS = \\\"703\\\"; // Pair with the address is already initialized\\n    string public constant PAIR_DOES_NOT_EXIST = \\\"704\\\"; // Pair supplied does not exist\\n    string public constant INVALID_LIQUIDITY = \\\"706\\\"; // Pair initializaition requires that the pair has liquidity\\n    string public constant UPDATE_PERIOD_NOT_FINISHED = \\\"707\\\"; // Update can only be called once per update period\\n    string public constant INVALID_PAIR = \\\"708\\\"; // Pair being consulted does not have the token that the price was requested for\\n    string public constant CALLER_NOT_ADMIN = \\\"709\\\"; // Caller must be the admin\\n    string public constant CONSTRUCTOR_INVALID_ADMIN = \\\"710\\\"; // Admin cannot be zero address in the constructor\\n    string public constant CONSTRUCTOR_INVALID_FACTORY = \\\"711\\\"; // Factory cannot be the zero address\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              8. KISS                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant OPERATOR_WAIT_PERIOD_NOT_OVER = \\\"800\\\"; // Operator role has a cooldown period which has not passed\\n    string public constant OPERATOR_LIMIT_REACHED = \\\"801\\\"; // More minters cannot be assigned before existing one is removed\\n    string public constant CALLER_NOT_CONTRACT = \\\"802\\\"; // Caller of the function must be a contract\\n    string public constant OPERATOR_NOT_CONTRACT = \\\"803\\\"; // Operator role can only be granted to a contract\\n    string public constant KRESKO_NOT_CONTRACT = \\\"804\\\"; // Operator role can only be granted to a contract\\n    string public constant ADMIN_NOT_A_CONTRACT = \\\"805\\\"; // Operator role can only be granted to a contract\\n    string public constant OPERATOR_WAIT_PERIOD_TOO_SHORT = \\\"806\\\"; // Operator assignment cooldown period must be greater than 15 minutes\\n}\\n\",\"keccak256\":\"0x0eb8050631c0f6a79cbfaaa74a27601972fb5bf5c7c7e26c94123a93685e3fea\",\"license\":\"MIT\"},\"src/contracts/minter/UniswapV2Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../vendor/uniswap/v2-periphery/libraries/UQ.sol\\\";\\nimport \\\"../vendor/uniswap/v2-periphery/libraries/UniswapV2Library.sol\\\";\\nimport \\\"../libs/Errors.sol\\\";\\n\\n/**\\n * @title Kresko AMM Oracle (Uniswap V2)\\n *\\n * Keeps track of time-weighted average prices for tokens in a Uniswap V2 pair.\\n * This oracle is intended to be used with Kresko AMM.\\n *\\n * This oracle is updated by calling the `update` with the liquidity token address.\\n * The prices can be queried by calling `consult` or `consultKrAsset` for quality-of-life with Kresko Assets,\\n * it does not need the pair address.\\n *\\n * Bookkeeping is done in terms of time-weighted average prices, and that period has a lower bound of `minUpdatePeriod`.\\n * Logic is pretty much what's laid out in\\n * https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol\\n *\\n * This contract just extends some storage to deal with many pairs with their own configuration.\\n *\\n * @notice Kresko gives _NO GUARANTEES_ for the correctness of the prices provided by this oracle.\\n *\\n * @author Kresko\\n */\\ncontract UniswapV2Oracle {\\n    using UQ for *;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Structs                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    struct PairData {\\n        UQ.uq112x112 price0Average;\\n        UQ.uq112x112 price1Average;\\n        address token0;\\n        address token1;\\n        uint256 price0CumulativeLast;\\n        uint256 price1CumulativeLast;\\n        uint32 blockTimestampLast;\\n        uint256 updatePeriod;\\n    }\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Layout                                   */\\n    /* -------------------------------------------------------------------------- */\\n\\n    IUniswapV2Factory public immutable factory;\\n    address public admin;\\n    uint256 public minUpdatePeriod = 15 minutes;\\n\\n    mapping(address => PairData) public pairs;\\n    mapping(address => address) public krAssets;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Events                                   */\\n    /* -------------------------------------------------------------------------- */\\n\\n    event NewAdmin(address indexed newAdmin);\\n    event NewMinUpdatePeriod(uint256 newMinUpdatePeriod);\\n    event NewPair(address indexed pair, address indexed token0, address indexed token1, uint256 updatePeriod);\\n    event PairUpdated(address indexed pair, address indexed token0, address indexed token1, uint256 updatePeriod);\\n\\n    event NewKrAssetPair(address indexed krAsset, address indexed pairAddress);\\n    event NewPrice(\\n        address indexed token0,\\n        address indexed token1,\\n        uint32 indexed blockTimestampLast,\\n        UQ.uq112x112 price0CumulativeLast,\\n        UQ.uq112x112 price1CumulativeLast,\\n        uint256 updatePeriod,\\n        uint256 timeElapsed\\n    );\\n\\n    /* --------------------------------------------------------------------------*/\\n    /*                                   Funcs                                   */\\n    /* --------------------------------------------------------------------------*/\\n\\n    constructor(address _factory, address _admin) {\\n        require(_factory != address(0), Error.CONSTRUCTOR_INVALID_FACTORY);\\n        require(_admin != address(0), Error.CONSTRUCTOR_INVALID_ADMIN);\\n\\n        factory = IUniswapV2Factory(_factory);\\n        admin = _admin;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, Error.CALLER_NOT_ADMIN);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets a new admin\\n     * @param _newAdmin New admin address\\n     */\\n    function setAdmin(address _newAdmin) external onlyAdmin {\\n        admin = _newAdmin;\\n        emit NewAdmin(_newAdmin);\\n    }\\n\\n    /**\\n     * @notice Set a new min update period\\n     * @param _minUpdatePeriod The new minimum period that can be set for a pair\\n     */\\n    function setMinUpdatePeriod(uint256 _minUpdatePeriod) external onlyAdmin {\\n        minUpdatePeriod = _minUpdatePeriod;\\n        emit NewMinUpdatePeriod(_minUpdatePeriod);\\n    }\\n\\n    /**\\n     * @notice Returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n     */\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        // solhint-disable not-rely-on-time\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    /**\\n     * @notice Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n     * @param _pairAddress Pair address\\n     */\\n    function currentCumulativePrices(address _pairAddress)\\n        internal\\n        view\\n        returns (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(_pairAddress).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(_pairAddress).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(_pairAddress).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint256(UQ.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint256(UQ.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n\\n    /**\\n     * @notice Initializes an Uniswap V2 pair to be tracked by this oracle.\\n     *\\n     * The criteria for a pair to be tracked:\\n     * The pair must not already be tracked by this oracle.\\n     * The pair must exist.\\n     * The pair must have reserves.\\n     * The update period must be greater than the minimum update period.\\n     * @param _pairAddress Liquidity token address for the pair\\n     * @param _kreskoAsset Kresko Asset in the pair we want to add helper functionality for\\n     * @param _updatePeriod The update period (TWAP) for this AMM pair\\n     *\\n     */\\n    function initPair(\\n        address _pairAddress,\\n        address _kreskoAsset,\\n        uint256 _updatePeriod\\n    ) external onlyAdmin {\\n        require(_pairAddress != address(0), Error.PAIR_ADDRESS_IS_ZERO);\\n        require(_updatePeriod >= minUpdatePeriod, Error.INVALID_UPDATE_PERIOD);\\n        require(pairs[_pairAddress].token0 == address(0), Error.PAIR_ALREADY_EXISTS);\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_pairAddress);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        // Ensure that the pair exists\\n        require(token0 != address(0) && token1 != address(0), Error.PAIR_DOES_NOT_EXIST);\\n\\n        // If the Kresko Asset is in the pair, add it to the krAssets mapping\\n        if (_kreskoAsset == token0 || _kreskoAsset == token1) {\\n            krAssets[_kreskoAsset] = _pairAddress;\\n            emit NewKrAssetPair(_kreskoAsset, _pairAddress);\\n        }\\n\\n        // Ensure that there's liquidity in the pair\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, Error.INVALID_LIQUIDITY); // ensure that there's liquidity in the pair\\n\\n        // Initialize the pair to storage\\n        pairs[_pairAddress].token0 = token0;\\n        pairs[_pairAddress].token1 = token1;\\n        pairs[_pairAddress].price0CumulativeLast = pair.price0CumulativeLast();\\n        pairs[_pairAddress].price1CumulativeLast = pair.price1CumulativeLast();\\n        pairs[_pairAddress].updatePeriod = _updatePeriod;\\n        pairs[_pairAddress].blockTimestampLast = blockTimestampLast;\\n\\n        emit NewPair(_pairAddress, token0, token1, _updatePeriod);\\n    }\\n\\n    /**\\n     * @notice Configures existing values of an AMM pair\\n     * @param _pairAddress Pair address\\n     * @param _updatePeriod Update period (TWAP)\\n     */\\n    function configurePair(address _pairAddress, uint256 _updatePeriod) external onlyAdmin {\\n        // Ensure that the pair exists\\n        require(\\n            pairs[_pairAddress].token0 != address(0) && pairs[_pairAddress].token1 != address(0),\\n            Error.PAIR_DOES_NOT_EXIST\\n        );\\n\\n        // Ensure that the update period is greater than the minimum update period\\n        require(_updatePeriod >= minUpdatePeriod, Error.INVALID_UPDATE_PERIOD);\\n\\n        // Update the period\\n        pairs[_pairAddress].updatePeriod = _updatePeriod;\\n\\n        emit PairUpdated(_pairAddress, pairs[_pairAddress].token0, pairs[_pairAddress].token1, _updatePeriod);\\n    }\\n\\n    /**\\n     * @notice Updates the oracle values for a pair\\n     * @param _pairAddress Pair address\\n     */\\n    function update(address _pairAddress) external {\\n        PairData storage data = pairs[_pairAddress];\\n\\n        // Ensure that the pair exists\\n        require(data.blockTimestampLast != 0, Error.PAIR_DOES_NOT_EXIST);\\n\\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = currentCumulativePrices(\\n            _pairAddress\\n        );\\n\\n        uint32 timeElapsed = blockTimestamp - data.blockTimestampLast; // overflow is desired\\n        // Ensure that at least one full period has passed since the last update\\n        require(timeElapsed >= data.updatePeriod, Error.UPDATE_PERIOD_NOT_FINISHED);\\n\\n        // Overflow is desired, casting never truncates\\n        // Cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        data.price0Average = UQ.uq112x112(uint224((price0Cumulative - data.price0CumulativeLast) / timeElapsed));\\n        data.price1Average = UQ.uq112x112(uint224((price1Cumulative - data.price1CumulativeLast) / timeElapsed));\\n\\n        // Update the cumulative prices\\n        data.price0CumulativeLast = price0Cumulative;\\n        data.price1CumulativeLast = price1Cumulative;\\n        data.blockTimestampLast = blockTimestamp;\\n\\n        emit NewPrice(\\n            data.token0,\\n            data.token1,\\n            blockTimestamp,\\n            data.price0Average,\\n            data.price1Average,\\n            data.updatePeriod,\\n            timeElapsed\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the AMM price for an amount of krAsset\\n     * @param _kreskoAsset Kresko asset address\\n     * @param _amountIn Amount of Kresko Asset to get value for\\n     */\\n    function consultKrAsset(address _kreskoAsset, uint256 _amountIn) external view returns (uint256 amountOut) {\\n        PairData memory data = pairs[krAssets[_kreskoAsset]];\\n\\n        // if the kresko asset is token0, get the corresponding value for the amount in\\n        if (_kreskoAsset == data.token0) {\\n            amountOut = data.price0Average.mul(_amountIn).decode144();\\n        } else {\\n            if (_kreskoAsset != data.token1) {\\n                // if the kresko asset is not in the pair, return 0\\n                amountOut = 0;\\n            } else {\\n                // if the kresko asset is token1, get the corresponding value for the amount in\\n                amountOut = data.price1Average.mul(_amountIn).decode144();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice General consult function, gets a value for _amountIn\\n     * @param _pairAddress Address of the pair that contains the token\\n     * @param _token Address of the token to get value for\\n     * @param _amountIn Amount of token to get value for\\n     */\\n    function consult(\\n        address _pairAddress,\\n        address _token,\\n        uint256 _amountIn\\n    ) external view returns (uint256 amountOut) {\\n        PairData memory data = pairs[_pairAddress];\\n        if (_token == data.token0) {\\n            amountOut = data.price0Average.mul(_amountIn).decode144();\\n        } else {\\n            require(_token == data.token1, Error.INVALID_PAIR);\\n            amountOut = data.price1Average.mul(_amountIn).decode144();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97539c0af36905f9918160ba2e9178ad2481bce33b0042195e16862773229055\",\"license\":\"MIT\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x77483b717fd86de5cd25e59fb77d890a631951dd2b50152c237e4293cc9ce5f1\"},\"src/contracts/vendor/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x26726f18a897fb67275ebf22b5d24c14c8f45d423d3d800d64abe0d0cf4d4df2\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\",\"keccak256\":\"0xee2a1432dfe3a83486a1482e1e1f150f71b5bdf59164d25ef1692d0b2b0fcf00\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity <=0.8.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\",\"keccak256\":\"0x7cb78d9f46e455ec0aa17e06457826de705c8e9f96cbe231a0834db6af15223c\",\"license\":\"GPL-2.0-or-later\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x72f209fb342d59f56d357592a08f9f41d9f2f68f22d9f5c8c29b2347b148ba06\",\"license\":\"MIT\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/SafeMath.sol\":{\"content\":\"pragma solidity >=0.6.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x735bec1062e7378a3cdb8570f0134b5ede54e4b51a35b316ffee2a1994eb56be\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/UQ.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.4.0 <0.8.0;\\n\\nimport \\\"./BitMath.sol\\\";\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./Babylonian.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary UQ {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\\"UQ::mul: overflow\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, \\\"UQ::muli: overflow\\\");\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= uint112(-1), \\\"UQ::muluq: upper overflow\\\");\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= type(uint224).max, \\\"UQ::muluq: sum overflow\\\");\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x > 0, \\\"UQ::divuq: division by zero\\\");\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x <= uint144(-1)) {\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n            require(value <= type(uint224).max, \\\"UQ::divuq: overflow\\\");\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result <= type(uint224).max, \\\"UQ::divuq: overflow\\\");\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"UQ::fraction: division by zero\\\");\\n        if (numerator == 0) return UQ.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= type(uint224).max, \\\"UQ::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= type(uint224).max, \\\"UQ::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"UQ::reciprocal: reciprocal of zero\\\");\\n        require(self._x != 1, \\\"UQ::reciprocal: overflow\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0x9f142568eb70302964701f8c3049a5830d9bbf47eeaaf6105db488b57dea4fae\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/vendor/uniswap/v2-periphery/libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"../../v2-core/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../v2-core/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        pair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a2bca1971809444c9bf86f192fec864a0fb3e8b9d7c9fd681742bb12d623efe\"}},\"version\":1}",
    "bytecode": "0x60a06040526103846001553480156200001757600080fd5b506040516200183a3803806200183a8339810160408190526200003a9162000122565b60408051808201909152600381526237313160e81b60208201526001600160a01b038316620000875760405162461bcd60e51b81526004016200007e919062000159565b60405180910390fd5b5060408051808201909152600381526203731360ec1b60208201526001600160a01b038216620000cc5760405162461bcd60e51b81526004016200007e919062000159565b5060609190911b6001600160601b031916608052600080546001600160a01b0319166001600160a01b03909216919091179055620001af565b80516001600160a01b03811681146200011d57600080fd5b919050565b6000806040838503121562000135578182fd5b620001408362000105565b9150620001506020840162000105565b90509250929050565b6000602080835283518082850152825b81811015620001875785810183015185820160400152820162000169565b81811115620001995783604083870101525b50601f01601f1916929092016040019392505050565b60805160601c61166d620001cd60003980610e6b525061166d6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063999db34511610071578063999db34514610150578063b26237e014610163578063b50d882c1461016b578063c45a01551461017e578063f851a44014610186578063fe33b3021461018e576100b4565b80631c1b8772146100b957806352244ec8146100ce5780635b10f7ac146100e1578063636cfa0c146100f4578063704b6c021461011d578063813c3c9314610130575b600080fd5b6100cc6100c7366004611409565b6101b5565b005b6100cc6100dc366004611481565b6103a2565b6100cc6100ef366004611441565b61051f565b610107610102366004611441565b610acf565b6040516101149190611616565b60405180910390f35b6100cc61012b366004611409565b610c14565b61014361013e366004611409565b610ca3565b604051610114919061152a565b6100cc61015e3660046114fa565b610cbe565b610107610d45565b610107610179366004611481565b610d4b565b610143610e69565b610143610e8d565b6101a161019c366004611409565b610e9c565b604051610114989796959493929190611591565b6001600160a01b0381166000908152600260209081526040918290206006810154835180850190945260038452620dcc0d60ea1b92840192909252919063ffffffff1661021e5760405162461bcd60e51b8152600401610215919061153e565b60405180910390fd5b50600080600061022d85610f15565b6006870154600788015460408051808201909152600381526237303760e81b602082015294975092955090935063ffffffff9081168403929190831610156102885760405162461bcd60e51b8152600401610215919061153e565b5060405180602001604052808263ffffffff1687600401548703816102a957fe5b046001600160e01b03908116909152905186546001600160e01b031916911617855560408051602081019091526005860154819063ffffffff8416908603816102ee57fe5b046001600160e01b0390811690915290516001870180546001600160e01b03191691909216178155600486018590556005860184905560068601805463ffffffff191663ffffffff851690811790915560038701546002880154600789015460405193946001600160a01b039384169493909216927f4801f5931ba41963b02f50608ecec4798a1aaac41e7e85e64c50430e25c38fa492610392928c9289906115e7565b60405180910390a4505050505050565b60005460408051808201909152600381526237303960e81b6020820152906001600160a01b031633146103e85760405162461bcd60e51b8152600401610215919061153e565b506001600160a01b0382811660009081526002602081905260409091200154161580159061043257506001600160a01b038281166000908152600260205260409020600301541615155b604051806040016040528060038152602001620dcc0d60ea1b8152509061046c5760405162461bcd60e51b8152600401610215919061153e565b50600154811015604051806040016040528060038152602001621b981960e91b815250906104ad5760405162461bcd60e51b8152600401610215919061153e565b506001600160a01b038083166000818152600260208190526040918290206007810186905560038101549101549151908416939190911691907f5d6c5f7b483e292dff8098abd4301c1a91d6933f1a5c7bd3304031a6199dd64590610513908690611616565b60405180910390a45050565b60005460408051808201909152600381526237303960e81b6020820152906001600160a01b031633146105655760405162461bcd60e51b8152600401610215919061153e565b5060408051808201909152600381526237303160e81b60208201526001600160a01b0384166105a75760405162461bcd60e51b8152600401610215919061153e565b50600154811015604051806040016040528060038152602001621b981960e91b815250906105e85760405162461bcd60e51b8152600401610215919061153e565b506001600160a01b03838116600090815260026020818152604092839020909101548251808401909352600383526237303360e81b91830191909152909116156106455760405162461bcd60e51b8152600401610215919061153e565b5060008390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561068657600080fd5b505afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190611425565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156106fb57600080fd5b505afa15801561070f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107339190611425565b90506001600160a01b0382161580159061075557506001600160a01b03811615155b604051806040016040528060038152602001620dcc0d60ea1b8152509061078f5760405162461bcd60e51b8152600401610215919061153e565b50816001600160a01b0316856001600160a01b031614806107c15750806001600160a01b0316856001600160a01b0316145b1561081a576001600160a01b0385811660008181526003602052604080822080546001600160a01b031916948b169485179055517feabf019a206f6caf3c62b981b764479e0340f903f1ae92e6188e96401b49fe0c9190a35b6000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561085857600080fd5b505afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089091906114ac565b925092509250826001600160701b03166000141580156108b857506001600160701b03821615155b604051806040016040528060038152602001621b981b60e91b815250906108f25760405162461bcd60e51b8152600401610215919061153e565b506001600160a01b0389811660009081526002602081815260409283902091820180546001600160a01b03199081168b87161790915560039092018054909216888516179091558151635909c0d560e01b8152915192891692635909c0d5926004808201939291829003018186803b15801561096d57600080fd5b505afa158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190611512565b600260008b6001600160a01b03166001600160a01b0316815260200190815260200160002060040181905550856001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0a57600080fd5b505afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190611512565b6001600160a01b038a8116600081815260026020526040908190206005810194909455600784018b90556006909301805463ffffffff191663ffffffff861617905591518682169291881691907f8aec9bfffd40d5d25863c2e7368454e9b267f42b45bcdf7a99feddfa18c09f4c90610abc908c90611616565b60405180910390a4505050505050505050565b6001600160a01b03808416600090815260026020818152604080842081516101208101835281546001600160e01b039081166101008301908152825283518086018552600184015490911681529381019390935292830154851690820181905260038301548516606083015260048301546080830152600583015460a0830152600683015463ffffffff1660c083015260079092015460e0820152919285161415610b99578051610b8990610b84908561110a565b611194565b6001600160901b03169150610c0c565b80606001516001600160a01b0316846001600160a01b0316146040518060400160405280600381526020016206e60760eb1b81525090610bec5760405162461bcd60e51b8152600401610215919061153e565b506020810151610c0090610b84908561110a565b6001600160901b031691505b509392505050565b60005460408051808201909152600381526237303960e81b6020820152906001600160a01b03163314610c5a5760405162461bcd60e51b8152600401610215919061153e565b50600080546001600160a01b0319166001600160a01b038316908117825560405190917f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c91a250565b6003602052600090815260409020546001600160a01b031681565b60005460408051808201909152600381526237303960e81b6020820152906001600160a01b03163314610d045760405162461bcd60e51b8152600401610215919061153e565b5060018190556040517f8a7025db6a9c815ab177c3a163acda9e7b1fb0fad7da8a4bc340863591925cda90610d3a908390611616565b60405180910390a150565b60015481565b6001600160a01b0380831660008181526003602081815260408084205486168452600280835281852082516101208101845281546001600160e01b039081166101008301908152825284518087018652600184015490911681529481019490945290810154871691830182905292830154909516606082015260048201546080820152600582015460a0820152600682015463ffffffff1660c082015260079091015460e0820152909290911415610e1d578051610e0d90610b84908561110a565b6001600160901b03169150610e62565b80606001516001600160a01b0316846001600160a01b031614610e435760009150610e62565b6020810151610e5690610b84908561110a565b6001600160901b031691505b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031681565b6002602081815260009283526040928390208351808301855281546001600160e01b03908116825285519384019095526001820154909416825291820154600383015460048401546005850154600686015460079096015494956001600160a01b039485169593909416939192909163ffffffff169088565b6000806000610f2261119f565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5d57600080fd5b505afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f959190611512565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b158015610fd057600080fd5b505afa158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110089190611512565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561104857600080fd5b505afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108091906114ac565b9250925092508363ffffffff168163ffffffff16146111005780840363ffffffff81166110b96001600160701b038086169087166111a9565b600001516001600160e01b031602870196508063ffffffff166110ee856001600160701b0316856001600160701b03166111a9565b516001600160e01b0316029590950194505b5050509193909250565b6111126113cd565b600082158061113857505082516001600160e01b03168281029083828161113557fe5b04145b61117d576040805162461bcd60e51b815260206004820152601160248201527055513a3a6d756c3a206f766572666c6f7760781b604482015290519081900360640190fd5b604080516020810190915290815290505b92915050565b805160701c5b919050565b63ffffffff421690565b6111b16113e0565b60008211611206576040805162461bcd60e51b815260206004820152601e60248201527f55513a3a6672616374696f6e3a206469766973696f6e206279207a65726f0000604482015290519081900360640190fd5b82611220575060408051602081019091526000815261118e565b6001600160901b0383116112b557600082607085901b8161123d57fe5b0490506001600160e01b03811115611295576040805162461bcd60e51b815260206004820152601660248201527555513a3a6672616374696f6e3a206f766572666c6f7760501b604482015290519081900360640190fd5b6040518060200160405280826001600160e01b031681525091505061118e565b60006112c684600160701b8561131d565b90506001600160e01b03811115611295576040805162461bcd60e51b815260206004820152601660248201527555513a3a6672616374696f6e3a206f766572666c6f7760501b604482015290519081900360640190fd5b6000808060001985870986860292508281109083900303905080611353576000841161134857600080fd5b5082900490506113c6565b80841161135f57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6040518060200160405280600081525090565b60408051602081019091526000815290565b80516001600160701b038116811461119a57600080fd5b60006020828403121561141a578081fd5b81356113c68161161f565b600060208284031215611436578081fd5b81516113c68161161f565b600080600060608486031215611455578182fd5b83356114608161161f565b925060208401356114708161161f565b929592945050506040919091013590565b60008060408385031215611493578182fd5b823561149e8161161f565b946020939093013593505050565b6000806000606084860312156114c0578283fd5b6114c9846113f2565b92506114d7602085016113f2565b9150604084015163ffffffff811681146114ef578182fd5b809150509250925092565b60006020828403121561150b578081fd5b5035919050565b600060208284031215611523578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6000602080835283518082850152825b8181101561156a5785810183015185820160400152820161154e565b8181111561157b5783604083870101525b50601f01601f1916929092016040019392505050565b97516001600160e01b039081168952965190961660208801526001600160a01b039485166040880152929093166060860152608085015260a084019190915263ffffffff1660c083015260e08201526101000190565b93546001600160e01b03908116855292549092166020840152604083015263ffffffff16606082015260800190565b90815260200190565b6001600160a01b038116811461163457600080fd5b5056fea2646970667358221220ca693e5a7336e88289ab4b66593b407671cfc43be7bbd773690d8e5ffb68dc1b64736f6c63430007060033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063999db34511610071578063999db34514610150578063b26237e014610163578063b50d882c1461016b578063c45a01551461017e578063f851a44014610186578063fe33b3021461018e576100b4565b80631c1b8772146100b957806352244ec8146100ce5780635b10f7ac146100e1578063636cfa0c146100f4578063704b6c021461011d578063813c3c9314610130575b600080fd5b6100cc6100c7366004611409565b6101b5565b005b6100cc6100dc366004611481565b6103a2565b6100cc6100ef366004611441565b61051f565b610107610102366004611441565b610acf565b6040516101149190611616565b60405180910390f35b6100cc61012b366004611409565b610c14565b61014361013e366004611409565b610ca3565b604051610114919061152a565b6100cc61015e3660046114fa565b610cbe565b610107610d45565b610107610179366004611481565b610d4b565b610143610e69565b610143610e8d565b6101a161019c366004611409565b610e9c565b604051610114989796959493929190611591565b6001600160a01b0381166000908152600260209081526040918290206006810154835180850190945260038452620dcc0d60ea1b92840192909252919063ffffffff1661021e5760405162461bcd60e51b8152600401610215919061153e565b60405180910390fd5b50600080600061022d85610f15565b6006870154600788015460408051808201909152600381526237303760e81b602082015294975092955090935063ffffffff9081168403929190831610156102885760405162461bcd60e51b8152600401610215919061153e565b5060405180602001604052808263ffffffff1687600401548703816102a957fe5b046001600160e01b03908116909152905186546001600160e01b031916911617855560408051602081019091526005860154819063ffffffff8416908603816102ee57fe5b046001600160e01b0390811690915290516001870180546001600160e01b03191691909216178155600486018590556005860184905560068601805463ffffffff191663ffffffff851690811790915560038701546002880154600789015460405193946001600160a01b039384169493909216927f4801f5931ba41963b02f50608ecec4798a1aaac41e7e85e64c50430e25c38fa492610392928c9289906115e7565b60405180910390a4505050505050565b60005460408051808201909152600381526237303960e81b6020820152906001600160a01b031633146103e85760405162461bcd60e51b8152600401610215919061153e565b506001600160a01b0382811660009081526002602081905260409091200154161580159061043257506001600160a01b038281166000908152600260205260409020600301541615155b604051806040016040528060038152602001620dcc0d60ea1b8152509061046c5760405162461bcd60e51b8152600401610215919061153e565b50600154811015604051806040016040528060038152602001621b981960e91b815250906104ad5760405162461bcd60e51b8152600401610215919061153e565b506001600160a01b038083166000818152600260208190526040918290206007810186905560038101549101549151908416939190911691907f5d6c5f7b483e292dff8098abd4301c1a91d6933f1a5c7bd3304031a6199dd64590610513908690611616565b60405180910390a45050565b60005460408051808201909152600381526237303960e81b6020820152906001600160a01b031633146105655760405162461bcd60e51b8152600401610215919061153e565b5060408051808201909152600381526237303160e81b60208201526001600160a01b0384166105a75760405162461bcd60e51b8152600401610215919061153e565b50600154811015604051806040016040528060038152602001621b981960e91b815250906105e85760405162461bcd60e51b8152600401610215919061153e565b506001600160a01b03838116600090815260026020818152604092839020909101548251808401909352600383526237303360e81b91830191909152909116156106455760405162461bcd60e51b8152600401610215919061153e565b5060008390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561068657600080fd5b505afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190611425565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156106fb57600080fd5b505afa15801561070f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107339190611425565b90506001600160a01b0382161580159061075557506001600160a01b03811615155b604051806040016040528060038152602001620dcc0d60ea1b8152509061078f5760405162461bcd60e51b8152600401610215919061153e565b50816001600160a01b0316856001600160a01b031614806107c15750806001600160a01b0316856001600160a01b0316145b1561081a576001600160a01b0385811660008181526003602052604080822080546001600160a01b031916948b169485179055517feabf019a206f6caf3c62b981b764479e0340f903f1ae92e6188e96401b49fe0c9190a35b6000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561085857600080fd5b505afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089091906114ac565b925092509250826001600160701b03166000141580156108b857506001600160701b03821615155b604051806040016040528060038152602001621b981b60e91b815250906108f25760405162461bcd60e51b8152600401610215919061153e565b506001600160a01b0389811660009081526002602081815260409283902091820180546001600160a01b03199081168b87161790915560039092018054909216888516179091558151635909c0d560e01b8152915192891692635909c0d5926004808201939291829003018186803b15801561096d57600080fd5b505afa158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190611512565b600260008b6001600160a01b03166001600160a01b0316815260200190815260200160002060040181905550856001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0a57600080fd5b505afa158015610a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a429190611512565b6001600160a01b038a8116600081815260026020526040908190206005810194909455600784018b90556006909301805463ffffffff191663ffffffff861617905591518682169291881691907f8aec9bfffd40d5d25863c2e7368454e9b267f42b45bcdf7a99feddfa18c09f4c90610abc908c90611616565b60405180910390a4505050505050505050565b6001600160a01b03808416600090815260026020818152604080842081516101208101835281546001600160e01b039081166101008301908152825283518086018552600184015490911681529381019390935292830154851690820181905260038301548516606083015260048301546080830152600583015460a0830152600683015463ffffffff1660c083015260079092015460e0820152919285161415610b99578051610b8990610b84908561110a565b611194565b6001600160901b03169150610c0c565b80606001516001600160a01b0316846001600160a01b0316146040518060400160405280600381526020016206e60760eb1b81525090610bec5760405162461bcd60e51b8152600401610215919061153e565b506020810151610c0090610b84908561110a565b6001600160901b031691505b509392505050565b60005460408051808201909152600381526237303960e81b6020820152906001600160a01b03163314610c5a5760405162461bcd60e51b8152600401610215919061153e565b50600080546001600160a01b0319166001600160a01b038316908117825560405190917f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c91a250565b6003602052600090815260409020546001600160a01b031681565b60005460408051808201909152600381526237303960e81b6020820152906001600160a01b03163314610d045760405162461bcd60e51b8152600401610215919061153e565b5060018190556040517f8a7025db6a9c815ab177c3a163acda9e7b1fb0fad7da8a4bc340863591925cda90610d3a908390611616565b60405180910390a150565b60015481565b6001600160a01b0380831660008181526003602081815260408084205486168452600280835281852082516101208101845281546001600160e01b039081166101008301908152825284518087018652600184015490911681529481019490945290810154871691830182905292830154909516606082015260048201546080820152600582015460a0820152600682015463ffffffff1660c082015260079091015460e0820152909290911415610e1d578051610e0d90610b84908561110a565b6001600160901b03169150610e62565b80606001516001600160a01b0316846001600160a01b031614610e435760009150610e62565b6020810151610e5690610b84908561110a565b6001600160901b031691505b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031681565b6002602081815260009283526040928390208351808301855281546001600160e01b03908116825285519384019095526001820154909416825291820154600383015460048401546005850154600686015460079096015494956001600160a01b039485169593909416939192909163ffffffff169088565b6000806000610f2261119f565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5d57600080fd5b505afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f959190611512565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b158015610fd057600080fd5b505afa158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110089190611512565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561104857600080fd5b505afa15801561105c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108091906114ac565b9250925092508363ffffffff168163ffffffff16146111005780840363ffffffff81166110b96001600160701b038086169087166111a9565b600001516001600160e01b031602870196508063ffffffff166110ee856001600160701b0316856001600160701b03166111a9565b516001600160e01b0316029590950194505b5050509193909250565b6111126113cd565b600082158061113857505082516001600160e01b03168281029083828161113557fe5b04145b61117d576040805162461bcd60e51b815260206004820152601160248201527055513a3a6d756c3a206f766572666c6f7760781b604482015290519081900360640190fd5b604080516020810190915290815290505b92915050565b805160701c5b919050565b63ffffffff421690565b6111b16113e0565b60008211611206576040805162461bcd60e51b815260206004820152601e60248201527f55513a3a6672616374696f6e3a206469766973696f6e206279207a65726f0000604482015290519081900360640190fd5b82611220575060408051602081019091526000815261118e565b6001600160901b0383116112b557600082607085901b8161123d57fe5b0490506001600160e01b03811115611295576040805162461bcd60e51b815260206004820152601660248201527555513a3a6672616374696f6e3a206f766572666c6f7760501b604482015290519081900360640190fd5b6040518060200160405280826001600160e01b031681525091505061118e565b60006112c684600160701b8561131d565b90506001600160e01b03811115611295576040805162461bcd60e51b815260206004820152601660248201527555513a3a6672616374696f6e3a206f766572666c6f7760501b604482015290519081900360640190fd5b6000808060001985870986860292508281109083900303905080611353576000841161134857600080fd5b5082900490506113c6565b80841161135f57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6040518060200160405280600081525090565b60408051602081019091526000815290565b80516001600160701b038116811461119a57600080fd5b60006020828403121561141a578081fd5b81356113c68161161f565b600060208284031215611436578081fd5b81516113c68161161f565b600080600060608486031215611455578182fd5b83356114608161161f565b925060208401356114708161161f565b929592945050506040919091013590565b60008060408385031215611493578182fd5b823561149e8161161f565b946020939093013593505050565b6000806000606084860312156114c0578283fd5b6114c9846113f2565b92506114d7602085016113f2565b9150604084015163ffffffff811681146114ef578182fd5b809150509250925092565b60006020828403121561150b578081fd5b5035919050565b600060208284031215611523578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6000602080835283518082850152825b8181101561156a5785810183015185820160400152820161154e565b8181111561157b5783604083870101525b50601f01601f1916929092016040019392505050565b97516001600160e01b039081168952965190961660208801526001600160a01b039485166040880152929093166060860152608085015260a084019190915263ffffffff1660c083015260e08201526101000190565b93546001600160e01b03908116855292549092166020840152604083015263ffffffff16606082015260800190565b90815260200190565b6001600160a01b038116811461163457600080fd5b5056fea2646970667358221220ca693e5a7336e88289ab4b66593b407671cfc43be7bbd773690d8e5ffb68dc1b64736f6c63430007060033",
    "devdoc": {
        "author": "Kresko",
        "kind": "dev",
        "methods": {
            "configurePair(address,uint256)": {
                "params": {
                    "_pairAddress": "Pair address",
                    "_updatePeriod": "Update period (TWAP)"
                }
            },
            "consult(address,address,uint256)": {
                "params": {
                    "_amountIn": "Amount of token to get value for",
                    "_pairAddress": "Address of the pair that contains the token",
                    "_token": "Address of the token to get value for"
                }
            },
            "consultKrAsset(address,uint256)": {
                "params": {
                    "_amountIn": "Amount of Kresko Asset to get value for",
                    "_kreskoAsset": "Kresko asset address"
                }
            },
            "initPair(address,address,uint256)": {
                "params": {
                    "_kreskoAsset": "Kresko Asset in the pair we want to add helper functionality for",
                    "_pairAddress": "Liquidity token address for the pair",
                    "_updatePeriod": "The update period (TWAP) for this AMM pair"
                }
            },
            "setAdmin(address)": {
                "params": {
                    "_newAdmin": "New admin address"
                }
            },
            "setMinUpdatePeriod(uint256)": {
                "params": {
                    "_minUpdatePeriod": "The new minimum period that can be set for a pair"
                }
            },
            "update(address)": {
                "params": {
                    "_pairAddress": "Pair address"
                }
            }
        },
        "title": "Kresko AMM Oracle (Uniswap V2) Keeps track of time-weighted average prices for tokens in a Uniswap V2 pair. This oracle is intended to be used with Kresko AMM. This oracle is updated by calling the `update` with the liquidity token address. The prices can be queried by calling `consult` or `consultKrAsset` for quality-of-life with Kresko Assets, it does not need the pair address. Bookkeeping is done in terms of time-weighted average prices, and that period has a lower bound of `minUpdatePeriod`. Logic is pretty much what's laid out in https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol This contract just extends some storage to deal with many pairs with their own configuration.",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "configurePair(address,uint256)": {
                "notice": "Configures existing values of an AMM pair"
            },
            "consult(address,address,uint256)": {
                "notice": "General consult function, gets a value for _amountIn"
            },
            "consultKrAsset(address,uint256)": {
                "notice": "Get the AMM price for an amount of krAsset"
            },
            "initPair(address,address,uint256)": {
                "notice": "Initializes an Uniswap V2 pair to be tracked by this oracle. The criteria for a pair to be tracked: The pair must not already be tracked by this oracle. The pair must exist. The pair must have reserves. The update period must be greater than the minimum update period."
            },
            "setAdmin(address)": {
                "notice": "Sets a new admin"
            },
            "setMinUpdatePeriod(uint256)": {
                "notice": "Set a new min update period"
            },
            "update(address)": {
                "notice": "Updates the oracle values for a pair"
            }
        },
        "notice": "Kresko gives _NO GUARANTEES_ for the correctness of the prices provided by this oracle.",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 336,
                "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                "label": "admin",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 339,
                "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                "label": "minUpdatePeriod",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
            },
            {
                "astId": 343,
                "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                "label": "pairs",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_struct(PairData)332_storage)"
            },
            {
                "astId": 347,
                "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                "label": "krAssets",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_address)"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_mapping(t_address,t_struct(PairData)332_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct UniswapV2Oracle.PairData)",
                "numberOfBytes": "32",
                "value": "t_struct(PairData)332_storage"
            },
            "t_struct(PairData)332_storage": {
                "encoding": "inplace",
                "label": "struct UniswapV2Oracle.PairData",
                "members": [
                    {
                        "astId": 317,
                        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                        "label": "price0Average",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(uq112x112)2099_storage"
                    },
                    {
                        "astId": 319,
                        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                        "label": "price1Average",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_struct(uq112x112)2099_storage"
                    },
                    {
                        "astId": 321,
                        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                        "label": "token0",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_address"
                    },
                    {
                        "astId": 323,
                        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                        "label": "token1",
                        "offset": 0,
                        "slot": "3",
                        "type": "t_address"
                    },
                    {
                        "astId": 325,
                        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                        "label": "price0CumulativeLast",
                        "offset": 0,
                        "slot": "4",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 327,
                        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                        "label": "price1CumulativeLast",
                        "offset": 0,
                        "slot": "5",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 329,
                        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                        "label": "blockTimestampLast",
                        "offset": 0,
                        "slot": "6",
                        "type": "t_uint32"
                    },
                    {
                        "astId": 331,
                        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                        "label": "updatePeriod",
                        "offset": 0,
                        "slot": "7",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "256"
            },
            "t_struct(uq112x112)2099_storage": {
                "encoding": "inplace",
                "label": "struct UQ.uq112x112",
                "members": [
                    {
                        "astId": 2098,
                        "contract": "src/contracts/minter/UniswapV2Oracle.sol:UniswapV2Oracle",
                        "label": "_x",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint224"
                    }
                ],
                "numberOfBytes": "32"
            },
            "t_uint224": {
                "encoding": "inplace",
                "label": "uint224",
                "numberOfBytes": "28"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            },
            "t_uint32": {
                "encoding": "inplace",
                "label": "uint32",
                "numberOfBytes": "4"
            }
        }
    }
}
