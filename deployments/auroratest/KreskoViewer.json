{
    "address": "0xf93852A798501d2c35796fa2a51bE8E36E2EA5Fa",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "contract IKresko",
                    "name": "_kresko",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "Kresko",
            "outputs": [
                {
                    "internalType": "contract IKresko",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "borrowingPowerUSD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "collateralAssetInfoFor",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "underlyingRebasingToken",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "amountUSD",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "cFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                        },
                        {
                            "internalType": "uint256",
                            "name": "index",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.CollateralAssetInfoUser[]",
                    "name": "result",
                    "type": "tuple[]"
                },
                {
                    "internalType": "uint256",
                    "name": "totalCollateralUSD",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "assetAddresses",
                    "type": "address[]"
                }
            ],
            "name": "collateralAssetInfos",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "underlyingRebasingToken",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "cFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.CollateralAssetInfo[]",
                    "name": "result",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IERC20Upgradeable[]",
                    "name": "_tokens",
                    "type": "address[]"
                },
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }
            ],
            "name": "getAllowances",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "spender",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "allowance",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct KreskoViewer.Allowance[]",
                    "name": "allowances",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "_collateralAssets",
                    "type": "address[]"
                },
                {
                    "internalType": "address[]",
                    "name": "_krAssets",
                    "type": "address[]"
                }
            ],
            "name": "getAssetInfos",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "underlyingRebasingToken",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "cFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.CollateralAssetInfo[]",
                    "name": "collateralAssets",
                    "type": "tuple[]"
                },
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "kFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.krAssetInfo[]",
                    "name": "krAssets",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IERC20Upgradeable[]",
                    "name": "_tokens",
                    "type": "address[]"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "getBalances",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "balance",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct KreskoViewer.Balance[]",
                    "name": "balances",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IERC20MetadataUpgradeable[]",
                    "name": "_tokens",
                    "type": "address[]"
                }
            ],
            "name": "getTokenMetadatas",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.TokenMetadata[]",
                    "name": "metadatas",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "healthFactorFor",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "krAssetInfoFor",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "amountUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "index",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "kFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "bool",
                            "name": "mintable",
                            "type": "bool"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.krAssetInfoUser[]",
                    "name": "result",
                    "type": "tuple[]"
                },
                {
                    "internalType": "uint256",
                    "name": "totalDebtUSD",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "assetAddresses",
                    "type": "address[]"
                }
            ],
            "name": "krAssetInfos",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "kFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.krAssetInfo[]",
                    "name": "result",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "kreskoUser",
            "outputs": [
                {
                    "components": [
                        {
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "assetAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "oracleAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amountUSD",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                },
                                {
                                    "components": [
                                        {
                                            "internalType": "uint256",
                                            "name": "rawValue",
                                            "type": "uint256"
                                        }
                                    ],
                                    "internalType": "struct FixedPoint.Unsigned",
                                    "name": "kFactor",
                                    "type": "tuple"
                                },
                                {
                                    "internalType": "bool",
                                    "name": "mintable",
                                    "type": "bool"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "price",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "symbol",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "name",
                                    "type": "string"
                                }
                            ],
                            "internalType": "struct KreskoViewer.krAssetInfoUser[]",
                            "name": "krAssets",
                            "type": "tuple[]"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "assetAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "oracleAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "underlyingRebasingToken",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amountUSD",
                                    "type": "uint256"
                                },
                                {
                                    "components": [
                                        {
                                            "internalType": "uint256",
                                            "name": "rawValue",
                                            "type": "uint256"
                                        }
                                    ],
                                    "internalType": "struct FixedPoint.Unsigned",
                                    "name": "cFactor",
                                    "type": "tuple"
                                },
                                {
                                    "internalType": "uint8",
                                    "name": "decimals",
                                    "type": "uint8"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "price",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "symbol",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "name",
                                    "type": "string"
                                }
                            ],
                            "internalType": "struct KreskoViewer.CollateralAssetInfoUser[]",
                            "name": "collateralAssets",
                            "type": "tuple[]"
                        },
                        {
                            "internalType": "uint256",
                            "name": "healthFactor",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "debtActualUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "debtUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "collateralActualUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "collateralUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "minCollateralUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "borrowingPowerUSD",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct KreskoViewer.KreskoUser",
                    "name": "user",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0xf3b5c6d9b58e998fcfdf7985bf28f4e7906f50a8323a6809eaf25fef68c1316d",
    "receipt": {
        "to": null,
        "from": "0x2121245dcAD697f11244068AaD6EcbC301811239",
        "contractAddress": "0xf93852A798501d2c35796fa2a51bE8E36E2EA5Fa",
        "transactionIndex": 0,
        "gasUsed": "2522128",
        "logsBloom": "0x
        "blockHash": "0x0fc97fac4eb66e7878a097b0a111c7a88c1882e638ab7bdb419851f61cadf35d",
        "transactionHash": "0xf3b5c6d9b58e998fcfdf7985bf28f4e7906f50a8323a6809eaf25fef68c1316d",
        "logs": [],
        "blockNumber": 89872775,
        "cumulativeGasUsed": "0",
        "status": 1,
        "byzantium": true
    },
    "args": ["0xb6BdB49B220905D34b0B9348D2AE514Df9D9F5dC"],
    "numDeployments": 1,
    "solcInputHash": "766dda11e869a31fcd3ae688ad31a04c",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IKresko\",\"name\":\"_kresko\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Kresko\",\"outputs\":[{\"internalType\":\"contract IKresko\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"borrowingPowerUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"collateralAssetInfoFor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfoUser[]\",\"name\":\"result\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assetAddresses\",\"type\":\"address[]\"}],\"name\":\"collateralAssetInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfo[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"internalType\":\"struct KreskoViewer.Allowance[]\",\"name\":\"allowances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_krAssets\",\"type\":\"address[]\"}],\"name\":\"getAssetInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfo[]\",\"name\":\"collateralAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfo[]\",\"name\":\"krAssets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct KreskoViewer.Balance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenMetadatas\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.TokenMetadata[]\",\"name\":\"metadatas\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"healthFactorFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"krAssetInfoFor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfoUser[]\",\"name\":\"result\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assetAddresses\",\"type\":\"address[]\"}],\"name\":\"krAssetInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfo[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"kreskoUser\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfoUser[]\",\"name\":\"krAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfoUser[]\",\"name\":\"collateralAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtActualUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralActualUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingPowerUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct KreskoViewer.KreskoUser\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/KreskoViewer.sol\":\"KreskoViewer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x322088ced3c1d027a3260de4e5a867b2264adeef252b94158a9725767873ea31\",\"license\":\"MIT\"},\"src/contracts/KreskoViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"./interfaces/IKresko.sol\\\";\\n\\ncontract KreskoViewer {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    IKresko public Kresko;\\n\\n    struct krAssetInfoUser {\\n        address assetAddress;\\n        address oracleAddress;\\n        uint256 amount;\\n        uint256 amountUSD;\\n        uint256 index;\\n        FixedPoint.Unsigned kFactor;\\n        bool mintable;\\n        uint256 price;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct CollateralAssetInfoUser {\\n        address assetAddress;\\n        address oracleAddress;\\n        address underlyingRebasingToken;\\n        uint256 amount;\\n        uint256 amountUSD;\\n        FixedPoint.Unsigned cFactor;\\n        uint8 decimals;\\n        uint256 index;\\n        uint256 price;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct CollateralAssetInfo {\\n        address assetAddress;\\n        address oracleAddress;\\n        address underlyingRebasingToken;\\n        uint256 price;\\n        uint256 value;\\n        FixedPoint.Unsigned cFactor;\\n        uint8 decimals;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct krAssetInfo {\\n        address oracleAddress;\\n        address assetAddress;\\n        uint256 price;\\n        uint256 value;\\n        FixedPoint.Unsigned kFactor;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct KreskoUser {\\n        krAssetInfoUser[] krAssets;\\n        CollateralAssetInfoUser[] collateralAssets;\\n        uint256 healthFactor;\\n        uint256 debtActualUSD;\\n        uint256 debtUSD;\\n        uint256 collateralActualUSD;\\n        uint256 collateralUSD;\\n        uint256 minCollateralUSD;\\n        uint256 borrowingPowerUSD;\\n    }\\n\\n    struct Allowance {\\n        address owner;\\n        address spender;\\n        uint256 allowance;\\n    }\\n\\n    struct Balance {\\n        address token;\\n        uint256 balance;\\n    }\\n\\n    struct TokenMetadata {\\n        uint8 decimals;\\n        string symbol;\\n        string name;\\n    }\\n\\n    constructor(IKresko _kresko) {\\n        Kresko = _kresko;\\n    }\\n\\n    function healthFactorFor(address _account) public view returns (uint256) {\\n        uint256 minCollateral = Kresko.getAccountMinimumCollateralValue(_account).rawValue;\\n        uint256 userCollateral = Kresko.getAccountCollateralValue(_account).rawValue;\\n\\n        if (minCollateral > 0) {\\n            return (userCollateral * 10**18) / minCollateral;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function kreskoUser(address _account) external view returns (KreskoUser memory user) {\\n        (krAssetInfoUser[] memory krInfos, uint256 totalDebtUSD) = krAssetInfoFor(_account);\\n        (CollateralAssetInfoUser[] memory collateralInfos, uint256 totalCollateralUSD) = collateralAssetInfoFor(\\n            _account\\n        );\\n        if (krInfos.length > 0 || collateralInfos.length > 0) {\\n            user = KreskoUser({\\n                collateralAssets: collateralInfos,\\n                krAssets: krInfos,\\n                borrowingPowerUSD: borrowingPowerUSD(_account),\\n                healthFactor: healthFactorFor(_account),\\n                debtActualUSD: totalDebtUSD,\\n                debtUSD: Kresko.getAccountKrAssetValue(_account).rawValue,\\n                collateralActualUSD: totalCollateralUSD,\\n                collateralUSD: Kresko.getAccountCollateralValue(_account).rawValue,\\n                minCollateralUSD: Kresko.getAccountMinimumCollateralValue(_account).rawValue\\n            });\\n        }\\n    }\\n\\n    function krAssetInfoFor(address _account)\\n        public\\n        view\\n        returns (krAssetInfoUser[] memory result, uint256 totalDebtUSD)\\n    {\\n        address[] memory krAssetAddresses = Kresko.getMintedKreskoAssets(_account);\\n        if (krAssetAddresses.length > 0) {\\n            result = new krAssetInfoUser[](krAssetAddresses.length);\\n            for (uint256 i; i < krAssetAddresses.length; i++) {\\n                address assetAddress = krAssetAddresses[i];\\n                IKresko.KrAsset memory krAsset = Kresko.kreskoAssets(assetAddress);\\n                uint256 amount = Kresko.kreskoAssetDebt(_account, assetAddress);\\n\\n                uint256 price = uint256(krAsset.oracle.latestAnswer());\\n                uint256 amountUSD = Kresko.getKrAssetValue(assetAddress, amount, true).rawValue;\\n\\n                string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n                string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n\\n                krAssetInfoUser memory assetInfo = krAssetInfoUser({\\n                    assetAddress: assetAddress,\\n                    oracleAddress: address(krAsset.oracle),\\n                    amount: amount,\\n                    amountUSD: amountUSD,\\n                    index: i,\\n                    kFactor: krAsset.kFactor,\\n                    mintable: krAsset.mintable,\\n                    price: price,\\n                    symbol: symbol,\\n                    name: name\\n                });\\n\\n                totalDebtUSD += amountUSD;\\n                result[i] = assetInfo;\\n            }\\n        }\\n    }\\n\\n    function collateralAssetInfoFor(address _account)\\n        public\\n        view\\n        returns (CollateralAssetInfoUser[] memory result, uint256 totalCollateralUSD)\\n    {\\n        address[] memory collateralAssetAddresses = Kresko.getDepositedCollateralAssets(_account);\\n        if (collateralAssetAddresses.length > 0) {\\n            result = new CollateralAssetInfoUser[](collateralAssetAddresses.length);\\n            for (uint256 i; i < collateralAssetAddresses.length; i++) {\\n                address assetAddress = collateralAssetAddresses[i];\\n                IKresko.CollateralAsset memory collateralAsset = Kresko.collateralAssets(assetAddress);\\n                uint8 decimals = IERC20MetadataUpgradeable(assetAddress).decimals();\\n\\n                uint256 amount = Kresko.collateralDeposits(_account, assetAddress);\\n\\n                string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n                (FixedPoint.Unsigned memory amountUSD, FixedPoint.Unsigned memory price) = Kresko\\n                    .getCollateralValueAndOraclePrice(assetAddress, amount, true);\\n\\n                string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n\\n                CollateralAssetInfoUser memory assetInfo = CollateralAssetInfoUser({\\n                    amount: amount,\\n                    amountUSD: amountUSD.rawValue,\\n                    oracleAddress: address(collateralAsset.oracle),\\n                    underlyingRebasingToken: collateralAsset.underlyingRebasingToken,\\n                    assetAddress: assetAddress,\\n                    cFactor: collateralAsset.factor,\\n                    decimals: decimals,\\n                    index: i,\\n                    price: price.rawValue,\\n                    symbol: symbol,\\n                    name: name\\n                });\\n\\n                totalCollateralUSD += amountUSD.rawValue;\\n                result[i] = assetInfo;\\n            }\\n        }\\n    }\\n\\n    function collateralAssetInfos(address[] memory assetAddresses)\\n        public\\n        view\\n        returns (CollateralAssetInfo[] memory result)\\n    {\\n        result = new CollateralAssetInfo[](assetAddresses.length);\\n        for (uint256 i; i < assetAddresses.length; i++) {\\n            address assetAddress = assetAddresses[i];\\n            IKresko.CollateralAsset memory collateralAsset = Kresko.collateralAssets(assetAddress);\\n            uint8 decimals = IERC20MetadataUpgradeable(assetAddress).decimals();\\n\\n            string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n            (FixedPoint.Unsigned memory value, FixedPoint.Unsigned memory price) = Kresko\\n                .getCollateralValueAndOraclePrice(assetAddress, 1 * 10**decimals, false);\\n\\n            string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n\\n            CollateralAssetInfo memory assetInfo = CollateralAssetInfo({\\n                value: value.rawValue,\\n                oracleAddress: address(collateralAsset.oracle),\\n                underlyingRebasingToken: collateralAsset.underlyingRebasingToken,\\n                assetAddress: assetAddress,\\n                cFactor: collateralAsset.factor,\\n                decimals: decimals,\\n                price: price.rawValue,\\n                symbol: symbol,\\n                name: name\\n            });\\n\\n            result[i] = assetInfo;\\n        }\\n    }\\n\\n    function getAssetInfos(address[] memory _collateralAssets, address[] memory _krAssets)\\n        external\\n        view\\n        returns (CollateralAssetInfo[] memory collateralAssets, krAssetInfo[] memory krAssets)\\n    {\\n        collateralAssets = collateralAssetInfos(_collateralAssets);\\n        krAssets = krAssetInfos(_krAssets);\\n    }\\n\\n    function krAssetInfos(address[] memory assetAddresses) public view returns (krAssetInfo[] memory result) {\\n        result = new krAssetInfo[](assetAddresses.length);\\n        for (uint256 i; i < assetAddresses.length; i++) {\\n            address assetAddress = assetAddresses[i];\\n\\n            IKresko.KrAsset memory krAsset = Kresko.kreskoAssets(assetAddress);\\n\\n            FixedPoint.Unsigned memory value = Kresko.getKrAssetValue(assetAddress, 1 ether, false);\\n            uint256 price = uint256(krAsset.oracle.latestAnswer());\\n\\n            string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n            string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n\\n            krAssetInfo memory assetInfo = krAssetInfo({\\n                value: value.rawValue,\\n                oracleAddress: address(krAsset.oracle),\\n                assetAddress: assetAddress,\\n                kFactor: krAsset.kFactor,\\n                price: price,\\n                symbol: symbol,\\n                name: name\\n            });\\n\\n            result[i] = assetInfo;\\n        }\\n    }\\n\\n    function borrowingPowerUSD(address _account) public view returns (uint256) {\\n        FixedPoint.Unsigned memory minCollateral = Kresko.getAccountMinimumCollateralValue(_account);\\n        FixedPoint.Unsigned memory collateral = Kresko.getAccountCollateralValue(_account);\\n\\n        if (collateral.isLessThan(minCollateral)) {\\n            return 0;\\n        } else {\\n            return collateral.sub(minCollateral).rawValue;\\n        }\\n    }\\n\\n    function getTokenMetadatas(IERC20MetadataUpgradeable[] memory _tokens)\\n        external\\n        view\\n        returns (TokenMetadata[] memory metadatas)\\n    {\\n        metadatas = new TokenMetadata[](_tokens.length);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            metadatas[i] = TokenMetadata({\\n                decimals: _tokens[i].decimals(),\\n                name: _tokens[i].name(),\\n                symbol: _tokens[i].symbol()\\n            });\\n        }\\n    }\\n\\n    function getBalances(IERC20Upgradeable[] memory _tokens, address account)\\n        external\\n        view\\n        returns (Balance[] memory balances)\\n    {\\n        balances = new Balance[](_tokens.length);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            balances[i] = Balance({token: address(_tokens[i]), balance: _tokens[i].balanceOf(account)});\\n        }\\n    }\\n\\n    function getAllowances(\\n        IERC20Upgradeable[] memory _tokens,\\n        address owner,\\n        address spender\\n    ) external view returns (Allowance[] memory allowances) {\\n        allowances = new Allowance[](_tokens.length);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            allowances[i] = Allowance({\\n                allowance: _tokens[i].allowance(owner, spender),\\n                spender: spender,\\n                owner: owner\\n            });\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe61f3859350fa1a8e2a3f0ef5acf80f66e03f530afc249255afcaafe11bd04bb\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xf5d053ccdcb838a44b17af1f8b5b2b60f890108effcec69377cb81796fe9278c\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x70df2712dd3b85c753ff4cee292af93e81c5bf616983e4cbc94f692555362393\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x710f75b7d73282a87a60c5a9d1e6d1cfdd6cdf80ccf6a22982d20a1d6a24c7ce\",\"license\":\"MIT\"},\"src/contracts/interfaces/IKresko.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../libraries/FixedPoint.sol\\\";\\nimport \\\"../flux/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\ninterface IKresko {\\n    struct CollateralAsset {\\n        FixedPoint.Unsigned factor;\\n        AggregatorV2V3Interface oracle;\\n        address underlyingRebasingToken;\\n        uint8 decimals;\\n        bool exists;\\n    }\\n\\n    struct KrAsset {\\n        FixedPoint.Unsigned kFactor;\\n        AggregatorV2V3Interface oracle;\\n        bool exists;\\n        bool mintable;\\n    }\\n\\n    function depositCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount\\n    ) external;\\n\\n    function depositRebasingCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _rebasingAmount\\n    ) external;\\n\\n    function withdrawCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) external;\\n\\n    function withdrawRebasingCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) external;\\n\\n    function mintKreskoAsset(\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _amount\\n    ) external;\\n\\n    function burnKreskoAsset(\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        uint256 _mintedKreskoAssetIndex\\n    ) external;\\n\\n    function collateralExists(address) external view returns (bool);\\n\\n    function krAssetExists(address) external view returns (bool);\\n\\n    function kreskoAssets(address) external view returns (KrAsset memory);\\n\\n    function collateralAssets(address) external view returns (CollateralAsset memory);\\n\\n    function getDepositedCollateralAssetIndex(address, address) external view returns (uint256 i);\\n\\n    function getMintedKreskoAssetsIndex(address, address) external view returns (uint256 i);\\n\\n    function getMintedKreskoAssets(address user) external view returns (address[] memory);\\n\\n    function getDepositedCollateralAssets(address user) external view returns (address[] memory);\\n\\n    function getCollateralValueAndOraclePrice(\\n        address _collateralAsset,\\n        uint256 _amount,\\n        bool _ignoreCollateralFactor\\n    ) external view returns (FixedPoint.Unsigned memory, FixedPoint.Unsigned memory);\\n\\n    function calculateMaxLiquidatableValueForAssets(\\n        address _account,\\n        address _repayKreskoAsset,\\n        address _collateralAssetToSeize\\n    ) external view returns (FixedPoint.Unsigned memory);\\n\\n    function minimumCollateralizationRatio() external view returns (FixedPoint.Unsigned memory);\\n\\n    function kreskoAssetDebt(address, address) external view returns (uint256);\\n\\n    function collateralDeposits(address, address) external view returns (uint256);\\n\\n    function getMinimumCollateralValue(address _krAsset, uint256 _amount)\\n        external\\n        view\\n        returns (FixedPoint.Unsigned memory);\\n\\n    function getAccountCollateralValue(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getAccountMinimumCollateralValue(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getAccountKrAssetValue(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getKrAssetValue(\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        bool _ignoreKfactor\\n    ) external view returns (FixedPoint.Unsigned memory);\\n}\\n\",\"keccak256\":\"0x1b72186653d8861b6ae1af68663ecb7de70dc1fa7b3df6d2fb22315701fd38cd\",\"license\":\"MIT\"},\"src/contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMathUpgradeable for uint256;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    uint256 internal constant FP_DECIMALS = 18;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 internal constant FP_SCALING_FACTOR = 10**FP_DECIMALS;\\n\\n    // --------------------------------------- UNSIGNED ---------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED ------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored\\n    //   internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------- Additional Fixed Point math functions specific to Kresko protocol -------------------\\n\\n    /**\\n    //  * @notice Calculate amount of collateral to seize during the liquidation process.\\n    //  * @param _collateralOraclePriceUSD The address of the collateral asset to be seized.\\n    //  * @param _kreskoAssetRepayAmountUSD Kresko asset amount being repaid in exchange for the seized collateral.\\n    //  */\\n    function _calculateAmountToSeize(\\n        Unsigned memory _liquidationIncentiveMultiplier,\\n        Unsigned memory _collateralOraclePriceUSD,\\n        Unsigned memory _kreskoAssetRepayAmountUSD\\n    ) internal pure returns (Unsigned memory) {\\n        // Seize amount = (repay amount USD * liquidation incentive / collateral price USD).\\n        // Denominate seize amount in collateral type\\n        // Apply liquidation incentive multiplier\\n        return div(mul(_kreskoAssetRepayAmountUSD, _liquidationIncentiveMultiplier), _collateralOraclePriceUSD);\\n    }\\n}\\n\",\"keccak256\":\"0xcd7b7b06bb113139757fddc04ed987ecf53edda5b3811f1713c911b6a8261195\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b5060405162002cdb38038062002cdb83398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b612c3f806200009c6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b56274d411610081578063d1c070281161005b578063d1c07028146101f8578063def86ce114610218578063f79031e81461023957600080fd5b8063b56274d4146101a5578063b69a9850146101b8578063be6d74a0146101d857600080fd5b80636bb52909116100b25780636bb52909146101425780636e0696d614610163578063983ff6151461018457600080fd5b806327c5607d146100d957806358b23fd714610102578063624ba70114610122575b600080fd5b6100ec6100e7366004611ef7565b610264565b6040516100f99190612064565b60405180910390f35b610115610110366004612077565b610606565b6040516100f99190612111565b610135610130366004611ef7565b61084d565b6040516100f99190612267565b61015561015036600461227a565b610b96565b6040516100f99291906122de565b61017661017136600461230c565b610bb6565b6040516100f9929190612411565b61019761019236600461230c565b611023565b6040519081526020016100f9565b6101976101b336600461230c565b611132565b6101cb6101c6366004612497565b61124c565b6040516100f991906124fb565b6101eb6101e636600461230c565b6113b6565b6040516100f9919061262b565b61020b6102063660046126be565b611602565b6040516100f99190612710565b61022b61022636600461230c565b611767565b6040516100f992919061275b565b60005461024c906001600160a01b031681565b6040516001600160a01b0390911681526020016100f9565b6060815167ffffffffffffffff81111561028057610280611e00565b6040519080825280602002602001820160405280156102b957816020015b6102a6611c1d565b81526020019060019003908161029e5790505b50905060005b82518110156106005760008382815181106102dc576102dc61276e565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa158015610335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035991906127ec565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf919061287f565b90506000836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610401573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610429919081019061289a565b600080549192509081906001600160a01b0316633ae000c08761044d87600a612a28565b610458906001612a37565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016040805180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190612a56565b915091506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610527573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054f919081019061289a565b90506000604051806101200160405280896001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b031681526020018460000151815260200185600001518152602001886000015181526020018760ff168152602001868152602001838152509050808a8a815181106105da576105da61276e565b6020026020010181905250505050505050505080806105f890612a82565b9150506102bf565b50919050565b6060815167ffffffffffffffff81111561062257610622611e00565b60405190808252806020026020018201604052801561067a57816020015b6106676040518060600160405280600060ff16815260200160608152602001606081525090565b8152602001906001900390816106405790505b50905060005b82518110156106005760405180606001604052808483815181106106a6576106a661276e565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f919061287f565b60ff1681526020018483815181106107295761072961276e565b60200260200101516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561076e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610796919081019061289a565b81526020018483815181106107ad576107ad61276e565b60200260200101516001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261081a919081019061289a565b81525082828151811061082f5761082f61276e565b6020026020010181905250808061084590612a82565b915050610680565b6060815167ffffffffffffffff81111561086957610869611e00565b6040519080825280602002602001820160405280156108a257816020015b61088f611c96565b8152602001906001900390816108875790505b50905060005b82518110156106005760008382815181106108c5576108c561276e565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa15801561091e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109429190612a9d565b60008054604051631a69f54b60e21b81526001600160a01b038681166004830152670de0b6b3a7640000602483015260448201849052939450919216906369a7d52c90606401602060405180830381865afa1580156109a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c99190612b1d565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a339190612b39565b90506000846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a9d919081019061289a565b90506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610adf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b07919081019061289a565b905060006040518060e0016040528087602001516001600160a01b03168152602001886001600160a01b03168152602001858152602001866000015181526020018760000151815260200183815260200184815250905080898981518110610b7157610b7161276e565b6020026020010181905250505050505050508080610b8e90612a82565b9150506108a8565b606080610ba284610264565b9150610bad8361084d565b90509250929050565b6000805460405163369c411560e11b81526001600160a01b038481166004830152606093928392911690636d38822a90602401600060405180830381865afa158015610c06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c2e9190810190612b52565b80519091501561101d57805167ffffffffffffffff811115610c5257610c52611e00565b604051908082528060200260200182016040528015610c8b57816020015b610c78611cf9565b815260200190600190039081610c705790505b50925060005b815181101561101b576000828281518110610cae57610cae61276e565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b91906127ec565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d91919061287f565b60008054604051630c65e07b60e01b81526001600160a01b038c81166004830152878116602483015293945091921690630c65e07b90604401602060405180830381865afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b9190612b39565b90506000846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e75919081019061289a565b6000805460405162eb800360e61b81526001600160a01b038981166004830152602482018790526001604483015293945091928392911690633ae000c0906064016040805180830381865afa158015610ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef69190612a56565b915091506000876001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f62919081019061289a565b60408051610160810182526001600160a01b03808c16825260208b8101518216908301528a83015116918101919091526060810187905284516080820152885160a082015260ff881660c082015260e081018b9052835161010082015261012081018690526101408101829052845191925090610fdf908d612be1565b9b50808d8b81518110610ff457610ff461276e565b6020026020010181905250505050505050505050808061101390612a82565b915050610c91565b505b50915091565b60008054604051633fa1c54560e21b81526001600160a01b0384811660048301528392169063fe87151490602401602060405180830381865afa15801561106e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110929190612b1d565b600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa1580156110e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111049190612b1d565b90506111108183611bcb565b1561111f575060009392505050565b6111298183611bd7565b51949350505050565b60008054604051633fa1c54560e21b81526001600160a01b0384811660048301528392169063fe87151490602401602060405180830381865afa15801561117d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a19190612b1d565b51600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa1580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112149190612b1d565b5190508115611242578161123082670de0b6b3a7640000612a37565b61123a9190612bf9565b949350505050565b5060009392505050565b6060835167ffffffffffffffff81111561126857611268611e00565b6040519080825280602002602001820160405280156112b357816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816112865790505b50905060005b84518110156113ae576040518060600160405280856001600160a01b03168152602001846001600160a01b031681526020018683815181106112fd576112fd61276e565b6020908102919091010151604051636eb1769f60e11b81526001600160a01b03888116600483015287811660248301529091169063dd62ed3e90604401602060405180830381865afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b9190612b39565b8152508282815181106113905761139061276e565b602002602001018190525080806113a690612a82565b9150506112b9565b509392505050565b6114056040518061012001604052806060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008061141184611767565b9150915060008061142186610bb6565b91509150600084511180611436575060008251115b156115f95760405180610120016040528085815260200183815260200161145c88611132565b815260208101859052600054604080517fff1389c50000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152919093019291169063ff1389c590602401602060405180830381865afa1580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f19190612b1d565b51815260208101839052600054604080516307d1a44560e41b81526001600160a01b038b811660048301529190930192911690637d1a445090602401602060405180830381865afa15801561154a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156e9190612b1d565b518152600054604051633fa1c54560e21b81526001600160a01b038a811660048301526020909301929091169063fe87151490602401602060405180830381865afa1580156115c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e59190612b1d565b5181526020016115f488611023565b905294505b50505050919050565b6060825167ffffffffffffffff81111561161e5761161e611e00565b60405190808252806020026020018201604052801561166357816020015b604080518082019091526000808252602082015281526020019060019003908161163c5790505b50905060005b835181101561176057604051806040016040528085838151811061168f5761168f61276e565b60200260200101516001600160a01b031681526020018583815181106116b7576116b761276e565b60209081029190910101516040516370a0823160e01b81526001600160a01b038781166004830152909116906370a0823190602401602060405180830381865afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172d9190612b39565b8152508282815181106117425761174261276e565b6020026020010181905250808061175890612a82565b915050611669565b5092915050565b600080546040516377d4074360e11b81526001600160a01b03848116600483015260609392839291169063efa80e8690602401600060405180830381865afa1580156117b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117df9190810190612b52565b80519091501561101d57805167ffffffffffffffff81111561180357611803611e00565b60405190808252806020026020018201604052801561183c57816020015b611829611d85565b8152602001906001900390816118215790505b50925060005b815181101561101b57600082828151811061185f5761185f61276e565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa1580156118b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118dc9190612a9d565b60008054604051630692479b60e31b81526001600160a01b038b811660048301528681166024830152939450919216906334923cd890604401602060405180830381865afa158015611932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119569190612b39565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561199c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c09190612b39565b60008054604051631a69f54b60e21b81526001600160a01b0388811660048301526024820187905260016044830152939450919216906369a7d52c90606401602060405180830381865afa158015611a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a409190612b1d565b6000015190506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aae919081019061289a565b90506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611af0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b18919081019061289a565b90506000604051806101400160405280896001600160a01b0316815260200188602001516001600160a01b031681526020018781526020018581526020018a815260200188600001518152602001886060015115158152602001868152602001848152602001838152509050838b611b909190612be1565b9a50808c8a81518110611ba557611ba561276e565b602002602001018190525050505050505050508080611bc390612a82565b915050611842565b80518251105b92915050565b6040805160208101909152600081526040805160208101909152825184518291611c019190611c0a565b90529392505050565b6000611c168284612c1b565b9392505050565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001611c7d6040518060200160405280600081525090565b8152600060208201526060604082018190529081015290565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001611ce56040518060200160405280600081525090565b815260200160608152602001606081525090565b60405180610160016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001611d596040518060200160405280600081525090565b8152602001600060ff168152602001600081526020016000815260200160608152602001606081525090565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001611ddc6040518060200160405280600081525090565b81526020016000151581526020016000815260200160608152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e3f57611e3f611e00565b604052919050565b600067ffffffffffffffff821115611e6157611e61611e00565b5060051b60200190565b6001600160a01b0381168114611e8057600080fd5b50565b600082601f830112611e9457600080fd5b81356020611ea9611ea483611e47565b611e16565b82815260059290921b84018101918181019086841115611ec857600080fd5b8286015b84811015611eec578035611edf81611e6b565b8352918301918301611ecc565b509695505050505050565b600060208284031215611f0957600080fd5b813567ffffffffffffffff811115611f2057600080fd5b61123a84828501611e83565b60005b83811015611f47578181015183820152602001611f2f565b83811115611f56576000848401525b50505050565b60008151808452611f74816020860160208601611f2c565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612057578284038952815180516001600160a01b0390811686528682015181168787015260408083015190911690860152606080820151908601526080808201519086015260a080820151519086015260c08082015160ff169086015260e080820151610120828801819052919061202483890182611f5c565b9250505061010080830151925086820381880152506120438183611f5c565b9a87019a9550505090840190600101611fa6565b5091979650505050505050565b602081526000611c166020830184611f88565b6000602080838503121561208a57600080fd5b823567ffffffffffffffff8111156120a157600080fd5b8301601f810185136120b257600080fd5b80356120c0611ea482611e47565b81815260059190911b820183019083810190878311156120df57600080fd5b928401925b828410156121065783356120f781611e6b565b825292840192908401906120e4565b979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561219757603f198984030185528151606060ff825116855288820151818a87015261216982870182611f5c565b915050878201519150848103888601526121838183611f5c565b968901969450505090860190600101612138565b509098975050505050505050565b600082825180855260208086019550808260051b84010181860160005b8481101561225a57858303601f19018952815180516001600160a01b0390811685528582015116858501526040808201519085015260608082015190850152608080820151519085015260a08082015160e0828701819052919061222883880182611f5c565b9250505060c080830151925085820381870152506122468183611f5c565b9a86019a94505050908301906001016121c2565b5090979650505050505050565b602081526000611c1660208301846121a5565b6000806040838503121561228d57600080fd5b823567ffffffffffffffff808211156122a557600080fd5b6122b186838701611e83565b935060208501359150808211156122c757600080fd5b506122d485828601611e83565b9150509250929050565b6040815260006122f16040830185611f88565b828103602084015261230381856121a5565b95945050505050565b60006020828403121561231e57600080fd5b8135611c1681611e6b565b600082825180855260208086019550808260051b84010181860160005b8481101561225a57601f19868403018952815180516001600160a01b0390811685528582015181168686015260408083015190911690850152606080820151908501526080808201519085015260a080820151519085015260c08082015160ff169085015260e0808201519085015261010080820151908501526101208082015161016082870181905291906123de83880182611f5c565b9250505061014080830151925085820381870152506123fd8183611f5c565b9a86019a9450505090830190600101612346565b6040815260006124246040830185612329565b90508260208301529392505050565b600082601f83011261244457600080fd5b81356020612454611ea483611e47565b82815260059290921b8401810191818101908684111561247357600080fd5b8286015b84811015611eec57803561248a81611e6b565b8352918301918301612477565b6000806000606084860312156124ac57600080fd5b833567ffffffffffffffff8111156124c357600080fd5b6124cf86828701612433565b93505060208401356124e081611e6b565b915060408401356124f081611e6b565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b8281101561205757815180516001600160a01b0390811686528782015116878601528501518585015260609093019290850190600101612518565b600082825180855260208086019550808260051b84010181860160005b8481101561225a57601f19868403018952815180516001600160a01b03908116855285820151168585015260408082015190850152606080820151908501526080808201519085015260a080820151519085015260c08082015115159085015260e080820151908501526101008082015161014082870181905291906125f883880182611f5c565b9250505061012080830151925085820381870152506126178183611f5c565b9a86019a9450505090830190600101612570565b602081526000825161012080602085015261264a610140850183612553565b91506020850151601f198584030160408601526126678382612329565b9250506040850151606085015260608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151838701525050508091505092915050565b600080604083850312156126d157600080fd5b823567ffffffffffffffff8111156126e857600080fd5b6126f485828601612433565b925050602083013561270581611e6b565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561205757815180516001600160a01b0316855286015186850152928401929085019060010161272d565b6040815260006124246040830185612553565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561279657600080fd5b6040516020810181811067ffffffffffffffff821117156127b9576127b9611e00565b6040529151825250919050565b805160ff811681146127d757600080fd5b919050565b805180151581146127d757600080fd5b600060a082840312156127fe57600080fd5b60405160a0810181811067ffffffffffffffff8211171561282157612821611e00565b60405261282e8484612784565b8152602083015161283e81611e6b565b6020820152604083015161285181611e6b565b6040820152612862606084016127c6565b6060820152612873608084016127dc565b60808201529392505050565b60006020828403121561289157600080fd5b611c16826127c6565b6000602082840312156128ac57600080fd5b815167ffffffffffffffff808211156128c457600080fd5b818401915084601f8301126128d857600080fd5b8151818111156128ea576128ea611e00565b6128fd601f8201601f1916602001611e16565b915080825285602082850101111561291457600080fd5b612925816020840160208601611f2c565b50949350505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561297f5781600019048211156129655761296561292e565b8085161561297257918102915b93841c9390800290612949565b509250929050565b60008261299657506001611bd1565b816129a357506000611bd1565b81600181146129b957600281146129c3576129df565b6001915050611bd1565b60ff8411156129d4576129d461292e565b50506001821b611bd1565b5060208310610133831016604e8410600b8410161715612a02575081810a611bd1565b612a0c8383612944565b8060001904821115612a2057612a2061292e565b029392505050565b6000611c1660ff841683612987565b6000816000190483118215151615612a5157612a5161292e565b500290565b60008060408385031215612a6957600080fd5b612a738484612784565b9150610bad8460208501612784565b6000600019821415612a9657612a9661292e565b5060010190565b600060808284031215612aaf57600080fd5b6040516080810181811067ffffffffffffffff82111715612ad257612ad2611e00565b604052612adf8484612784565b81526020830151612aef81611e6b565b6020820152612b00604084016127dc565b6040820152612b11606084016127dc565b60608201529392505050565b600060208284031215612b2f57600080fd5b611c168383612784565b600060208284031215612b4b57600080fd5b5051919050565b60006020808385031215612b6557600080fd5b825167ffffffffffffffff811115612b7c57600080fd5b8301601f81018513612b8d57600080fd5b8051612b9b611ea482611e47565b81815260059190911b82018301908381019087831115612bba57600080fd5b928401925b82841015612106578351612bd281611e6b565b82529284019290840190612bbf565b60008219821115612bf457612bf461292e565b500190565b600082612c1657634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612c2d57612c2d61292e565b50039056fea164736f6c634300080a000a",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b56274d411610081578063d1c070281161005b578063d1c07028146101f8578063def86ce114610218578063f79031e81461023957600080fd5b8063b56274d4146101a5578063b69a9850146101b8578063be6d74a0146101d857600080fd5b80636bb52909116100b25780636bb52909146101425780636e0696d614610163578063983ff6151461018457600080fd5b806327c5607d146100d957806358b23fd714610102578063624ba70114610122575b600080fd5b6100ec6100e7366004611ef7565b610264565b6040516100f99190612064565b60405180910390f35b610115610110366004612077565b610606565b6040516100f99190612111565b610135610130366004611ef7565b61084d565b6040516100f99190612267565b61015561015036600461227a565b610b96565b6040516100f99291906122de565b61017661017136600461230c565b610bb6565b6040516100f9929190612411565b61019761019236600461230c565b611023565b6040519081526020016100f9565b6101976101b336600461230c565b611132565b6101cb6101c6366004612497565b61124c565b6040516100f991906124fb565b6101eb6101e636600461230c565b6113b6565b6040516100f9919061262b565b61020b6102063660046126be565b611602565b6040516100f99190612710565b61022b61022636600461230c565b611767565b6040516100f992919061275b565b60005461024c906001600160a01b031681565b6040516001600160a01b0390911681526020016100f9565b6060815167ffffffffffffffff81111561028057610280611e00565b6040519080825280602002602001820160405280156102b957816020015b6102a6611c1d565b81526020019060019003908161029e5790505b50905060005b82518110156106005760008382815181106102dc576102dc61276e565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa158015610335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035991906127ec565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf919061287f565b90506000836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610401573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610429919081019061289a565b600080549192509081906001600160a01b0316633ae000c08761044d87600a612a28565b610458906001612a37565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016040805180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190612a56565b915091506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610527573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054f919081019061289a565b90506000604051806101200160405280896001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b031681526020018460000151815260200185600001518152602001886000015181526020018760ff168152602001868152602001838152509050808a8a815181106105da576105da61276e565b6020026020010181905250505050505050505080806105f890612a82565b9150506102bf565b50919050565b6060815167ffffffffffffffff81111561062257610622611e00565b60405190808252806020026020018201604052801561067a57816020015b6106676040518060600160405280600060ff16815260200160608152602001606081525090565b8152602001906001900390816106405790505b50905060005b82518110156106005760405180606001604052808483815181106106a6576106a661276e565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f919061287f565b60ff1681526020018483815181106107295761072961276e565b60200260200101516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561076e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610796919081019061289a565b81526020018483815181106107ad576107ad61276e565b60200260200101516001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261081a919081019061289a565b81525082828151811061082f5761082f61276e565b6020026020010181905250808061084590612a82565b915050610680565b6060815167ffffffffffffffff81111561086957610869611e00565b6040519080825280602002602001820160405280156108a257816020015b61088f611c96565b8152602001906001900390816108875790505b50905060005b82518110156106005760008382815181106108c5576108c561276e565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa15801561091e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109429190612a9d565b60008054604051631a69f54b60e21b81526001600160a01b038681166004830152670de0b6b3a7640000602483015260448201849052939450919216906369a7d52c90606401602060405180830381865afa1580156109a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c99190612b1d565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a339190612b39565b90506000846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a9d919081019061289a565b90506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610adf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b07919081019061289a565b905060006040518060e0016040528087602001516001600160a01b03168152602001886001600160a01b03168152602001858152602001866000015181526020018760000151815260200183815260200184815250905080898981518110610b7157610b7161276e565b6020026020010181905250505050505050508080610b8e90612a82565b9150506108a8565b606080610ba284610264565b9150610bad8361084d565b90509250929050565b6000805460405163369c411560e11b81526001600160a01b038481166004830152606093928392911690636d38822a90602401600060405180830381865afa158015610c06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c2e9190810190612b52565b80519091501561101d57805167ffffffffffffffff811115610c5257610c52611e00565b604051908082528060200260200182016040528015610c8b57816020015b610c78611cf9565b815260200190600190039081610c705790505b50925060005b815181101561101b576000828281518110610cae57610cae61276e565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2b91906127ec565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d91919061287f565b60008054604051630c65e07b60e01b81526001600160a01b038c81166004830152878116602483015293945091921690630c65e07b90604401602060405180830381865afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b9190612b39565b90506000846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e4d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e75919081019061289a565b6000805460405162eb800360e61b81526001600160a01b038981166004830152602482018790526001604483015293945091928392911690633ae000c0906064016040805180830381865afa158015610ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef69190612a56565b915091506000876001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f62919081019061289a565b60408051610160810182526001600160a01b03808c16825260208b8101518216908301528a83015116918101919091526060810187905284516080820152885160a082015260ff881660c082015260e081018b9052835161010082015261012081018690526101408101829052845191925090610fdf908d612be1565b9b50808d8b81518110610ff457610ff461276e565b6020026020010181905250505050505050505050808061101390612a82565b915050610c91565b505b50915091565b60008054604051633fa1c54560e21b81526001600160a01b0384811660048301528392169063fe87151490602401602060405180830381865afa15801561106e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110929190612b1d565b600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa1580156110e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111049190612b1d565b90506111108183611bcb565b1561111f575060009392505050565b6111298183611bd7565b51949350505050565b60008054604051633fa1c54560e21b81526001600160a01b0384811660048301528392169063fe87151490602401602060405180830381865afa15801561117d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a19190612b1d565b51600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa1580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112149190612b1d565b5190508115611242578161123082670de0b6b3a7640000612a37565b61123a9190612bf9565b949350505050565b5060009392505050565b6060835167ffffffffffffffff81111561126857611268611e00565b6040519080825280602002602001820160405280156112b357816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816112865790505b50905060005b84518110156113ae576040518060600160405280856001600160a01b03168152602001846001600160a01b031681526020018683815181106112fd576112fd61276e565b6020908102919091010151604051636eb1769f60e11b81526001600160a01b03888116600483015287811660248301529091169063dd62ed3e90604401602060405180830381865afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b9190612b39565b8152508282815181106113905761139061276e565b602002602001018190525080806113a690612a82565b9150506112b9565b509392505050565b6114056040518061012001604052806060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008061141184611767565b9150915060008061142186610bb6565b91509150600084511180611436575060008251115b156115f95760405180610120016040528085815260200183815260200161145c88611132565b815260208101859052600054604080517fff1389c50000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152919093019291169063ff1389c590602401602060405180830381865afa1580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f19190612b1d565b51815260208101839052600054604080516307d1a44560e41b81526001600160a01b038b811660048301529190930192911690637d1a445090602401602060405180830381865afa15801561154a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156e9190612b1d565b518152600054604051633fa1c54560e21b81526001600160a01b038a811660048301526020909301929091169063fe87151490602401602060405180830381865afa1580156115c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e59190612b1d565b5181526020016115f488611023565b905294505b50505050919050565b6060825167ffffffffffffffff81111561161e5761161e611e00565b60405190808252806020026020018201604052801561166357816020015b604080518082019091526000808252602082015281526020019060019003908161163c5790505b50905060005b835181101561176057604051806040016040528085838151811061168f5761168f61276e565b60200260200101516001600160a01b031681526020018583815181106116b7576116b761276e565b60209081029190910101516040516370a0823160e01b81526001600160a01b038781166004830152909116906370a0823190602401602060405180830381865afa158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172d9190612b39565b8152508282815181106117425761174261276e565b6020026020010181905250808061175890612a82565b915050611669565b5092915050565b600080546040516377d4074360e11b81526001600160a01b03848116600483015260609392839291169063efa80e8690602401600060405180830381865afa1580156117b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117df9190810190612b52565b80519091501561101d57805167ffffffffffffffff81111561180357611803611e00565b60405190808252806020026020018201604052801561183c57816020015b611829611d85565b8152602001906001900390816118215790505b50925060005b815181101561101b57600082828151811061185f5761185f61276e565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa1580156118b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118dc9190612a9d565b60008054604051630692479b60e31b81526001600160a01b038b811660048301528681166024830152939450919216906334923cd890604401602060405180830381865afa158015611932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119569190612b39565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561199c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c09190612b39565b60008054604051631a69f54b60e21b81526001600160a01b0388811660048301526024820187905260016044830152939450919216906369a7d52c90606401602060405180830381865afa158015611a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a409190612b1d565b6000015190506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611a86573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aae919081019061289a565b90506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611af0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b18919081019061289a565b90506000604051806101400160405280896001600160a01b0316815260200188602001516001600160a01b031681526020018781526020018581526020018a815260200188600001518152602001886060015115158152602001868152602001848152602001838152509050838b611b909190612be1565b9a50808c8a81518110611ba557611ba561276e565b602002602001018190525050505050505050508080611bc390612a82565b915050611842565b80518251105b92915050565b6040805160208101909152600081526040805160208101909152825184518291611c019190611c0a565b90529392505050565b6000611c168284612c1b565b9392505050565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001611c7d6040518060200160405280600081525090565b8152600060208201526060604082018190529081015290565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001611ce56040518060200160405280600081525090565b815260200160608152602001606081525090565b60405180610160016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001611d596040518060200160405280600081525090565b8152602001600060ff168152602001600081526020016000815260200160608152602001606081525090565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001611ddc6040518060200160405280600081525090565b81526020016000151581526020016000815260200160608152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e3f57611e3f611e00565b604052919050565b600067ffffffffffffffff821115611e6157611e61611e00565b5060051b60200190565b6001600160a01b0381168114611e8057600080fd5b50565b600082601f830112611e9457600080fd5b81356020611ea9611ea483611e47565b611e16565b82815260059290921b84018101918181019086841115611ec857600080fd5b8286015b84811015611eec578035611edf81611e6b565b8352918301918301611ecc565b509695505050505050565b600060208284031215611f0957600080fd5b813567ffffffffffffffff811115611f2057600080fd5b61123a84828501611e83565b60005b83811015611f47578181015183820152602001611f2f565b83811115611f56576000848401525b50505050565b60008151808452611f74816020860160208601611f2c565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612057578284038952815180516001600160a01b0390811686528682015181168787015260408083015190911690860152606080820151908601526080808201519086015260a080820151519086015260c08082015160ff169086015260e080820151610120828801819052919061202483890182611f5c565b9250505061010080830151925086820381880152506120438183611f5c565b9a87019a9550505090840190600101611fa6565b5091979650505050505050565b602081526000611c166020830184611f88565b6000602080838503121561208a57600080fd5b823567ffffffffffffffff8111156120a157600080fd5b8301601f810185136120b257600080fd5b80356120c0611ea482611e47565b81815260059190911b820183019083810190878311156120df57600080fd5b928401925b828410156121065783356120f781611e6b565b825292840192908401906120e4565b979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561219757603f198984030185528151606060ff825116855288820151818a87015261216982870182611f5c565b915050878201519150848103888601526121838183611f5c565b968901969450505090860190600101612138565b509098975050505050505050565b600082825180855260208086019550808260051b84010181860160005b8481101561225a57858303601f19018952815180516001600160a01b0390811685528582015116858501526040808201519085015260608082015190850152608080820151519085015260a08082015160e0828701819052919061222883880182611f5c565b9250505060c080830151925085820381870152506122468183611f5c565b9a86019a94505050908301906001016121c2565b5090979650505050505050565b602081526000611c1660208301846121a5565b6000806040838503121561228d57600080fd5b823567ffffffffffffffff808211156122a557600080fd5b6122b186838701611e83565b935060208501359150808211156122c757600080fd5b506122d485828601611e83565b9150509250929050565b6040815260006122f16040830185611f88565b828103602084015261230381856121a5565b95945050505050565b60006020828403121561231e57600080fd5b8135611c1681611e6b565b600082825180855260208086019550808260051b84010181860160005b8481101561225a57601f19868403018952815180516001600160a01b0390811685528582015181168686015260408083015190911690850152606080820151908501526080808201519085015260a080820151519085015260c08082015160ff169085015260e0808201519085015261010080820151908501526101208082015161016082870181905291906123de83880182611f5c565b9250505061014080830151925085820381870152506123fd8183611f5c565b9a86019a9450505090830190600101612346565b6040815260006124246040830185612329565b90508260208301529392505050565b600082601f83011261244457600080fd5b81356020612454611ea483611e47565b82815260059290921b8401810191818101908684111561247357600080fd5b8286015b84811015611eec57803561248a81611e6b565b8352918301918301612477565b6000806000606084860312156124ac57600080fd5b833567ffffffffffffffff8111156124c357600080fd5b6124cf86828701612433565b93505060208401356124e081611e6b565b915060408401356124f081611e6b565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b8281101561205757815180516001600160a01b0390811686528782015116878601528501518585015260609093019290850190600101612518565b600082825180855260208086019550808260051b84010181860160005b8481101561225a57601f19868403018952815180516001600160a01b03908116855285820151168585015260408082015190850152606080820151908501526080808201519085015260a080820151519085015260c08082015115159085015260e080820151908501526101008082015161014082870181905291906125f883880182611f5c565b9250505061012080830151925085820381870152506126178183611f5c565b9a86019a9450505090830190600101612570565b602081526000825161012080602085015261264a610140850183612553565b91506020850151601f198584030160408601526126678382612329565b9250506040850151606085015260608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151838701525050508091505092915050565b600080604083850312156126d157600080fd5b823567ffffffffffffffff8111156126e857600080fd5b6126f485828601612433565b925050602083013561270581611e6b565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561205757815180516001600160a01b0316855286015186850152928401929085019060010161272d565b6040815260006124246040830185612553565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561279657600080fd5b6040516020810181811067ffffffffffffffff821117156127b9576127b9611e00565b6040529151825250919050565b805160ff811681146127d757600080fd5b919050565b805180151581146127d757600080fd5b600060a082840312156127fe57600080fd5b60405160a0810181811067ffffffffffffffff8211171561282157612821611e00565b60405261282e8484612784565b8152602083015161283e81611e6b565b6020820152604083015161285181611e6b565b6040820152612862606084016127c6565b6060820152612873608084016127dc565b60808201529392505050565b60006020828403121561289157600080fd5b611c16826127c6565b6000602082840312156128ac57600080fd5b815167ffffffffffffffff808211156128c457600080fd5b818401915084601f8301126128d857600080fd5b8151818111156128ea576128ea611e00565b6128fd601f8201601f1916602001611e16565b915080825285602082850101111561291457600080fd5b612925816020840160208601611f2c565b50949350505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561297f5781600019048211156129655761296561292e565b8085161561297257918102915b93841c9390800290612949565b509250929050565b60008261299657506001611bd1565b816129a357506000611bd1565b81600181146129b957600281146129c3576129df565b6001915050611bd1565b60ff8411156129d4576129d461292e565b50506001821b611bd1565b5060208310610133831016604e8410600b8410161715612a02575081810a611bd1565b612a0c8383612944565b8060001904821115612a2057612a2061292e565b029392505050565b6000611c1660ff841683612987565b6000816000190483118215151615612a5157612a5161292e565b500290565b60008060408385031215612a6957600080fd5b612a738484612784565b9150610bad8460208501612784565b6000600019821415612a9657612a9661292e565b5060010190565b600060808284031215612aaf57600080fd5b6040516080810181811067ffffffffffffffff82111715612ad257612ad2611e00565b604052612adf8484612784565b81526020830151612aef81611e6b565b6020820152612b00604084016127dc565b6040820152612b11606084016127dc565b60608201529392505050565b600060208284031215612b2f57600080fd5b611c168383612784565b600060208284031215612b4b57600080fd5b5051919050565b60006020808385031215612b6557600080fd5b825167ffffffffffffffff811115612b7c57600080fd5b8301601f81018513612b8d57600080fd5b8051612b9b611ea482611e47565b81815260059190911b82018301908381019087831115612bba57600080fd5b928401925b82841015612106578351612bd281611e6b565b82529284019290840190612bbf565b60008219821115612bf457612bf461292e565b500190565b600082612c1657634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612c2d57612c2d61292e565b50039056fea164736f6c634300080a000a",
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 20125,
                "contract": "src/contracts/KreskoViewer.sol:KreskoViewer",
                "label": "Kresko",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(IKresko)22651"
            }
        ],
        "types": {
            "t_contract(IKresko)22651": {
                "encoding": "inplace",
                "label": "contract IKresko",
                "numberOfBytes": "20"
            }
        }
    }
}
