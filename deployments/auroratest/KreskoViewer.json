{
    "address": "0x234Ff5FB28f1852732276207a033a0923011D467",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "contract IKresko",
                    "name": "_kresko",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "Kresko",
            "outputs": [
                {
                    "internalType": "contract IKresko",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "borrowingPowerUSD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "collateralAssetInfoFor",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "underlyingRebasingToken",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "amountUSD",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "cFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                        },
                        {
                            "internalType": "uint256",
                            "name": "index",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.CollateralAssetInfoUser[]",
                    "name": "result",
                    "type": "tuple[]"
                },
                {
                    "internalType": "uint256",
                    "name": "totalCollateralUSD",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "assetAddresses",
                    "type": "address[]"
                }
            ],
            "name": "collateralAssetInfos",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "underlyingRebasingToken",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "cFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.CollateralAssetInfo[]",
                    "name": "result",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IERC20Upgradeable[]",
                    "name": "_tokens",
                    "type": "address[]"
                },
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }
            ],
            "name": "getAllowances",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "spender",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "allowance",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct KreskoViewer.Allowance[]",
                    "name": "allowances",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "_collateralAssets",
                    "type": "address[]"
                },
                {
                    "internalType": "address[]",
                    "name": "_krAssets",
                    "type": "address[]"
                }
            ],
            "name": "getAssetInfos",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "underlyingRebasingToken",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "cFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.CollateralAssetInfo[]",
                    "name": "collateralAssets",
                    "type": "tuple[]"
                },
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "kFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.krAssetInfo[]",
                    "name": "krAssets",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IERC20Upgradeable[]",
                    "name": "_tokens",
                    "type": "address[]"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "getBalances",
            "outputs": [
                {
                    "internalType": "uint256[]",
                    "name": "balances",
                    "type": "uint256[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "healthFactorFor",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "krAssetInfoFor",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "amountUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "index",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "kFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "bool",
                            "name": "mintable",
                            "type": "bool"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.krAssetInfoUser[]",
                    "name": "result",
                    "type": "tuple[]"
                },
                {
                    "internalType": "uint256",
                    "name": "totalDebtUSD",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "assetAddresses",
                    "type": "address[]"
                }
            ],
            "name": "krAssetInfos",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "kFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.krAssetInfo[]",
                    "name": "result",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "kreskoUser",
            "outputs": [
                {
                    "components": [
                        {
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "assetAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "oracleAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amountUSD",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                },
                                {
                                    "components": [
                                        {
                                            "internalType": "uint256",
                                            "name": "rawValue",
                                            "type": "uint256"
                                        }
                                    ],
                                    "internalType": "struct FixedPoint.Unsigned",
                                    "name": "kFactor",
                                    "type": "tuple"
                                },
                                {
                                    "internalType": "bool",
                                    "name": "mintable",
                                    "type": "bool"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "price",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "symbol",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "name",
                                    "type": "string"
                                }
                            ],
                            "internalType": "struct KreskoViewer.krAssetInfoUser[]",
                            "name": "krAssets",
                            "type": "tuple[]"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "assetAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "oracleAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "underlyingRebasingToken",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amountUSD",
                                    "type": "uint256"
                                },
                                {
                                    "components": [
                                        {
                                            "internalType": "uint256",
                                            "name": "rawValue",
                                            "type": "uint256"
                                        }
                                    ],
                                    "internalType": "struct FixedPoint.Unsigned",
                                    "name": "cFactor",
                                    "type": "tuple"
                                },
                                {
                                    "internalType": "uint8",
                                    "name": "decimals",
                                    "type": "uint8"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "price",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "symbol",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "name",
                                    "type": "string"
                                }
                            ],
                            "internalType": "struct KreskoViewer.CollateralAssetInfoUser[]",
                            "name": "collateralAssets",
                            "type": "tuple[]"
                        },
                        {
                            "internalType": "uint256",
                            "name": "healthFactor",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "debtActualUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "debtUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "collateralActualUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "collateralUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "minCollateralUSD",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "borrowingPowerUSD",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct KreskoViewer.KreskoUser",
                    "name": "user",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0xa529aa7f46f18a1807df3d095f0a9e6c8ada4c2bce45a5237bbcb4f062c9d40b",
    "receipt": {
        "to": null,
        "from": "0x600F7085d1a4f5a9890C36EfE67c32F5ad7050b7",
        "contractAddress": "0x234Ff5FB28f1852732276207a033a0923011D467",
        "transactionIndex": 0,
        "gasUsed": "2252923",
        "logsBloom": "0x
        "blockHash": "0x0236d90999129118f0fb3b0c636a14daf4d26782ed58345ab0dc513e82c77f5b",
        "transactionHash": "0xa529aa7f46f18a1807df3d095f0a9e6c8ada4c2bce45a5237bbcb4f062c9d40b",
        "logs": [],
        "blockNumber": 85738001,
        "cumulativeGasUsed": "0",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x9847D57DC892e791E1ea756E581BDC31Be19bFBA"],
    "numDeployments": 6,
    "solcInputHash": "d5aee9e14ac6503ee81f884bee48bd22",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IKresko\",\"name\":\"_kresko\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Kresko\",\"outputs\":[{\"internalType\":\"contract IKresko\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"borrowingPowerUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"collateralAssetInfoFor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfoUser[]\",\"name\":\"result\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assetAddresses\",\"type\":\"address[]\"}],\"name\":\"collateralAssetInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfo[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"internalType\":\"struct KreskoViewer.Allowance[]\",\"name\":\"allowances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_krAssets\",\"type\":\"address[]\"}],\"name\":\"getAssetInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfo[]\",\"name\":\"collateralAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfo[]\",\"name\":\"krAssets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"healthFactorFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"krAssetInfoFor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfoUser[]\",\"name\":\"result\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assetAddresses\",\"type\":\"address[]\"}],\"name\":\"krAssetInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfo[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"kreskoUser\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfoUser[]\",\"name\":\"krAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfoUser[]\",\"name\":\"collateralAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtActualUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralActualUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowingPowerUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct KreskoViewer.KreskoUser\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/KreskoViewer.sol\":\"KreskoViewer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x322088ced3c1d027a3260de4e5a867b2264adeef252b94158a9725767873ea31\",\"license\":\"MIT\"},\"src/contracts/KreskoViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"./interfaces/IKresko.sol\\\";\\n\\ncontract KreskoViewer {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    IKresko public Kresko;\\n\\n    struct krAssetInfoUser {\\n        address assetAddress;\\n        address oracleAddress;\\n        uint256 amount;\\n        uint256 amountUSD;\\n        uint256 index;\\n        FixedPoint.Unsigned kFactor;\\n        bool mintable;\\n        uint256 price;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct CollateralAssetInfoUser {\\n        address assetAddress;\\n        address oracleAddress;\\n        address underlyingRebasingToken;\\n        uint256 amount;\\n        uint256 amountUSD;\\n        FixedPoint.Unsigned cFactor;\\n        uint8 decimals;\\n        uint256 index;\\n        uint256 price;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct CollateralAssetInfo {\\n        address assetAddress;\\n        address oracleAddress;\\n        address underlyingRebasingToken;\\n        uint256 price;\\n        uint256 value;\\n        FixedPoint.Unsigned cFactor;\\n        uint8 decimals;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct krAssetInfo {\\n        address oracleAddress;\\n        address assetAddress;\\n        uint256 price;\\n        uint256 value;\\n        FixedPoint.Unsigned kFactor;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct KreskoUser {\\n        krAssetInfoUser[] krAssets;\\n        CollateralAssetInfoUser[] collateralAssets;\\n        uint256 healthFactor;\\n        uint256 debtActualUSD;\\n        uint256 debtUSD;\\n        uint256 collateralActualUSD;\\n        uint256 collateralUSD;\\n        uint256 minCollateralUSD;\\n        uint256 borrowingPowerUSD;\\n    }\\n\\n    struct Allowance {\\n        address spender;\\n        uint256 allowance;\\n    }\\n\\n    constructor(IKresko _kresko) {\\n        Kresko = _kresko;\\n    }\\n\\n    function healthFactorFor(address _account) public view returns (uint256) {\\n        uint256 minCollateral = Kresko.getAccountMinimumCollateralValue(_account).rawValue;\\n        uint256 userCollateral = Kresko.getAccountCollateralValue(_account).rawValue;\\n\\n        return (userCollateral * 10**18) / minCollateral;\\n    }\\n\\n    function kreskoUser(address _account) external view returns (KreskoUser memory user) {\\n        (krAssetInfoUser[] memory krInfos, uint256 totalDebtUSD) = krAssetInfoFor(_account);\\n        (CollateralAssetInfoUser[] memory collateralInfos, uint256 totalCollateralUSD) = collateralAssetInfoFor(\\n            _account\\n        );\\n        if (krInfos.length > 0 || collateralInfos.length > 0) {\\n            user = KreskoUser({\\n                collateralAssets: collateralInfos,\\n                krAssets: krInfos,\\n                borrowingPowerUSD: borrowingPowerUSD(_account),\\n                healthFactor: healthFactorFor(_account),\\n                debtActualUSD: totalDebtUSD,\\n                debtUSD: Kresko.getAccountKrAssetValue(_account).rawValue,\\n                collateralActualUSD: totalCollateralUSD,\\n                collateralUSD: Kresko.getAccountCollateralValue(_account).rawValue,\\n                minCollateralUSD: Kresko.getAccountMinimumCollateralValue(_account).rawValue\\n            });\\n        }\\n    }\\n\\n    function krAssetInfoFor(address _account)\\n        public\\n        view\\n        returns (krAssetInfoUser[] memory result, uint256 totalDebtUSD)\\n    {\\n        address[] memory krAssetAddresses = Kresko.getMintedKreskoAssets(_account);\\n        if (krAssetAddresses.length > 0) {\\n            result = new krAssetInfoUser[](krAssetAddresses.length);\\n            for (uint256 i; i < krAssetAddresses.length; i++) {\\n                address assetAddress = krAssetAddresses[i];\\n                IKresko.KrAsset memory krAsset = Kresko.kreskoAssets(assetAddress);\\n                uint256 amount = Kresko.kreskoAssetDebt(_account, assetAddress);\\n\\n                uint256 price = uint256(krAsset.oracle.latestAnswer());\\n                uint256 amountUSD = Kresko.getKrAssetValue(assetAddress, amount, true).rawValue;\\n\\n                string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n                string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n\\n                krAssetInfoUser memory assetInfo = krAssetInfoUser({\\n                    assetAddress: assetAddress,\\n                    oracleAddress: address(krAsset.oracle),\\n                    amount: amount,\\n                    amountUSD: amountUSD,\\n                    index: i,\\n                    kFactor: krAsset.kFactor,\\n                    mintable: krAsset.mintable,\\n                    price: price,\\n                    symbol: symbol,\\n                    name: name\\n                });\\n\\n                totalDebtUSD += amountUSD;\\n                result[i] = assetInfo;\\n            }\\n        }\\n    }\\n\\n    function collateralAssetInfoFor(address _account)\\n        public\\n        view\\n        returns (CollateralAssetInfoUser[] memory result, uint256 totalCollateralUSD)\\n    {\\n        address[] memory collateralAssetAddresses = Kresko.getDepositedCollateralAssets(_account);\\n        if (collateralAssetAddresses.length > 0) {\\n            result = new CollateralAssetInfoUser[](collateralAssetAddresses.length);\\n            for (uint256 i; i < collateralAssetAddresses.length; i++) {\\n                address assetAddress = collateralAssetAddresses[i];\\n                IKresko.CollateralAsset memory collateralAsset = Kresko.collateralAssets(assetAddress);\\n                uint8 decimals = IERC20MetadataUpgradeable(assetAddress).decimals();\\n\\n                uint256 amount = Kresko.collateralDeposits(_account, assetAddress);\\n\\n                string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n                (FixedPoint.Unsigned memory amountUSD, FixedPoint.Unsigned memory price) = Kresko\\n                    .getCollateralValueAndOraclePrice(assetAddress, amount, true);\\n\\n                string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n\\n                CollateralAssetInfoUser memory assetInfo = CollateralAssetInfoUser({\\n                    amount: amount,\\n                    amountUSD: amountUSD.rawValue,\\n                    oracleAddress: address(collateralAsset.oracle),\\n                    underlyingRebasingToken: collateralAsset.underlyingRebasingToken,\\n                    assetAddress: assetAddress,\\n                    cFactor: collateralAsset.factor,\\n                    decimals: decimals,\\n                    index: i,\\n                    price: price.rawValue,\\n                    symbol: symbol,\\n                    name: name\\n                });\\n\\n                totalCollateralUSD += amountUSD.rawValue;\\n                result[i] = assetInfo;\\n            }\\n        }\\n    }\\n\\n    function collateralAssetInfos(address[] memory assetAddresses)\\n        public\\n        view\\n        returns (CollateralAssetInfo[] memory result)\\n    {\\n        result = new CollateralAssetInfo[](assetAddresses.length);\\n        for (uint256 i; i < assetAddresses.length; i++) {\\n            address assetAddress = assetAddresses[i];\\n            IKresko.CollateralAsset memory collateralAsset = Kresko.collateralAssets(assetAddress);\\n            uint8 decimals = IERC20MetadataUpgradeable(assetAddress).decimals();\\n\\n            string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n            (FixedPoint.Unsigned memory value, FixedPoint.Unsigned memory price) = Kresko\\n                .getCollateralValueAndOraclePrice(assetAddress, 1 * 10**decimals, false);\\n\\n            string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n\\n            CollateralAssetInfo memory assetInfo = CollateralAssetInfo({\\n                value: value.rawValue,\\n                oracleAddress: address(collateralAsset.oracle),\\n                underlyingRebasingToken: collateralAsset.underlyingRebasingToken,\\n                assetAddress: assetAddress,\\n                cFactor: collateralAsset.factor,\\n                decimals: decimals,\\n                price: price.rawValue,\\n                symbol: symbol,\\n                name: name\\n            });\\n\\n            result[i] = assetInfo;\\n        }\\n    }\\n\\n    function getAssetInfos(address[] memory _collateralAssets, address[] memory _krAssets)\\n        external\\n        view\\n        returns (CollateralAssetInfo[] memory collateralAssets, krAssetInfo[] memory krAssets)\\n    {\\n        collateralAssets = collateralAssetInfos(_collateralAssets);\\n        krAssets = krAssetInfos(_krAssets);\\n    }\\n\\n    function krAssetInfos(address[] memory assetAddresses) public view returns (krAssetInfo[] memory result) {\\n        result = new krAssetInfo[](assetAddresses.length);\\n        for (uint256 i; i < assetAddresses.length; i++) {\\n            address assetAddress = assetAddresses[i];\\n\\n            IKresko.KrAsset memory krAsset = Kresko.kreskoAssets(assetAddress);\\n\\n            FixedPoint.Unsigned memory value = Kresko.getKrAssetValue(assetAddress, 1 ether, false);\\n            uint256 price = uint256(krAsset.oracle.latestAnswer());\\n\\n            string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n            string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n\\n            krAssetInfo memory assetInfo = krAssetInfo({\\n                value: value.rawValue,\\n                oracleAddress: address(krAsset.oracle),\\n                assetAddress: assetAddress,\\n                kFactor: krAsset.kFactor,\\n                price: price,\\n                symbol: symbol,\\n                name: name\\n            });\\n\\n            result[i] = assetInfo;\\n        }\\n    }\\n\\n    function borrowingPowerUSD(address _account) public view returns (uint256) {\\n        FixedPoint.Unsigned memory minCollateral = Kresko.getAccountMinimumCollateralValue(_account);\\n        FixedPoint.Unsigned memory collateral = Kresko.getAccountCollateralValue(_account);\\n\\n        if (collateral.isLessThan(minCollateral)) {\\n            return 0;\\n        } else {\\n            return collateral.sub(minCollateral).rawValue;\\n        }\\n    }\\n\\n    function getBalances(IERC20Upgradeable[] memory _tokens, address account)\\n        external\\n        view\\n        returns (uint256[] memory balances)\\n    {\\n        for (uint256 i; i < _tokens.length; i++) {\\n            balances[i] = _tokens[i].balanceOf(account);\\n        }\\n    }\\n\\n    function getAllowances(\\n        IERC20Upgradeable[] memory _tokens,\\n        address owner,\\n        address spender\\n    ) external view returns (Allowance[] memory allowances) {\\n        for (uint256 i; i < _tokens.length; i++) {\\n            allowances[i] = Allowance({allowance: _tokens[i].allowance(owner, spender), spender: spender});\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x007cc13100ceee2183749e864fb192bee58acf3c133afff4b88234c6c4991c4c\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xf5d053ccdcb838a44b17af1f8b5b2b60f890108effcec69377cb81796fe9278c\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x70df2712dd3b85c753ff4cee292af93e81c5bf616983e4cbc94f692555362393\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x710f75b7d73282a87a60c5a9d1e6d1cfdd6cdf80ccf6a22982d20a1d6a24c7ce\",\"license\":\"MIT\"},\"src/contracts/interfaces/IKresko.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../libraries/FixedPoint.sol\\\";\\nimport \\\"../flux/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\ninterface IKresko {\\n    struct CollateralAsset {\\n        FixedPoint.Unsigned factor;\\n        AggregatorV2V3Interface oracle;\\n        address underlyingRebasingToken;\\n        uint8 decimals;\\n        bool exists;\\n    }\\n\\n    struct KrAsset {\\n        FixedPoint.Unsigned kFactor;\\n        AggregatorV2V3Interface oracle;\\n        bool exists;\\n        bool mintable;\\n    }\\n\\n    function depositCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount\\n    ) external;\\n\\n    function depositRebasingCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _rebasingAmount\\n    ) external;\\n\\n    function withdrawCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) external;\\n\\n    function withdrawRebasingCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) external;\\n\\n    function mintKreskoAsset(\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _amount\\n    ) external;\\n\\n    function burnKreskoAsset(\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        uint256 _mintedKreskoAssetIndex\\n    ) external;\\n\\n    function collateralExists(address) external view returns (bool);\\n\\n    function krAssetExists(address) external view returns (bool);\\n\\n    function kreskoAssets(address) external view returns (KrAsset memory);\\n\\n    function collateralAssets(address) external view returns (CollateralAsset memory);\\n\\n    function getDepositedCollateralAssetIndex(address, address) external view returns (uint256 i);\\n\\n    function getMintedKreskoAssetsIndex(address, address) external view returns (uint256 i);\\n\\n    function getMintedKreskoAssets(address user) external view returns (address[] memory);\\n\\n    function getDepositedCollateralAssets(address user) external view returns (address[] memory);\\n\\n    function getCollateralValueAndOraclePrice(\\n        address _collateralAsset,\\n        uint256 _amount,\\n        bool _ignoreCollateralFactor\\n    ) external view returns (FixedPoint.Unsigned memory, FixedPoint.Unsigned memory);\\n\\n    function calculateMaxLiquidatableValueForAssets(\\n        address _account,\\n        address _repayKreskoAsset,\\n        address _collateralAssetToSeize\\n    ) external view returns (FixedPoint.Unsigned memory);\\n\\n    function minimumCollateralizationRatio() external view returns (FixedPoint.Unsigned memory);\\n\\n    function kreskoAssetDebt(address, address) external view returns (uint256);\\n\\n    function collateralDeposits(address, address) external view returns (uint256);\\n\\n    function getMinimumCollateralValue(address _krAsset, uint256 _amount)\\n        external\\n        view\\n        returns (FixedPoint.Unsigned memory);\\n\\n    function getAccountCollateralValue(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getAccountMinimumCollateralValue(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getAccountKrAssetValue(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getKrAssetValue(\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        bool _ignoreKfactor\\n    ) external view returns (FixedPoint.Unsigned memory);\\n}\\n\",\"keccak256\":\"0x1b72186653d8861b6ae1af68663ecb7de70dc1fa7b3df6d2fb22315701fd38cd\",\"license\":\"MIT\"},\"src/contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMathUpgradeable for uint256;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    uint256 internal constant FP_DECIMALS = 18;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 internal constant FP_SCALING_FACTOR = 10**FP_DECIMALS;\\n\\n    // --------------------------------------- UNSIGNED ---------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED ------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored\\n    //   internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x57fa621318337636f11189e5a954b771d146527c5a561993105f7c78a95af024\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b50604051620027fc380380620027fc83398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b612760806200009c6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063b56274d411610081578063d1c070281161005b578063d1c07028146101cd578063def86ce1146101ed578063f79031e81461020e57600080fd5b8063b56274d41461017a578063b69a98501461018d578063be6d74a0146101ad57600080fd5b80636bb52909116100b25780636bb52909146101175780636e0696d614610138578063983ff6151461015957600080fd5b806327c5607d146100ce578063624ba701146100f7575b600080fd5b6100e16100dc366004611b65565b610239565b6040516100ee9190611cd2565b60405180910390f35b61010a610105366004611b65565b6105db565b6040516100ee9190611d97565b61012a610125366004611daa565b610924565b6040516100ee929190611e0e565b61014b610146366004611e3c565b610944565b6040516100ee929190611f3e565b61016c610167366004611e3c565b610db1565b6040519081526020016100ee565b61016c610188366004611e3c565b610ec0565b6101a061019b366004611fc4565b610fca565b6040516100ee9190612028565b6101c06101bb366004611e3c565b6110bd565b6040516100ee9190612148565b6101e06101db3660046121db565b611309565b6040516100ee919061222d565b6102006101fb366004611e3c565b6113d5565b6040516100ee929190612271565b600054610221906001600160a01b031681565b6040516001600160a01b0390911681526020016100ee565b6060815167ffffffffffffffff81111561025557610255611a6e565b60405190808252806020026020018201604052801561028e57816020015b61027b61188b565b8152602001906001900390816102735790505b50905060005b82518110156105d55760008382815181106102b1576102b1612284565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa15801561030a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032e9190612302565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190612395565b90506000836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103fe91908101906123b0565b600080549192509081906001600160a01b0316633ae000c08761042287600a61253e565b61042d90600161254d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016040805180830381865afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b8919061256c565b915091506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052491908101906123b0565b90506000604051806101200160405280896001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b031681526020018460000151815260200185600001518152602001886000015181526020018760ff168152602001868152602001838152509050808a8a815181106105af576105af612284565b6020026020010181905250505050505050505080806105cd90612598565b915050610294565b50919050565b6060815167ffffffffffffffff8111156105f7576105f7611a6e565b60405190808252806020026020018201604052801561063057816020015b61061d611904565b8152602001906001900390816106155790505b50905060005b82518110156105d557600083828151811061065357610653612284565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa1580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d091906125b3565b60008054604051631a69f54b60e21b81526001600160a01b038681166004830152670de0b6b3a7640000602483015260448201849052939450919216906369a7d52c90606401602060405180830381865afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190612633565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c1919061264f565b90506000846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610803573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082b91908101906123b0565b90506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561086d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261089591908101906123b0565b905060006040518060e0016040528087602001516001600160a01b03168152602001886001600160a01b031681526020018581526020018660000151815260200187600001518152602001838152602001848152509050808989815181106108ff576108ff612284565b602002602001018190525050505050505050808061091c90612598565b915050610636565b60608061093084610239565b915061093b836105db565b90509250929050565b6000805460405163369c411560e11b81526001600160a01b038481166004830152606093928392911690636d38822a90602401600060405180830381865afa158015610994573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109bc9190810190612668565b805190915015610dab57805167ffffffffffffffff8111156109e0576109e0611a6e565b604051908082528060200260200182016040528015610a1957816020015b610a06611967565b8152602001906001900390816109fe5790505b50925060005b8151811015610da9576000828281518110610a3c57610a3c612284565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab99190612302565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1f9190612395565b60008054604051630c65e07b60e01b81526001600160a01b038c81166004830152878116602483015293945091921690630c65e07b90604401602060405180830381865afa158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b99919061264f565b90506000846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bdb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c0391908101906123b0565b6000805460405162eb800360e61b81526001600160a01b038981166004830152602482018790526001604483015293945091928392911690633ae000c0906064016040805180830381865afa158015610c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c84919061256c565b915091506000876001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cc8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cf091908101906123b0565b60408051610160810182526001600160a01b03808c16825260208b8101518216908301528a83015116918101919091526060810187905284516080820152885160a082015260ff881660c082015260e081018b9052835161010082015261012081018690526101408101829052845191925090610d6d908d612702565b9b50808d8b81518110610d8257610d82612284565b60200260200101819052505050505050505050508080610da190612598565b915050610a1f565b505b50915091565b60008054604051633fa1c54560e21b81526001600160a01b0384811660048301528392169063fe87151490602401602060405180830381865afa158015610dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e209190612633565b600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e929190612633565b9050610e9e8183611839565b15610ead575060009392505050565b610eb78183611845565b51949350505050565b60008054604051633fa1c54560e21b81526001600160a01b0384811660048301528392169063fe87151490602401602060405180830381865afa158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190612633565b51600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa29190612633565b51905081610fb882670de0b6b3a764000061254d565b610fc2919061271a565b949350505050565b606060005b84518110156110b5576040518060400160405280846001600160a01b0316815260200186838151811061100457611004612284565b6020908102919091010151604051636eb1769f60e11b81526001600160a01b03888116600483015287811660248301529091169063dd62ed3e90604401602060405180830381865afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611082919061264f565b81525082828151811061109757611097612284565b602002602001018190525080806110ad90612598565b915050610fcf565b509392505050565b61110c6040518061012001604052806060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080611118846113d5565b9150915060008061112886610944565b9150915060008451118061113d575060008251115b156113005760405180610120016040528085815260200183815260200161116388610ec0565b815260208101859052600054604080517fff1389c50000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152919093019291169063ff1389c590602401602060405180830381865afa1580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f89190612633565b51815260208101839052600054604080516307d1a44560e41b81526001600160a01b038b811660048301529190930192911690637d1a445090602401602060405180830381865afa158015611251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112759190612633565b518152600054604051633fa1c54560e21b81526001600160a01b038a811660048301526020909301929091169063fe87151490602401602060405180830381865afa1580156112c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ec9190612633565b5181526020016112fb88610db1565b905294505b50505050919050565b606060005b83518110156113ce5783818151811061132957611329612284565b60209081029190910101516040516370a0823160e01b81526001600160a01b038581166004830152909116906370a0823190602401602060405180830381865afa15801561137b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139f919061264f565b8282815181106113b1576113b1612284565b6020908102919091010152806113c681612598565b91505061130e565b5092915050565b600080546040516377d4074360e11b81526001600160a01b03848116600483015260609392839291169063efa80e8690602401600060405180830381865afa158015611425573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261144d9190810190612668565b805190915015610dab57805167ffffffffffffffff81111561147157611471611a6e565b6040519080825280602002602001820160405280156114aa57816020015b6114976119f3565b81526020019060019003908161148f5790505b50925060005b8151811015610da95760008282815181106114cd576114cd612284565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a91906125b3565b60008054604051630692479b60e31b81526001600160a01b038b811660048301528681166024830152939450919216906334923cd890604401602060405180830381865afa1580156115a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c4919061264f565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e919061264f565b60008054604051631a69f54b60e21b81526001600160a01b0388811660048301526024820187905260016044830152939450919216906369a7d52c90606401602060405180830381865afa15801561168a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ae9190612633565b6000015190506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156116f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261171c91908101906123b0565b90506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561175e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261178691908101906123b0565b90506000604051806101400160405280896001600160a01b0316815260200188602001516001600160a01b031681526020018781526020018581526020018a815260200188600001518152602001886060015115158152602001868152602001848152602001838152509050838b6117fe9190612702565b9a50808c8a8151811061181357611813612284565b60200260200101819052505050505050505050808061183190612598565b9150506114b0565b80518251105b92915050565b604080516020810190915260008152604080516020810190915282518451829161186f9190611878565b90529392505050565b6000611884828461273c565b9392505050565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016118eb6040518060200160405280600081525090565b8152600060208201526060604082018190529081015290565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016119536040518060200160405280600081525090565b815260200160608152602001606081525090565b60405180610160016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016119c76040518060200160405280600081525090565b8152602001600060ff168152602001600081526020016000815260200160608152602001606081525090565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001611a4a6040518060200160405280600081525090565b81526020016000151581526020016000815260200160608152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611aad57611aad611a6e565b604052919050565b600067ffffffffffffffff821115611acf57611acf611a6e565b5060051b60200190565b6001600160a01b0381168114611aee57600080fd5b50565b600082601f830112611b0257600080fd5b81356020611b17611b1283611ab5565b611a84565b82815260059290921b84018101918181019086841115611b3657600080fd5b8286015b84811015611b5a578035611b4d81611ad9565b8352918301918301611b3a565b509695505050505050565b600060208284031215611b7757600080fd5b813567ffffffffffffffff811115611b8e57600080fd5b610fc284828501611af1565b60005b83811015611bb5578181015183820152602001611b9d565b83811115611bc4576000848401525b50505050565b60008151808452611be2816020860160208601611b9a565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015611cc5578284038952815180516001600160a01b0390811686528682015181168787015260408083015190911690860152606080820151908601526080808201519086015260a080820151519086015260c08082015160ff169086015260e0808201516101208288018190529190611c9283890182611bca565b925050506101008083015192508682038188015250611cb18183611bca565b9a87019a9550505090840190600101611c14565b5091979650505050505050565b6020815260006118846020830184611bf6565b600081518084526020808501808196508360051b8101915082860160005b85811015611cc5578284038952815180516001600160a01b0390811686528682015116868601526040808201519086015260608082015190860152608080820151519086015260a08082015160e08288018190529190611d6583890182611bca565b9250505060c08083015192508682038188015250611d838183611bca565b9a87019a9550505090840190600101611d03565b6020815260006118846020830184611ce5565b60008060408385031215611dbd57600080fd5b823567ffffffffffffffff80821115611dd557600080fd5b611de186838701611af1565b93506020850135915080821115611df757600080fd5b50611e0485828601611af1565b9150509250929050565b604081526000611e216040830185611bf6565b8281036020840152611e338185611ce5565b95945050505050565b600060208284031215611e4e57600080fd5b813561188481611ad9565b600081518084526020808501808196508360051b8101915082860160005b85811015611cc5578284038952815180516001600160a01b0390811686528682015181168787015260408083015190911690860152606080820151908601526080808201519086015260a080820151519086015260c08082015160ff169086015260e080820151908601526101008082015190860152610120808201516101608288018190529190611f0b83890182611bca565b925050506101408083015192508682038188015250611f2a8183611bca565b9a87019a9550505090840190600101611e77565b604081526000611f516040830185611e59565b90508260208301529392505050565b600082601f830112611f7157600080fd5b81356020611f81611b1283611ab5565b82815260059290921b84018101918181019086841115611fa057600080fd5b8286015b84811015611b5a578035611fb781611ad9565b8352918301918301611fa4565b600080600060608486031215611fd957600080fd5b833567ffffffffffffffff811115611ff057600080fd5b611ffc86828701611f60565b935050602084013561200d81611ad9565b9150604084013561201d81611ad9565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b82811015611cc557815180516001600160a01b03168552860151868501529284019290850190600101612045565b600081518084526020808501808196508360051b8101915082860160005b85811015611cc5578284038952815180516001600160a01b03908116865286820151168686015260408082015190860152606080820151908601526080808201519086015260a080820151519086015260c08082015115159086015260e0808201519086015261010080820151610140828801819052919061211583890182611bca565b9250505061012080830151925086820381880152506121348183611bca565b9a87019a9550505090840190600101612091565b6020815260008251610120806020850152612167610140850183612073565b91506020850151601f198584030160408601526121848382611e59565b9250506040850151606085015260608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151838701525050508091505092915050565b600080604083850312156121ee57600080fd5b823567ffffffffffffffff81111561220557600080fd5b61221185828601611f60565b925050602083013561222281611ad9565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561226557835183529284019291840191600101612249565b50909695505050505050565b604081526000611f516040830185612073565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156122ac57600080fd5b6040516020810181811067ffffffffffffffff821117156122cf576122cf611a6e565b6040529151825250919050565b805160ff811681146122ed57600080fd5b919050565b805180151581146122ed57600080fd5b600060a0828403121561231457600080fd5b60405160a0810181811067ffffffffffffffff8211171561233757612337611a6e565b604052612344848461229a565b8152602083015161235481611ad9565b6020820152604083015161236781611ad9565b6040820152612378606084016122dc565b6060820152612389608084016122f2565b60808201529392505050565b6000602082840312156123a757600080fd5b611884826122dc565b6000602082840312156123c257600080fd5b815167ffffffffffffffff808211156123da57600080fd5b818401915084601f8301126123ee57600080fd5b81518181111561240057612400611a6e565b612413601f8201601f1916602001611a84565b915080825285602082850101111561242a57600080fd5b61243b816020840160208601611b9a565b50949350505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561249557816000190482111561247b5761247b612444565b8085161561248857918102915b93841c939080029061245f565b509250929050565b6000826124ac5750600161183f565b816124b95750600061183f565b81600181146124cf57600281146124d9576124f5565b600191505061183f565b60ff8411156124ea576124ea612444565b50506001821b61183f565b5060208310610133831016604e8410600b8410161715612518575081810a61183f565b612522838361245a565b806000190482111561253657612536612444565b029392505050565b600061188460ff84168361249d565b600081600019048311821515161561256757612567612444565b500290565b6000806040838503121561257f57600080fd5b612589848461229a565b915061093b846020850161229a565b60006000198214156125ac576125ac612444565b5060010190565b6000608082840312156125c557600080fd5b6040516080810181811067ffffffffffffffff821117156125e8576125e8611a6e565b6040526125f5848461229a565b8152602083015161260581611ad9565b6020820152612616604084016122f2565b6040820152612627606084016122f2565b60608201529392505050565b60006020828403121561264557600080fd5b611884838361229a565b60006020828403121561266157600080fd5b5051919050565b6000602080838503121561267b57600080fd5b825167ffffffffffffffff81111561269257600080fd5b8301601f810185136126a357600080fd5b80516126b1611b1282611ab5565b81815260059190911b820183019083810190878311156126d057600080fd5b928401925b828410156126f75783516126e881611ad9565b825292840192908401906126d5565b979650505050505050565b6000821982111561271557612715612444565b500190565b60008261273757634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561274e5761274e612444565b50039056fea164736f6c634300080a000a",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c8063b56274d411610081578063d1c070281161005b578063d1c07028146101cd578063def86ce1146101ed578063f79031e81461020e57600080fd5b8063b56274d41461017a578063b69a98501461018d578063be6d74a0146101ad57600080fd5b80636bb52909116100b25780636bb52909146101175780636e0696d614610138578063983ff6151461015957600080fd5b806327c5607d146100ce578063624ba701146100f7575b600080fd5b6100e16100dc366004611b65565b610239565b6040516100ee9190611cd2565b60405180910390f35b61010a610105366004611b65565b6105db565b6040516100ee9190611d97565b61012a610125366004611daa565b610924565b6040516100ee929190611e0e565b61014b610146366004611e3c565b610944565b6040516100ee929190611f3e565b61016c610167366004611e3c565b610db1565b6040519081526020016100ee565b61016c610188366004611e3c565b610ec0565b6101a061019b366004611fc4565b610fca565b6040516100ee9190612028565b6101c06101bb366004611e3c565b6110bd565b6040516100ee9190612148565b6101e06101db3660046121db565b611309565b6040516100ee919061222d565b6102006101fb366004611e3c565b6113d5565b6040516100ee929190612271565b600054610221906001600160a01b031681565b6040516001600160a01b0390911681526020016100ee565b6060815167ffffffffffffffff81111561025557610255611a6e565b60405190808252806020026020018201604052801561028e57816020015b61027b61188b565b8152602001906001900390816102735790505b50905060005b82518110156105d55760008382815181106102b1576102b1612284565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa15801561030a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032e9190612302565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190612395565b90506000836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103fe91908101906123b0565b600080549192509081906001600160a01b0316633ae000c08761042287600a61253e565b61042d90600161254d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016040805180830381865afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b8919061256c565b915091506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052491908101906123b0565b90506000604051806101200160405280896001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b031681526020018460000151815260200185600001518152602001886000015181526020018760ff168152602001868152602001838152509050808a8a815181106105af576105af612284565b6020026020010181905250505050505050505080806105cd90612598565b915050610294565b50919050565b6060815167ffffffffffffffff8111156105f7576105f7611a6e565b60405190808252806020026020018201604052801561063057816020015b61061d611904565b8152602001906001900390816106155790505b50905060005b82518110156105d557600083828151811061065357610653612284565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa1580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d091906125b3565b60008054604051631a69f54b60e21b81526001600160a01b038681166004830152670de0b6b3a7640000602483015260448201849052939450919216906369a7d52c90606401602060405180830381865afa158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190612633565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c1919061264f565b90506000846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610803573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082b91908101906123b0565b90506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561086d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261089591908101906123b0565b905060006040518060e0016040528087602001516001600160a01b03168152602001886001600160a01b031681526020018581526020018660000151815260200187600001518152602001838152602001848152509050808989815181106108ff576108ff612284565b602002602001018190525050505050505050808061091c90612598565b915050610636565b60608061093084610239565b915061093b836105db565b90509250929050565b6000805460405163369c411560e11b81526001600160a01b038481166004830152606093928392911690636d38822a90602401600060405180830381865afa158015610994573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109bc9190810190612668565b805190915015610dab57805167ffffffffffffffff8111156109e0576109e0611a6e565b604051908082528060200260200182016040528015610a1957816020015b610a06611967565b8152602001906001900390816109fe5790505b50925060005b8151811015610da9576000828281518110610a3c57610a3c612284565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab99190612302565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1f9190612395565b60008054604051630c65e07b60e01b81526001600160a01b038c81166004830152878116602483015293945091921690630c65e07b90604401602060405180830381865afa158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b99919061264f565b90506000846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bdb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c0391908101906123b0565b6000805460405162eb800360e61b81526001600160a01b038981166004830152602482018790526001604483015293945091928392911690633ae000c0906064016040805180830381865afa158015610c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c84919061256c565b915091506000876001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610cc8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cf091908101906123b0565b60408051610160810182526001600160a01b03808c16825260208b8101518216908301528a83015116918101919091526060810187905284516080820152885160a082015260ff881660c082015260e081018b9052835161010082015261012081018690526101408101829052845191925090610d6d908d612702565b9b50808d8b81518110610d8257610d82612284565b60200260200101819052505050505050505050508080610da190612598565b915050610a1f565b505b50915091565b60008054604051633fa1c54560e21b81526001600160a01b0384811660048301528392169063fe87151490602401602060405180830381865afa158015610dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e209190612633565b600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e929190612633565b9050610e9e8183611839565b15610ead575060009392505050565b610eb78183611845565b51949350505050565b60008054604051633fa1c54560e21b81526001600160a01b0384811660048301528392169063fe87151490602401602060405180830381865afa158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190612633565b51600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa29190612633565b51905081610fb882670de0b6b3a764000061254d565b610fc2919061271a565b949350505050565b606060005b84518110156110b5576040518060400160405280846001600160a01b0316815260200186838151811061100457611004612284565b6020908102919091010151604051636eb1769f60e11b81526001600160a01b03888116600483015287811660248301529091169063dd62ed3e90604401602060405180830381865afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611082919061264f565b81525082828151811061109757611097612284565b602002602001018190525080806110ad90612598565b915050610fcf565b509392505050565b61110c6040518061012001604052806060815260200160608152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080611118846113d5565b9150915060008061112886610944565b9150915060008451118061113d575060008251115b156113005760405180610120016040528085815260200183815260200161116388610ec0565b815260208101859052600054604080517fff1389c50000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152919093019291169063ff1389c590602401602060405180830381865afa1580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f89190612633565b51815260208101839052600054604080516307d1a44560e41b81526001600160a01b038b811660048301529190930192911690637d1a445090602401602060405180830381865afa158015611251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112759190612633565b518152600054604051633fa1c54560e21b81526001600160a01b038a811660048301526020909301929091169063fe87151490602401602060405180830381865afa1580156112c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ec9190612633565b5181526020016112fb88610db1565b905294505b50505050919050565b606060005b83518110156113ce5783818151811061132957611329612284565b60209081029190910101516040516370a0823160e01b81526001600160a01b038581166004830152909116906370a0823190602401602060405180830381865afa15801561137b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139f919061264f565b8282815181106113b1576113b1612284565b6020908102919091010152806113c681612598565b91505061130e565b5092915050565b600080546040516377d4074360e11b81526001600160a01b03848116600483015260609392839291169063efa80e8690602401600060405180830381865afa158015611425573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261144d9190810190612668565b805190915015610dab57805167ffffffffffffffff81111561147157611471611a6e565b6040519080825280602002602001820160405280156114aa57816020015b6114976119f3565b81526020019060019003908161148f5790505b50925060005b8151811015610da95760008282815181106114cd576114cd612284565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a91906125b3565b60008054604051630692479b60e31b81526001600160a01b038b811660048301528681166024830152939450919216906334923cd890604401602060405180830381865afa1580156115a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c4919061264f565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e919061264f565b60008054604051631a69f54b60e21b81526001600160a01b0388811660048301526024820187905260016044830152939450919216906369a7d52c90606401602060405180830381865afa15801561168a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ae9190612633565b6000015190506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156116f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261171c91908101906123b0565b90506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561175e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261178691908101906123b0565b90506000604051806101400160405280896001600160a01b0316815260200188602001516001600160a01b031681526020018781526020018581526020018a815260200188600001518152602001886060015115158152602001868152602001848152602001838152509050838b6117fe9190612702565b9a50808c8a8151811061181357611813612284565b60200260200101819052505050505050505050808061183190612598565b9150506114b0565b80518251105b92915050565b604080516020810190915260008152604080516020810190915282518451829161186f9190611878565b90529392505050565b6000611884828461273c565b9392505050565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016118eb6040518060200160405280600081525090565b8152600060208201526060604082018190529081015290565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016119536040518060200160405280600081525090565b815260200160608152602001606081525090565b60405180610160016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016119c76040518060200160405280600081525090565b8152602001600060ff168152602001600081526020016000815260200160608152602001606081525090565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001611a4a6040518060200160405280600081525090565b81526020016000151581526020016000815260200160608152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611aad57611aad611a6e565b604052919050565b600067ffffffffffffffff821115611acf57611acf611a6e565b5060051b60200190565b6001600160a01b0381168114611aee57600080fd5b50565b600082601f830112611b0257600080fd5b81356020611b17611b1283611ab5565b611a84565b82815260059290921b84018101918181019086841115611b3657600080fd5b8286015b84811015611b5a578035611b4d81611ad9565b8352918301918301611b3a565b509695505050505050565b600060208284031215611b7757600080fd5b813567ffffffffffffffff811115611b8e57600080fd5b610fc284828501611af1565b60005b83811015611bb5578181015183820152602001611b9d565b83811115611bc4576000848401525b50505050565b60008151808452611be2816020860160208601611b9a565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015611cc5578284038952815180516001600160a01b0390811686528682015181168787015260408083015190911690860152606080820151908601526080808201519086015260a080820151519086015260c08082015160ff169086015260e0808201516101208288018190529190611c9283890182611bca565b925050506101008083015192508682038188015250611cb18183611bca565b9a87019a9550505090840190600101611c14565b5091979650505050505050565b6020815260006118846020830184611bf6565b600081518084526020808501808196508360051b8101915082860160005b85811015611cc5578284038952815180516001600160a01b0390811686528682015116868601526040808201519086015260608082015190860152608080820151519086015260a08082015160e08288018190529190611d6583890182611bca565b9250505060c08083015192508682038188015250611d838183611bca565b9a87019a9550505090840190600101611d03565b6020815260006118846020830184611ce5565b60008060408385031215611dbd57600080fd5b823567ffffffffffffffff80821115611dd557600080fd5b611de186838701611af1565b93506020850135915080821115611df757600080fd5b50611e0485828601611af1565b9150509250929050565b604081526000611e216040830185611bf6565b8281036020840152611e338185611ce5565b95945050505050565b600060208284031215611e4e57600080fd5b813561188481611ad9565b600081518084526020808501808196508360051b8101915082860160005b85811015611cc5578284038952815180516001600160a01b0390811686528682015181168787015260408083015190911690860152606080820151908601526080808201519086015260a080820151519086015260c08082015160ff169086015260e080820151908601526101008082015190860152610120808201516101608288018190529190611f0b83890182611bca565b925050506101408083015192508682038188015250611f2a8183611bca565b9a87019a9550505090840190600101611e77565b604081526000611f516040830185611e59565b90508260208301529392505050565b600082601f830112611f7157600080fd5b81356020611f81611b1283611ab5565b82815260059290921b84018101918181019086841115611fa057600080fd5b8286015b84811015611b5a578035611fb781611ad9565b8352918301918301611fa4565b600080600060608486031215611fd957600080fd5b833567ffffffffffffffff811115611ff057600080fd5b611ffc86828701611f60565b935050602084013561200d81611ad9565b9150604084013561201d81611ad9565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b82811015611cc557815180516001600160a01b03168552860151868501529284019290850190600101612045565b600081518084526020808501808196508360051b8101915082860160005b85811015611cc5578284038952815180516001600160a01b03908116865286820151168686015260408082015190860152606080820151908601526080808201519086015260a080820151519086015260c08082015115159086015260e0808201519086015261010080820151610140828801819052919061211583890182611bca565b9250505061012080830151925086820381880152506121348183611bca565b9a87019a9550505090840190600101612091565b6020815260008251610120806020850152612167610140850183612073565b91506020850151601f198584030160408601526121848382611e59565b9250506040850151606085015260608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151838701525050508091505092915050565b600080604083850312156121ee57600080fd5b823567ffffffffffffffff81111561220557600080fd5b61221185828601611f60565b925050602083013561222281611ad9565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561226557835183529284019291840191600101612249565b50909695505050505050565b604081526000611f516040830185612073565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156122ac57600080fd5b6040516020810181811067ffffffffffffffff821117156122cf576122cf611a6e565b6040529151825250919050565b805160ff811681146122ed57600080fd5b919050565b805180151581146122ed57600080fd5b600060a0828403121561231457600080fd5b60405160a0810181811067ffffffffffffffff8211171561233757612337611a6e565b604052612344848461229a565b8152602083015161235481611ad9565b6020820152604083015161236781611ad9565b6040820152612378606084016122dc565b6060820152612389608084016122f2565b60808201529392505050565b6000602082840312156123a757600080fd5b611884826122dc565b6000602082840312156123c257600080fd5b815167ffffffffffffffff808211156123da57600080fd5b818401915084601f8301126123ee57600080fd5b81518181111561240057612400611a6e565b612413601f8201601f1916602001611a84565b915080825285602082850101111561242a57600080fd5b61243b816020840160208601611b9a565b50949350505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561249557816000190482111561247b5761247b612444565b8085161561248857918102915b93841c939080029061245f565b509250929050565b6000826124ac5750600161183f565b816124b95750600061183f565b81600181146124cf57600281146124d9576124f5565b600191505061183f565b60ff8411156124ea576124ea612444565b50506001821b61183f565b5060208310610133831016604e8410600b8410161715612518575081810a61183f565b612522838361245a565b806000190482111561253657612536612444565b029392505050565b600061188460ff84168361249d565b600081600019048311821515161561256757612567612444565b500290565b6000806040838503121561257f57600080fd5b612589848461229a565b915061093b846020850161229a565b60006000198214156125ac576125ac612444565b5060010190565b6000608082840312156125c557600080fd5b6040516080810181811067ffffffffffffffff821117156125e8576125e8611a6e565b6040526125f5848461229a565b8152602083015161260581611ad9565b6020820152612616604084016122f2565b6040820152612627606084016122f2565b60608201529392505050565b60006020828403121561264557600080fd5b611884838361229a565b60006020828403121561266157600080fd5b5051919050565b6000602080838503121561267b57600080fd5b825167ffffffffffffffff81111561269257600080fd5b8301601f810185136126a357600080fd5b80516126b1611b1282611ab5565b81815260059190911b820183019083810190878311156126d057600080fd5b928401925b828410156126f75783516126e881611ad9565b825292840192908401906126d5565b979650505050505050565b6000821982111561271557612715612444565b500190565b60008261273757634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561274e5761274e612444565b50039056fea164736f6c634300080a000a",
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 19688,
                "contract": "src/contracts/KreskoViewer.sol:KreskoViewer",
                "label": "Kresko",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(IKresko)22030"
            }
        ],
        "types": {
            "t_contract(IKresko)22030": {
                "encoding": "inplace",
                "label": "contract IKresko",
                "numberOfBytes": "20"
            }
        }
    }
}
