{
    "address": "0x11b1cE9b6F5dfa642b762cBb38BD5D855e66933a",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "contract IKresko",
                    "name": "_kresko",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "Kresko",
            "outputs": [
                {
                    "internalType": "contract IKresko",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "borrowingPowerUSD",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "collateralAssetInfoFor",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "underlyingRebasingToken",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "amountUSD",
                            "type": "tuple"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "cFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                        },
                        {
                            "internalType": "uint256",
                            "name": "index",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.CollateralAssetInfoUser[]",
                    "name": "result",
                    "type": "tuple[]"
                },
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "totalCollateralUSD",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "assetAddresses",
                    "type": "address[]"
                }
            ],
            "name": "collateralAssetInfos",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "underlyingRebasingToken",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "cFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.CollateralAssetInfo[]",
                    "name": "result",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IERC20Upgradeable[]",
                    "name": "_tokens",
                    "type": "address[]"
                },
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }
            ],
            "name": "getAllowances",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "spender",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "allowance",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct KreskoViewer.Allowance[]",
                    "name": "allowances",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "_collateralAssets",
                    "type": "address[]"
                },
                {
                    "internalType": "address[]",
                    "name": "_krAssets",
                    "type": "address[]"
                }
            ],
            "name": "getAssetInfos",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "underlyingRebasingToken",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "cFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.CollateralAssetInfo[]",
                    "name": "collateralAssets",
                    "type": "tuple[]"
                },
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "kFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.krAssetInfo[]",
                    "name": "krAssets",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IERC20Upgradeable[]",
                    "name": "_tokens",
                    "type": "address[]"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "getBalances",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "balance",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct KreskoViewer.Balance[]",
                    "name": "balances",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "contract IERC20MetadataUpgradeable[]",
                    "name": "_tokens",
                    "type": "address[]"
                }
            ],
            "name": "getTokenMetadatas",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint8",
                            "name": "decimals",
                            "type": "uint8"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.TokenMetadata[]",
                    "name": "metadatas",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "healthFactorFor",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "krAssetInfoFor",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "amountUSD",
                            "type": "tuple"
                        },
                        {
                            "internalType": "uint256",
                            "name": "index",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "kFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "bool",
                            "name": "mintable",
                            "type": "bool"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.krAssetInfoUser[]",
                    "name": "result",
                    "type": "tuple[]"
                },
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "totalDebtUSD",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "assetAddresses",
                    "type": "address[]"
                }
            ],
            "name": "krAssetInfos",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "address",
                            "name": "oracleAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "assetAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "price",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "kFactor",
                            "type": "tuple"
                        },
                        {
                            "internalType": "string",
                            "name": "symbol",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "internalType": "struct KreskoViewer.krAssetInfo[]",
                    "name": "result",
                    "type": "tuple[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "kreskoUser",
            "outputs": [
                {
                    "components": [
                        {
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "assetAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "oracleAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "components": [
                                        {
                                            "internalType": "uint256",
                                            "name": "rawValue",
                                            "type": "uint256"
                                        }
                                    ],
                                    "internalType": "struct FixedPoint.Unsigned",
                                    "name": "amountUSD",
                                    "type": "tuple"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                },
                                {
                                    "components": [
                                        {
                                            "internalType": "uint256",
                                            "name": "rawValue",
                                            "type": "uint256"
                                        }
                                    ],
                                    "internalType": "struct FixedPoint.Unsigned",
                                    "name": "kFactor",
                                    "type": "tuple"
                                },
                                {
                                    "internalType": "bool",
                                    "name": "mintable",
                                    "type": "bool"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "price",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "symbol",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "name",
                                    "type": "string"
                                }
                            ],
                            "internalType": "struct KreskoViewer.krAssetInfoUser[]",
                            "name": "krAssets",
                            "type": "tuple[]"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "assetAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "oracleAddress",
                                    "type": "address"
                                },
                                {
                                    "internalType": "address",
                                    "name": "underlyingRebasingToken",
                                    "type": "address"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "amount",
                                    "type": "uint256"
                                },
                                {
                                    "components": [
                                        {
                                            "internalType": "uint256",
                                            "name": "rawValue",
                                            "type": "uint256"
                                        }
                                    ],
                                    "internalType": "struct FixedPoint.Unsigned",
                                    "name": "amountUSD",
                                    "type": "tuple"
                                },
                                {
                                    "components": [
                                        {
                                            "internalType": "uint256",
                                            "name": "rawValue",
                                            "type": "uint256"
                                        }
                                    ],
                                    "internalType": "struct FixedPoint.Unsigned",
                                    "name": "cFactor",
                                    "type": "tuple"
                                },
                                {
                                    "internalType": "uint8",
                                    "name": "decimals",
                                    "type": "uint8"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "index",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "uint256",
                                    "name": "price",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "symbol",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "name",
                                    "type": "string"
                                }
                            ],
                            "internalType": "struct KreskoViewer.CollateralAssetInfoUser[]",
                            "name": "collateralAssets",
                            "type": "tuple[]"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "healthFactor",
                            "type": "tuple"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "debtActualUSD",
                            "type": "tuple"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "debtUSD",
                            "type": "tuple"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "collateralActualUSD",
                            "type": "tuple"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "collateralUSD",
                            "type": "tuple"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "minCollateralUSD",
                            "type": "tuple"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "rawValue",
                                    "type": "uint256"
                                }
                            ],
                            "internalType": "struct FixedPoint.Unsigned",
                            "name": "borrowingPowerUSD",
                            "type": "tuple"
                        }
                    ],
                    "internalType": "struct KreskoViewer.KreskoUser",
                    "name": "user",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "transactionHash": "0x754a7e22235c1d11ad054aca5ab464760d639f8e93bccd14cbdb495560072e59",
    "receipt": {
        "to": null,
        "from": "0x2121245dcAD697f11244068AaD6EcbC301811239",
        "contractAddress": "0x11b1cE9b6F5dfa642b762cBb38BD5D855e66933a",
        "transactionIndex": 0,
        "gasUsed": "2603073",
        "logsBloom": "0x
        "blockHash": "0x54b2cd1edb87ac5bf5418f4b89eaffa38dbee5edc180def0d87d447be7b1d42b",
        "transactionHash": "0x754a7e22235c1d11ad054aca5ab464760d639f8e93bccd14cbdb495560072e59",
        "logs": [],
        "blockNumber": 89889494,
        "cumulativeGasUsed": "0",
        "status": 1,
        "byzantium": true
    },
    "args": ["0xb6BdB49B220905D34b0B9348D2AE514Df9D9F5dC"],
    "numDeployments": 1,
    "solcInputHash": "e0b86235be88f04abd364a65d2095ede",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IKresko\",\"name\":\"_kresko\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Kresko\",\"outputs\":[{\"internalType\":\"contract IKresko\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"borrowingPowerUSD\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"collateralAssetInfoFor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amountUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfoUser[]\",\"name\":\"result\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"totalCollateralUSD\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assetAddresses\",\"type\":\"address[]\"}],\"name\":\"collateralAssetInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfo[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"internalType\":\"struct KreskoViewer.Allowance[]\",\"name\":\"allowances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_krAssets\",\"type\":\"address[]\"}],\"name\":\"getAssetInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfo[]\",\"name\":\"collateralAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfo[]\",\"name\":\"krAssets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct KreskoViewer.Balance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenMetadatas\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.TokenMetadata[]\",\"name\":\"metadatas\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"healthFactorFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"krAssetInfoFor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amountUSD\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfoUser[]\",\"name\":\"result\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"totalDebtUSD\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assetAddresses\",\"type\":\"address[]\"}],\"name\":\"krAssetInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfo[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"kreskoUser\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amountUSD\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.krAssetInfoUser[]\",\"name\":\"krAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amountUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"cFactor\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct KreskoViewer.CollateralAssetInfoUser[]\",\"name\":\"collateralAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"healthFactor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"debtActualUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"debtUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralActualUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"collateralUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"minCollateralUSD\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"borrowingPowerUSD\",\"type\":\"tuple\"}],\"internalType\":\"struct KreskoViewer.KreskoUser\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/KreskoViewer.sol\":\"KreskoViewer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x322088ced3c1d027a3260de4e5a867b2264adeef252b94158a9725767873ea31\",\"license\":\"MIT\"},\"src/contracts/KreskoViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"./libraries/FixedPointMath.sol\\\";\\nimport \\\"./libraries/FixedPoint.sol\\\";\\nimport \\\"./interfaces/IKresko.sol\\\";\\n\\ncontract KreskoViewer {\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using FixedPointMath for uint256;\\n\\n    IKresko public Kresko;\\n\\n    struct krAssetInfoUser {\\n        address assetAddress;\\n        address oracleAddress;\\n        uint256 amount;\\n        FixedPoint.Unsigned amountUSD;\\n        uint256 index;\\n        FixedPoint.Unsigned kFactor;\\n        bool mintable;\\n        uint256 price;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct CollateralAssetInfoUser {\\n        address assetAddress;\\n        address oracleAddress;\\n        address underlyingRebasingToken;\\n        uint256 amount;\\n        FixedPoint.Unsigned amountUSD;\\n        FixedPoint.Unsigned cFactor;\\n        uint8 decimals;\\n        uint256 index;\\n        uint256 price;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct CollateralAssetInfo {\\n        address assetAddress;\\n        address oracleAddress;\\n        address underlyingRebasingToken;\\n        uint256 price;\\n        uint256 value;\\n        FixedPoint.Unsigned cFactor;\\n        uint8 decimals;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct krAssetInfo {\\n        address oracleAddress;\\n        address assetAddress;\\n        uint256 price;\\n        uint256 value;\\n        FixedPoint.Unsigned kFactor;\\n        string symbol;\\n        string name;\\n    }\\n\\n    struct KreskoUser {\\n        krAssetInfoUser[] krAssets;\\n        CollateralAssetInfoUser[] collateralAssets;\\n        FixedPoint.Unsigned healthFactor;\\n        FixedPoint.Unsigned debtActualUSD;\\n        FixedPoint.Unsigned debtUSD;\\n        FixedPoint.Unsigned collateralActualUSD;\\n        FixedPoint.Unsigned collateralUSD;\\n        FixedPoint.Unsigned minCollateralUSD;\\n        FixedPoint.Unsigned borrowingPowerUSD;\\n    }\\n\\n    struct Allowance {\\n        address owner;\\n        address spender;\\n        uint256 allowance;\\n    }\\n\\n    struct Balance {\\n        address token;\\n        uint256 balance;\\n    }\\n\\n    struct TokenMetadata {\\n        uint8 decimals;\\n        string symbol;\\n        string name;\\n    }\\n\\n    constructor(IKresko _kresko) {\\n        Kresko = _kresko;\\n    }\\n\\n    function healthFactorFor(address _account) public view returns (FixedPoint.Unsigned memory) {\\n        FixedPoint.Unsigned memory userDebt = Kresko.getAccountKrAssetValue(_account);\\n        FixedPoint.Unsigned memory userCollateral = Kresko.getAccountCollateralValue(_account);\\n\\n        if (userDebt.isGreaterThan(0)) {\\n            return userCollateral.div(userDebt);\\n        } else {\\n            return FixedPoint.Unsigned(0);\\n        }\\n    }\\n\\n    function kreskoUser(address _account) external view returns (KreskoUser memory user) {\\n        (krAssetInfoUser[] memory krInfos, FixedPoint.Unsigned memory totalDebtUSD) = krAssetInfoFor(_account);\\n        (\\n            CollateralAssetInfoUser[] memory collateralInfos,\\n            FixedPoint.Unsigned memory totalCollateralUSD\\n        ) = collateralAssetInfoFor(_account);\\n\\n        if (krInfos.length > 0 || collateralInfos.length > 0) {\\n            user = KreskoUser({\\n                collateralAssets: collateralInfos,\\n                krAssets: krInfos,\\n                borrowingPowerUSD: borrowingPowerUSD(_account),\\n                healthFactor: healthFactorFor(_account),\\n                debtActualUSD: totalDebtUSD,\\n                debtUSD: Kresko.getAccountKrAssetValue(_account),\\n                collateralActualUSD: totalCollateralUSD,\\n                collateralUSD: Kresko.getAccountCollateralValue(_account),\\n                minCollateralUSD: Kresko.getAccountMinimumCollateralValue(_account)\\n            });\\n        }\\n    }\\n\\n    function krAssetInfoFor(address _account)\\n        public\\n        view\\n        returns (krAssetInfoUser[] memory result, FixedPoint.Unsigned memory totalDebtUSD)\\n    {\\n        address[] memory krAssetAddresses = Kresko.getMintedKreskoAssets(_account);\\n        if (krAssetAddresses.length > 0) {\\n            result = new krAssetInfoUser[](krAssetAddresses.length);\\n            for (uint256 i; i < krAssetAddresses.length; i++) {\\n                address assetAddress = krAssetAddresses[i];\\n                IKresko.KrAsset memory krAsset = Kresko.kreskoAssets(assetAddress);\\n                uint256 amount = Kresko.kreskoAssetDebt(_account, assetAddress);\\n\\n                uint256 price = uint256(krAsset.oracle.latestAnswer());\\n                FixedPoint.Unsigned memory amountUSD = Kresko.getKrAssetValue(assetAddress, amount, true);\\n\\n                string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n                string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n\\n                krAssetInfoUser memory assetInfo = krAssetInfoUser({\\n                    assetAddress: assetAddress,\\n                    oracleAddress: address(krAsset.oracle),\\n                    amount: amount,\\n                    amountUSD: amountUSD,\\n                    index: i,\\n                    kFactor: krAsset.kFactor,\\n                    mintable: krAsset.mintable,\\n                    price: price,\\n                    symbol: symbol,\\n                    name: name\\n                });\\n\\n                totalDebtUSD.add(amountUSD);\\n                result[i] = assetInfo;\\n            }\\n        }\\n    }\\n\\n    function collateralAssetInfoFor(address _account)\\n        public\\n        view\\n        returns (CollateralAssetInfoUser[] memory result, FixedPoint.Unsigned memory totalCollateralUSD)\\n    {\\n        address[] memory collateralAssetAddresses = Kresko.getDepositedCollateralAssets(_account);\\n        if (collateralAssetAddresses.length > 0) {\\n            result = new CollateralAssetInfoUser[](collateralAssetAddresses.length);\\n            for (uint256 i; i < collateralAssetAddresses.length; i++) {\\n                address assetAddress = collateralAssetAddresses[i];\\n                IKresko.CollateralAsset memory collateralAsset = Kresko.collateralAssets(assetAddress);\\n                uint8 decimals = IERC20MetadataUpgradeable(assetAddress).decimals();\\n\\n                uint256 amount = Kresko.collateralDeposits(_account, assetAddress);\\n\\n                string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n                (FixedPoint.Unsigned memory amountUSD, FixedPoint.Unsigned memory price) = Kresko\\n                    .getCollateralValueAndOraclePrice(assetAddress, amount, true);\\n\\n                string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n\\n                CollateralAssetInfoUser memory assetInfo = CollateralAssetInfoUser({\\n                    amount: amount,\\n                    amountUSD: amountUSD,\\n                    oracleAddress: address(collateralAsset.oracle),\\n                    underlyingRebasingToken: collateralAsset.underlyingRebasingToken,\\n                    assetAddress: assetAddress,\\n                    cFactor: collateralAsset.factor,\\n                    decimals: decimals,\\n                    index: i,\\n                    price: price.rawValue,\\n                    symbol: symbol,\\n                    name: name\\n                });\\n\\n                totalCollateralUSD.add(amountUSD);\\n                result[i] = assetInfo;\\n            }\\n        }\\n    }\\n\\n    function collateralAssetInfos(address[] memory assetAddresses)\\n        public\\n        view\\n        returns (CollateralAssetInfo[] memory result)\\n    {\\n        result = new CollateralAssetInfo[](assetAddresses.length);\\n        for (uint256 i; i < assetAddresses.length; i++) {\\n            address assetAddress = assetAddresses[i];\\n            IKresko.CollateralAsset memory collateralAsset = Kresko.collateralAssets(assetAddress);\\n            uint8 decimals = IERC20MetadataUpgradeable(assetAddress).decimals();\\n\\n            string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n            (FixedPoint.Unsigned memory value, FixedPoint.Unsigned memory price) = Kresko\\n                .getCollateralValueAndOraclePrice(assetAddress, 1 * 10**decimals, false);\\n\\n            string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n\\n            CollateralAssetInfo memory assetInfo = CollateralAssetInfo({\\n                value: value.rawValue,\\n                oracleAddress: address(collateralAsset.oracle),\\n                underlyingRebasingToken: collateralAsset.underlyingRebasingToken,\\n                assetAddress: assetAddress,\\n                cFactor: collateralAsset.factor,\\n                decimals: decimals,\\n                price: price.rawValue,\\n                symbol: symbol,\\n                name: name\\n            });\\n\\n            result[i] = assetInfo;\\n        }\\n    }\\n\\n    function getAssetInfos(address[] memory _collateralAssets, address[] memory _krAssets)\\n        external\\n        view\\n        returns (CollateralAssetInfo[] memory collateralAssets, krAssetInfo[] memory krAssets)\\n    {\\n        collateralAssets = collateralAssetInfos(_collateralAssets);\\n        krAssets = krAssetInfos(_krAssets);\\n    }\\n\\n    function krAssetInfos(address[] memory assetAddresses) public view returns (krAssetInfo[] memory result) {\\n        result = new krAssetInfo[](assetAddresses.length);\\n        for (uint256 i; i < assetAddresses.length; i++) {\\n            address assetAddress = assetAddresses[i];\\n\\n            IKresko.KrAsset memory krAsset = Kresko.kreskoAssets(assetAddress);\\n\\n            FixedPoint.Unsigned memory value = Kresko.getKrAssetValue(assetAddress, 1 ether, false);\\n            uint256 price = uint256(krAsset.oracle.latestAnswer());\\n\\n            string memory name = IERC20MetadataUpgradeable(assetAddress).name();\\n            string memory symbol = IERC20MetadataUpgradeable(assetAddress).symbol();\\n\\n            krAssetInfo memory assetInfo = krAssetInfo({\\n                value: value.rawValue,\\n                oracleAddress: address(krAsset.oracle),\\n                assetAddress: assetAddress,\\n                kFactor: krAsset.kFactor,\\n                price: price,\\n                symbol: symbol,\\n                name: name\\n            });\\n\\n            result[i] = assetInfo;\\n        }\\n    }\\n\\n    function borrowingPowerUSD(address _account) public view returns (FixedPoint.Unsigned memory) {\\n        FixedPoint.Unsigned memory minCollateral = Kresko.getAccountMinimumCollateralValue(_account);\\n        FixedPoint.Unsigned memory collateral = Kresko.getAccountCollateralValue(_account);\\n\\n        if (collateral.isLessThan(minCollateral)) {\\n            return FixedPoint.Unsigned(0);\\n        } else {\\n            return collateral.sub(minCollateral);\\n        }\\n    }\\n\\n    function getTokenMetadatas(IERC20MetadataUpgradeable[] memory _tokens)\\n        external\\n        view\\n        returns (TokenMetadata[] memory metadatas)\\n    {\\n        metadatas = new TokenMetadata[](_tokens.length);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            metadatas[i] = TokenMetadata({\\n                decimals: _tokens[i].decimals(),\\n                name: _tokens[i].name(),\\n                symbol: _tokens[i].symbol()\\n            });\\n        }\\n    }\\n\\n    function getBalances(IERC20Upgradeable[] memory _tokens, address account)\\n        external\\n        view\\n        returns (Balance[] memory balances)\\n    {\\n        balances = new Balance[](_tokens.length);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            balances[i] = Balance({token: address(_tokens[i]), balance: _tokens[i].balanceOf(account)});\\n        }\\n    }\\n\\n    function getAllowances(\\n        IERC20Upgradeable[] memory _tokens,\\n        address owner,\\n        address spender\\n    ) external view returns (Allowance[] memory allowances) {\\n        allowances = new Allowance[](_tokens.length);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            allowances[i] = Allowance({\\n                allowance: _tokens[i].allowance(owner, spender),\\n                spender: spender,\\n                owner: owner\\n            });\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x870cb586142dd6afabbdc9d23e23137a0c3331d4ddf88f8e7ea1d9e0fb37f3e8\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xf5d053ccdcb838a44b17af1f8b5b2b60f890108effcec69377cb81796fe9278c\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x70df2712dd3b85c753ff4cee292af93e81c5bf616983e4cbc94f692555362393\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x710f75b7d73282a87a60c5a9d1e6d1cfdd6cdf80ccf6a22982d20a1d6a24c7ce\",\"license\":\"MIT\"},\"src/contracts/interfaces/IKresko.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../libraries/FixedPoint.sol\\\";\\nimport \\\"../flux/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\ninterface IKresko {\\n    struct CollateralAsset {\\n        FixedPoint.Unsigned factor;\\n        AggregatorV2V3Interface oracle;\\n        address underlyingRebasingToken;\\n        uint8 decimals;\\n        bool exists;\\n    }\\n\\n    struct KrAsset {\\n        FixedPoint.Unsigned kFactor;\\n        AggregatorV2V3Interface oracle;\\n        bool exists;\\n        bool mintable;\\n    }\\n\\n    function depositCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount\\n    ) external;\\n\\n    function depositRebasingCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _rebasingAmount\\n    ) external;\\n\\n    function withdrawCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) external;\\n\\n    function withdrawRebasingCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) external;\\n\\n    function mintKreskoAsset(\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _amount\\n    ) external;\\n\\n    function burnKreskoAsset(\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        uint256 _mintedKreskoAssetIndex\\n    ) external;\\n\\n    function collateralExists(address) external view returns (bool);\\n\\n    function krAssetExists(address) external view returns (bool);\\n\\n    function kreskoAssets(address) external view returns (KrAsset memory);\\n\\n    function collateralAssets(address) external view returns (CollateralAsset memory);\\n\\n    function getDepositedCollateralAssetIndex(address, address) external view returns (uint256 i);\\n\\n    function getMintedKreskoAssetsIndex(address, address) external view returns (uint256 i);\\n\\n    function getMintedKreskoAssets(address user) external view returns (address[] memory);\\n\\n    function getDepositedCollateralAssets(address user) external view returns (address[] memory);\\n\\n    function getCollateralValueAndOraclePrice(\\n        address _collateralAsset,\\n        uint256 _amount,\\n        bool _ignoreCollateralFactor\\n    ) external view returns (FixedPoint.Unsigned memory, FixedPoint.Unsigned memory);\\n\\n    function calculateMaxLiquidatableValueForAssets(\\n        address _account,\\n        address _repayKreskoAsset,\\n        address _collateralAssetToSeize\\n    ) external view returns (FixedPoint.Unsigned memory);\\n\\n    function minimumCollateralizationRatio() external view returns (FixedPoint.Unsigned memory);\\n\\n    function kreskoAssetDebt(address, address) external view returns (uint256);\\n\\n    function collateralDeposits(address, address) external view returns (uint256);\\n\\n    function getMinimumCollateralValue(address _krAsset, uint256 _amount)\\n        external\\n        view\\n        returns (FixedPoint.Unsigned memory);\\n\\n    function getAccountCollateralValue(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getAccountMinimumCollateralValue(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getAccountKrAssetValue(address _account) external view returns (FixedPoint.Unsigned memory);\\n\\n    function getKrAssetValue(\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        bool _ignoreKfactor\\n    ) external view returns (FixedPoint.Unsigned memory);\\n}\\n\",\"keccak256\":\"0x1b72186653d8861b6ae1af68663ecb7de70dc1fa7b3df6d2fb22315701fd38cd\",\"license\":\"MIT\"},\"src/contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMathUpgradeable for uint256;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    uint256 internal constant FP_DECIMALS = 18;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 internal constant FP_SCALING_FACTOR = 10**FP_DECIMALS;\\n\\n    // --------------------------------------- UNSIGNED ---------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED ------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored\\n    //   internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------- Additional Fixed Point math functions specific to Kresko protocol -------------------\\n\\n    /**\\n    //  * @notice Calculate amount of collateral to seize during the liquidation process.\\n    //  * @param _collateralOraclePriceUSD The address of the collateral asset to be seized.\\n    //  * @param _kreskoAssetRepayAmountUSD Kresko asset amount being repaid in exchange for the seized collateral.\\n    //  */\\n    function _calculateAmountToSeize(\\n        Unsigned memory _liquidationIncentiveMultiplier,\\n        Unsigned memory _collateralOraclePriceUSD,\\n        Unsigned memory _kreskoAssetRepayAmountUSD\\n    ) internal pure returns (Unsigned memory) {\\n        // Seize amount = (repay amount USD * liquidation incentive / collateral price USD).\\n        // Denominate seize amount in collateral type\\n        // Apply liquidation incentive multiplier\\n        return div(mul(_kreskoAssetRepayAmountUSD, _liquidationIncentiveMultiplier), _collateralOraclePriceUSD);\\n    }\\n}\\n\",\"keccak256\":\"0xcd7b7b06bb113139757fddc04ed987ecf53edda5b3811f1713c911b6a8261195\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libraries/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport \\\"./FixedPoint.sol\\\";\\n\\n/**\\n * @title Library for Kresko specific math involving floating point arithmetic\\n */\\n\\n library FixedPointMath {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /**\\n     * @notice For a given collateral asset and amount, returns a FixedPoint.Unsigned representation.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals > 18, there may be a loss of precision.\\n     * @param _collateralAssetDecimals The collateral asset's number of decimals\\n     * @param _amount The amount of the collateral asset.\\n     * @return A FixedPoint.Unsigned of amount scaled according to the collateral asset's decimals.\\n     */\\n    function _toCollateralFixedPointAmount(uint256 _collateralAssetDecimals, uint256 _amount)\\n        internal\\n        pure\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        // Initially, use the amount as the raw value for the FixedPoint.Unsigned,\\n        // which internally uses FixedPoint.FP_DECIMALS (18) decimals. Most collateral\\n        // assets will have 18 decimals.\\n        FixedPoint.Unsigned memory fixedPointAmount = FixedPoint.Unsigned(_amount);\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_collateralAssetDecimals < FixedPoint.FP_DECIMALS) {\\n            // If the decimals are less than 18, multiply the amount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token of a 17 decimal token will  cause the\\n            // initial setting of amount to be 0.1, so we multiply\\n            // by 10 ** (18 - 17) = 10 to get it to 0.1 * 10 = 1.\\n            return fixedPointAmount.mul(10**(FixedPoint.FP_DECIMALS - _collateralAssetDecimals));\\n        } else if (_collateralAssetDecimals > FixedPoint.FP_DECIMALS) {\\n            // If the decimals are greater than 18, divide the amount\\n            // to get the correct fixed point value.\\n            // Note because FixedPoint numbers are 18 decimals, this results\\n            // in loss of precision. E.g. if the collateral asset has 19\\n            // decimals and the deposit amount is only 1 uint, this will divide\\n            // 1 by 10 ** (19 - 18), resulting in 1 / 10 = 0\\n            return fixedPointAmount.div(10**(_collateralAssetDecimals - FixedPoint.FP_DECIMALS));\\n        }\\n        return fixedPointAmount;\\n    }\\n\\n    /**\\n     * @notice For a given collateral asset and fixed point amount, i.e. where a rawValue of 1e18 is equal to 1\\n     *   whole token, returns the amount according to the collateral asset's decimals.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals < 18, there may be a loss of precision.\\n     * @param _collateralAssetDecimals The collateral asset's number of decimals\\n     * @param _fixedPointAmount The fixed point amount of the collateral asset.\\n     * @return An amount that is compatible with the collateral asset's decimals.\\n     */\\n    function _fromCollateralFixedPointAmount(\\n            uint256 _collateralAssetDecimals,\\n            FixedPoint.Unsigned memory _fixedPointAmount\\n        )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // Initially, use the rawValue, which internally uses FixedPoint.FP_DECIMALS (18) decimals\\n        // Most collateral assets will have 18 decimals.\\n        uint256 amount = _fixedPointAmount.rawValue;\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_collateralAssetDecimals < FixedPoint.FP_DECIMALS) {\\n            // If the decimals are less than 18, divide the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 17 decimals, divide by 10 ** (18 - 17) = 10\\n            // to get a value of 1e17.\\n            // This may result in a loss of precision.\\n            return amount / (10**(FixedPoint.FP_DECIMALS - _collateralAssetDecimals));\\n        } else if (_collateralAssetDecimals > FixedPoint.FP_DECIMALS) {\\n            // If the decimals are greater than 18, multiply the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 19 decimals, multiply by 10 ** (19 - 18) = 10\\n            // to get a value of 1e19.\\n            return amount * (10**(_collateralAssetDecimals - FixedPoint.FP_DECIMALS));\\n        }\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x6fda100a0bcff5fcbe4ec9915ae64bdd812af0f59fe328874324664de20c9e8d\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e5238038062002e5283398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008c565b6000602082840312156200006d57600080fd5b81516001600160a01b03811681146200008557600080fd5b9392505050565b612db6806200009c6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b56274d411610081578063d1c070281161005b578063d1c07028146101f9578063def86ce114610219578063f79031e81461023a57600080fd5b8063b56274d4146101a6578063b69a9850146101b9578063be6d74a0146101d957600080fd5b80636bb52909116100b25780636bb52909146101425780636e0696d614610163578063983ff6151461018457600080fd5b806327c5607d146100d957806358b23fd714610102578063624ba70114610122575b600080fd5b6100ec6100e73660046120a8565b610265565b6040516100f99190612218565b60405180910390f35b61011561011036600461222b565b610607565b6040516100f991906122c5565b6101356101303660046120a8565b61084e565b6040516100f9919061240e565b610155610150366004612421565b610b97565b6040516100f9929190612485565b6101766101713660046124b3565b610bb7565b6040516100f99291906125b9565b6101976101923660046124b3565b611095565b604051905181526020016100f9565b6101976101b43660046124b3565b6111c1565b6101cc6101c73660046125dc565b6112fd565b6040516100f99190612640565b6101ec6101e73660046124b3565b611467565b6040516100f9919061277e565b61020c610207366004612829565b611669565b6040516100f9919061287b565b61022c6102273660046124b3565b6117ce565b6040516100f99291906128c6565b60005461024d906001600160a01b031681565b6040516001600160a01b0390911681526020016100f9565b6060815167ffffffffffffffff81111561028157610281611fb1565b6040519080825280602002602001820160405280156102ba57816020015b6102a7611d6f565b81526020019060019003908161029f5790505b50905060005b82518110156106015760008382815181106102dd576102dd6128d9565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa158015610336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035a9190612957565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c091906129ea565b90506000836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610402573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261042a9190810190612a05565b600080549192509081906001600160a01b0316633ae000c08761044e87600a612b93565b610459906001612ba2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016040805180830381865afa1580156104c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e49190612bc1565b915091506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610528573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105509190810190612a05565b90506000604051806101200160405280896001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b031681526020018460000151815260200185600001518152602001886000015181526020018760ff168152602001868152602001838152509050808a8a815181106105db576105db6128d9565b6020026020010181905250505050505050505080806105f990612bed565b9150506102c0565b50919050565b6060815167ffffffffffffffff81111561062357610623611fb1565b60405190808252806020026020018201604052801561067b57816020015b6106686040518060600160405280600060ff16815260200160608152602001606081525090565b8152602001906001900390816106415790505b50905060005b82518110156106015760405180606001604052808483815181106106a7576106a76128d9565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071091906129ea565b60ff16815260200184838151811061072a5761072a6128d9565b60200260200101516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107979190810190612a05565b81526020018483815181106107ae576107ae6128d9565b60200260200101516001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261081b9190810190612a05565b815250828281518110610830576108306128d9565b6020026020010181905250808061084690612bed565b915050610681565b6060815167ffffffffffffffff81111561086a5761086a611fb1565b6040519080825280602002602001820160405280156108a357816020015b610890611de8565b8152602001906001900390816108885790505b50905060005b82518110156106015760008382815181106108c6576108c66128d9565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa15801561091f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109439190612c08565b60008054604051631a69f54b60e21b81526001600160a01b038681166004830152670de0b6b3a7640000602483015260448201849052939450919216906369a7d52c90606401602060405180830381865afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190612c88565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a349190612ca4565b90506000846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a9e9190810190612a05565b90506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ae0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b089190810190612a05565b905060006040518060e0016040528087602001516001600160a01b03168152602001886001600160a01b03168152602001858152602001866000015181526020018760000151815260200183815260200184815250905080898981518110610b7257610b726128d9565b6020026020010181905250505050505050508080610b8f90612bed565b9150506108a9565b606080610ba384610265565b9150610bae8361084e565b90509250929050565b6060610bcf6040518060200160405280600081525090565b6000805460405163369c411560e11b81526001600160a01b03868116600483015290911690636d38822a90602401600060405180830381865afa158015610c1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c429190810190612cbd565b80519091501561108f57805167ffffffffffffffff811115610c6657610c66611fb1565b604051908082528060200260200182016040528015610d0157816020015b6040805161016081018252600080825260208083018290528284018290526060808401839052845180830186528381526080850152845191820190945281815260a083015260c0820181905260e082018190526101008201526101208101829052610140810191909152815260200190600190039081610c845790505b50925060005b815181101561108d576000828281518110610d2457610d246128d9565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da19190612957565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0791906129ea565b60008054604051630c65e07b60e01b81526001600160a01b038c81166004830152878116602483015293945091921690630c65e07b90604401602060405180830381865afa158015610e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e819190612ca4565b90506000846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ec3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eeb9190810190612a05565b6000805460405162eb800360e61b81526001600160a01b038981166004830152602482018790526001604483015293945091928392911690633ae000c0906064016040805180830381865afa158015610f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6c9190612bc1565b915091506000876001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fb0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fd89190810190612a05565b60408051610160810182526001600160a01b03808c16825260208b8101518216908301528a83015116918101919091526060810187905260808101859052885160a082015260ff881660c082015260e081018b90528351610100820152610120810186905261014081018290529091506110528c85611c47565b50808d8b81518110611066576110666128d9565b6020026020010181905250505050505050505050808061108590612bed565b915050610d07565b505b50915091565b60408051602081019091526000815260008054604051633fa1c54560e21b81526001600160a01b0385811660048301529091169063fe87151490602401602060405180830381865afa1580156110ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111139190612c88565b600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111859190612c88565b905061119381835190511090565b156111af57505060408051602081019091526000815292915050565b6111b98183611c7c565b949350505050565b604080516020810190915260008152600080546040517fff1389c50000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529091169063ff1389c590602401602060405180830381865afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190612c88565b600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa1580156112a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ca9190612c88565b90506112d7826000611ca6565b156112e6576111b98183611cbd565b505060408051602081019091526000815292915050565b6060835167ffffffffffffffff81111561131957611319611fb1565b60405190808252806020026020018201604052801561136457816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816113375790505b50905060005b845181101561145f576040518060600160405280856001600160a01b03168152602001846001600160a01b031681526020018683815181106113ae576113ae6128d9565b6020908102919091010151604051636eb1769f60e11b81526001600160a01b03888116600483015287811660248301529091169063dd62ed3e90604401602060405180830381865afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c9190612ca4565b815250828281518110611441576114416128d9565b6020026020010181905250808061145790612bed565b91505061136a565b509392505050565b61146f611e4b565b60008061147b846117ce565b9150915060008061148b86610bb7565b915091506000845111806114a0575060008251115b15611660576040518061012001604052808581526020018381526020016114c6886111c1565b815260208101859052600054604080517fff1389c50000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152919093019291169063ff1389c590602401602060405180830381865afa158015611537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155b9190612c88565b815260208101839052600054604080516307d1a44560e41b81526001600160a01b038b811660048301529190930192911690637d1a445090602401602060405180830381865afa1580156115b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d79190612c88565b8152600054604051633fa1c54560e21b81526001600160a01b038a811660048301526020909301929091169063fe87151490602401602060405180830381865afa158015611629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164d9190612c88565b815260200161165b88611095565b905294505b50505050919050565b6060825167ffffffffffffffff81111561168557611685611fb1565b6040519080825280602002602001820160405280156116ca57816020015b60408051808201909152600080825260208201528152602001906001900390816116a35790505b50905060005b83518110156117c75760405180604001604052808583815181106116f6576116f66128d9565b60200260200101516001600160a01b0316815260200185838151811061171e5761171e6128d9565b60209081029190910101516040516370a0823160e01b81526001600160a01b038781166004830152909116906370a0823190602401602060405180830381865afa158015611770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117949190612ca4565b8152508282815181106117a9576117a96128d9565b602002602001018190525080806117bf90612bed565b9150506116d0565b5092915050565b60606117e66040518060200160405280600081525090565b600080546040516377d4074360e11b81526001600160a01b0386811660048301529091169063efa80e8690602401600060405180830381865afa158015611831573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118599190810190612cbd565b80519091501561108f57805167ffffffffffffffff81111561187d5761187d611fb1565b6040519080825280602002602001820160405280156118b657816020015b6118a3611f22565b81526020019060019003908161189b5790505b50925060005b815181101561108d5760008282815181106118d9576118d96128d9565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa158015611932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119569190612c08565b60008054604051630692479b60e31b81526001600160a01b038b811660048301528681166024830152939450919216906334923cd890604401602060405180830381865afa1580156119ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d09190612ca4565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3a9190612ca4565b60008054604051631a69f54b60e21b81526001600160a01b0388811660048301526024820187905260016044830152939450919216906369a7d52c90606401602060405180830381865afa158015611a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aba9190612c88565b90506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611afc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b249190810190612a05565b90506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611b66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b8e9190810190612a05565b90506000604051806101400160405280896001600160a01b0316815260200188602001516001600160a01b031681526020018781526020018581526020018a815260200188600001518152602001886060015115158152602001868152602001848152602001838152509050611c0d848c611c4790919063ffffffff16565b50808c8a81518110611c2157611c216128d9565b602002602001018190525050505050505050508080611c3f90612bed565b9150506118bc565b6040805160208101909152600081526040805160208101909152825184518291611c719190611cfe565b905290505b92915050565b6040805160208101909152600081526040805160208101909152825184518291611c719190611d11565b6000611cb182611d1d565b51835111905092915050565b6040805160208101909152600081526040518060200160405280611c718460000151611cf86012600a611cf09190612d4c565b885190611d57565b90611d63565b6000611d0a8284612d58565b9392505050565b6000611d0a8284612d70565b6040805160208101909152600081526040518060200160405280611d4f6012600a611d489190612d4c565b8590611d57565b905292915050565b6000611d0a8284612ba2565b6000611d0a8284612d87565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001611dcf6040518060200160405280600081525090565b8152600060208201526060604082018190529081015290565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001611e376040518060200160405280600081525090565b815260200160608152602001606081525090565b6040518061012001604052806060815260200160608152602001611e7b6040518060200160405280600081525090565b8152602001611e966040518060200160405280600081525090565b8152602001611eb16040518060200160405280600081525090565b8152602001611ecc6040518060200160405280600081525090565b8152602001611ee76040518060200160405280600081525090565b8152602001611f026040518060200160405280600081525090565b8152602001611f1d6040518060200160405280600081525090565b905290565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001611f6b6040518060200160405280600081525090565b815260200160008152602001611f8d6040518060200160405280600081525090565b81526020016000151581526020016000815260200160608152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ff057611ff0611fb1565b604052919050565b600067ffffffffffffffff82111561201257612012611fb1565b5060051b60200190565b6001600160a01b038116811461203157600080fd5b50565b600082601f83011261204557600080fd5b8135602061205a61205583611ff8565b611fc7565b82815260059290921b8401810191818101908684111561207957600080fd5b8286015b8481101561209d5780356120908161201c565b835291830191830161207d565b509695505050505050565b6000602082840312156120ba57600080fd5b813567ffffffffffffffff8111156120d157600080fd5b6111b984828501612034565b60005b838110156120f85781810151838201526020016120e0565b83811115612107576000848401525b50505050565b600081518084526121258160208601602086016120dd565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561220b57601f19868403018952815180516001600160a01b0390811685528582015181168686015260408083015190911690850152606080820151908501526080808201519085015260a080820151519085015260c08082015160ff169085015260e08082015161012082870181905291906121d88388018261210d565b9250505061010080830151925085820381870152506121f7818361210d565b9a86019a9450505090830190600101612156565b5090979650505050505050565b602081526000611d0a6020830184612139565b6000602080838503121561223e57600080fd5b823567ffffffffffffffff81111561225557600080fd5b8301601f8101851361226657600080fd5b803561227461205582611ff8565b81815260059190911b8201830190838101908783111561229357600080fd5b928401925b828410156122ba5783356122ab8161201c565b82529284019290840190612298565b979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561234b57603f198984030185528151606060ff825116855288820151818a87015261231d8287018261210d565b91505087820151915084810388860152612337818361210d565b9689019694505050908601906001016122ec565b509098975050505050505050565b600082825180855260208086019550808260051b84010181860160005b8481101561220b57858303601f19018952815180516001600160a01b0390811685528582015116858501526040808201519085015260608082015190850152608080820151519085015260a08082015160e082870181905291906123dc8388018261210d565b9250505060c080830151925085820381870152506123fa818361210d565b9a86019a9450505090830190600101612376565b602081526000611d0a6020830184612359565b6000806040838503121561243457600080fd5b823567ffffffffffffffff8082111561244c57600080fd5b61245886838701612034565b9350602085013591508082111561246e57600080fd5b5061247b85828601612034565b9150509250929050565b6040815260006124986040830185612139565b82810360208401526124aa8185612359565b95945050505050565b6000602082840312156124c557600080fd5b8135611d0a8161201c565b600082825180855260208086019550808260051b84010181860160005b8481101561220b57601f19868403018952815180516001600160a01b039081168552858201518116868601526040808301519091169085015260608082015190850152608080820151519085015260a080820151519085015260c08082015160ff169085015260e0808201519085015261010080820151908501526101208082015161016082870181905291906125868388018261210d565b9250505061014080830151925085820381870152506125a5818361210d565b9a86019a94505050908301906001016124ed565b6040815260006125cc60408301856124d0565b9050825160208301529392505050565b6000806000606084860312156125f157600080fd5b833567ffffffffffffffff81111561260857600080fd5b61261486828701612034565b93505060208401356126258161201c565b915060408401356126358161201c565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b8281101561269857815180516001600160a01b039081168652878201511687860152850151858501526060909301929085019060010161265d565b5091979650505050505050565b600082825180855260208086019550808260051b84010181860160005b8481101561220b57601f19868403018952815180516001600160a01b0390811685528582015116858501526040808201519085015260608082015151908501526080808201519085015260a080820151519085015260c08082015115159085015260e0808201519085015261010080820151610140828701819052919061274b8388018261210d565b92505050610120808301519250858203818701525061276a818361210d565b9a86019a94505050908301906001016126c2565b602081526000825161012080602085015261279d6101408501836126a5565b91506020850151601f198584030160408601526127ba83826124d0565b92505060408501516127cf6060860182519052565b50606085015180516080860152506080850151805160a08601525060a0850151805160c08601525060c0850151805160e08601525060e085015161010061281881870183519052565b909501515193019290925250919050565b6000806040838503121561283c57600080fd5b823567ffffffffffffffff81111561285357600080fd5b61285f85828601612034565b92505060208301356128708161201c565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561269857815180516001600160a01b03168552860151868501529284019290850190600101612898565b6040815260006125cc60408301856126a5565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561290157600080fd5b6040516020810181811067ffffffffffffffff8211171561292457612924611fb1565b6040529151825250919050565b805160ff8116811461294257600080fd5b919050565b8051801515811461294257600080fd5b600060a0828403121561296957600080fd5b60405160a0810181811067ffffffffffffffff8211171561298c5761298c611fb1565b60405261299984846128ef565b815260208301516129a98161201c565b602082015260408301516129bc8161201c565b60408201526129cd60608401612931565b60608201526129de60808401612947565b60808201529392505050565b6000602082840312156129fc57600080fd5b611d0a82612931565b600060208284031215612a1757600080fd5b815167ffffffffffffffff80821115612a2f57600080fd5b818401915084601f830112612a4357600080fd5b815181811115612a5557612a55611fb1565b612a68601f8201601f1916602001611fc7565b9150808252856020828501011115612a7f57600080fd5b612a908160208401602086016120dd565b50949350505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612aea578160001904821115612ad057612ad0612a99565b80851615612add57918102915b93841c9390800290612ab4565b509250929050565b600082612b0157506001611c76565b81612b0e57506000611c76565b8160018114612b245760028114612b2e57612b4a565b6001915050611c76565b60ff841115612b3f57612b3f612a99565b50506001821b611c76565b5060208310610133831016604e8410600b8410161715612b6d575081810a611c76565b612b778383612aaf565b8060001904821115612b8b57612b8b612a99565b029392505050565b6000611d0a60ff841683612af2565b6000816000190483118215151615612bbc57612bbc612a99565b500290565b60008060408385031215612bd457600080fd5b612bde84846128ef565b9150610bae84602085016128ef565b6000600019821415612c0157612c01612a99565b5060010190565b600060808284031215612c1a57600080fd5b6040516080810181811067ffffffffffffffff82111715612c3d57612c3d611fb1565b604052612c4a84846128ef565b81526020830151612c5a8161201c565b6020820152612c6b60408401612947565b6040820152612c7c60608401612947565b60608201529392505050565b600060208284031215612c9a57600080fd5b611d0a83836128ef565b600060208284031215612cb657600080fd5b5051919050565b60006020808385031215612cd057600080fd5b825167ffffffffffffffff811115612ce757600080fd5b8301601f81018513612cf857600080fd5b8051612d0661205582611ff8565b81815260059190911b82018301908381019087831115612d2557600080fd5b928401925b828410156122ba578351612d3d8161201c565b82529284019290840190612d2a565b6000611d0a8383612af2565b60008219821115612d6b57612d6b612a99565b500190565b600082821015612d8257612d82612a99565b500390565b600082612da457634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c634300080a000a",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b56274d411610081578063d1c070281161005b578063d1c07028146101f9578063def86ce114610219578063f79031e81461023a57600080fd5b8063b56274d4146101a6578063b69a9850146101b9578063be6d74a0146101d957600080fd5b80636bb52909116100b25780636bb52909146101425780636e0696d614610163578063983ff6151461018457600080fd5b806327c5607d146100d957806358b23fd714610102578063624ba70114610122575b600080fd5b6100ec6100e73660046120a8565b610265565b6040516100f99190612218565b60405180910390f35b61011561011036600461222b565b610607565b6040516100f991906122c5565b6101356101303660046120a8565b61084e565b6040516100f9919061240e565b610155610150366004612421565b610b97565b6040516100f9929190612485565b6101766101713660046124b3565b610bb7565b6040516100f99291906125b9565b6101976101923660046124b3565b611095565b604051905181526020016100f9565b6101976101b43660046124b3565b6111c1565b6101cc6101c73660046125dc565b6112fd565b6040516100f99190612640565b6101ec6101e73660046124b3565b611467565b6040516100f9919061277e565b61020c610207366004612829565b611669565b6040516100f9919061287b565b61022c6102273660046124b3565b6117ce565b6040516100f99291906128c6565b60005461024d906001600160a01b031681565b6040516001600160a01b0390911681526020016100f9565b6060815167ffffffffffffffff81111561028157610281611fb1565b6040519080825280602002602001820160405280156102ba57816020015b6102a7611d6f565b81526020019060019003908161029f5790505b50905060005b82518110156106015760008382815181106102dd576102dd6128d9565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa158015610336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035a9190612957565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c091906129ea565b90506000836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610402573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261042a9190810190612a05565b600080549192509081906001600160a01b0316633ae000c08761044e87600a612b93565b610459906001612ba2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152600060448201526064016040805180830381865afa1580156104c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e49190612bc1565b915091506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610528573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105509190810190612a05565b90506000604051806101200160405280896001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b031681526020018460000151815260200185600001518152602001886000015181526020018760ff168152602001868152602001838152509050808a8a815181106105db576105db6128d9565b6020026020010181905250505050505050505080806105f990612bed565b9150506102c0565b50919050565b6060815167ffffffffffffffff81111561062357610623611fb1565b60405190808252806020026020018201604052801561067b57816020015b6106686040518060600160405280600060ff16815260200160608152602001606081525090565b8152602001906001900390816106415790505b50905060005b82518110156106015760405180606001604052808483815181106106a7576106a76128d9565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071091906129ea565b60ff16815260200184838151811061072a5761072a6128d9565b60200260200101516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107979190810190612a05565b81526020018483815181106107ae576107ae6128d9565b60200260200101516001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156107f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261081b9190810190612a05565b815250828281518110610830576108306128d9565b6020026020010181905250808061084690612bed565b915050610681565b6060815167ffffffffffffffff81111561086a5761086a611fb1565b6040519080825280602002602001820160405280156108a357816020015b610890611de8565b8152602001906001900390816108885790505b50905060005b82518110156106015760008382815181106108c6576108c66128d9565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa15801561091f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109439190612c08565b60008054604051631a69f54b60e21b81526001600160a01b038681166004830152670de0b6b3a7640000602483015260448201849052939450919216906369a7d52c90606401602060405180830381865afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190612c88565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a349190612ca4565b90506000846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a9e9190810190612a05565b90506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ae0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b089190810190612a05565b905060006040518060e0016040528087602001516001600160a01b03168152602001886001600160a01b03168152602001858152602001866000015181526020018760000151815260200183815260200184815250905080898981518110610b7257610b726128d9565b6020026020010181905250505050505050508080610b8f90612bed565b9150506108a9565b606080610ba384610265565b9150610bae8361084e565b90509250929050565b6060610bcf6040518060200160405280600081525090565b6000805460405163369c411560e11b81526001600160a01b03868116600483015290911690636d38822a90602401600060405180830381865afa158015610c1a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c429190810190612cbd565b80519091501561108f57805167ffffffffffffffff811115610c6657610c66611fb1565b604051908082528060200260200182016040528015610d0157816020015b6040805161016081018252600080825260208083018290528284018290526060808401839052845180830186528381526080850152845191820190945281815260a083015260c0820181905260e082018190526101008201526101208101829052610140810191909152815260200190600190039081610c845790505b50925060005b815181101561108d576000828281518110610d2457610d246128d9565b602090810291909101015160008054604051635390972760e01b81526001600160a01b0380851660048301529394509192169063539097279060240160a060405180830381865afa158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da19190612957565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0791906129ea565b60008054604051630c65e07b60e01b81526001600160a01b038c81166004830152878116602483015293945091921690630c65e07b90604401602060405180830381865afa158015610e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e819190612ca4565b90506000846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ec3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eeb9190810190612a05565b6000805460405162eb800360e61b81526001600160a01b038981166004830152602482018790526001604483015293945091928392911690633ae000c0906064016040805180830381865afa158015610f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6c9190612bc1565b915091506000876001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610fb0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fd89190810190612a05565b60408051610160810182526001600160a01b03808c16825260208b8101518216908301528a83015116918101919091526060810187905260808101859052885160a082015260ff881660c082015260e081018b90528351610100820152610120810186905261014081018290529091506110528c85611c47565b50808d8b81518110611066576110666128d9565b6020026020010181905250505050505050505050808061108590612bed565b915050610d07565b505b50915091565b60408051602081019091526000815260008054604051633fa1c54560e21b81526001600160a01b0385811660048301529091169063fe87151490602401602060405180830381865afa1580156110ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111139190612c88565b600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111859190612c88565b905061119381835190511090565b156111af57505060408051602081019091526000815292915050565b6111b98183611c7c565b949350505050565b604080516020810190915260008152600080546040517fff1389c50000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529091169063ff1389c590602401602060405180830381865afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190612c88565b600080546040516307d1a44560e41b81526001600160a01b03878116600483015293945091921690637d1a445090602401602060405180830381865afa1580156112a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ca9190612c88565b90506112d7826000611ca6565b156112e6576111b98183611cbd565b505060408051602081019091526000815292915050565b6060835167ffffffffffffffff81111561131957611319611fb1565b60405190808252806020026020018201604052801561136457816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816113375790505b50905060005b845181101561145f576040518060600160405280856001600160a01b03168152602001846001600160a01b031681526020018683815181106113ae576113ae6128d9565b6020908102919091010151604051636eb1769f60e11b81526001600160a01b03888116600483015287811660248301529091169063dd62ed3e90604401602060405180830381865afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c9190612ca4565b815250828281518110611441576114416128d9565b6020026020010181905250808061145790612bed565b91505061136a565b509392505050565b61146f611e4b565b60008061147b846117ce565b9150915060008061148b86610bb7565b915091506000845111806114a0575060008251115b15611660576040518061012001604052808581526020018381526020016114c6886111c1565b815260208101859052600054604080517fff1389c50000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152919093019291169063ff1389c590602401602060405180830381865afa158015611537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155b9190612c88565b815260208101839052600054604080516307d1a44560e41b81526001600160a01b038b811660048301529190930192911690637d1a445090602401602060405180830381865afa1580156115b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d79190612c88565b8152600054604051633fa1c54560e21b81526001600160a01b038a811660048301526020909301929091169063fe87151490602401602060405180830381865afa158015611629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164d9190612c88565b815260200161165b88611095565b905294505b50505050919050565b6060825167ffffffffffffffff81111561168557611685611fb1565b6040519080825280602002602001820160405280156116ca57816020015b60408051808201909152600080825260208201528152602001906001900390816116a35790505b50905060005b83518110156117c75760405180604001604052808583815181106116f6576116f66128d9565b60200260200101516001600160a01b0316815260200185838151811061171e5761171e6128d9565b60209081029190910101516040516370a0823160e01b81526001600160a01b038781166004830152909116906370a0823190602401602060405180830381865afa158015611770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117949190612ca4565b8152508282815181106117a9576117a96128d9565b602002602001018190525080806117bf90612bed565b9150506116d0565b5092915050565b60606117e66040518060200160405280600081525090565b600080546040516377d4074360e11b81526001600160a01b0386811660048301529091169063efa80e8690602401600060405180830381865afa158015611831573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118599190810190612cbd565b80519091501561108f57805167ffffffffffffffff81111561187d5761187d611fb1565b6040519080825280602002602001820160405280156118b657816020015b6118a3611f22565b81526020019060019003908161189b5790505b50925060005b815181101561108d5760008282815181106118d9576118d96128d9565b60209081029190910101516000805460405163d7bfcecd60e01b81526001600160a01b0380851660048301529394509192169063d7bfcecd90602401608060405180830381865afa158015611932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119569190612c08565b60008054604051630692479b60e31b81526001600160a01b038b811660048301528681166024830152939450919216906334923cd890604401602060405180830381865afa1580156119ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d09190612ca4565b9050600082602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3a9190612ca4565b60008054604051631a69f54b60e21b81526001600160a01b0388811660048301526024820187905260016044830152939450919216906369a7d52c90606401602060405180830381865afa158015611a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aba9190612c88565b90506000856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611afc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b249190810190612a05565b90506000866001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611b66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b8e9190810190612a05565b90506000604051806101400160405280896001600160a01b0316815260200188602001516001600160a01b031681526020018781526020018581526020018a815260200188600001518152602001886060015115158152602001868152602001848152602001838152509050611c0d848c611c4790919063ffffffff16565b50808c8a81518110611c2157611c216128d9565b602002602001018190525050505050505050508080611c3f90612bed565b9150506118bc565b6040805160208101909152600081526040805160208101909152825184518291611c719190611cfe565b905290505b92915050565b6040805160208101909152600081526040805160208101909152825184518291611c719190611d11565b6000611cb182611d1d565b51835111905092915050565b6040805160208101909152600081526040518060200160405280611c718460000151611cf86012600a611cf09190612d4c565b885190611d57565b90611d63565b6000611d0a8284612d58565b9392505050565b6000611d0a8284612d70565b6040805160208101909152600081526040518060200160405280611d4f6012600a611d489190612d4c565b8590611d57565b905292915050565b6000611d0a8284612ba2565b6000611d0a8284612d87565b60405180610120016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001611dcf6040518060200160405280600081525090565b8152600060208201526060604082018190529081015290565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001611e376040518060200160405280600081525090565b815260200160608152602001606081525090565b6040518061012001604052806060815260200160608152602001611e7b6040518060200160405280600081525090565b8152602001611e966040518060200160405280600081525090565b8152602001611eb16040518060200160405280600081525090565b8152602001611ecc6040518060200160405280600081525090565b8152602001611ee76040518060200160405280600081525090565b8152602001611f026040518060200160405280600081525090565b8152602001611f1d6040518060200160405280600081525090565b905290565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001611f6b6040518060200160405280600081525090565b815260200160008152602001611f8d6040518060200160405280600081525090565b81526020016000151581526020016000815260200160608152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ff057611ff0611fb1565b604052919050565b600067ffffffffffffffff82111561201257612012611fb1565b5060051b60200190565b6001600160a01b038116811461203157600080fd5b50565b600082601f83011261204557600080fd5b8135602061205a61205583611ff8565b611fc7565b82815260059290921b8401810191818101908684111561207957600080fd5b8286015b8481101561209d5780356120908161201c565b835291830191830161207d565b509695505050505050565b6000602082840312156120ba57600080fd5b813567ffffffffffffffff8111156120d157600080fd5b6111b984828501612034565b60005b838110156120f85781810151838201526020016120e0565b83811115612107576000848401525b50505050565b600081518084526121258160208601602086016120dd565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561220b57601f19868403018952815180516001600160a01b0390811685528582015181168686015260408083015190911690850152606080820151908501526080808201519085015260a080820151519085015260c08082015160ff169085015260e08082015161012082870181905291906121d88388018261210d565b9250505061010080830151925085820381870152506121f7818361210d565b9a86019a9450505090830190600101612156565b5090979650505050505050565b602081526000611d0a6020830184612139565b6000602080838503121561223e57600080fd5b823567ffffffffffffffff81111561225557600080fd5b8301601f8101851361226657600080fd5b803561227461205582611ff8565b81815260059190911b8201830190838101908783111561229357600080fd5b928401925b828410156122ba5783356122ab8161201c565b82529284019290840190612298565b979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561234b57603f198984030185528151606060ff825116855288820151818a87015261231d8287018261210d565b91505087820151915084810388860152612337818361210d565b9689019694505050908601906001016122ec565b509098975050505050505050565b600082825180855260208086019550808260051b84010181860160005b8481101561220b57858303601f19018952815180516001600160a01b0390811685528582015116858501526040808201519085015260608082015190850152608080820151519085015260a08082015160e082870181905291906123dc8388018261210d565b9250505060c080830151925085820381870152506123fa818361210d565b9a86019a9450505090830190600101612376565b602081526000611d0a6020830184612359565b6000806040838503121561243457600080fd5b823567ffffffffffffffff8082111561244c57600080fd5b61245886838701612034565b9350602085013591508082111561246e57600080fd5b5061247b85828601612034565b9150509250929050565b6040815260006124986040830185612139565b82810360208401526124aa8185612359565b95945050505050565b6000602082840312156124c557600080fd5b8135611d0a8161201c565b600082825180855260208086019550808260051b84010181860160005b8481101561220b57601f19868403018952815180516001600160a01b039081168552858201518116868601526040808301519091169085015260608082015190850152608080820151519085015260a080820151519085015260c08082015160ff169085015260e0808201519085015261010080820151908501526101208082015161016082870181905291906125868388018261210d565b9250505061014080830151925085820381870152506125a5818361210d565b9a86019a94505050908301906001016124ed565b6040815260006125cc60408301856124d0565b9050825160208301529392505050565b6000806000606084860312156125f157600080fd5b833567ffffffffffffffff81111561260857600080fd5b61261486828701612034565b93505060208401356126258161201c565b915060408401356126358161201c565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b8281101561269857815180516001600160a01b039081168652878201511687860152850151858501526060909301929085019060010161265d565b5091979650505050505050565b600082825180855260208086019550808260051b84010181860160005b8481101561220b57601f19868403018952815180516001600160a01b0390811685528582015116858501526040808201519085015260608082015151908501526080808201519085015260a080820151519085015260c08082015115159085015260e0808201519085015261010080820151610140828701819052919061274b8388018261210d565b92505050610120808301519250858203818701525061276a818361210d565b9a86019a94505050908301906001016126c2565b602081526000825161012080602085015261279d6101408501836126a5565b91506020850151601f198584030160408601526127ba83826124d0565b92505060408501516127cf6060860182519052565b50606085015180516080860152506080850151805160a08601525060a0850151805160c08601525060c0850151805160e08601525060e085015161010061281881870183519052565b909501515193019290925250919050565b6000806040838503121561283c57600080fd5b823567ffffffffffffffff81111561285357600080fd5b61285f85828601612034565b92505060208301356128708161201c565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561269857815180516001600160a01b03168552860151868501529284019290850190600101612898565b6040815260006125cc60408301856126a5565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561290157600080fd5b6040516020810181811067ffffffffffffffff8211171561292457612924611fb1565b6040529151825250919050565b805160ff8116811461294257600080fd5b919050565b8051801515811461294257600080fd5b600060a0828403121561296957600080fd5b60405160a0810181811067ffffffffffffffff8211171561298c5761298c611fb1565b60405261299984846128ef565b815260208301516129a98161201c565b602082015260408301516129bc8161201c565b60408201526129cd60608401612931565b60608201526129de60808401612947565b60808201529392505050565b6000602082840312156129fc57600080fd5b611d0a82612931565b600060208284031215612a1757600080fd5b815167ffffffffffffffff80821115612a2f57600080fd5b818401915084601f830112612a4357600080fd5b815181811115612a5557612a55611fb1565b612a68601f8201601f1916602001611fc7565b9150808252856020828501011115612a7f57600080fd5b612a908160208401602086016120dd565b50949350505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612aea578160001904821115612ad057612ad0612a99565b80851615612add57918102915b93841c9390800290612ab4565b509250929050565b600082612b0157506001611c76565b81612b0e57506000611c76565b8160018114612b245760028114612b2e57612b4a565b6001915050611c76565b60ff841115612b3f57612b3f612a99565b50506001821b611c76565b5060208310610133831016604e8410600b8410161715612b6d575081810a611c76565b612b778383612aaf565b8060001904821115612b8b57612b8b612a99565b029392505050565b6000611d0a60ff841683612af2565b6000816000190483118215151615612bbc57612bbc612a99565b500290565b60008060408385031215612bd457600080fd5b612bde84846128ef565b9150610bae84602085016128ef565b6000600019821415612c0157612c01612a99565b5060010190565b600060808284031215612c1a57600080fd5b6040516080810181811067ffffffffffffffff82111715612c3d57612c3d611fb1565b604052612c4a84846128ef565b81526020830151612c5a8161201c565b6020820152612c6b60408401612947565b6040820152612c7c60608401612947565b60608201529392505050565b600060208284031215612c9a57600080fd5b611d0a83836128ef565b600060208284031215612cb657600080fd5b5051919050565b60006020808385031215612cd057600080fd5b825167ffffffffffffffff811115612ce757600080fd5b8301601f81018513612cf857600080fd5b8051612d0661205582611ff8565b81815260059190911b82018301908381019087831115612d2557600080fd5b928401925b828410156122ba578351612d3d8161201c565b82529284019290840190612d2a565b6000611d0a8383612af2565b60008219821115612d6b57612d6b612a99565b500190565b600082821015612d8257612d82612a99565b500390565b600082612da457634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c634300080a000a",
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 20130,
                "contract": "src/contracts/KreskoViewer.sol:KreskoViewer",
                "label": "Kresko",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(IKresko)22678"
            }
        ],
        "types": {
            "t_contract(IKresko)22678": {
                "encoding": "inplace",
                "label": "contract IKresko",
                "numberOfBytes": "20"
            }
        }
    }
}
