{
    "address": "0x14C78703c070982c30643841f9a37d93B40a8F87",
    "abi": [
        {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "paymentCollateralAsset",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "paymentAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "paymentValue",
                    "type": "uint256"
                }
            ],
            "name": "BurnFeePaid",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "burnFee",
                    "type": "uint256"
                }
            ],
            "name": "BurnFeeUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "collateralAsset",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "factor",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "oracle",
                    "type": "address"
                }
            ],
            "name": "CollateralAssetAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "collateralAsset",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "factor",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "oracle",
                    "type": "address"
                }
            ],
            "name": "CollateralAssetUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "collateralAsset",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "CollateralDeposited",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "collateralAsset",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "CollateralWithdrawn",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "feeRecipient",
                    "type": "address"
                }
            ],
            "name": "FeeRecipientUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "kreskoAsset",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "string",
                    "name": "symbol",
                    "type": "string"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "kFactor",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "oracle",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "marketCapLimit",
                    "type": "uint256"
                }
            ],
            "name": "KreskoAssetAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "kreskoAsset",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "KreskoAssetBurned",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "kreskoAsset",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "KreskoAssetMinted",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "kreskoAsset",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "kFactor",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "oracle",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "mintable",
                    "type": "bool"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "limit",
                    "type": "uint256"
                }
            ],
            "name": "KreskoAssetUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "liquidationIncentiveMultiplier",
                    "type": "uint256"
                }
            ],
            "name": "LiquidationIncentiveMultiplierUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "liquidator",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "repayKreskoAsset",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "repayAmount",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "seizedCollateralAsset",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "collateralSent",
                    "type": "uint256"
                }
            ],
            "name": "LiquidationOccurred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "minimumCollateralizationRatio",
                    "type": "uint256"
                }
            ],
            "name": "MinimumCollateralizationRatioUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "minimumDebtValue",
                    "type": "uint256"
                }
            ],
            "name": "MinimumDebtValueUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "pendingOwner",
                    "type": "address"
                }
            ],
            "name": "PendingOwnershipTransfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "secondsUntilStalePrice",
                    "type": "uint256"
                }
            ],
            "name": "SecondsUntilStalePriceUpdated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "contractAddress",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "bool",
                    "name": "isTrusted",
                    "type": "bool"
                }
            ],
            "name": "TrustedContract",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "MAX_BURN_FEE",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "MAX_DEBT_VALUE",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "MAX_LIQUIDATION_INCENTIVE_MULTIPLIER",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "MIN_COLLATERALIZATION_RATIO",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "MIN_LIQUIDATION_INCENTIVE_MULTIPLIER",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "ONE_HUNDRED_PERCENT",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_collateralAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_factor",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_oracle",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "isNonRebasingWrapperToken",
                    "type": "bool"
                }
            ],
            "name": "addCollateralAsset",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_kreskoAsset",
                    "type": "address"
                },
                {
                    "internalType": "string",
                    "name": "_symbol",
                    "type": "string"
                },
                {
                    "internalType": "uint256",
                    "name": "_kFactor",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_oracle",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_marketCapUSDLimit",
                    "type": "uint256"
                }
            ],
            "name": "addKreskoAsset",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "burnFee",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "rawValue",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_kreskoAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_mintedKreskoAssetIndex",
                    "type": "uint256"
                }
            ],
            "name": "burnKreskoAsset",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_repayKreskoAsset",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_collateralAssetToSeize",
                    "type": "address"
                }
            ],
            "name": "calculateMaxLiquidatableValueForAssets",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "maxLiquidatableUSD",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "claimOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "collateralAssets",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "factor",
                    "type": "tuple"
                },
                {
                    "internalType": "contract AggregatorV2V3Interface",
                    "name": "oracle",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "underlyingRebasingToken",
                    "type": "address"
                },
                {
                    "internalType": "uint8",
                    "name": "decimals",
                    "type": "uint8"
                },
                {
                    "internalType": "bool",
                    "name": "exists",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "collateralDeposits",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_collateralAsset",
                    "type": "address"
                }
            ],
            "name": "collateralExists",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_collateralAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "depositCollateral",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_collateralAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_rebasingAmount",
                    "type": "uint256"
                }
            ],
            "name": "depositRebasingCollateral",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "depositedCollateralAssets",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "feeRecipient",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "getAccountCollateralValue",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "getAccountKrAssetValue",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "getAccountMinimumCollateralValue",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_collateralAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "bool",
                    "name": "_ignoreCollateralFactor",
                    "type": "bool"
                }
            ],
            "name": "getCollateralValueAndOraclePrice",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "",
                    "type": "tuple"
                },
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_collateralAsset",
                    "type": "address"
                }
            ],
            "name": "getDepositedCollateralAssetIndex",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "i",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "getDepositedCollateralAssets",
            "outputs": [
                {
                    "internalType": "address[]",
                    "name": "",
                    "type": "address[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_kreskoAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "bool",
                    "name": "_ignoreKFactor",
                    "type": "bool"
                }
            ],
            "name": "getKrAssetValue",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_krAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "getMinimumCollateralValue",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "minCollateralValue",
                    "type": "tuple"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "getMintedKreskoAssets",
            "outputs": [
                {
                    "internalType": "address[]",
                    "name": "",
                    "type": "address[]"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_kreskoAsset",
                    "type": "address"
                }
            ],
            "name": "getMintedKreskoAssetsIndex",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "i",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_burnFee",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_feeRecipient",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_liquidationIncentiveMultiplier",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_minimumCollateralizationRatio",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_minimumDebtValue",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_secondsUntilStalePrice",
                    "type": "uint256"
                }
            ],
            "name": "initialize",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                }
            ],
            "name": "isAccountLiquidatable",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_krAsset",
                    "type": "address"
                }
            ],
            "name": "krAssetExists",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "kreskoAssetDebt",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "name": "kreskoAssetSymbols",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "kreskoAssets",
            "outputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "rawValue",
                            "type": "uint256"
                        }
                    ],
                    "internalType": "struct FixedPoint.Unsigned",
                    "name": "kFactor",
                    "type": "tuple"
                },
                {
                    "internalType": "contract AggregatorV2V3Interface",
                    "name": "oracle",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "exists",
                    "type": "bool"
                },
                {
                    "internalType": "bool",
                    "name": "mintable",
                    "type": "bool"
                },
                {
                    "internalType": "uint256",
                    "name": "marketCapUSDLimit",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_repayKreskoAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_repayAmount",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_collateralAssetToSeize",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_mintedKreskoAssetIndex",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_depositedCollateralAssetIndex",
                    "type": "uint256"
                },
                {
                    "internalType": "bool",
                    "name": "_keepKrAssetDebt",
                    "type": "bool"
                }
            ],
            "name": "liquidate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "liquidationIncentiveMultiplier",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "rawValue",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "minimumCollateralizationRatio",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "rawValue",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "minimumDebtValue",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "rawValue",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_kreskoAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "mintKreskoAsset",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "mintedKreskoAssets",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pendingOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "secondsUntilStalePrice",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_trustedContract",
                    "type": "address"
                }
            ],
            "name": "toggleTrustedContract",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "trustedContracts",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_burnFee",
                    "type": "uint256"
                }
            ],
            "name": "updateBurnFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_collateralAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_factor",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_oracle",
                    "type": "address"
                }
            ],
            "name": "updateCollateralAsset",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_feeRecipient",
                    "type": "address"
                }
            ],
            "name": "updateFeeRecipient",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_kreskoAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_kFactor",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_oracle",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "_mintable",
                    "type": "bool"
                },
                {
                    "internalType": "uint256",
                    "name": "_marketCapUSDLimit",
                    "type": "uint256"
                }
            ],
            "name": "updateKreskoAsset",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_liquidationIncentiveMultiplier",
                    "type": "uint256"
                }
            ],
            "name": "updateLiquidationIncentiveMultiplier",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_minimumCollateralizationRatio",
                    "type": "uint256"
                }
            ],
            "name": "updateMinimumCollateralizationRatio",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_minimumDebtValue",
                    "type": "uint256"
                }
            ],
            "name": "updateMinimumDebtValue",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_secondsUntilStalePrice",
                    "type": "uint256"
                }
            ],
            "name": "updateSecondsUntilStalePrice",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_collateralAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_depositedCollateralAssetIndex",
                    "type": "uint256"
                }
            ],
            "name": "withdrawCollateral",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_account",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_collateralAsset",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_depositedCollateralAssetIndex",
                    "type": "uint256"
                }
            ],
            "name": "withdrawRebasingCollateral",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xb9ed4dd51032a6e84c9b3f106538d2889bec87b990db7e7b9f14b2e91bf2b5b6",
    "receipt": {
        "to": null,
        "from": "0x368F9940674c18d110b47EA12bcd181984C603A6",
        "contractAddress": "0x14C78703c070982c30643841f9a37d93B40a8F87",
        "transactionIndex": 0,
        "gasUsed": "5249246",
        "logsBloom": "0x
        "blockHash": "0xd9cdb5555d1b7cc22d5f6c6a77410371b887029270484c9055bbe835c78b0144",
        "transactionHash": "0xb9ed4dd51032a6e84c9b3f106538d2889bec87b990db7e7b9f14b2e91bf2b5b6",
        "logs": [],
        "blockNumber": 89733030,
        "cumulativeGasUsed": "0",
        "status": 1,
        "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "b2477b9f303919a3ac017b4ecb0d8a20",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentCollateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentValue\",\"type\":\"uint256\"}],\"name\":\"BurnFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"BurnFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"CollateralAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"CollateralAssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kreskoAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"kFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketCapLimit\",\"type\":\"uint256\"}],\"name\":\"KreskoAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kreskoAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"KreskoAssetBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kreskoAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"KreskoAssetMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kreskoAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"kFactor\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"KreskoAssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"liquidationIncentiveMultiplier\",\"type\":\"uint256\"}],\"name\":\"LiquidationIncentiveMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayKreskoAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seizedCollateralAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralSent\",\"type\":\"uint256\"}],\"name\":\"LiquidationOccurred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minimumCollateralizationRatio\",\"type\":\"uint256\"}],\"name\":\"MinimumCollateralizationRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minimumDebtValue\",\"type\":\"uint256\"}],\"name\":\"MinimumDebtValueUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"secondsUntilStalePrice\",\"type\":\"uint256\"}],\"name\":\"SecondsUntilStalePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"name\":\"TrustedContract\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BURN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEBT_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LIQUIDATION_INCENTIVE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_COLLATERALIZATION_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LIQUIDATION_INCENTIVE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_factor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNonRebasingWrapperToken\",\"type\":\"bool\"}],\"name\":\"addCollateralAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_kFactor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketCapUSDLimit\",\"type\":\"uint256\"}],\"name\":\"addKreskoAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintedKreskoAssetIndex\",\"type\":\"uint256\"}],\"name\":\"burnKreskoAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_repayKreskoAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAssetToSeize\",\"type\":\"address\"}],\"name\":\"calculateMaxLiquidatableValueForAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"maxLiquidatableUSD\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"factor\",\"type\":\"tuple\"},{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingRebasingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"}],\"name\":\"collateralExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rebasingAmount\",\"type\":\"uint256\"}],\"name\":\"depositRebasingCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositedCollateralAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountCollateralValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountKrAssetValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountMinimumCollateralValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ignoreCollateralFactor\",\"type\":\"bool\"}],\"name\":\"getCollateralValueAndOraclePrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"}],\"name\":\"getDepositedCollateralAssetIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getDepositedCollateralAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ignoreKFactor\",\"type\":\"bool\"}],\"name\":\"getKrAssetValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_krAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getMinimumCollateralValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"minCollateralValue\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getMintedKreskoAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"}],\"name\":\"getMintedKreskoAssetsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationIncentiveMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumCollateralizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumDebtValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondsUntilStalePrice\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAccountLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_krAsset\",\"type\":\"address\"}],\"name\":\"krAssetExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kreskoAssetDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"kreskoAssetSymbols\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kreskoAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"kFactor\",\"type\":\"tuple\"},{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"marketCapUSDLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_repayKreskoAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralAssetToSeize\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintedKreskoAssetIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedCollateralAssetIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_keepKrAssetDebt\",\"type\":\"bool\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentiveMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCollateralizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDebtValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintKreskoAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedKreskoAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsUntilStalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedContract\",\"type\":\"address\"}],\"name\":\"toggleTrustedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"updateBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_factor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"updateCollateralAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kreskoAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_kFactor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_mintable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_marketCapUSDLimit\",\"type\":\"uint256\"}],\"name\":\"updateKreskoAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationIncentiveMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateLiquidationIncentiveMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumCollateralizationRatio\",\"type\":\"uint256\"}],\"name\":\"updateMinimumCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumDebtValue\",\"type\":\"uint256\"}],\"name\":\"updateMinimumDebtValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secondsUntilStalePrice\",\"type\":\"uint256\"}],\"name\":\"updateSecondsUntilStalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedCollateralAssetIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositedCollateralAssetIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawRebasingCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"BurnFeePaid(address,address,uint256,uint256)\":{\"details\":\"This can be emitted multiple times for a single Kresko asset burn.\",\"params\":{\"account\":\"The address of the account burning the Kresko asset.\",\"paymentAmount\":\"The amount of the payment collateral asset that was paid.\",\"paymentCollateralAsset\":\"The address of the collateral asset used to pay the burn fee.\",\"paymentValue\":\"The USD value of the payment.\"}},\"BurnFeeUpdated(uint256)\":{\"params\":{\"burnFee\":\"The new burn fee raw value.\"}},\"CollateralAssetAdded(address,uint256,address)\":{\"details\":\"Can only be emitted once for a given collateral asset.\",\"params\":{\"collateralAsset\":\"The address of the collateral asset.\",\"factor\":\"The collateral factor.\",\"oracle\":\"The address of the oracle.\"}},\"CollateralAssetUpdated(address,uint256,address)\":{\"params\":{\"collateralAsset\":\"The address of the collateral asset.\",\"factor\":\"The collateral factor.\",\"oracle\":\"The oracle address.\"}},\"CollateralDeposited(address,address,uint256)\":{\"params\":{\"account\":\"The address of the account depositing collateral.\",\"amount\":\"The amount of the collateral asset that was deposited.\",\"collateralAsset\":\"The address of the collateral asset.\"}},\"CollateralWithdrawn(address,address,uint256)\":{\"params\":{\"account\":\"The address of the account withdrawing collateral.\",\"amount\":\"The amount of the collateral asset that was withdrawn.\",\"collateralAsset\":\"The address of the collateral asset.\"}},\"FeeRecipientUpdated(address)\":{\"params\":{\"feeRecipient\":\"The new fee recipient.\"}},\"KreskoAssetAdded(address,string,uint256,address,uint256)\":{\"details\":\"Can only be emitted once for a given Kresko asset.\",\"params\":{\"kFactor\":\"The k-factor.\",\"kreskoAsset\":\"The address of the Kresko asset.\",\"marketCapLimit\":\"The initial market capitalization USD limit.\",\"oracle\":\"The address of the oracle.\",\"symbol\":\"The symbol of the Kresko asset.\"}},\"KreskoAssetBurned(address,address,uint256)\":{\"params\":{\"account\":\"The address of the account burning the Kresko asset.\",\"amount\":\"The amount of the Kresko asset that was burned.\",\"kreskoAsset\":\"The address of the Kresko asset.\"}},\"KreskoAssetMinted(address,address,uint256)\":{\"params\":{\"account\":\"The address of the account minting the Kresko asset.\",\"amount\":\"The amount of the Kresko asset that was minted.\",\"kreskoAsset\":\"The address of the Kresko asset.\"}},\"KreskoAssetUpdated(address,uint256,address,bool,uint256)\":{\"params\":{\"kFactor\":\"The k-factor.\",\"kreskoAsset\":\"The address of the Kresko asset.\",\"limit\":\"The market capitalization USD limit.\",\"mintable\":\"The mintable value.\",\"oracle\":\"The address of the oracle.\"}},\"LiquidationIncentiveMultiplierUpdated(uint256)\":{\"params\":{\"liquidationIncentiveMultiplier\":\"The new liquidation incentive multiplier raw value.\"}},\"LiquidationOccurred(address,address,address,uint256,address,uint256)\":{\"params\":{\"account\":\"The address of the account being liquidated.\",\"collateralSent\":\"The amount of the seized collateral asset being seized from the account by the liquidator.\",\"liquidator\":\"The account performing the liquidation.\",\"repayAmount\":\"The amount of the repay Kresko asset being paid back to the protocol by the liquidator.\",\"repayKreskoAsset\":\"The address of the Kresko asset being paid back to the protocol by the liquidator.\",\"seizedCollateralAsset\":\"The address of the collateral asset being seized from the account by the liquidator.\"}},\"MinimumCollateralizationRatioUpdated(uint256)\":{\"params\":{\"minimumCollateralizationRatio\":\"The new minimum collateralization ratio raw value.\"}},\"MinimumDebtValueUpdated(uint256)\":{\"params\":{\"minimumDebtValue\":\"The new minimum debt value.\"}},\"SecondsUntilStalePriceUpdated(uint256)\":{\"params\":{\"secondsUntilStalePrice\":\"The new seconds until stale price value.\"}},\"TrustedContract(address,bool)\":{\"params\":{\"contractAddress\":\"A trusted contract (eg. Kresko Zapper).\",\"isTrusted\":\"true if the contract was added, false if removed\"}}},\"kind\":\"dev\",\"methods\":{\"addCollateralAsset(address,uint256,address,bool)\":{\"details\":\"Only callable by the owner and cannot be called more than once for an asset.\",\"params\":{\"_collateralAsset\":\"The address of the collateral asset.\",\"_factor\":\"The collateral factor of the collateral asset as a raw value for a FixedPoint.Unsigned. Must be <= 1e18.\",\"_oracle\":\"The oracle address for the collateral asset's USD value.\"}},\"addKreskoAsset(address,string,uint256,address,uint256)\":{\"details\":\"Only callable by the owner and cannot be called more than once for a given symbol.\",\"params\":{\"_kFactor\":\"The k-factor of the Kresko asset as a raw value for a FixedPoint.Unsigned. Must be >= 1e18.\",\"_kreskoAsset\":\"The address of the Kresko asset.\",\"_marketCapUSDLimit\":\"The initial market capitalization USD limit for the Kresko asset.\",\"_oracle\":\"The oracle address for the Kresko asset.\",\"_symbol\":\"The symbol of the Kresko asset.\"}},\"burnKreskoAsset(address,address,uint256,uint256)\":{\"params\":{\"_account\":\"The address to burn kresko assets for\",\"_amount\":\"The amount of the Kresko asset to be burned.\",\"_kreskoAsset\":\"The address of the Kresko asset.\",\"_mintedKreskoAssetIndex\":\"The index of the collateral asset in the user's minted assets array.\"}},\"calculateMaxLiquidatableValueForAssets(address,address,address)\":{\"details\":\"Calculates the total value that can be liquidated for a liquidation pair\",\"params\":{\"_account\":\"address to liquidate\",\"_collateralAssetToSeize\":\"address of the collateral asset being seized from the liquidatee\",\"_repayKreskoAsset\":\"address of the kreskoAsset being repaid on behalf of the liquidatee\"},\"returns\":{\"maxLiquidatableUSD\":\"USD value that can be liquidated, 0 if the pair has no liquidatable value\"}},\"constructor\":{\"details\":\"Protects against a call to initialize when this contract is called directly without a proxy.\"},\"depositCollateral(address,address,uint256)\":{\"params\":{\"_account\":\"The user to deposit collateral for.\",\"_amount\":\"The amount of the collateral asset to deposit.\",\"_collateralAsset\":\"The address of the collateral asset.\"}},\"depositRebasingCollateral(address,address,uint256)\":{\"params\":{\"_account\":\"The user to deposit collateral for.\",\"_collateralAsset\":\"The address of the NonRebasingWrapperToken collateral asset.\",\"_rebasingAmount\":\"The amount of the underlying rebasing token to deposit.\"}},\"getAccountCollateralValue(address)\":{\"details\":\"O(# of different deposited collateral assets by account) complexity.\",\"params\":{\"_account\":\"The account to calculate the collateral value for.\"},\"returns\":{\"_0\":\"The collateral value of a particular account.\"}},\"getAccountKrAssetValue(address)\":{\"params\":{\"_account\":\"The account to calculate the Kresko asset value for.\"},\"returns\":{\"_0\":\"The Kresko asset value of a particular account.\"}},\"getAccountMinimumCollateralValue(address)\":{\"details\":\"Accounts that have their collateral value under the minimum collateral value are considered unhealthy and therefore to avoid liquidations users should maintain a collateral value higher than the value returned.\",\"params\":{\"_account\":\"The account to calculate the minimum collateral value for.\"},\"returns\":{\"_0\":\"The minimum collateral value of a particular account.\"}},\"getCollateralValueAndOraclePrice(address,uint256,bool)\":{\"params\":{\"_amount\":\"The amount of the collateral asset to calculate the collateral value for.\",\"_collateralAsset\":\"The address of the collateral asset.\",\"_ignoreCollateralFactor\":\"Boolean indicating if the asset's collateral factor should be ignored.\"},\"returns\":{\"_0\":\"The collateral value for the provided amount of the collateral asset.\"}},\"getDepositedCollateralAssetIndex(address,address)\":{\"params\":{\"_account\":\"The account to get the index for.\",\"_collateralAsset\":\"The asset lookup address.\"},\"returns\":{\"i\":\"= index of the minted collateral asset.\"}},\"getDepositedCollateralAssets(address)\":{\"params\":{\"_account\":\"The account to get the deposited collateral assets for.\"},\"returns\":{\"_0\":\"An array of addresses of collateral assets the account has deposited.\"}},\"getKrAssetValue(address,uint256,bool)\":{\"params\":{\"_amount\":\"The amount of the Kresko asset to calculate the value for.\",\"_ignoreKFactor\":\"Boolean indicating if the asset's k-factor should be ignored.\",\"_kreskoAsset\":\"The address of the Kresko asset.\"},\"returns\":{\"_0\":\"The value for the provided amount of the Kresko asset.\"}},\"getMinimumCollateralValue(address,uint256)\":{\"params\":{\"_amount\":\"The Kresko Asset debt amount.\",\"_krAsset\":\"The address of the Kresko asset.\"},\"returns\":{\"minCollateralValue\":\"is the minimum collateral value required for this Kresko Asset amount.\"}},\"getMintedKreskoAssets(address)\":{\"params\":{\"_account\":\"The account to get the minted Kresko assets for.\"},\"returns\":{\"_0\":\"An array of addresses of Kresko assets the account has minted.\"}},\"getMintedKreskoAssetsIndex(address,address)\":{\"params\":{\"_account\":\"The account to get the minted Kresko assets for.\",\"_kreskoAsset\":\"The asset lookup address.\"},\"returns\":{\"i\":\"= index of the minted Kresko asset.\"}},\"initialize(uint256,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_burnFee\":\"Initial burn fee as a raw value for a FixedPoint.Unsigned.\",\"_feeRecipient\":\"Initial fee recipient.\",\"_liquidationIncentiveMultiplier\":\"Initial liquidation incentive multiplier.\",\"_minimumCollateralizationRatio\":\"Initial collateralization ratio as a raw value for a FixedPoint.Unsigned.\",\"_minimumDebtValue\":\"Initial minimum debt value denominated in USD.\"}},\"isAccountLiquidatable(address)\":{\"details\":\"Returns true if the account's current collateral value is below the minimum collateral value required to consider the position healthy.\",\"params\":{\"_account\":\"The account to check.\"},\"returns\":{\"_0\":\"A boolean indicating if the account can be liquidated.\"}},\"liquidate(address,address,uint256,address,uint256,uint256,bool)\":{\"params\":{\"_account\":\"The account to attempt to liquidate.\",\"_collateralAssetToSeize\":\"The address of the collateral asset to be seized.\",\"_depositedCollateralAssetIndex\":\"Index of the collateral asset in the account's collateral assets array.\",\"_keepKrAssetDebt\":\"Liquidator can choose to receive the whole seized amount keeping the krAsset debt. Setting _keepKrAssetDebt to false will instead only send the incentive and repay krAsset debt.\",\"_mintedKreskoAssetIndex\":\"The index of the Kresko asset in the account's minted assets array.\",\"_repayAmount\":\"The amount of the Kresko asset to be repaid.\",\"_repayKreskoAsset\":\"The address of the Kresko asset to be repaid.\"}},\"mintKreskoAsset(address,address,uint256)\":{\"params\":{\"_account\":\"The address to mint assets for.\",\"_amount\":\"The amount of the Kresko asset to be minted.\",\"_kreskoAsset\":\"The address of the Kresko asset.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"toggleTrustedContract(address)\":{\"params\":{\"_trustedContract\":\"Contract to toggle the trusted status for.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBurnFee(uint256)\":{\"params\":{\"_burnFee\":\"The new burn fee as a raw value for a FixedPoint.Unsigned.\"}},\"updateCollateralAsset(address,uint256,address)\":{\"details\":\"Only callable by the owner.\",\"params\":{\"_collateralAsset\":\"The address of the collateral asset.\",\"_factor\":\"The new collateral factor as a raw value for a FixedPoint.Unsigned. Must be <= 1e18.\",\"_oracle\":\"The new oracle address for the collateral asset.\"}},\"updateFeeRecipient(address)\":{\"params\":{\"_feeRecipient\":\"The new fee recipient.\"}},\"updateKreskoAsset(address,uint256,address,bool,uint256)\":{\"details\":\"Only callable by the owner.\",\"params\":{\"_kFactor\":\"The new k-factor as a raw value for a FixedPoint.Unsigned. Must be >= 1e18.\",\"_kreskoAsset\":\"The address of the Kresko asset.\",\"_marketCapUSDLimit\":\"The new market capitalization USD limit.\",\"_mintable\":\"The new mintable value.\",\"_oracle\":\"The new oracle address for the Kresko asset's USD value.\"}},\"updateLiquidationIncentiveMultiplier(uint256)\":{\"params\":{\"_liquidationIncentiveMultiplier\":\"The new liquidation incentive multiplie.\"}},\"updateMinimumCollateralizationRatio(uint256)\":{\"details\":\"Updates the contract's collateralization ratio.\",\"params\":{\"_minimumCollateralizationRatio\":\"The new minimum collateralization ratio as a raw value for a FixedPoint.Unsigned.\"}},\"updateMinimumDebtValue(uint256)\":{\"details\":\"Updates the contract's minimum debt value.\",\"params\":{\"_minimumDebtValue\":\"The new minimum debt value as a raw value for a FixedPoint.Unsigned.\"}},\"updateSecondsUntilStalePrice(uint256)\":{\"details\":\"Updates the contract's seconds until stale price value\",\"params\":{\"_secondsUntilStalePrice\":\"The new seconds until stale price.\"}},\"withdrawCollateral(address,address,uint256,uint256)\":{\"details\":\"Requires the post-withdrawal collateral value to violate minimum collateral requirement.\",\"params\":{\"_account\":\"The address to withdraw assets for.\",\"_amount\":\"The amount of the collateral asset to withdraw.\",\"_collateralAsset\":\"The address of the collateral asset.\",\"_depositedCollateralAssetIndex\":\"The index of the collateral asset in the sender's deposited collateral assets array. Only needed if withdrawing the entire deposit of a particular collateral asset.\"}},\"withdrawRebasingCollateral(address,address,uint256,uint256)\":{\"params\":{\"_account\":\"The address to withdraw assets for.\",\"_amount\":\"The amount of the NonRebasingWrapperToken collateral asset to withdraw.\",\"_collateralAsset\":\"The address of the NonRebasingWrapperToken collateral asset.\",\"_depositedCollateralAssetIndex\":\"The index of the collateral asset in the sender's deposited collateral assets array. Only needed if withdrawing the entire deposit of a particular collateral asset.\"}}},\"stateVariables\":{\"collateralDeposits\":{\"details\":\"Collateral assets must not rebase.\"}},\"title\":\"The core of the Kresko protocol.\",\"version\":1},\"userdoc\":{\"events\":{\"BurnFeePaid(address,address,uint256,uint256)\":{\"notice\":\"Emitted when an account pays a burn fee with a collateral asset upon burning a Kresko asset.\"},\"BurnFeeUpdated(uint256)\":{\"notice\":\"Emitted when the burn fee is updated.\"},\"CollateralAssetAdded(address,uint256,address)\":{\"notice\":\"Emitted when a collateral asset is added to the protocol.\"},\"CollateralAssetUpdated(address,uint256,address)\":{\"notice\":\"Emitted when a collateral asset is updated.\"},\"CollateralDeposited(address,address,uint256)\":{\"notice\":\"Emitted when an account deposits collateral.\"},\"CollateralWithdrawn(address,address,uint256)\":{\"notice\":\"Emitted when an account withdraws collateral.\"},\"FeeRecipientUpdated(address)\":{\"notice\":\"Emitted when the fee recipient is updated.\"},\"KreskoAssetAdded(address,string,uint256,address,uint256)\":{\"notice\":\"Emitted when a Kresko asset is added to the protocol.\"},\"KreskoAssetBurned(address,address,uint256)\":{\"notice\":\"Emitted when an account burns a Kresko asset.\"},\"KreskoAssetMinted(address,address,uint256)\":{\"notice\":\"Emitted when an account mints a Kresko asset.\"},\"KreskoAssetUpdated(address,uint256,address,bool,uint256)\":{\"notice\":\"Emitted when a Kresko asset's oracle is updated.\"},\"LiquidationIncentiveMultiplierUpdated(uint256)\":{\"notice\":\"Emitted when the liquidation incentive multiplier is updated.\"},\"LiquidationOccurred(address,address,address,uint256,address,uint256)\":{\"notice\":\"Emitted when a liquidation occurs.\"},\"MinimumCollateralizationRatioUpdated(uint256)\":{\"notice\":\"Emitted when the minimum collateralization ratio is updated.\"},\"MinimumDebtValueUpdated(uint256)\":{\"notice\":\"Emitted when the minimum debt value updated.\"},\"SecondsUntilStalePriceUpdated(uint256)\":{\"notice\":\"Emitted when the seconds until stale price value is updated.\"},\"TrustedContract(address,bool)\":{\"notice\":\"Emitted when the a trusted contract is added/removed.\"}},\"kind\":\"user\",\"methods\":{\"MAX_BURN_FEE()\":{\"notice\":\"The maximum configurable burn fee.\"},\"MAX_DEBT_VALUE()\":{\"notice\":\"The maximum configurable minimum debt USD value.\"},\"MAX_LIQUIDATION_INCENTIVE_MULTIPLIER()\":{\"notice\":\"The maximum configurable liquidation incentive multiplier. This means liquidator receives 25% bonus collateral compared to the debt repaid.\"},\"MIN_COLLATERALIZATION_RATIO()\":{\"notice\":\"The minimum configurable minimum collateralization ratio.\"},\"MIN_LIQUIDATION_INCENTIVE_MULTIPLIER()\":{\"notice\":\"The minimum configurable liquidation incentive multiplier. This means liquidator only receives equal amount of collateral to debt repaid.\"},\"ONE_HUNDRED_PERCENT()\":{\"notice\":\"================================================== =================== Constants ==================== ==================================================\"},\"addCollateralAsset(address,uint256,address,bool)\":{\"notice\":\"Adds a collateral asset to the protocol.\"},\"addKreskoAsset(address,string,uint256,address,uint256)\":{\"notice\":\"Adds a Kresko asset to the protocol.\"},\"burnFee()\":{\"notice\":\"The percent fee imposed upon the value of burned krAssets, taken as collateral and sent to feeRecipient.\"},\"burnKreskoAsset(address,address,uint256,uint256)\":{\"notice\":\"Burns existing Kresko assets.Only needed if withdrawing the entire deposit of a particular collateral asset.\"},\"claimOwnership()\":{\"notice\":\"Needs to be called by pending owner to claim ownership.\"},\"collateralAssets(address)\":{\"notice\":\"Mapping of collateral asset token address to information on the collateral asset.\"},\"collateralDeposits(address,address)\":{\"notice\":\"Mapping of account address to a mapping of collateral asset token address to the amount of the collateral asset the account has deposited.\"},\"collateralExists(address)\":{\"notice\":\"Returns true if the @param _collateralAsset exists in the protocol\"},\"constructor\":{\"notice\":\"Empty constructor, see `initialize`.\"},\"depositCollateral(address,address,uint256)\":{\"notice\":\"Deposits collateral into the protocol.\"},\"depositRebasingCollateral(address,address,uint256)\":{\"notice\":\"Deposits a rebasing collateral into the protocol by wrapping the underlying rebasing token.\"},\"depositedCollateralAssets(address,uint256)\":{\"notice\":\"Mapping of account address to an array of the addresses of each collateral asset the account has deposited.\"},\"feeRecipient()\":{\"notice\":\"The recipient of burn fees.\"},\"getAccountCollateralValue(address)\":{\"notice\":\"Gets the collateral value of a particular account.\"},\"getAccountKrAssetValue(address)\":{\"notice\":\"Gets the Kresko asset value in USD of a particular account.\"},\"getAccountMinimumCollateralValue(address)\":{\"notice\":\"Gets an account's minimum collateral value for its Kresko Asset debts.\"},\"getCollateralValueAndOraclePrice(address,uint256,bool)\":{\"notice\":\"Gets the collateral value for a single collateral asset and amount.\"},\"getDepositedCollateralAssetIndex(address,address)\":{\"notice\":\"Gets an index for the collateral asset the account has deposited.\"},\"getDepositedCollateralAssets(address)\":{\"notice\":\"Gets an array of collateral assets the account has deposited.\"},\"getKrAssetValue(address,uint256,bool)\":{\"notice\":\"Gets the USD value for a single Kresko asset and amount.\"},\"getMinimumCollateralValue(address,uint256)\":{\"notice\":\"Get the minimum collateral value required to keep a individual debt position healthy.\"},\"getMintedKreskoAssets(address)\":{\"notice\":\"Gets an array of Kresko assets the account has minted.\"},\"getMintedKreskoAssetsIndex(address,address)\":{\"notice\":\"Gets an index for the Kresko asset the account has minted.\"},\"initialize(uint256,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initializes the core Kresko protocol.\"},\"isAccountLiquidatable(address)\":{\"notice\":\"Calculates if an account's current collateral value is under its minimum collateral value\"},\"krAssetExists(address)\":{\"notice\":\"Returns true if the @param _krAsset exists in the protocol\"},\"kreskoAssetDebt(address,address)\":{\"notice\":\"Mapping of account address to a mapping of Kresko asset token address to the amount of the Kresko asset the account has minted and therefore owes to the protocol.\"},\"kreskoAssetSymbols(string)\":{\"notice\":\"Mapping of Kresko asset symbols to whether the symbol is used by an existing Kresko asset.\"},\"kreskoAssets(address)\":{\"notice\":\"Mapping of Kresko asset token address to information on the Kresko asset.\"},\"liquidate(address,address,uint256,address,uint256,uint256,bool)\":{\"notice\":\"Attempts to liquidate an account by repaying the portion of the account's Kresko asset         debt, receiving in return a portion of the account's collateral at a discounted rate.\"},\"liquidationIncentiveMultiplier()\":{\"notice\":\"The factor used to calculate the incentive a liquidator receives in the form of seized collateral.\"},\"minimumCollateralizationRatio()\":{\"notice\":\"The absolute minimum ratio of collateral value to debt value that is used to calculate collateral requirements.\"},\"minimumDebtValue()\":{\"notice\":\"The minimum USD value of an individual synthetic asset debt position.\"},\"mintKreskoAsset(address,address,uint256)\":{\"notice\":\"Mints new Kresko assets.\"},\"mintedKreskoAssets(address,uint256)\":{\"notice\":\"Mapping of account address to an array of the addresses of each Kresko asset the account has minted.\"},\"secondsUntilStalePrice()\":{\"notice\":\"The number of seconds until a price is considered stale\"},\"toggleTrustedContract(address)\":{\"notice\":\"Toggles a trusted contract to perform actions on behalf of user (eg. Kresko Zapper).\"},\"trustedContracts(address)\":{\"notice\":\"================================================== ===================== State ====================== ==================================================\"},\"updateBurnFee(uint256)\":{\"notice\":\"Updates the burn fee.\"},\"updateCollateralAsset(address,uint256,address)\":{\"notice\":\"Updates a previously added collateral asset.\"},\"updateFeeRecipient(address)\":{\"notice\":\"Updates the fee recipient.\"},\"updateKreskoAsset(address,uint256,address,bool,uint256)\":{\"notice\":\"Updates the k-factor of a previously added Kresko asset.\"},\"updateLiquidationIncentiveMultiplier(uint256)\":{\"notice\":\"Updates the liquidation incentive multiplier.\"},\"withdrawCollateral(address,address,uint256,uint256)\":{\"notice\":\"Withdraws sender's collateral from the protocol.\"},\"withdrawRebasingCollateral(address,address,uint256,uint256)\":{\"notice\":\"Withdraws NonRebasingWrapperToken collateral from the protocol and unwraps it.\"}},\"notice\":\"Responsible for managing collateral and minting / burning overcollateralized synthetic assets called Kresko assets. Management of critical features such as adding new collateral assets / Kresko assets and updating protocol constants such as the burn fee minimum collateralization ratio, and liquidation incentive is restricted to the contract owner.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Kresko.sol\":\"Kresko\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x322088ced3c1d027a3260de4e5a867b2264adeef252b94158a9725767873ea31\",\"license\":\"MIT\"},\"src/contracts/Kresko.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./utils/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IKreskoAsset.sol\\\";\\nimport \\\"./interfaces/INonRebasingWrapperToken.sol\\\";\\nimport \\\"./flux/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\nimport \\\"./libraries/FixedPoint.sol\\\";\\nimport \\\"./libraries/FixedPointMath.sol\\\";\\nimport \\\"./libraries/Arrays.sol\\\";\\n\\n/**\\n * @title The core of the Kresko protocol.\\n * @notice Responsible for managing collateral and minting / burning overcollateralized synthetic\\n * assets called Kresko assets. Management of critical features such as adding new collateral\\n * assets / Kresko assets and updating protocol constants such as the burn fee\\n * minimum collateralization ratio, and liquidation incentive is restricted to the contract owner.\\n */\\ncontract Kresko is OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using FixedPointMath for uint8;\\n    using FixedPointMath for uint256;\\n    using Arrays for address[];\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /**\\n     * ==================================================\\n     * ==================== Structs =====================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Information on a token that can be used as collateral.\\n     * @dev Setting the factor to zero effectively makes the asset useless as collateral while still allowing\\n     * it to be deposited and withdrawn.\\n     * @param factor The collateral factor used for calculating the value of the collateral.\\n     * @param oracle The oracle that provides the USD price of one collateral asset.\\n     * @param underlyingRebasingToken If the collateral asset is an instance of NonRebasingWrapperToken,\\n     * this is set to the underlying token that rebases. Otherwise, this is the zero address.\\n     * Added so that Kresko.sol can handle NonRebasingWrapperTokens with fewer transactions.\\n     * @param decimals The decimals for the token, stored here to avoid repetitive external calls.\\n     * @param exists Whether the collateral asset exists within the protocol.\\n     */\\n    struct CollateralAsset {\\n        FixedPoint.Unsigned factor;\\n        AggregatorV2V3Interface oracle;\\n        address underlyingRebasingToken;\\n        uint8 decimals;\\n        bool exists;\\n    }\\n\\n    /**\\n     * @notice Information on a token that is a Kresko asset.\\n     * @dev Each Kresko asset has 18 decimals.\\n     * @param kFactor The k-factor used for calculating the required collateral value for Kresko asset debt.\\n     * @param oracle The oracle that provides the USD price of one Kresko asset.\\n     * @param exists Whether the Kresko asset exists within the protocol.\\n     * @param mintable Whether the Kresko asset can be minted.\\n     * @param marketCapUSDLimit The market capitalization limit in USD of the Kresko asset.\\n     */\\n    struct KrAsset {\\n        FixedPoint.Unsigned kFactor;\\n        AggregatorV2V3Interface oracle;\\n        bool exists;\\n        bool mintable;\\n        uint256 marketCapUSDLimit;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * =================== Constants ====================\\n     * ==================================================\\n     */\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 1e18;\\n\\n    /// @notice The maximum configurable burn fee.\\n    uint256 public constant MAX_BURN_FEE = 5e16; // 5%\\n\\n    /// @notice The minimum configurable minimum collateralization ratio.\\n    uint256 public constant MIN_COLLATERALIZATION_RATIO = 1e18; // 100%\\n\\n    /// @notice The minimum configurable liquidation incentive multiplier.\\n    /// This means liquidator only receives equal amount of collateral to debt repaid.\\n    uint256 public constant MIN_LIQUIDATION_INCENTIVE_MULTIPLIER = 1e18; // 100%\\n\\n    /// @notice The maximum configurable liquidation incentive multiplier.\\n    /// This means liquidator receives 25% bonus collateral compared to the debt repaid.\\n    uint256 public constant MAX_LIQUIDATION_INCENTIVE_MULTIPLIER = 1.25e18; // 125%\\n\\n    /// @notice The maximum configurable minimum debt USD value.\\n    uint256 public constant MAX_DEBT_VALUE = 1000e18; // $1,000\\n\\n    /**\\n     * ==================================================\\n     * ===================== State ======================\\n     * ==================================================\\n     */\\n\\n    /* ===== Configurable parameters ===== */\\n\\n    mapping(address => bool) public trustedContracts;\\n\\n    /// @notice The percent fee imposed upon the value of burned krAssets, taken as collateral and sent to feeRecipient.\\n    FixedPoint.Unsigned public burnFee;\\n\\n    /// @notice The recipient of burn fees.\\n    address public feeRecipient;\\n\\n    /// @notice The factor used to calculate the incentive a liquidator receives in the form of seized collateral.\\n    FixedPoint.Unsigned public liquidationIncentiveMultiplier;\\n\\n    /// @notice The absolute minimum ratio of collateral value to debt value that is used to calculate\\n    /// collateral requirements.\\n    FixedPoint.Unsigned public minimumCollateralizationRatio;\\n\\n    /// @notice The minimum USD value of an individual synthetic asset debt position.\\n    FixedPoint.Unsigned public minimumDebtValue;\\n\\n    /// @notice The number of seconds until a price is considered stale\\n    uint256 public secondsUntilStalePrice;\\n\\n    /* ===== General state - Collateral Assets ===== */\\n\\n    /// @notice Mapping of collateral asset token address to information on the collateral asset.\\n    mapping(address => CollateralAsset) public collateralAssets;\\n\\n    /**\\n     * @notice Mapping of account address to a mapping of collateral asset token address to the amount of the collateral\\n     * asset the account has deposited.\\n     * @dev Collateral assets must not rebase.\\n     */\\n    mapping(address => mapping(address => uint256)) public collateralDeposits;\\n\\n    /// @notice Mapping of account address to an array of the addresses of each collateral asset the account\\n    /// has deposited.\\n    mapping(address => address[]) public depositedCollateralAssets;\\n\\n    /* ===== General state - Kresko Assets ===== */\\n\\n    /// @notice Mapping of Kresko asset token address to information on the Kresko asset.\\n    mapping(address => KrAsset) public kreskoAssets;\\n\\n    /// @notice Mapping of Kresko asset symbols to whether the symbol is used by an existing Kresko asset.\\n    mapping(string => bool) public kreskoAssetSymbols;\\n\\n    /// @notice Mapping of account address to a mapping of Kresko asset token address to the amount of the Kresko asset\\n    /// the account has minted and therefore owes to the protocol.\\n    mapping(address => mapping(address => uint256)) public kreskoAssetDebt;\\n\\n    /// @notice Mapping of account address to an array of the addresses of each Kresko asset the account has minted.\\n    mapping(address => address[]) public mintedKreskoAssets;\\n\\n    /**\\n     * ==================================================\\n     * ===================== Events =====================\\n     * ==================================================\\n     */\\n\\n    /* ===== Collateral ===== */\\n\\n    /**\\n     * @notice Emitted when a collateral asset is added to the protocol.\\n     * @dev Can only be emitted once for a given collateral asset.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The address of the oracle.\\n     */\\n    event CollateralAssetAdded(address indexed collateralAsset, uint256 indexed factor, address indexed oracle);\\n\\n    /**\\n     * @notice Emitted when a collateral asset is updated.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The oracle address.\\n     */\\n    event CollateralAssetUpdated(address indexed collateralAsset, uint256 indexed factor, address indexed oracle);\\n\\n    /**\\n     * @notice Emitted when an account deposits collateral.\\n     * @param account The address of the account depositing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was deposited.\\n     */\\n    event CollateralDeposited(address indexed account, address indexed collateralAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account withdraws collateral.\\n     * @param account The address of the account withdrawing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was withdrawn.\\n     */\\n    event CollateralWithdrawn(address indexed account, address indexed collateralAsset, uint256 indexed amount);\\n\\n    /* ===== Kresko Assets ===== */\\n\\n    /**\\n     * @notice Emitted when a Kresko asset is added to the protocol.\\n     * @dev Can only be emitted once for a given Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param symbol The symbol of the Kresko asset.\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param marketCapLimit The initial market capitalization USD limit.\\n     */\\n    event KreskoAssetAdded(\\n        address indexed kreskoAsset,\\n        string indexed symbol,\\n        uint256 indexed kFactor,\\n        address oracle,\\n        uint256 marketCapLimit\\n    );\\n\\n    /**\\n     * @notice Emitted when a Kresko asset's oracle is updated.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param mintable The mintable value.\\n     * @param limit The market capitalization USD limit.\\n     */\\n    event KreskoAssetUpdated(\\n        address indexed kreskoAsset,\\n        uint256 indexed kFactor,\\n        address indexed oracle,\\n        bool mintable,\\n        uint256 limit\\n    );\\n\\n    /**\\n     * @notice Emitted when an account mints a Kresko asset.\\n     * @param account The address of the account minting the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the Kresko asset that was minted.\\n     */\\n    event KreskoAssetMinted(address indexed account, address indexed kreskoAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account burns a Kresko asset.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the Kresko asset that was burned.\\n     */\\n    event KreskoAssetBurned(address indexed account, address indexed kreskoAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account pays a burn fee with a collateral asset upon burning a Kresko asset.\\n     * @dev This can be emitted multiple times for a single Kresko asset burn.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param paymentCollateralAsset The address of the collateral asset used to pay the burn fee.\\n     * @param paymentAmount The amount of the payment collateral asset that was paid.\\n     * @param paymentValue The USD value of the payment.\\n     */\\n    event BurnFeePaid(\\n        address indexed account,\\n        address indexed paymentCollateralAsset,\\n        uint256 indexed paymentAmount,\\n        uint256 paymentValue\\n    );\\n\\n    /**\\n     * @notice Emitted when a liquidation occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param repayKreskoAsset The address of the Kresko asset being paid back to the protocol by the liquidator.\\n     * @param repayAmount The amount of the repay Kresko asset being paid back to the protocol by the liquidator.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event LiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed repayKreskoAsset,\\n        uint256 repayAmount,\\n        address seizedCollateralAsset,\\n        uint256 collateralSent\\n    );\\n\\n    /* ===== Configurable Parameters ===== */\\n\\n    /**\\n     * @notice Emitted when the a trusted contract is added/removed.\\n     * @param contractAddress A trusted contract (eg. Kresko Zapper).\\n     * @param isTrusted true if the contract was added, false if removed\\n     */\\n    event TrustedContract(address indexed contractAddress, bool indexed isTrusted);\\n\\n    /**\\n     * @notice Emitted when the burn fee is updated.\\n     * @param burnFee The new burn fee raw value.\\n     */\\n    event BurnFeeUpdated(uint256 indexed burnFee);\\n\\n    /**\\n     * @notice Emitted when the fee recipient is updated.\\n     * @param feeRecipient The new fee recipient.\\n     */\\n    event FeeRecipientUpdated(address indexed feeRecipient);\\n\\n    /**\\n     * @notice Emitted when the liquidation incentive multiplier is updated.\\n     * @param liquidationIncentiveMultiplier The new liquidation incentive multiplier raw value.\\n     */\\n    event LiquidationIncentiveMultiplierUpdated(uint256 indexed liquidationIncentiveMultiplier);\\n\\n    /**\\n     * @notice Emitted when the minimum collateralization ratio is updated.\\n     * @param minimumCollateralizationRatio The new minimum collateralization ratio raw value.\\n     */\\n    event MinimumCollateralizationRatioUpdated(uint256 indexed minimumCollateralizationRatio);\\n\\n    /**\\n     * @notice Emitted when the minimum debt value updated.\\n     * @param minimumDebtValue The new minimum debt value.\\n     */\\n    event MinimumDebtValueUpdated(uint256 indexed minimumDebtValue);\\n\\n    /**\\n     * @notice Emitted when the seconds until stale price value is updated.\\n     * @param secondsUntilStalePrice The new seconds until stale price value.\\n     */\\n    event SecondsUntilStalePriceUpdated(uint256 indexed secondsUntilStalePrice);\\n\\n    /**\\n     * ==================================================\\n     * =================== Modifiers ====================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Ensure only trusted contracts can act on behalf of `_account`\\n     * @param _accountIsNotMsgSender The address of the collateral asset.\\n     */\\n    modifier ensureTrustedCallerWhen(bool _accountIsNotMsgSender) {\\n        if (_accountIsNotMsgSender) {\\n            require(trustedContracts[msg.sender], \\\"KR: Unauthorized caller\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if a collateral asset does not exist within the protocol.\\n     * @param _collateralAsset The address of the collateral asset.\\n     */\\n    modifier collateralAssetExists(address _collateralAsset) {\\n        require(collateralAssets[_collateralAsset].exists, \\\"KR: !collateralExists\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if a collateral asset already exists within the protocol.\\n     * @param _collateralAsset The address of the collateral asset.\\n     */\\n    modifier collateralAssetDoesNotExist(address _collateralAsset) {\\n        require(!collateralAssets[_collateralAsset].exists, \\\"KR: collateralExists\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if a Kresko asset does not exist within the protocol or is not mintable.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     */\\n    modifier kreskoAssetExistsAndMintable(address _kreskoAsset) {\\n        require(kreskoAssets[_kreskoAsset].exists, \\\"KR: !krAssetExist\\\");\\n        require(kreskoAssets[_kreskoAsset].mintable, \\\"KR: !krAssetMintable\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if a Kresko asset does not exist within the protocol. Does not revert if\\n     * the Kresko asset is not mintable.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     */\\n    modifier kreskoAssetExistsMaybeNotMintable(address _kreskoAsset) {\\n        require(kreskoAssets[_kreskoAsset].exists, \\\"KR: !krAssetExist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if a Kresko asset's price is stale\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     */\\n    modifier kreskoAssetPriceNotStale(address _kreskoAsset) {\\n        uint256 priceTimestamp = uint256(kreskoAssets[_kreskoAsset].oracle.latestTimestamp());\\n        // Include a buffer as block.timestamp can be manipulated up to 15 seconds.\\n        require(block.timestamp < priceTimestamp + secondsUntilStalePrice, \\\"KR: stale price\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if the symbol of a Kresko asset already exists within the protocol.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _symbol The symbol of the Kresko asset.\\n     */\\n    modifier kreskoAssetDoesNotExist(address _kreskoAsset, string calldata _symbol) {\\n        require(!kreskoAssets[_kreskoAsset].exists, \\\"KR: krAssetExists\\\");\\n        require(!kreskoAssetSymbols[_symbol], \\\"KR: symbolExists\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if provided string is empty.\\n     * @param _str The string to ensure is not empty.\\n     */\\n    modifier nonNullString(string calldata _str) {\\n        require(bytes(_str).length > 0, \\\"KR: !string\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Empty constructor, see `initialize`.\\n     * @dev Protects against a call to initialize when this contract is called directly without a proxy.\\n     */\\n    constructor() initializer {\\n        // solhint-disable-previous-line no-empty-blocks\\n        // Intentionally left blank.\\n    }\\n\\n    /**\\n     * @notice Initializes the core Kresko protocol.\\n     * @param _burnFee Initial burn fee as a raw value for a FixedPoint.Unsigned.\\n     * @param _feeRecipient Initial fee recipient.\\n     * @param _liquidationIncentiveMultiplier Initial liquidation incentive multiplier.\\n     * @param _minimumCollateralizationRatio Initial collateralization ratio as a raw value for a FixedPoint.Unsigned.\\n     * @param _minimumDebtValue Initial minimum debt value denominated in USD.\\n     */\\n    function initialize(\\n        uint256 _burnFee,\\n        address _feeRecipient,\\n        uint256 _liquidationIncentiveMultiplier,\\n        uint256 _minimumCollateralizationRatio,\\n        uint256 _minimumDebtValue,\\n        uint256 _secondsUntilStalePrice\\n    ) external initializer {\\n        // Set msg.sender as the owner.\\n        __Ownable_init();\\n        updateBurnFee(_burnFee);\\n        updateFeeRecipient(_feeRecipient);\\n        updateLiquidationIncentiveMultiplier(_liquidationIncentiveMultiplier);\\n        updateMinimumCollateralizationRatio(_minimumCollateralizationRatio);\\n        updateMinimumDebtValue(_minimumDebtValue);\\n        updateSecondsUntilStalePrice(_secondsUntilStalePrice);\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ======== Core external & public functions ========\\n     * ==================================================\\n     */\\n\\n    /* ===== Collateral ===== */\\n\\n    /**\\n     * @notice Deposits collateral into the protocol.\\n     * @param _account The user to deposit collateral for.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _amount The amount of the collateral asset to deposit.\\n     */\\n    function depositCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount\\n    ) external nonReentrant collateralAssetExists(_collateralAsset) {\\n        // Transfer tokens into this contract prior to any state changes as an extra measure against re-entrancy.\\n        IERC20MetadataUpgradeable(_collateralAsset).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Record the collateral deposit.\\n        _recordCollateralDeposit(_account, _collateralAsset, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposits a rebasing collateral into the protocol by wrapping the underlying\\n     * rebasing token.\\n     * @param _account The user to deposit collateral for.\\n     * @param _collateralAsset The address of the NonRebasingWrapperToken collateral asset.\\n     * @param _rebasingAmount The amount of the underlying rebasing token to deposit.\\n     */\\n    function depositRebasingCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _rebasingAmount\\n    ) external nonReentrant collateralAssetExists(_collateralAsset) {\\n        require(_rebasingAmount > 0, \\\"KR: 0-deposit\\\");\\n\\n        address underlyingRebasingToken = collateralAssets[_collateralAsset].underlyingRebasingToken;\\n        require(underlyingRebasingToken != address(0), \\\"KR: !NRWTCollateral\\\");\\n\\n        // Transfer underlying rebasing token in.\\n        IERC20Upgradeable(underlyingRebasingToken).safeTransferFrom(msg.sender, address(this), _rebasingAmount);\\n\\n        // Approve the newly received rebasing token to the NonRebasingWrapperToken in preparation\\n        // for calling depositUnderlying.\\n        require(\\n            IERC20Upgradeable(underlyingRebasingToken).approve(_collateralAsset, _rebasingAmount),\\n            \\\"KR: ApprovalFail\\\"\\n        );\\n\\n        // Wrap into NonRebasingWrapperToken.\\n        uint256 nonRebasingAmount = INonRebasingWrapperToken(_collateralAsset).depositUnderlying(_rebasingAmount);\\n\\n        // Record the collateral deposit.\\n        _recordCollateralDeposit(_account, _collateralAsset, nonRebasingAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraws sender's collateral from the protocol.\\n     * @dev Requires the post-withdrawal collateral value to violate minimum collateral requirement.\\n     * @param _account The address to withdraw assets for.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _amount The amount of the collateral asset to withdraw.\\n     * @param _depositedCollateralAssetIndex The index of the collateral asset in the sender's deposited collateral\\n     * assets array. Only needed if withdrawing the entire deposit of a particular collateral asset.\\n     */\\n    function withdrawCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) external nonReentrant collateralAssetExists(_collateralAsset) ensureTrustedCallerWhen(_account != msg.sender) {\\n        uint256 depositAmount = collateralDeposits[_account][_collateralAsset];\\n        _amount = (_amount <= depositAmount ? _amount : depositAmount);\\n        _verifyAndRecordCollateralWithdrawal(\\n            _account,\\n            _collateralAsset,\\n            _amount,\\n            depositAmount,\\n            _depositedCollateralAssetIndex\\n        );\\n\\n        IERC20MetadataUpgradeable(_collateralAsset).safeTransfer(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws NonRebasingWrapperToken collateral from the protocol and unwraps it.\\n     * @param _account The address to withdraw assets for.\\n     * @param _collateralAsset The address of the NonRebasingWrapperToken collateral asset.\\n     * @param _amount The amount of the NonRebasingWrapperToken collateral asset to withdraw.\\n     * @param _depositedCollateralAssetIndex The index of the collateral asset in the sender's deposited collateral\\n     * assets array. Only needed if withdrawing the entire deposit of a particular collateral asset.\\n     */\\n    function withdrawRebasingCollateral(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) external nonReentrant collateralAssetExists(_collateralAsset) ensureTrustedCallerWhen(_account != msg.sender) {\\n        uint256 depositAmount = collateralDeposits[_account][_collateralAsset];\\n        _amount = (_amount <= depositAmount ? _amount : depositAmount);\\n        _verifyAndRecordCollateralWithdrawal(\\n            _account,\\n            _collateralAsset,\\n            _amount,\\n            depositAmount,\\n            _depositedCollateralAssetIndex\\n        );\\n\\n        address underlyingRebasingToken = collateralAssets[_collateralAsset].underlyingRebasingToken;\\n        require(underlyingRebasingToken != address(0), \\\"KR: !NRWTCollateral\\\");\\n\\n        // Unwrap the NonRebasingWrapperToken into the rebasing underlying.\\n        uint256 underlyingAmountWithdrawn = INonRebasingWrapperToken(_collateralAsset).withdrawUnderlying(_amount);\\n\\n        // Transfer the sender the rebasing underlying.\\n        IERC20MetadataUpgradeable(underlyingRebasingToken).safeTransfer(_account, underlyingAmountWithdrawn);\\n    }\\n\\n    /* ===== Kresko Assets ===== */\\n\\n    /**\\n     * @notice Mints new Kresko assets.\\n     * @param _account The address to mint assets for.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _amount The amount of the Kresko asset to be minted.\\n     */\\n    function mintKreskoAsset(\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _amount\\n    )\\n        external\\n        nonReentrant\\n        kreskoAssetExistsAndMintable(_kreskoAsset)\\n        kreskoAssetPriceNotStale(_kreskoAsset)\\n        ensureTrustedCallerWhen(_account != msg.sender)\\n    {\\n        require(_amount > 0, \\\"KR: 0-mint\\\");\\n\\n        // Enforce synthetic asset's maximum market capitalization limit\\n        require(\\n            getKrAssetValue(_kreskoAsset, IKreskoAsset(_kreskoAsset).totalSupply() + _amount, true).rawValue <=\\n                kreskoAssets[_kreskoAsset].marketCapUSDLimit,\\n            \\\"KR: MC limit\\\"\\n        );\\n\\n        // Get the value of the minter's current deposited collateral.\\n        FixedPoint.Unsigned memory accountCollateralValue = getAccountCollateralValue(_account);\\n        // Get the account's current minimum collateral value required to maintain current debts.\\n        FixedPoint.Unsigned memory minAccountCollateralValue = getAccountMinimumCollateralValue(_account);\\n        // Calculate additional collateral amount required to back requested additional mint.\\n        FixedPoint.Unsigned memory additionalCollateralValue = getMinimumCollateralValue(_kreskoAsset, _amount);\\n\\n        // Verify that minter has sufficient collateral to back current debt + new requested debt.\\n        require(\\n            minAccountCollateralValue.add(additionalCollateralValue).isLessThanOrEqual(accountCollateralValue),\\n            \\\"KR: insufficientCollateral\\\"\\n        );\\n\\n        // The synthetic asset debt position must be greater than the minimum debt position value\\n        uint256 existingDebtAmount = kreskoAssetDebt[_account][_kreskoAsset];\\n        require(\\n            getKrAssetValue(_kreskoAsset, existingDebtAmount + _amount, true).isGreaterThanOrEqual(minimumDebtValue),\\n            \\\"KR: belowMinDebtValue\\\"\\n        );\\n\\n        // If the account does not have an existing debt for this Kresko Asset,\\n        // push it to the list of the account's minted Kresko Assets.\\n        if (existingDebtAmount == 0) {\\n            mintedKreskoAssets[_account].push(_kreskoAsset);\\n        }\\n        // Record the mint.\\n        kreskoAssetDebt[_account][_kreskoAsset] = existingDebtAmount + _amount;\\n\\n        IKreskoAsset(_kreskoAsset).mint(_account, _amount);\\n\\n        emit KreskoAssetMinted(_account, _kreskoAsset, _amount);\\n    }\\n\\n    /**\\n     * @notice Burns existing Kresko assets.\\n     * @param _account The address to burn kresko assets for\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _amount The amount of the Kresko asset to be burned.\\n     * @param _mintedKreskoAssetIndex The index of the collateral asset in the user's minted assets array.\\n     * @notice Only needed if withdrawing the entire deposit of a particular collateral asset.\\n     */\\n    function burnKreskoAsset(\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        uint256 _mintedKreskoAssetIndex\\n    )\\n        external\\n        nonReentrant\\n        kreskoAssetExistsMaybeNotMintable(_kreskoAsset)\\n        ensureTrustedCallerWhen(_account != msg.sender)\\n    {\\n        require(_amount > 0, \\\"KR: 0-burn\\\");\\n\\n        // Ensure the amount being burned is not greater than the user's debt.\\n        uint256 debtAmount = kreskoAssetDebt[_account][_kreskoAsset];\\n        require(_amount <= debtAmount, \\\"KR: amount > debt\\\");\\n\\n        // If the requested burn would put the user's debt position below the minimum\\n        // debt value, close the position entirely instead.\\n        if (getKrAssetValue(_kreskoAsset, debtAmount - _amount, true).isLessThan(minimumDebtValue)) {\\n            _amount = debtAmount;\\n        }\\n\\n        // Record the burn.\\n        kreskoAssetDebt[_account][_kreskoAsset] -= _amount;\\n\\n        // If the sender is burning all of the kresko asset, remove it from minted assets array.\\n        if (_amount == debtAmount) {\\n            mintedKreskoAssets[_account].removeAddress(_kreskoAsset, _mintedKreskoAssetIndex);\\n        }\\n\\n        _chargeBurnFee(_account, _kreskoAsset, _amount);\\n\\n        // Burn the received kresko assets, removing them from circulation.\\n        IKreskoAsset(_kreskoAsset).burn(msg.sender, _amount);\\n\\n        emit KreskoAssetBurned(_account, _kreskoAsset, _amount);\\n    }\\n\\n    // * ===== Liquidation ===== */\\n\\n    /**\\n     * @notice Attempts to liquidate an account by repaying the portion of the account's Kresko asset\\n     *         debt, receiving in return a portion of the account's collateral at a discounted rate.\\n     * @param _account The account to attempt to liquidate.\\n     * @param _repayKreskoAsset The address of the Kresko asset to be repaid.\\n     * @param _repayAmount The amount of the Kresko asset to be repaid.\\n     * @param _collateralAssetToSeize The address of the collateral asset to be seized.\\n     * @param _mintedKreskoAssetIndex The index of the Kresko asset in the account's minted assets array.\\n     * @param _depositedCollateralAssetIndex Index of the collateral asset in the account's collateral assets array.\\n     * @param _keepKrAssetDebt Liquidator can choose to receive the whole seized amount keeping the krAsset debt.\\n     * Setting _keepKrAssetDebt to false will instead only send the incentive and repay krAsset debt.\\n     */\\n\\n    function liquidate(\\n        address _account,\\n        address _repayKreskoAsset,\\n        uint256 _repayAmount,\\n        address _collateralAssetToSeize,\\n        uint256 _mintedKreskoAssetIndex,\\n        uint256 _depositedCollateralAssetIndex,\\n        bool _keepKrAssetDebt\\n    ) external nonReentrant {\\n        // Require checks not used with modifiers to avoid stack too deep errors\\n        {\\n            require(kreskoAssets[_repayKreskoAsset].exists, \\\"KR: !krAssetExist\\\");\\n            require(collateralAssets[_collateralAssetToSeize].exists, \\\"KR: !collateralExists\\\");\\n            require(_repayAmount > 0, \\\"KR: 0-repay\\\");\\n\\n            uint256 priceTimestamp = uint256(kreskoAssets[_repayKreskoAsset].oracle.latestTimestamp());\\n            require(block.timestamp < priceTimestamp + secondsUntilStalePrice, \\\"KR: stale price\\\");\\n\\n            // Borrower cannot liquidate themselves\\n            require(msg.sender != _account, \\\"KR: self liquidation\\\");\\n\\n            // Check that this account is below its minimum collateralization ratio and can be liquidated.\\n            require(isAccountLiquidatable(_account), \\\"KR: !accountLiquidatable\\\");\\n        }\\n\\n        // Repay amount USD = repay amount * KR asset USD exchange rate.\\n        FixedPoint.Unsigned memory repayAmountUSD = FixedPoint.Unsigned(_repayAmount).mul(\\n            FixedPoint.Unsigned(uint256(kreskoAssets[_repayKreskoAsset].oracle.latestAnswer()))\\n        );\\n\\n        // Get the token debt amount\\n        uint256 krAssetDebt = kreskoAssetDebt[_account][_repayKreskoAsset];\\n        // Avoid stack too deep error\\n        {\\n            // Liquidator may not repay more value than what the liquidation pair allows\\n            // Nor repay more tokens than the account holds debt for the asset\\n            FixedPoint.Unsigned memory maxLiquidation = calculateMaxLiquidatableValueForAssets(\\n                _account,\\n                _repayKreskoAsset,\\n                _collateralAssetToSeize\\n            );\\n            require(krAssetDebt >= _repayAmount, \\\"KR: repayAmount > debtAmount\\\");\\n            require(repayAmountUSD.isLessThanOrEqual(maxLiquidation), \\\"KR: repayUSD > maxUSD\\\");\\n        }\\n\\n        FixedPoint.Unsigned memory collateralPriceUSD = FixedPoint.Unsigned(\\n            uint256(collateralAssets[_collateralAssetToSeize].oracle.latestAnswer())\\n        );\\n\\n        // Get the actual seized amount\\n        uint256 seizeAmount = _liquidateAssets(\\n            _account,\\n            krAssetDebt,\\n            _repayAmount,\\n            collateralAssets[_collateralAssetToSeize].decimals._fromCollateralFixedPointAmount(\\n                liquidationIncentiveMultiplier._calculateAmountToSeize(collateralPriceUSD, repayAmountUSD)\\n            ),\\n            _repayKreskoAsset,\\n            _mintedKreskoAssetIndex,\\n            _collateralAssetToSeize,\\n            _depositedCollateralAssetIndex\\n        );\\n\\n        // Charge burn fee from the liquidated user\\n        _chargeBurnFee(_account, _repayKreskoAsset, _repayAmount);\\n\\n        // Burn the received Kresko assets, removing them from circulation.\\n        IKreskoAsset(_repayKreskoAsset).burn(msg.sender, _repayAmount);\\n\\n        uint256 collateralToSend = _keepKrAssetDebt\\n            ? seizeAmount\\n            : _calculateCollateralToSendAndAdjustDebt(\\n                _collateralAssetToSeize,\\n                _repayKreskoAsset,\\n                _repayAmount,\\n                seizeAmount,\\n                repayAmountUSD,\\n                collateralPriceUSD\\n            );\\n\\n        // Send liquidator the seized collateral.\\n        IERC20MetadataUpgradeable(_collateralAssetToSeize).safeTransfer(msg.sender, collateralToSend);\\n\\n        emit LiquidationOccurred(\\n            _account,\\n            msg.sender,\\n            _repayKreskoAsset,\\n            _repayAmount,\\n            _collateralAssetToSeize,\\n            collateralToSend\\n        );\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============== Owner-only functions ==============\\n     * ==================================================\\n     */\\n\\n    /* ===== Collateral ===== */\\n\\n    /**\\n     * @notice Adds a collateral asset to the protocol.\\n     * @dev Only callable by the owner and cannot be called more than once for an asset.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _factor The collateral factor of the collateral asset as a raw value for a FixedPoint.Unsigned.\\n     * Must be <= 1e18.\\n     * @param _oracle The oracle address for the collateral asset's USD value.\\n     */\\n    function addCollateralAsset(\\n        address _collateralAsset,\\n        uint256 _factor,\\n        address _oracle,\\n        bool isNonRebasingWrapperToken\\n    ) external nonReentrant onlyOwner collateralAssetDoesNotExist(_collateralAsset) {\\n        require(_collateralAsset != address(0), \\\"KR: !collateralAddr\\\");\\n        require(_factor <= FixedPoint.FP_SCALING_FACTOR, \\\"KR: factor > 1FP\\\");\\n        require(_oracle != address(0), \\\"KR: !oracleAddr\\\");\\n\\n        // Set as the rebasing underlying token if the collateral asset is a\\n        // NonRebasingWrapperToken, otherwise set as address(0).\\n        address underlyingRebasingToken = isNonRebasingWrapperToken\\n            ? INonRebasingWrapperToken(_collateralAsset).underlyingToken()\\n            : address(0);\\n\\n        collateralAssets[_collateralAsset] = CollateralAsset({\\n            factor: FixedPoint.Unsigned(_factor),\\n            oracle: AggregatorV2V3Interface(_oracle),\\n            underlyingRebasingToken: underlyingRebasingToken,\\n            exists: true,\\n            decimals: IERC20MetadataUpgradeable(_collateralAsset).decimals()\\n        });\\n        emit CollateralAssetAdded(_collateralAsset, _factor, _oracle);\\n    }\\n\\n    /**\\n     * @notice Updates a previously added collateral asset.\\n     * @dev Only callable by the owner.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _factor The new collateral factor as a raw value for a FixedPoint.Unsigned. Must be <= 1e18.\\n     * @param _oracle The new oracle address for the collateral asset.\\n     */\\n    function updateCollateralAsset(\\n        address _collateralAsset,\\n        uint256 _factor,\\n        address _oracle\\n    ) external onlyOwner collateralAssetExists(_collateralAsset) {\\n        require(_oracle != address(0), \\\"KR: !oracleAddr\\\");\\n        // Setting the factor to 0 effectively sunsets a collateral asset, which is intentionally allowed.\\n        require(_factor <= FixedPoint.FP_SCALING_FACTOR, \\\"KR: factor > 1FP\\\");\\n\\n        collateralAssets[_collateralAsset].factor = FixedPoint.Unsigned(_factor);\\n        collateralAssets[_collateralAsset].oracle = AggregatorV2V3Interface(_oracle);\\n        emit CollateralAssetUpdated(_collateralAsset, _factor, _oracle);\\n    }\\n\\n    /* ===== Kresko Assets ===== */\\n\\n    /**\\n     * @notice Adds a Kresko asset to the protocol.\\n     * @dev Only callable by the owner and cannot be called more than once for a given symbol.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _symbol The symbol of the Kresko asset.\\n     * @param _kFactor The k-factor of the Kresko asset as a raw value for a FixedPoint.Unsigned. Must be >= 1e18.\\n     * @param _oracle The oracle address for the Kresko asset.\\n     * @param _marketCapUSDLimit The initial market capitalization USD limit for the Kresko asset.\\n     */\\n    function addKreskoAsset(\\n        address _kreskoAsset,\\n        string calldata _symbol,\\n        uint256 _kFactor,\\n        address _oracle,\\n        uint256 _marketCapUSDLimit\\n    ) external onlyOwner nonNullString(_symbol) kreskoAssetDoesNotExist(_kreskoAsset, _symbol) {\\n        require(_kFactor >= FixedPoint.FP_SCALING_FACTOR, \\\"KR: kFactor < 1FP\\\");\\n        require(_oracle != address(0), \\\"KR: !oracleAddr\\\");\\n        IKreskoAsset kreskoAsset = IKreskoAsset(_kreskoAsset);\\n        require(kreskoAsset.hasRole(kreskoAsset.OPERATOR_ROLE(), address(this)), \\\"KR: !assetOperator\\\");\\n\\n        // Store symbol to prevent duplicate KreskoAsset symbols.\\n        kreskoAssetSymbols[_symbol] = true;\\n\\n        // Deploy KreskoAsset contract and store its details.\\n        kreskoAssets[_kreskoAsset] = KrAsset({\\n            kFactor: FixedPoint.Unsigned(_kFactor),\\n            oracle: AggregatorV2V3Interface(_oracle),\\n            exists: true,\\n            mintable: true,\\n            marketCapUSDLimit: _marketCapUSDLimit\\n        });\\n        emit KreskoAssetAdded(_kreskoAsset, _symbol, _kFactor, _oracle, _marketCapUSDLimit);\\n    }\\n\\n    /**\\n     * @notice Updates the k-factor of a previously added Kresko asset.\\n     * @dev Only callable by the owner.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _kFactor The new k-factor as a raw value for a FixedPoint.Unsigned. Must be >= 1e18.\\n     * @param _oracle The new oracle address for the Kresko asset's USD value.\\n     * @param _mintable The new mintable value.\\n     * @param _marketCapUSDLimit The new market capitalization USD limit.\\n     */\\n    function updateKreskoAsset(\\n        address _kreskoAsset,\\n        uint256 _kFactor,\\n        address _oracle,\\n        bool _mintable,\\n        uint256 _marketCapUSDLimit\\n    ) external onlyOwner kreskoAssetExistsMaybeNotMintable(_kreskoAsset) {\\n        require(_kFactor >= FixedPoint.FP_SCALING_FACTOR, \\\"KR: kFactor < 1FP\\\");\\n        require(_oracle != address(0), \\\"KR: !oracleAddr\\\");\\n\\n        KrAsset memory krAsset = kreskoAssets[_kreskoAsset];\\n        krAsset.kFactor = FixedPoint.Unsigned(_kFactor);\\n        krAsset.oracle = AggregatorV2V3Interface(_oracle);\\n        krAsset.mintable = _mintable;\\n        krAsset.marketCapUSDLimit = _marketCapUSDLimit;\\n        kreskoAssets[_kreskoAsset] = krAsset;\\n\\n        emit KreskoAssetUpdated(_kreskoAsset, _kFactor, _oracle, _mintable, _marketCapUSDLimit);\\n    }\\n\\n    /* ===== Configurable parameters ===== */\\n    /**\\n     * @notice Toggles a trusted contract to perform actions on behalf of user (eg. Kresko Zapper).\\n     * @param _trustedContract Contract to toggle the trusted status for.\\n     */\\n    function toggleTrustedContract(address _trustedContract) external onlyOwner {\\n        bool isTrusted = !trustedContracts[_trustedContract];\\n\\n        trustedContracts[_trustedContract] = isTrusted;\\n\\n        emit TrustedContract(_trustedContract, isTrusted);\\n    }\\n\\n    /**\\n     * @notice Updates the burn fee.\\n     * @param _burnFee The new burn fee as a raw value for a FixedPoint.Unsigned.\\n     */\\n    function updateBurnFee(uint256 _burnFee) public onlyOwner {\\n        require(_burnFee <= MAX_BURN_FEE, \\\"KR: burnFee > max\\\");\\n        burnFee = FixedPoint.Unsigned(_burnFee);\\n        emit BurnFeeUpdated(_burnFee);\\n    }\\n\\n    /**\\n     * @notice Updates the fee recipient.\\n     * @param _feeRecipient The new fee recipient.\\n     */\\n    function updateFeeRecipient(address _feeRecipient) public onlyOwner {\\n        require(_feeRecipient != address(0), \\\"KR: !feeRecipient\\\");\\n        feeRecipient = _feeRecipient;\\n        emit FeeRecipientUpdated(_feeRecipient);\\n    }\\n\\n    /**\\n     * @notice Updates the liquidation incentive multiplier.\\n     * @param _liquidationIncentiveMultiplier The new liquidation incentive multiplie.\\n     */\\n    function updateLiquidationIncentiveMultiplier(uint256 _liquidationIncentiveMultiplier) public onlyOwner {\\n        require(_liquidationIncentiveMultiplier >= MIN_LIQUIDATION_INCENTIVE_MULTIPLIER, \\\"KR: liqIncentiveMulti < min\\\");\\n        require(_liquidationIncentiveMultiplier <= MAX_LIQUIDATION_INCENTIVE_MULTIPLIER, \\\"KR: liqIncentiveMulti > max\\\");\\n        liquidationIncentiveMultiplier = FixedPoint.Unsigned(_liquidationIncentiveMultiplier);\\n        emit LiquidationIncentiveMultiplierUpdated(_liquidationIncentiveMultiplier);\\n    }\\n\\n    /**\\n     * @dev Updates the contract's collateralization ratio.\\n     * @param _minimumCollateralizationRatio The new minimum collateralization ratio as a raw value\\n     * for a FixedPoint.Unsigned.\\n     */\\n    function updateMinimumCollateralizationRatio(uint256 _minimumCollateralizationRatio) public onlyOwner {\\n        require(_minimumCollateralizationRatio >= MIN_COLLATERALIZATION_RATIO, \\\"KR: minCollateralRatio < min\\\");\\n        minimumCollateralizationRatio = FixedPoint.Unsigned(_minimumCollateralizationRatio);\\n        emit MinimumCollateralizationRatioUpdated(_minimumCollateralizationRatio);\\n    }\\n\\n    /**\\n     * @dev Updates the contract's minimum debt value.\\n     * @param _minimumDebtValue The new minimum debt value as a raw value for a FixedPoint.Unsigned.\\n     */\\n    function updateMinimumDebtValue(uint256 _minimumDebtValue) public onlyOwner {\\n        require(_minimumDebtValue <= MAX_DEBT_VALUE, \\\"KR: debtValue > max\\\");\\n        minimumDebtValue = FixedPoint.Unsigned(_minimumDebtValue);\\n        emit MinimumDebtValueUpdated(_minimumDebtValue);\\n    }\\n\\n    /**\\n     * @dev Updates the contract's seconds until stale price value\\n     * @param _secondsUntilStalePrice The new seconds until stale price.\\n     */\\n    function updateSecondsUntilStalePrice(uint256 _secondsUntilStalePrice) public onlyOwner {\\n        secondsUntilStalePrice = _secondsUntilStalePrice;\\n        emit SecondsUntilStalePriceUpdated(_secondsUntilStalePrice);\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============= Core internal functions ============\\n     * ==================================================\\n     */\\n\\n    /* ==== Collateral ==== */\\n\\n    /**\\n     * @notice Records account as having deposited an amount of a collateral asset.\\n     * @dev Token transfers are expected to be done by the caller.\\n     * @param _account The address of the collateral asset.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _amount The amount of the collateral asset deposited.\\n     */\\n    function _recordCollateralDeposit(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount\\n    ) internal {\\n        // Because the depositedCollateralAssets[_account] is pushed to if the existing\\n        // deposit amount is 0, require the amount to be > 0. Otherwise, the depositedCollateralAssets[_account]\\n        // could be filled with duplicates, causing collateral to be double-counted in the collateral value.\\n        require(_amount > 0, \\\"KR: 0-deposit\\\");\\n\\n        // If the account does not have an existing deposit for this collateral asset,\\n        // push it to the list of the account's deposited collateral assets.\\n        uint256 existingDepositAmount = collateralDeposits[_account][_collateralAsset];\\n        if (existingDepositAmount == 0) {\\n            depositedCollateralAssets[_account].push(_collateralAsset);\\n        }\\n        // Record the deposit.\\n        unchecked {\\n            collateralDeposits[_account][_collateralAsset] = existingDepositAmount + _amount;\\n        }\\n\\n        emit CollateralDeposited(_account, _collateralAsset, _amount);\\n    }\\n\\n    function _verifyAndRecordCollateralWithdrawal(\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _depositAmount,\\n        uint256 _depositedCollateralAssetIndex\\n    ) internal {\\n        require(_amount > 0, \\\"KR: 0-withdraw\\\");\\n\\n        // Ensure the withdrawal does not result in the account having a collateral value\\n        // under the minimum collateral amount required to maintain a healthy position.\\n        // I.e. the new account's collateral value must still exceed the account's minimum\\n        // collateral value.\\n        // Get the account's current collateral value.\\n        FixedPoint.Unsigned memory accountCollateralValue = getAccountCollateralValue(_account);\\n        // Get the collateral value that the account will lose as a result of this withdrawal.\\n        (FixedPoint.Unsigned memory withdrawnCollateralValue, ) = getCollateralValueAndOraclePrice(\\n            _collateralAsset,\\n            _amount,\\n            false // Take the collateral factor into consideration.\\n        );\\n        // Get the account's minimum collateral value.\\n        FixedPoint.Unsigned memory accountMinCollateralValue = getAccountMinimumCollateralValue(_account);\\n        // Require accountCollateralValue - withdrawnCollateralValue >= accountMinCollateralValue.\\n        require(\\n            accountCollateralValue.sub(withdrawnCollateralValue).isGreaterThanOrEqual(accountMinCollateralValue),\\n            \\\"KR: collateralTooLow\\\"\\n        );\\n\\n        // Record the withdrawal.\\n        collateralDeposits[_account][_collateralAsset] = _depositAmount - _amount;\\n\\n        // If the user is withdrawing all of the collateral asset, remove the collateral asset\\n        // from the user's deposited collateral assets array.\\n        if (_amount == _depositAmount) {\\n            depositedCollateralAssets[_account].removeAddress(_collateralAsset, _depositedCollateralAssetIndex);\\n        }\\n\\n        emit CollateralWithdrawn(_account, _collateralAsset, _amount);\\n    }\\n\\n    /* ==== Kresko Assets ==== */\\n\\n    /**\\n     * @notice Charges the protocol burn fee based off the value of the burned asset.\\n     * @dev Takes the fee from the account's collateral assets. Attempts collateral assets\\n     *   in reverse order of the account's deposited collateral assets array.\\n     * @param _account The account to charge the burn fee from.\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _kreskoAssetAmountBurned The amount of the kresko asset being burned.\\n     */\\n    function _chargeBurnFee(\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _kreskoAssetAmountBurned\\n    ) internal {\\n        KrAsset memory krAsset = kreskoAssets[_kreskoAsset];\\n        // Calculate the value of the fee according to the value of the krAssets being burned.\\n        FixedPoint.Unsigned memory feeValue = FixedPoint\\n            .Unsigned(uint256(krAsset.oracle.latestAnswer()))\\n            .mul(FixedPoint.Unsigned(_kreskoAssetAmountBurned))\\n            .mul(burnFee);\\n\\n        // Do nothing if the fee value is 0.\\n        if (feeValue.rawValue == 0) {\\n            return;\\n        }\\n\\n        address[] memory accountCollateralAssets = depositedCollateralAssets[_account];\\n        // Iterate backward through the account's deposited collateral assets to safely\\n        // traverse the array while still being able to remove elements if necessary.\\n        // This is because removing the last element of the array does not shift around\\n        // other elements in the array.\\n        for (uint256 i = accountCollateralAssets.length - 1; i >= 0; i--) {\\n            address collateralAssetAddress = accountCollateralAssets[i];\\n\\n            (uint256 transferAmount, FixedPoint.Unsigned memory feeValuePaid) = _calcBurnFee(\\n                collateralAssetAddress,\\n                _account,\\n                feeValue,\\n                i\\n            );\\n\\n            // Remove the transferAmount from the stored deposit for the account.\\n            collateralDeposits[_account][collateralAssetAddress] -= transferAmount;\\n            // Transfer the fee to the feeRecipient.\\n            IERC20MetadataUpgradeable(collateralAssetAddress).safeTransfer(feeRecipient, transferAmount);\\n            emit BurnFeePaid(_account, collateralAssetAddress, transferAmount, feeValuePaid.rawValue);\\n\\n            feeValue = feeValue.sub(feeValuePaid);\\n            // If the entire fee has been paid, no more action needed.\\n            if (feeValue.rawValue == 0) {\\n                return;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the burn fee for a burned asset.\\n     * @param _collateralAssetAddress The collateral asset from which to take to the fee.\\n     * @param _account The owner of the collateral.\\n     * @param _feeValue The original value of the fee.\\n     * @param _collateralAssetIndex The collateral asset's index in the user's depositedCollateralAssets array.\\n     * @return The transfer amount to be received as a uint256 and a FixedPoint.Unsigned\\n     * representing the fee value paid.\\n     */\\n    function _calcBurnFee(\\n        address _collateralAssetAddress,\\n        address _account,\\n        FixedPoint.Unsigned memory _feeValue,\\n        uint256 _collateralAssetIndex\\n    ) internal returns (uint256, FixedPoint.Unsigned memory) {\\n        uint256 depositAmount = collateralDeposits[_account][_collateralAssetAddress];\\n\\n        // Don't take the collateral asset's collateral factor into consideration.\\n        (\\n            FixedPoint.Unsigned memory depositValue,\\n            FixedPoint.Unsigned memory oraclePrice\\n        ) = getCollateralValueAndOraclePrice(_collateralAssetAddress, depositAmount, true);\\n\\n        FixedPoint.Unsigned memory feeValuePaid;\\n        uint256 transferAmount;\\n        // If feeValue < depositValue, the entire fee can be charged for this collateral asset.\\n        if (_feeValue.isLessThan(depositValue)) {\\n            // We want to make sure that transferAmount is < depositAmount.\\n            // Proof:\\n            //   depositValue <= oraclePrice * depositAmount (<= due to a potential loss of precision)\\n            //   feeValue < depositValue\\n            // Meaning:\\n            //   feeValue < oraclePrice * depositAmount\\n            // Solving for depositAmount we get:\\n            //   feeValue / oraclePrice < depositAmount\\n            // Due to integer division:\\n            //   transferAmount = floor(feeValue / oracleValue)\\n            //   transferAmount <= feeValue / oraclePrice\\n            // We see that:\\n            //   transferAmount <= feeValue / oraclePrice < depositAmount\\n            //   transferAmount < depositAmount\\n            transferAmount = collateralAssets[_collateralAssetAddress].decimals._fromCollateralFixedPointAmount(\\n                _feeValue.div(oraclePrice)\\n            );\\n            feeValuePaid = _feeValue;\\n        } else {\\n            // If the feeValue >= depositValue, the entire deposit\\n            // should be taken as the fee.\\n            transferAmount = depositAmount;\\n            feeValuePaid = depositValue;\\n            // Because the entire deposit is taken, remove it from the depositCollateralAssets array.\\n            depositedCollateralAssets[_account].removeAddress(_collateralAssetAddress, _collateralAssetIndex);\\n        }\\n        return (transferAmount, feeValuePaid);\\n    }\\n\\n    /* ==== Liquidation ==== */\\n\\n    /**\\n     * @notice Calculates the liquidation incentive collateral amount to be sent to the liquidator\\n     * @param _repayKreskoAsset krAsset debt to be repaid.\\n     * @param _repayAmount krAsset amount to be repaid.\\n     * @param _seizeAmount The calculated amount of collateral assets to be seized.\\n     * @param _repayAmountUSD Total USD value of krAsset repayment.\\n     * @param _collateralPriceUSD Single collateral units USD price.\\n     */\\n    function _calculateCollateralToSendAndAdjustDebt(\\n        address _collateralSeized,\\n        address _repayKreskoAsset,\\n        uint256 _repayAmount,\\n        uint256 _seizeAmount,\\n        FixedPoint.Unsigned memory _repayAmountUSD,\\n        FixedPoint.Unsigned memory _collateralPriceUSD\\n    ) internal returns (uint256) {\\n        uint256 liquidatorDebtBeforeRepay = kreskoAssetDebt[msg.sender][_repayKreskoAsset];\\n\\n        // If liquidator has no debt remaining set the debt to 0\\n        uint256 liquidatorDebtAfterRepay = liquidatorDebtBeforeRepay > _repayAmount\\n            ? liquidatorDebtBeforeRepay - _repayAmount\\n            : 0;\\n\\n        if (liquidatorDebtBeforeRepay > 0 && liquidatorDebtAfterRepay == 0) {\\n            kreskoAssetDebt[msg.sender][_repayKreskoAsset] = liquidatorDebtAfterRepay;\\n            uint256 liquidatorRepayIndex;\\n            address[] memory liquidatorAssets = mintedKreskoAssets[msg.sender];\\n\\n            for (liquidatorRepayIndex; liquidatorRepayIndex < liquidatorAssets.length; liquidatorRepayIndex++) {\\n                if (liquidatorAssets[liquidatorRepayIndex] == _repayKreskoAsset) break;\\n            }\\n            mintedKreskoAssets[msg.sender].removeAddress(_repayKreskoAsset, liquidatorRepayIndex);\\n        }\\n\\n        uint256 decimals = collateralAssets[_collateralSeized].decimals;\\n        FixedPoint.Unsigned memory seizedAmountUSD = decimals._toCollateralFixedPointAmount(_seizeAmount).mul(\\n            _collateralPriceUSD\\n        );\\n\\n        return decimals._fromCollateralFixedPointAmount(seizedAmountUSD.sub(_repayAmountUSD).div(_collateralPriceUSD));\\n    }\\n\\n    /**\\n     * @notice Remove Kresko assets and collateral assets from the liquidated user's holdings.\\n     * @param _account The account to attempt to liquidate.\\n     * @param _krAssetDebt The amount of Kresko assets that the liquidated user owes.\\n     * @param _repayAmount The amount of the Kresko asset to be repaid.\\n     * @param _seizeAmount The calculated amount of collateral assets to be seized.\\n     * @param _repayKreskoAsset The address of the Kresko asset to be repaid.\\n     * @param _mintedKreskoAssetIndex The index of the Kresko asset in the user's minted assets array.\\n     * @param _collateralAssetToSeize The address of the collateral asset to be seized.\\n     * @param _depositedCollateralAssetIndex The index of the collateral asset in the account's collateral assets array.\\n     */\\n    function _liquidateAssets(\\n        address _account,\\n        uint256 _krAssetDebt,\\n        uint256 _repayAmount,\\n        uint256 _seizeAmount,\\n        address _repayKreskoAsset,\\n        uint256 _mintedKreskoAssetIndex,\\n        address _collateralAssetToSeize,\\n        uint256 _depositedCollateralAssetIndex\\n    ) internal returns (uint256) {\\n        // Subtract repaid Kresko assets from liquidated user's recorded debt.\\n        kreskoAssetDebt[_account][_repayKreskoAsset] = _krAssetDebt - _repayAmount;\\n        // If the liquidation repays the user's entire Kresko asset balance, remove it from minted assets array.\\n        if (_repayAmount == _krAssetDebt) {\\n            mintedKreskoAssets[_account].removeAddress(_repayKreskoAsset, _mintedKreskoAssetIndex);\\n        }\\n\\n        // Get users collateral deposit amount\\n        uint256 collateralDeposit = collateralDeposits[_account][_collateralAssetToSeize];\\n\\n        if (collateralDeposit > _seizeAmount) {\\n            collateralDeposits[_account][_collateralAssetToSeize] = collateralDeposit - _seizeAmount;\\n        } else {\\n            // This clause means user either has collateralDeposits equal or less than the _seizeAmount\\n            _seizeAmount = collateralDeposit;\\n            // So we set the collateralDeposits to 0\\n            collateralDeposits[_account][_collateralAssetToSeize] = 0;\\n            // And remove the asset from the deposits array.\\n            depositedCollateralAssets[_account].removeAddress(_collateralAssetToSeize, _depositedCollateralAssetIndex);\\n        }\\n\\n        // Return the actual amount seized\\n        return _seizeAmount;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============== Public view functions =============\\n     * ==================================================\\n     */\\n\\n    /* ==== Collateral ==== */\\n    /**\\n     * @notice Returns true if the @param _collateralAsset exists in the protocol\\n     */\\n    function collateralExists(address _collateralAsset) external view returns (bool) {\\n        return collateralAssets[_collateralAsset].exists;\\n    }\\n\\n    /**\\n     * @notice Gets an array of collateral assets the account has deposited.\\n     * @param _account The account to get the deposited collateral assets for.\\n     * @return An array of addresses of collateral assets the account has deposited.\\n     */\\n    function getDepositedCollateralAssets(address _account) external view returns (address[] memory) {\\n        return depositedCollateralAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Gets an index for the collateral asset the account has deposited.\\n     * @param _account The account to get the index for.\\n     * @param _collateralAsset The asset lookup address.\\n     * @return i = index of the minted collateral asset.\\n     */\\n    function getDepositedCollateralAssetIndex(address _account, address _collateralAsset)\\n        public\\n        view\\n        returns (uint256 i)\\n    {\\n        for (i; i < depositedCollateralAssets[_account].length; i++) {\\n            if (depositedCollateralAssets[_account][i] == _collateralAsset) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value of a particular account.\\n     * @dev O(# of different deposited collateral assets by account) complexity.\\n     * @param _account The account to calculate the collateral value for.\\n     * @return The collateral value of a particular account.\\n     */\\n    function getAccountCollateralValue(address _account) public view returns (FixedPoint.Unsigned memory) {\\n        FixedPoint.Unsigned memory totalCollateralValue = FixedPoint.Unsigned(0);\\n\\n        address[] memory assets = depositedCollateralAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (FixedPoint.Unsigned memory collateralValue, ) = getCollateralValueAndOraclePrice(\\n                asset,\\n                collateralDeposits[_account][asset],\\n                false // Take the collateral factor into consideration.\\n            );\\n            totalCollateralValue = totalCollateralValue.add(collateralValue);\\n        }\\n\\n        return totalCollateralValue;\\n    }\\n\\n    /**\\n     * @notice Gets an account's minimum collateral value for its Kresko Asset debts.\\n     * @dev Accounts that have their collateral value under the minimum collateral value are considered unhealthy\\n     * and therefore to avoid liquidations users should maintain a collateral value higher than the value returned.\\n     * @param _account The account to calculate the minimum collateral value for.\\n     * @return The minimum collateral value of a particular account.\\n     */\\n    function getAccountMinimumCollateralValue(address _account) public view returns (FixedPoint.Unsigned memory) {\\n        FixedPoint.Unsigned memory minCollateralValue = FixedPoint.Unsigned(0);\\n\\n        address[] memory assets = mintedKreskoAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            uint256 amount = kreskoAssetDebt[_account][asset];\\n            minCollateralValue = minCollateralValue.add(getMinimumCollateralValue(asset, amount));\\n        }\\n\\n        return minCollateralValue;\\n    }\\n\\n    /**\\n     * @notice Get the minimum collateral value required to keep a individual debt position healthy.\\n     * @param _krAsset The address of the Kresko asset.\\n     * @param _amount The Kresko Asset debt amount.\\n     * @return minCollateralValue is the minimum collateral value required for this Kresko Asset amount.\\n     */\\n    function getMinimumCollateralValue(address _krAsset, uint256 _amount)\\n        public\\n        view\\n        kreskoAssetExistsMaybeNotMintable(_krAsset)\\n        returns (FixedPoint.Unsigned memory minCollateralValue)\\n    {\\n        // Calculate the Kresko asset's value weighted by its k-factor.\\n        FixedPoint.Unsigned memory weightedKreskoAssetValue = getKrAssetValue(_krAsset, _amount, false);\\n        // Calculate the minimum collateral required to back this Kresko asset amount.\\n        return weightedKreskoAssetValue.mul(minimumCollateralizationRatio);\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value for a single collateral asset and amount.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _amount The amount of the collateral asset to calculate the collateral value for.\\n     * @param _ignoreCollateralFactor Boolean indicating if the asset's collateral factor should be ignored.\\n     * @return The collateral value for the provided amount of the collateral asset.\\n     */\\n    function getCollateralValueAndOraclePrice(\\n        address _collateralAsset,\\n        uint256 _amount,\\n        bool _ignoreCollateralFactor\\n    ) public view returns (FixedPoint.Unsigned memory, FixedPoint.Unsigned memory) {\\n        CollateralAsset memory collateralAsset = collateralAssets[_collateralAsset];\\n\\n        FixedPoint.Unsigned memory fixedPointAmount = collateralAsset.decimals._toCollateralFixedPointAmount(_amount);\\n        FixedPoint.Unsigned memory oraclePrice = FixedPoint.Unsigned(uint256(collateralAsset.oracle.latestAnswer()));\\n        FixedPoint.Unsigned memory value = fixedPointAmount.mul(oraclePrice);\\n\\n        if (!_ignoreCollateralFactor) {\\n            value = value.mul(collateralAsset.factor);\\n        }\\n        return (value, oraclePrice);\\n    }\\n\\n    /* ==== Kresko Assets ==== */\\n\\n    /**\\n     * @notice Returns true if the @param _krAsset exists in the protocol\\n     */\\n    function krAssetExists(address _krAsset) external view returns (bool) {\\n        return kreskoAssets[_krAsset].exists;\\n    }\\n\\n    /**\\n     * @notice Gets an array of Kresko assets the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @return An array of addresses of Kresko assets the account has minted.\\n     */\\n    function getMintedKreskoAssets(address _account) external view returns (address[] memory) {\\n        return mintedKreskoAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Gets an index for the Kresko asset the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @param _kreskoAsset The asset lookup address.\\n     * @return i = index of the minted Kresko asset.\\n     */\\n    function getMintedKreskoAssetsIndex(address _account, address _kreskoAsset) public view returns (uint256 i) {\\n        for (i; i < mintedKreskoAssets[_account].length; i++) {\\n            if (mintedKreskoAssets[_account][i] == _kreskoAsset) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the Kresko asset value in USD of a particular account.\\n     * @param _account The account to calculate the Kresko asset value for.\\n     * @return The Kresko asset value of a particular account.\\n     */\\n    function getAccountKrAssetValue(address _account) public view returns (FixedPoint.Unsigned memory) {\\n        FixedPoint.Unsigned memory value = FixedPoint.Unsigned(0);\\n\\n        address[] memory assets = mintedKreskoAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            value = value.add(getKrAssetValue(asset, kreskoAssetDebt[_account][asset], false));\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @notice Gets the USD value for a single Kresko asset and amount.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _amount The amount of the Kresko asset to calculate the value for.\\n     * @param _ignoreKFactor Boolean indicating if the asset's k-factor should be ignored.\\n     * @return The value for the provided amount of the Kresko asset.\\n     */\\n    function getKrAssetValue(\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        bool _ignoreKFactor\\n    ) public view returns (FixedPoint.Unsigned memory) {\\n        KrAsset memory krAsset = kreskoAssets[_kreskoAsset];\\n\\n        FixedPoint.Unsigned memory oraclePrice = FixedPoint.Unsigned(uint256(krAsset.oracle.latestAnswer()));\\n\\n        FixedPoint.Unsigned memory value = FixedPoint.Unsigned(_amount).mul(oraclePrice);\\n\\n        if (!_ignoreKFactor) {\\n            value = value.mul(krAsset.kFactor);\\n        }\\n\\n        return value;\\n    }\\n\\n    /* ==== Liquidation ==== */\\n\\n    /**\\n     * @notice Calculates if an account's current collateral value is under its minimum collateral value\\n     * @dev Returns true if the account's current collateral value is below the minimum collateral value\\n     * required to consider the position healthy.\\n     * @param _account The account to check.\\n     * @return A boolean indicating if the account can be liquidated.\\n     */\\n    function isAccountLiquidatable(address _account) public view returns (bool) {\\n        // Get the value of the account's current deposited collateral.\\n        FixedPoint.Unsigned memory accountCollateralValue = getAccountCollateralValue(_account);\\n        // Get the account's current minimum collateral value required to maintain current debts.\\n        FixedPoint.Unsigned memory minAccountCollateralValue = getAccountMinimumCollateralValue(_account);\\n\\n        return accountCollateralValue.isLessThan(minAccountCollateralValue);\\n    }\\n\\n    /**\\n     * @dev Calculates the total value that can be liquidated for a liquidation pair\\n     * @param _account address to liquidate\\n     * @param _repayKreskoAsset address of the kreskoAsset being repaid on behalf of the liquidatee\\n     * @param _collateralAssetToSeize address of the collateral asset being seized from the liquidatee\\n     * @return maxLiquidatableUSD USD value that can be liquidated, 0 if the pair has no liquidatable value\\n     */\\n    function calculateMaxLiquidatableValueForAssets(\\n        address _account,\\n        address _repayKreskoAsset,\\n        address _collateralAssetToSeize\\n    ) public view returns (FixedPoint.Unsigned memory maxLiquidatableUSD) {\\n        // Minimum collateral value required for the krAsset position\\n        FixedPoint.Unsigned memory minCollateralValue = getMinimumCollateralValue(\\n            _repayKreskoAsset,\\n            kreskoAssetDebt[_account][_repayKreskoAsset]\\n        );\\n\\n        // Collateral value for this position\\n        (FixedPoint.Unsigned memory collateralValueAvailable, ) = getCollateralValueAndOraclePrice(\\n            _collateralAssetToSeize,\\n            collateralDeposits[_account][_collateralAssetToSeize],\\n            false // take cFactor into consideration\\n        );\\n        if (collateralValueAvailable.isGreaterThanOrEqual(minCollateralValue)) {\\n            return FixedPoint.Unsigned(0);\\n        } else {\\n            // Get the factors of the assets\\n            FixedPoint.Unsigned memory kFactor = kreskoAssets[_repayKreskoAsset].kFactor;\\n            FixedPoint.Unsigned memory cFactor = collateralAssets[_collateralAssetToSeize].factor;\\n\\n            // Calculate how much value is under\\n            FixedPoint.Unsigned memory valueUnderMin = minCollateralValue.sub(collateralValueAvailable);\\n\\n            // Get the divisor which calculates the max repayment from the underwater value\\n            FixedPoint.Unsigned memory repayDivisor = kFactor.mul(minimumCollateralizationRatio).sub(\\n                liquidationIncentiveMultiplier.sub(burnFee).mul(cFactor)\\n            );\\n\\n            // Max repayment value for this pair\\n            maxLiquidatableUSD = valueUnderMin.div(repayDivisor);\\n\\n            // Get the future collateral value that is being used for the liquidation\\n            FixedPoint.Unsigned memory collateralValueRepaid = maxLiquidatableUSD.div(\\n                kFactor.mul(liquidationIncentiveMultiplier.add(burnFee))\\n            );\\n\\n            // If it's more than whats available get the max value from how much value is available instead.\\n            if (collateralValueRepaid.isGreaterThan(collateralValueAvailable)) {\\n                // Reverse the divisor formula to achieve the max repayment from available collateral.\\n                // We end up here if the user has multiple positions with different risk profiles.\\n                maxLiquidatableUSD = collateralValueAvailable.div(collateralValueRepaid.div(valueUnderMin));\\n            }\\n\\n            // Cascade the liquidations if user has multiple collaterals and cFactor < 1.\\n            // This is desired because pairs with low cFactor have higher collateral requirement\\n            // than positions with high cFactor.\\n\\n            // Main reason here is keep the liquidations from happening only on pairs that have a high risk profile.\\n            if (depositedCollateralAssets[_account].length > 1 && cFactor.isLessThan(ONE_HUNDRED_PERCENT)) {\\n                // To mitigate:\\n                // cFactor^4 the collateral available (cFactor = 1 == nothing happens)\\n                // Get the ratio between max liquidatable USD and diminished collateral available\\n                // = (higher value -> higher the risk ratio of this pair)\\n                // Divide the maxValue by this ratio and a diminishing max value is returned.\\n\\n                // For a max profit liquidation strategy jumps to other pairs must happen before\\n                // the liquidation value of the risky position becomes the most profitable again.\\n\\n                return\\n                    maxLiquidatableUSD.div(maxLiquidatableUSD.div(collateralValueAvailable.mul(cFactor.pow(4)))).mul(\\n                        // Include a burnFee surplus in the liquidation\\n                        // so the users can repay their debt.\\n                        FixedPoint.Unsigned(ONE_HUNDRED_PERCENT).add(burnFee)\\n                    );\\n            } else {\\n                // For collaterals with cFactor = 1 / accounts with only single collateral\\n                // the debt is just repaid in full with a single transaction\\n                return maxLiquidatableUSD.mul(FixedPoint.Unsigned(ONE_HUNDRED_PERCENT).add(burnFee));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea2e850fe1ad2b6ea8a4dd747c40a0f193e424a93c740e165cc5f1dd4b26b342\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xf5d053ccdcb838a44b17af1f8b5b2b60f890108effcec69377cb81796fe9278c\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x70df2712dd3b85c753ff4cee292af93e81c5bf616983e4cbc94f692555362393\",\"license\":\"MIT\"},\"src/contracts/flux/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x710f75b7d73282a87a60c5a9d1e6d1cfdd6cdf80ccf6a22982d20a1d6a24c7ce\",\"license\":\"MIT\"},\"src/contracts/interfaces/IKreskoAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\ninterface IKreskoAsset is IERC20MetadataUpgradeable {\\n    /**\\n     * @notice returns the operator role hash\\n     */\\n    function OPERATOR_ROLE() external returns (bytes32);\\n\\n    /**\\n     * @notice Mints tokens to an address.\\n     * @dev Only callable by owner.\\n     * @param _account The recipient address of the mint.\\n     * @param _amount The amount of tokens to mint.\\n     */\\n    function mint(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @notice Burns tokens from an address that have been approved to the sender.\\n     * @dev Only callable by owner which must have the appropriate allowance for _account.\\n     * @param _account The address to burn tokens from.\\n     * @param _amount The amount of tokens to burn.\\n     */\\n    function burn(address _account, uint256 _amount) external;\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external returns (bool);\\n}\\n\",\"keccak256\":\"0x752878132523b5ea5a037c80c1fd51d168bcfdc8c26dcf0e63f83d4a980071ec\",\"license\":\"MIT\"},\"src/contracts/interfaces/INonRebasingWrapperToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../libraries/FixedPoint.sol\\\";\\n\\n/**\\n * @title A non-rebasing wrapper token.\\n * @notice A non-rebasing token that wraps rebasing tokens to present a balance for each user that\\n *   does not change from exogenous events.\\n */\\ninterface INonRebasingWrapperToken is IERC20Upgradeable {\\n    // Emitted when underlying tokens have been deposited, minting this token.\\n    event DepositedUnderlying(address indexed account, uint256 underlyingDepositAmount, uint256 mintAmount);\\n    // Emitted when underlying tokens have been withdrawn, burning this token.\\n    event WithdrewUnderlying(address indexed account, uint256 underlyingWithdrawAmount, uint256 burnAmount);\\n\\n    /// @notice The underlying token that this contract wraps.\\n    function underlyingToken() external returns (address);\\n\\n    /**\\n     * @notice Deposits an amount of the underlying token, minting an amount of this token\\n     *   according to the deposit amount.\\n     * @dev The amount of the underlying deposited that's used in any calculations is\\n     *   the difference in this contract's balance after transferring in underlyingDepositAmount.\\n     * @param _underlyingDepositAmount The amount of the underlying token to transfer in as a deposit.\\n     * @return The amount of this token that was minted for the deposit.\\n     */\\n    function depositUnderlying(uint256 _underlyingDepositAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Withdraws an underlying token amount corresponding to the provided\\n     *   amount of this token, burning the tokens.\\n     * @param _nonRebasingWithdrawalAmount Denominated in this token, the amount\\n     *   to burn. Used to calculate the amount of underlying tokens that are withdrawn as a result.\\n     * @return The amount of the rebasing underlying token withdrawn.\\n     */\\n    function withdrawUnderlying(uint256 _nonRebasingWithdrawalAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Gets the amount of the underlying tokens an account owns based off their\\n     *   balance of this token.\\n     * @param _account The account to view the underlying balance of.\\n     * @return The amount of underlying tokens the account owns in this contract.\\n     */\\n    function balanceOfUnderlying(address _account) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the amount of underlying tokens corresponding to a provided amount of this contract's tokens.\\n     * @dev Loss of precision could result in a marginally lower amount returned, but should never\\n     *   result in a higher value than intended. Dust from any lower amounts that are withdrawn\\n     *   effectively accumulate to the rest of token holders.\\n     * @param _nonRebasingAmount The non-rebasing amount of tokens, i.e. denominated in this contract's tokens.\\n     * @return The amount of underlying tokens corresponding to nonRebasingAmount of this contract's tokens.\\n     */\\n    function getUnderlyingAmount(uint256 _nonRebasingAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf47a443fd0ed46b6cbbd07e82d558c455a3aa46ef3f119e87a5957dec351d3ce\",\"license\":\"MIT\"},\"src/contracts/libraries/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\n/**\\n * @title Library for operations on arrays\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Removes an element by copying the last element to the element to remove's place and removing\\n     * the last element.\\n     * @param _addresses The address array containing the item to be removed.\\n     * @param _elementToRemove The element to be removed.\\n     * @param _elementIndex The index of the element to be removed.\\n     */\\n    function removeAddress(\\n        address[] storage _addresses,\\n        address _elementToRemove,\\n        uint256 _elementIndex\\n    ) internal {\\n        require(_addresses[_elementIndex] == _elementToRemove, \\\"Arrays: incorrect removal index\\\");\\n\\n        uint256 lastIndex = _addresses.length - 1;\\n        // If the index to remove is not the last one, overwrite the element at the index\\n        // with the last element.\\n        if (_elementIndex != lastIndex) {\\n            _addresses[_elementIndex] = _addresses[lastIndex];\\n        }\\n        // Remove the last element.\\n        _addresses.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x4f514e271696d6c131528c3299d83298cee62a03f23674a124350cddd6865370\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMathUpgradeable for uint256;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    uint256 internal constant FP_DECIMALS = 18;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 internal constant FP_SCALING_FACTOR = 10**FP_DECIMALS;\\n\\n    // --------------------------------------- UNSIGNED ---------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED ------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored\\n    //   internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------- Additional Fixed Point math functions specific to Kresko protocol -------------------\\n\\n    /**\\n    //  * @notice Calculate amount of collateral to seize during the liquidation process.\\n    //  * @param _collateralOraclePriceUSD The address of the collateral asset to be seized.\\n    //  * @param _kreskoAssetRepayAmountUSD Kresko asset amount being repaid in exchange for the seized collateral.\\n    //  */\\n    function _calculateAmountToSeize(\\n        Unsigned memory _liquidationIncentiveMultiplier,\\n        Unsigned memory _collateralOraclePriceUSD,\\n        Unsigned memory _kreskoAssetRepayAmountUSD\\n    ) internal pure returns (Unsigned memory) {\\n        // Seize amount = (repay amount USD * liquidation incentive / collateral price USD).\\n        // Denominate seize amount in collateral type\\n        // Apply liquidation incentive multiplier\\n        return div(mul(_kreskoAssetRepayAmountUSD, _liquidationIncentiveMultiplier), _collateralOraclePriceUSD);\\n    }\\n}\\n\",\"keccak256\":\"0xcd7b7b06bb113139757fddc04ed987ecf53edda5b3811f1713c911b6a8261195\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libraries/FixedPointMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.4;\\n\\nimport \\\"./FixedPoint.sol\\\";\\n\\n/**\\n * @title Library for Kresko specific math involving floating point arithmetic\\n */\\n\\n library FixedPointMath {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /**\\n     * @notice For a given collateral asset and amount, returns a FixedPoint.Unsigned representation.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals > 18, there may be a loss of precision.\\n     * @param _collateralAssetDecimals The collateral asset's number of decimals\\n     * @param _amount The amount of the collateral asset.\\n     * @return A FixedPoint.Unsigned of amount scaled according to the collateral asset's decimals.\\n     */\\n    function _toCollateralFixedPointAmount(uint256 _collateralAssetDecimals, uint256 _amount)\\n        internal\\n        pure\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        // Initially, use the amount as the raw value for the FixedPoint.Unsigned,\\n        // which internally uses FixedPoint.FP_DECIMALS (18) decimals. Most collateral\\n        // assets will have 18 decimals.\\n        FixedPoint.Unsigned memory fixedPointAmount = FixedPoint.Unsigned(_amount);\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_collateralAssetDecimals < FixedPoint.FP_DECIMALS) {\\n            // If the decimals are less than 18, multiply the amount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token of a 17 decimal token will  cause the\\n            // initial setting of amount to be 0.1, so we multiply\\n            // by 10 ** (18 - 17) = 10 to get it to 0.1 * 10 = 1.\\n            return fixedPointAmount.mul(10**(FixedPoint.FP_DECIMALS - _collateralAssetDecimals));\\n        } else if (_collateralAssetDecimals > FixedPoint.FP_DECIMALS) {\\n            // If the decimals are greater than 18, divide the amount\\n            // to get the correct fixed point value.\\n            // Note because FixedPoint numbers are 18 decimals, this results\\n            // in loss of precision. E.g. if the collateral asset has 19\\n            // decimals and the deposit amount is only 1 uint, this will divide\\n            // 1 by 10 ** (19 - 18), resulting in 1 / 10 = 0\\n            return fixedPointAmount.div(10**(_collateralAssetDecimals - FixedPoint.FP_DECIMALS));\\n        }\\n        return fixedPointAmount;\\n    }\\n\\n    /**\\n     * @notice For a given collateral asset and fixed point amount, i.e. where a rawValue of 1e18 is equal to 1\\n     *   whole token, returns the amount according to the collateral asset's decimals.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals < 18, there may be a loss of precision.\\n     * @param _collateralAssetDecimals The collateral asset's number of decimals\\n     * @param _fixedPointAmount The fixed point amount of the collateral asset.\\n     * @return An amount that is compatible with the collateral asset's decimals.\\n     */\\n    function _fromCollateralFixedPointAmount(\\n            uint256 _collateralAssetDecimals,\\n            FixedPoint.Unsigned memory _fixedPointAmount\\n        )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // Initially, use the rawValue, which internally uses FixedPoint.FP_DECIMALS (18) decimals\\n        // Most collateral assets will have 18 decimals.\\n        uint256 amount = _fixedPointAmount.rawValue;\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_collateralAssetDecimals < FixedPoint.FP_DECIMALS) {\\n            // If the decimals are less than 18, divide the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 17 decimals, divide by 10 ** (18 - 17) = 10\\n            // to get a value of 1e17.\\n            // This may result in a loss of precision.\\n            return amount / (10**(FixedPoint.FP_DECIMALS - _collateralAssetDecimals));\\n        } else if (_collateralAssetDecimals > FixedPoint.FP_DECIMALS) {\\n            // If the decimals are greater than 18, multiply the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 19 decimals, multiply by 10 ** (19 - 18) = 10\\n            // to get a value of 1e19.\\n            return amount * (10**(_collateralAssetDecimals - FixedPoint.FP_DECIMALS));\\n        }\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x6fda100a0bcff5fcbe4ec9915ae64bdd812af0f59fe328874324664de20c9e8d\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/utils/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * @dev NOTE: Ownership cannot be renounced as {renounceOwnership} is removed from the implementation.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * The ownership is transferred as a 2-step process:\\n * Calling {transferOwnership} will set the new owner as _pendingOwner\\n * the {pendingOwner} needs to claim the ownership through {claimOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event PendingOwnershipTransfer(address indexed previousOwner, address indexed pendingOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _owner = _msgSender();\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setPendingOwner(newOwner);\\n    }\\n\\n    /// @notice Needs to be called by pending owner to claim ownership.\\n    function claimOwnership() public {\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(_owner, _pendingOwner);\\n        _owner = _pendingOwner;\\n        _pendingOwner = address(0);\\n    }\\n\\n    function _setPendingOwner(address newOwner) private {\\n        _pendingOwner = newOwner;\\n        emit PendingOwnershipTransfer(_owner, newOwner);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbe9e6a9e522fe9861813f20e0eef474685db01b66363b9ac968bd1434f6d8a0e\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b6200430f1760201c565b15905090565b3b151590565b615d9f80620001126000396000f3fe608060405234801561001057600080fd5b50600436106103835760003560e01c8063b204f155116101de578063e3f06d7b1161010f578063f5e6546c116100ad578063fcf6b5851161007c578063fcf6b5851461092d578063fe87151414610940578063fe93ec0614610848578063ff1389c51461095357600080fd5b8063f5e6546c146108ea578063f970c3b7146108fd578063f9bbba4a14610910578063fce589d81461092357600080fd5b8063edbcc146116100e9578063edbcc14614610848578063efa80e86146108b1578063f160d369146108c4578063f2fde38b146108d757600080fd5b8063e3f06d7b14610868578063e419f7091461087b578063e5919a4f1461088e57600080fd5b8063ca5115a21161017c578063d63b4a6611610156578063d63b4a66146107a2578063d7bfcecd146107b5578063dd0081c714610848578063e30c39781461085757600080fd5b8063ca5115a214610772578063cc530a4b14610785578063d127bad11461079857600080fd5b8063c18ed630116101b8578063c18ed6301461072d578063c744ebf114610740578063c8b91e281461074f578063c94ca11e1461075f57600080fd5b8063b204f155146106fe578063b58cfb0b14610711578063be2801b51461071a57600080fd5b806350e8676c116102b857806371e36753116102565780638da5cb5b116102305780638da5cb5b146106775780638fbce768146106885780639b177c1914610692578063a61d1d51146106c857600080fd5b806371e367531461063e5780637932d4cf146106515780637d1a44501461066457600080fd5b806369a7d52c1161029257806369a7d52c146105e55780636bf72d1d146105f85780636cceec251461060b5780636d38822a1461061e57600080fd5b806350e8676c1461052a578063539097271461053857806355ebc57a146105d257600080fd5b80632f3bc67a116103255780633a2d4eb6116102ff5780633a2d4eb6146104bc5780633ae000c0146104cf57806346904840146104f75780634e71e0c81461052257600080fd5b80632f3bc67a1461047457806334923cd81461048757806337e6c1fd146104b257600080fd5b806312dd8bdb1161036157806312dd8bdb146103fd5780631593738214610410578063166e3a05146104235780632dd555cd1461046157600080fd5b8063052dda6f14610388578063067dc289146103af5780630c65e07b146103c4575b600080fd5b61039b61039636600461557b565b610966565b604051905181526020015b60405180910390f35b6103c26103bd3660046155a7565b610a19565b005b6103ef6103d23660046155ed565b60a060209081526000928352604080842090915290825290205481565b6040519081526020016103a6565b6103c261040b366004615626565b610d6c565b6103c261041e36600461564d565b610ea2565b6104516104313660046156de565b805160208183018101805160a38252928201919093012091525460ff1681565b60405190151581526020016103a6565b6103c261046f36600461578f565b611504565b6103ef6104823660046155ed565b6116bf565b6103ef6104953660046155ed565b60a460209081526000928352604080842090915290825290205481565b609b546103ef9081565b6103c26104ca366004615626565b611749565b6104e26104dd3660046157d1565b611827565b604080519251835290516020830152016103a6565b609a5461050a906001600160a01b031681565b6040516001600160a01b0390911681526020016103a6565b6103c261195b565b6103ef66b1a2bc2ec5000081565b610598610546366004615808565b609f60209081526000918252604091829020825191820190925281548152600182015460029092015490916001600160a01b03908116919081169060ff600160a01b8204811691600160a81b90041685565b60408051955186526001600160a01b039485166020870152929093169184019190915260ff1660608301521515608082015260a0016103a6565b6103c26105e0366004615825565b611a1b565b61039b6105f33660046157d1565b611d95565b6103c2610606366004615880565b611ebf565b6103c26106193660046158d0565b611fbc565b61063161062c366004615808565b6124d4565b6040516103a6919061597c565b6103c261064c366004615626565b61254a565b61039b61065f3660046159c9565b612627565b61039b610672366004615808565b6128c2565b6033546001600160a01b031661050a565b609d546103ef9081565b6104516106a0366004615808565b6001600160a01b0316600090815260a26020526040902060010154600160a01b900460ff1690565b6104516106d6366004615808565b6001600160a01b03166000908152609f6020526040902060020154600160a81b900460ff1690565b6103c261070c366004615808565b6129d7565b6103ef609e5481565b610451610728366004615808565b612a7a565b61050a61073b36600461557b565b612aa9565b6103ef671158e460913d000081565b6103ef683635c9adc5dea0000081565b6103c261076d366004615a09565b612ae1565b6103c2610780366004615a5c565b612efd565b6103c26107933660046155a7565b6131c8565b609c546103ef9081565b6103ef6107b03660046155ed565b613442565b6108116107c3366004615808565b60a260209081526000918252604091829020825191820190925281548152600182015460029092015490916001600160a01b0381169160ff600160a01b8304811692600160a81b9004169085565b60408051955186526001600160a01b039094166020860152911515928401929092529015156060830152608082015260a0016103a6565b6103ef670de0b6b3a764000081565b6034546001600160a01b031661050a565b6103c2610876366004615a5c565b6134c6565b61050a61088936600461557b565b613ad1565b61045161089c366004615808565b60986020526000908152604090205460ff1681565b6106316108bf366004615808565b613aed565b6103c26108d2366004615808565b613b61565b6103c26108e5366004615808565b613c49565b6103c26108f83660046155a7565b613d19565b6103c261090b366004615a5c565b613eb6565b6103c261091e366004615626565b613fa5565b6099546103ef9081565b6103c261093b366004615626565b614084565b61039b61094e366004615808565b6140ff565b61039b610961366004615808565b614207565b6040805160208101909152600081526001600160a01b038316600090815260a260205260409020600101548390600160a01b900460ff166109e25760405162461bcd60e51b815260206004820152601160248201527012d48e88085adc905cdcd95d115e1a5cdd607a1b60448201526064015b60405180910390fd5b60006109f085856000611d95565b6040805160208101909152609c548152909150610a0e908290614315565b9250505b5092915050565b60026066541415610a6c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109d9565b60026066556001600160a01b038316600090815260a260205260409020600101548390600160a01b900460ff16610ad95760405162461bcd60e51b815260206004820152601160248201527012d48e88085adc905cdcd95d115e1a5cdd607a1b60448201526064016109d9565b6001600160a01b0385163314801590610b4b573360009081526098602052604090205460ff16610b4b5760405162461bcd60e51b815260206004820152601760248201527f4b523a20556e617574686f72697a65642063616c6c657200000000000000000060448201526064016109d9565b60008411610b9b5760405162461bcd60e51b815260206004820152600a60248201527f4b523a20302d6275726e0000000000000000000000000000000000000000000060448201526064016109d9565b6001600160a01b03808716600090815260a4602090815260408083209389168352929052205480851115610c115760405162461bcd60e51b815260206004820152601160248201527f4b523a20616d6f756e74203e206465627400000000000000000000000000000060448201526064016109d9565b6040805160208101909152609d548152610c4290610c3a88610c338986615ab3565b6001611d95565b905190511090565b15610c4b578094505b6001600160a01b03808816600090815260a460209081526040808320938a1683529290529081208054879290610c82908490615ab3565b909155505084811415610cb2576001600160a01b038716600090815260a560205260409020610cb290878661435d565b610cbd87878761449e565b604051632770a7eb60e21b8152336004820152602481018690526001600160a01b03871690639dc29fac90604401600060405180830381600087803b158015610d0557600080fd5b505af1158015610d19573d6000803e3d6000fd5b5050505084866001600160a01b0316886001600160a01b03167f8af4d455a89586973d5f67129b1311b10fb5eaa983499b67e11d4a12f721fdad60405160405180910390a4505060016066555050505050565b6033546001600160a01b03163314610db45760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b670de0b6b3a7640000811015610e0c5760405162461bcd60e51b815260206004820152601b60248201527f4b523a206c6971496e63656e746976654d756c7469203c206d696e000000000060448201526064016109d9565b671158e460913d0000811115610e645760405162461bcd60e51b815260206004820152601b60248201527f4b523a206c6971496e63656e746976654d756c7469203e206d6178000000000060448201526064016109d9565b60408051602081018252829052609b8290555181907f1b7b34c6d204ac91d0799a1082c5bb302148abed8cf3aca473c01e7e2b44437490600090a250565b60026066541415610ef55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109d9565b60026066556001600160a01b038616600090815260a26020526040902060010154600160a01b900460ff16610f605760405162461bcd60e51b815260206004820152601160248201527012d48e88085adc905cdcd95d115e1a5cdd607a1b60448201526064016109d9565b6001600160a01b0384166000908152609f6020526040902060020154600160a81b900460ff16610fca5760405162461bcd60e51b81526020600482015260156024820152744b523a2021636f6c6c61746572616c45786973747360581b60448201526064016109d9565b6000851161101a5760405162461bcd60e51b815260206004820152600b60248201527f4b523a20302d726570617900000000000000000000000000000000000000000060448201526064016109d9565b6001600160a01b03808716600090815260a260209081526040808320600101548151634102dfb560e11b8152915193941692638205bf6a926004808401939192918290030181865afa158015611074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110989190615aca565b9050609e54816110a89190615ae3565b42106110e85760405162461bcd60e51b815260206004820152600f60248201526e4b523a207374616c6520707269636560881b60448201526064016109d9565b336001600160a01b03891614156111415760405162461bcd60e51b815260206004820152601460248201527f4b523a2073656c66206c69717569646174696f6e00000000000000000000000060448201526064016109d9565b61114a88612a7a565b6111965760405162461bcd60e51b815260206004820152601860248201527f4b523a20216163636f756e744c6971756964617461626c65000000000000000060448201526064016109d9565b506040805160208082018084526001600160a01b03808b16600090815260a28452858120600101546350d25bcd60e01b909352945161123794938493909216916350d25bcd9160248086019291908187030181865afa1580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112219190615aca565b9052604080516020810190915288815290614315565b6001600160a01b03808a16600090815260a460209081526040808320938c1683529290529081205491925061126d8a8a89612627565b9050878210156112bf5760405162461bcd60e51b815260206004820152601c60248201527f4b523a207265706179416d6f756e74203e2064656274416d6f756e740000000060448201526064016109d9565b8051835111156113115760405162461bcd60e51b815260206004820152601560248201527f4b523a207265706179555344203e206d6178555344000000000000000000000060448201526064016109d9565b506040805160208082018084526001600160a01b03808b166000908152609f8452858120600101546350d25bcd60e01b9093529451849392909116916350d25bcd9160248086019291908187030181865afa158015611374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113989190615aca565b90526040805160208101909152609b5481529091506000906113fe908c9085908c906113f5906113c990888b614742565b6001600160a01b038e166000908152609f6020526040902060020154600160a01b900460ff1690614764565b8e8c8e8d6147c3565b905061140b8b8b8b61449e565b604051632770a7eb60e21b8152336004820152602481018a90526001600160a01b038b1690639dc29fac90604401600060405180830381600087803b15801561145357600080fd5b505af1158015611467573d6000803e3d6000fd5b5050505060008561148557611480898c8c8589886148d4565b611487565b815b905061149d6001600160a01b038a163383614a82565b604080518b81526001600160a01b038b81166020830152918101839052818d16913391908f16907f742b0f459021eca6a76aa1a0ccaac62b9edabac406c61ac97d83dc4132d731a29060600160405180910390a45050600160665550505050505050505050565b6033546001600160a01b0316331461154c5760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b6001600160a01b0383166000908152609f60205260409020600201548390600160a81b900460ff166115b85760405162461bcd60e51b81526020600482015260156024820152744b523a2021636f6c6c61746572616c45786973747360581b60448201526064016109d9565b6001600160a01b0382166116005760405162461bcd60e51b815260206004820152600f60248201526e25a91d1010b7b930b1b632a0b2323960891b60448201526064016109d9565b61160c6012600a615bdf565b83111561164e5760405162461bcd60e51b815260206004820152601060248201526f04b523a20666163746f72203e203146560841b60448201526064016109d9565b60408051602080820183528582526001600160a01b038781166000818152609f90935284832093518455600190930180546001600160a01b031916918716918217905592518692917f92645c693ce6964d8cc494cda3b2f70ffdac5b3a7b7fbccc34609741a818119491a450505050565b60005b6001600160a01b038316600090815260a16020526040902054811015611743576001600160a01b03838116600090815260a1602052604090208054918416918390811061171157611711615beb565b6000918252602090912001546001600160a01b0316141561173157611743565b8061173b81615c01565b9150506116c2565b92915050565b6033546001600160a01b031633146117915760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b670de0b6b3a76400008110156117e95760405162461bcd60e51b815260206004820152601c60248201527f4b523a206d696e436f6c6c61746572616c526174696f203c206d696e0000000060448201526064016109d9565b60408051602081018252829052609c8290555181907f05eb44cf9a95cea4348c602716dd1baaf91d47819d797cffe9ada14069da8e0e90600090a250565b60408051602080820183526000808352835180830185528181526001600160a01b038881168352609f8452858320865160c081018852815460a0820190815281526001820154831695810195909552600201549081169584019590955260ff600160a01b8604811660608501819052600160a81b909604161515608084015292936118b29087614b17565b90506000604051806020016040528084602001516001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119279190615aca565b9052905060006119378383614315565b90508661194e57835161194b908290614315565b90505b9890975095505050505050565b6034546001600160a01b031633146119b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e657260448201526064016109d9565b6034546033546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360348054603380546001600160a01b03199081166001600160a01b03841617909155169055565b6033546001600160a01b03163314611a635760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b6001600160a01b038516600090815260a260205260409020600101548590600160a01b900460ff16611acb5760405162461bcd60e51b815260206004820152601160248201527012d48e88085adc905cdcd95d115e1a5cdd607a1b60448201526064016109d9565b611ad76012600a615bdf565b851015611b265760405162461bcd60e51b815260206004820152601160248201527f4b523a206b466163746f72203c2031465000000000000000000000000000000060448201526064016109d9565b6001600160a01b038416611b6e5760405162461bcd60e51b815260206004820152600f60248201526e25a91d1010b7b930b1b632a0b2323960891b60448201526064016109d9565b600060a26000886001600160a01b03166001600160a01b031681526020019081526020016000206040518060a00160405290816000820160405180602001604052908160008201548152505081526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900460ff161515151581526020016001820160159054906101000a900460ff16151515158152602001600282015481525050905060405180602001604052808781525081600001819052508481602001906001600160a01b031690816001600160a01b03168152505083816060019015159081151581525050828160800181815250508060a26000896001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160008201518160000155505060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548160ff02191690831515021790555060608201518160010160156101000a81548160ff02191690831515021790555060808201518160020155905050846001600160a01b031686886001600160a01b03167fd4be558c3d6665224cb3fb077d4ac0af3486eca045636a54d9457bf3f3165e8f8787604051611d849291909115158252602082015260400190565b60405180910390a450505050505050565b6040805160208101909152600081526001600160a01b03808516600090815260a260209081526040808320815160c081018352815460a082019081528152600182015480871682860190815260ff600160a01b83048116151584870152600160a81b909204909116151560608301526002909201546080820152825180850180855292516350d25bcd60e01b909352925190959293849392909216916350d25bcd9160248086019291908187030181865afa158015611e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7c9190615aca565b90526040805160208101909152868152909150600090611e9c9083614315565b905084611eb3578251611eb0908290614315565b90505b925050505b9392505050565b600054610100900460ff16611eda5760005460ff1615611ede565b303b155b611f415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109d9565b600054610100900460ff16158015611f63576000805461ffff19166101011790555b611f6b614b86565b611f748761254a565b611f7d86613b61565b611f8685610d6c565b611f8f84611749565b611f9883613fa5565b611fa182614084565b8015611fb3576000805461ff00191690555b50505050505050565b6033546001600160a01b031633146120045760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b8484806120535760405162461bcd60e51b815260206004820152600b60248201527f4b523a2021737472696e6700000000000000000000000000000000000000000060448201526064016109d9565b6001600160a01b038816600090815260a26020526040902060010154889088908890600160a01b900460ff16156120cc5760405162461bcd60e51b815260206004820152601160248201527f4b523a206b72417373657445786973747300000000000000000000000000000060448201526064016109d9565b60a382826040516120de929190615c1c565b9081526040519081900360200190205460ff161561213e5760405162461bcd60e51b815260206004820152601060248201527f4b523a2073796d626f6c4578697374730000000000000000000000000000000060448201526064016109d9565b61214a6012600a615bdf565b8810156121995760405162461bcd60e51b815260206004820152601160248201527f4b523a206b466163746f72203c2031465000000000000000000000000000000060448201526064016109d9565b6001600160a01b0387166121e15760405162461bcd60e51b815260206004820152600f60248201526e25a91d1010b7b930b1b632a0b2323960891b60448201526064016109d9565b60008b9050806001600160a01b03166391d14854826001600160a01b031663f5b541a66040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122599190615aca565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260048101919091523060248201526044016020604051808303816000875af11580156122b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d99190615c2c565b6123255760405162461bcd60e51b815260206004820152601260248201527f4b523a202161737365744f70657261746f72000000000000000000000000000060448201526064016109d9565b600160a38c8c604051612339929190615c1c565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506040518060a0016040528060405180602001604052808c8152508152602001896001600160a01b031681526020016001151581526020016001151581526020018881525060a260008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160008201518160000155505060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548160ff02191690831515021790555060608201518160010160156101000a81548160ff02191690831515021790555060808201518160020155905050888b8b604051612467929190615c1c565b60405180910390208d6001600160a01b03167f856f8fe3226e0a5efceedda3cc28003a67ae4be22c46969755433f4c0d47a0038b8b6040516124be9291906001600160a01b03929092168252602082015260400190565b60405180910390a4505050505050505050505050565b6001600160a01b038116600090815260a1602090815260409182902080548351818402810184019094528084526060939283018282801561253e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612520575b50505050509050919050565b6033546001600160a01b031633146125925760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b66b1a2bc2ec500008111156125e95760405162461bcd60e51b815260206004820152601160248201527f4b523a206275726e466565203e206d617800000000000000000000000000000060448201526064016109d9565b6040805160208101825282905260998290555181907fd54296e32811a7f2da2c1f6e8b39cb815ce208595da09bb98b034ccca6dffc6990600090a250565b604080516020808201835260008083526001600160a01b03878116825260a48352848220908716825290915291822054909190612665908590610966565b6001600160a01b03808716600090815260a0602090815260408083209388168352929052908120549192509061269d90859083611827565b5090506126ad8183519051101590565b156126cb576040518060200160405280600081525092505050611eb8565b6001600160a01b03808616600090815260a26020908152604080832081518084018352905481529388168352609f82528083208151928301909152548152906127148585614c4e565b604080516020808201835260995482528251908101909252609b5482529192506000916127719161275091869161274a91614c4e565b90614315565b6040805160208101909152609c54815261276b908790614315565b90614c4e565b905061277d8282614c78565b604080516020808201835260995482528251908101909252609b5482529198506000916127c0916127b9916127b29190614cb9565b8790614315565b8990614c78565b90506127ce81875190511190565b156127ea576127e76127e08285614c78565b8790614c78565b97505b6001600160a01b038b16600090815260a16020526040902054600110801561281f575061281f84670de0b6b3a7640000614ce3565b1561288b57604080516020808201835260995482528251908101909252670de0b6b3a7640000825261287d9161285491614cb9565b61274a61287661286f612868896004614cfa565b8b90614315565b8c90614c78565b8b90614c78565b975050505050505050611eb8565b604080516020808201835260995482528251908101909252670de0b6b3a7640000825261287d916128bb91614cb9565b8990614315565b60408051602080820183526000808352835180830185528181526001600160a01b038616825260a1835284822080548651818602810186019097528087529495919492939192909183018282801561294357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612925575b5050505050905060005b81518110156129ce57600082828151811061296a5761296a615beb565b6020908102919091018101516001600160a01b03808916600090815260a0845260408082209284168252919093528220549092506129aa90839083611827565b5090506129b78582614cb9565b9450505080806129c690615c01565b91505061294d565b50909392505050565b6033546001600160a01b03163314612a1f5760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b6001600160a01b038116600081815260986020526040808220805460ff81161560ff19909116811790915590519092839290917fe2ad9d0600e2a93ef46991efd2c22f65f9ebe472487cc7551647bc52d79328999190a35050565b600080612a86836128c2565b90506000612a93846140ff565b9050612aa182825190511090565b949350505050565b60a56020528160005260406000208181548110612ac557600080fd5b6000918252602090912001546001600160a01b03169150829050565b60026066541415612b345760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109d9565b60026066556033546001600160a01b03163314612b815760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b6001600160a01b0384166000908152609f60205260409020600201548490600160a81b900460ff1615612bf65760405162461bcd60e51b815260206004820152601460248201527f4b523a20636f6c6c61746572616c45786973747300000000000000000000000060448201526064016109d9565b6001600160a01b038516612c4c5760405162461bcd60e51b815260206004820152601360248201527f4b523a2021636f6c6c61746572616c416464720000000000000000000000000060448201526064016109d9565b612c586012600a615bdf565b841115612c9a5760405162461bcd60e51b815260206004820152601060248201526f04b523a20666163746f72203e203146560841b60448201526064016109d9565b6001600160a01b038316612ce25760405162461bcd60e51b815260206004820152600f60248201526e25a91d1010b7b930b1b632a0b2323960891b60448201526064016109d9565b600082612cf0576000612d54565b856001600160a01b0316632495a5996040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d549190615c49565b90506040518060a001604052806040518060200160405280888152508152602001856001600160a01b03168152602001826001600160a01b03168152602001876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df59190615c66565b60ff9081168252600160209283018190526001600160a01b038a81166000818152609f8652604080822088515181559688015194870180546001600160a01b03191695851695909517909455868401516002909601805460608901516080909901519785167fffffffffffffffffffffff00000000000000000000000000000000000000000090911617600160a01b9890961697909702949094177fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b951515959095029490941790945551928716928892917fbbed29325d56bc78244a08bc7ec9bcc8a4f4158eae5fa3be7ce21ebdb746845591a45050600160665550505050565b60026066541415612f505760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109d9565b600260668190556001600160a01b0383166000908152609f6020526040902001548290600160a81b900460ff16612fc15760405162461bcd60e51b81526020600482015260156024820152744b523a2021636f6c6c61746572616c45786973747360581b60448201526064016109d9565b600082116130015760405162461bcd60e51b815260206004820152600d60248201526c12d48e880c0b59195c1bdcda5d609a1b60448201526064016109d9565b6001600160a01b038084166000908152609f6020526040902060020154168061306c5760405162461bcd60e51b815260206004820152601360248201527f4b523a20214e525754436f6c6c61746572616c0000000000000000000000000060448201526064016109d9565b6130816001600160a01b038216333086614d3e565b60405163095ea7b360e01b81526001600160a01b0385811660048301526024820185905282169063095ea7b3906044016020604051808303816000875af11580156130d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f49190615c2c565b6131405760405162461bcd60e51b815260206004820152601060248201527f4b523a20417070726f76616c4661696c0000000000000000000000000000000060448201526064016109d9565b60405163b9f5be4160e01b8152600481018490526000906001600160a01b0386169063b9f5be41906024016020604051808303816000875af115801561318a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ae9190615aca565b90506131bb868683614d7c565b5050600160665550505050565b6002606654141561321b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109d9565b600260668190556001600160a01b0384166000908152609f6020526040902001548390600160a81b900460ff1661328c5760405162461bcd60e51b81526020600482015260156024820152744b523a2021636f6c6c61746572616c45786973747360581b60448201526064016109d9565b6001600160a01b03851633148015906132fe573360009081526098602052604090205460ff166132fe5760405162461bcd60e51b815260206004820152601760248201527f4b523a20556e617574686f72697a65642063616c6c657200000000000000000060448201526064016109d9565b6001600160a01b03808716600090815260a06020908152604080832093891683529290522054808511156133325780613334565b845b94506133438787878488614e82565b6001600160a01b038087166000908152609f602052604090206002015416806133ae5760405162461bcd60e51b815260206004820152601360248201527f4b523a20214e525754436f6c6c61746572616c0000000000000000000000000060448201526064016109d9565b6040516301071a2960e41b8152600481018790526000906001600160a01b03891690631071a290906024016020604051808303816000875af11580156133f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341c9190615aca565b90506134326001600160a01b0383168a83614a82565b5050600160665550505050505050565b60005b6001600160a01b038316600090815260a56020526040902054811015611743576001600160a01b03838116600090815260a5602052604090208054918416918390811061349457613494615beb565b6000918252602090912001546001600160a01b031614156134b457611743565b806134be81615c01565b915050613445565b600260665414156135195760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109d9565b60026066556001600160a01b038216600090815260a260205260409020600101548290600160a01b900460ff166135865760405162461bcd60e51b815260206004820152601160248201527012d48e88085adc905cdcd95d115e1a5cdd607a1b60448201526064016109d9565b6001600160a01b038116600090815260a26020526040902060010154600160a81b900460ff166135f85760405162461bcd60e51b815260206004820152601460248201527f4b523a20216b7241737365744d696e7461626c6500000000000000000000000060448201526064016109d9565b6001600160a01b03808416600090815260a260209081526040808320600101548151634102dfb560e11b8152915188959190911692638205bf6a92600480820193918290030181865afa158015613653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136779190615aca565b9050609e54816136879190615ae3565b42106136c75760405162461bcd60e51b815260206004820152600f60248201526e4b523a207374616c6520707269636560881b60448201526064016109d9565b6001600160a01b0386163314801590613739573360009081526098602052604090205460ff166137395760405162461bcd60e51b815260206004820152601760248201527f4b523a20556e617574686f72697a65642063616c6c657200000000000000000060448201526064016109d9565b600085116137895760405162461bcd60e51b815260206004820152600a60248201527f4b523a20302d6d696e740000000000000000000000000000000000000000000060448201526064016109d9565b60a26000876001600160a01b03166001600160a01b03168152602001908152602001600020600201546138238787896001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138199190615aca565b610c339190615ae3565b5111156138725760405162461bcd60e51b815260206004820152600c60248201527f4b523a204d43206c696d6974000000000000000000000000000000000000000060448201526064016109d9565b600061387d886128c2565b9050600061388a896140ff565b905060006138988989610966565b90506138b1836138a88484614cb9565b90519051111590565b6138fd5760405162461bcd60e51b815260206004820152601a60248201527f4b523a20696e73756666696369656e74436f6c6c61746572616c00000000000060448201526064016109d9565b6001600160a01b03808b16600090815260a460209081526040808320938d16835292815290829020548251918201909252609d54815261394e906139458c610c338d86615ae3565b90519051101590565b61399a5760405162461bcd60e51b815260206004820152601560248201527f4b523a2062656c6f774d696e4465627456616c7565000000000000000000000060448201526064016109d9565b806139de576001600160a01b038b8116600090815260a5602090815260408220805460018101825590835291200180546001600160a01b031916918c169190911790555b6139e88982615ae3565b6001600160a01b03808d16600090815260a460209081526040808320938f1680845293909152908190209290925590516340c10f1960e01b81526340c10f1990613a4c908e908d906004016001600160a01b03929092168252602082015260400190565b600060405180830381600087803b158015613a6657600080fd5b505af1158015613a7a573d6000803e3d6000fd5b50505050888a6001600160a01b03168c6001600160a01b03167f374b9a23ebe50f7d174c40fdd6a3085177f4efbd8560db9a6b034a695b1f070f60405160405180910390a450506001606655505050505050505050565b60a16020528160005260406000208181548110612ac557600080fd5b6001600160a01b038116600090815260a5602090815260409182902080548351818402810184019094528084526060939283018282801561253e576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116125205750505050509050919050565b6033546001600160a01b03163314613ba95760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b6001600160a01b038116613bff5760405162461bcd60e51b815260206004820152601160248201527f4b523a2021666565526563697069656e7400000000000000000000000000000060448201526064016109d9565b609a80546001600160a01b0319166001600160a01b0383169081179091556040517f7a7b5a0a132f9e0581eb8527f66eae9ee89c2a3e79d4ac7e41a1f1f4d48a7fc290600090a250565b6033546001600160a01b03163314613c915760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b6001600160a01b038116613d0d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109d9565b613d1681614ffd565b50565b60026066541415613d6c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109d9565b600260668190556001600160a01b0384166000908152609f6020526040902001548390600160a81b900460ff16613ddd5760405162461bcd60e51b81526020600482015260156024820152744b523a2021636f6c6c61746572616c45786973747360581b60448201526064016109d9565b6001600160a01b0385163314801590613e4f573360009081526098602052604090205460ff16613e4f5760405162461bcd60e51b815260206004820152601760248201527f4b523a20556e617574686f72697a65642063616c6c657200000000000000000060448201526064016109d9565b6001600160a01b03808716600090815260a0602090815260408083209389168352929052205480851115613e835780613e85565b845b9450613e948787878488614e82565b613ea86001600160a01b0387168887614a82565b505060016066555050505050565b60026066541415613f095760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109d9565b600260668190556001600160a01b0383166000908152609f6020526040902001548290600160a81b900460ff16613f7a5760405162461bcd60e51b81526020600482015260156024820152744b523a2021636f6c6c61746572616c45786973747360581b60448201526064016109d9565b613f8f6001600160a01b038416333085614d3e565b613f9a848484614d7c565b505060016066555050565b6033546001600160a01b03163314613fed5760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b683635c9adc5dea000008111156140465760405162461bcd60e51b815260206004820152601360248201527f4b523a206465627456616c7565203e206d61780000000000000000000000000060448201526064016109d9565b60408051602081018252829052609d8290555181907fbd32948ccd208f8bfa0001b72381d8ba95fbbe73788f0954df68689ef6d111ae90600090a250565b6033546001600160a01b031633146140cc5760405162461bcd60e51b81526020600482018190526024820152600080516020615d7383398151915260448201526064016109d9565b609e81905560405181907fa9148e2577c13396666c5565235419fb1e27d35ea4f9aec7ba3ca7011486855890600090a250565b60408051602080820183526000808352835180830185528181526001600160a01b038616825260a5835284822080548651818602810186019097528087529495919492939192909183018282801561418057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614162575b5050505050905060005b81518110156129ce5760008282815181106141a7576141a7615beb565b6020908102919091018101516001600160a01b03808916600090815260a484526040808220928416825291909352909120549091506141f06141e98383610966565b8690614cb9565b9450505080806141ff90615c01565b91505061418a565b60408051602080820183526000808352835180830185528181526001600160a01b038616825260a5835284822080548651818602810186019097528087529495919492939192909183018282801561428857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161426a575b5050505050905060005b81518110156129ce5760008282815181106142af576142af615beb565b6020908102919091018101516001600160a01b03808916600090815260a4845260408082209284168252919093528220549092506142f9916142f2918491611d95565b8590614cb9565b935050808061430790615c01565b915050614292565b3b151590565b60408051602081019091526000815260405180602001604052806012600a61433d9190615bdf565b8451865161434a9161504f565b6143549190615c89565b90529392505050565b816001600160a01b031683828154811061437957614379615beb565b6000918252602090912001546001600160a01b0316146143db5760405162461bcd60e51b815260206004820152601f60248201527f4172726179733a20696e636f72726563742072656d6f76616c20696e6465780060448201526064016109d9565b82546000906143ec90600190615ab3565b90508082146144665783818154811061440757614407615beb565b9060005260206000200160009054906101000a90046001600160a01b031684838154811061443757614437615beb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8380548061447657614476615cab565b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b6001600160a01b03808316600090815260a260209081526040808320815160c081018352815460a082019081528152600182015480871682860190815260ff600160a01b83048116151584870152600160a81b90920490911615156060830152600290920154608082015282518085018452609954815283518086018552888152845180870180875294516350d25bcd60e01b9095529451929761459f96929561274a95929490938493909216916350d25bcd9160248086019291908187030181865afa158015614573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145979190615aca565b905290614315565b80519091506145af575050505050565b6001600160a01b038516600090815260a1602090815260408083208054825181850281018501909352808352919290919083018282801561461957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116145fb575b505050505090506000600182516146309190615ab3565b90505b600082828151811061464757614647615beb565b60200260200101519050600080614660838b888761505b565b6001600160a01b03808d16600090815260a06020908152604080832093891683529290529081208054939550919350849261469c908490615ab3565b9091555050609a546146bb906001600160a01b03858116911684614a82565b81836001600160a01b03168b6001600160a01b03167ff3aa85c774db0dd66de0567be29cdc6872e4709f0374284190d9739ba475bbb8846000015160405161470591815260200190565b60405180910390a46147178682614c4e565b805190965061472c5750505050505050505050565b505050808061473a90615cc1565b915050614633565b604080516020810190915260008152612aa161475e8386614315565b84614c78565b8051600090601284101561479a5761477d846012615ab3565b61478890600a615bdf565b6147929082615c89565b915050611743565b6012841115611eb8576147ae601285615ab3565b6147b990600a615bdf565b6147929082615cd8565b60006147cf8789615ab3565b6001600160a01b03808b16600090815260a460209081526040808320938a168352929052205586881415614820576001600160a01b038916600090815260a56020526040902061482090868661435d565b6001600160a01b03808a16600090815260a0602090815260408083209387168352929052205486811115614883576148588782615ab3565b6001600160a01b03808c16600090815260a060209081526040808320938916835292905220556148c6565b6001600160a01b03808b16600081815260a060209081526040808320948916835293815283822082905591815260a19091522090965086906148c690858561435d565b509498975050505050505050565b33600090815260a4602090815260408083206001600160a01b038916845290915281205481868211614907576000614911565b6149118783615ab3565b9050600082118015614921575080155b15614a1e5733600081815260a4602090815260408083206001600160a01b038d168452825280832085905592825260a5815282822080548451818402810184019095528085529293849390928301828280156149a657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614988575b505050505090505b8051821015614a0157896001600160a01b03168183815181106149d3576149d3615beb565b60200260200101516001600160a01b031614156149ef57614a01565b816149f981615c01565b9250506149ae565b33600090815260a560205260409020614a1b908b8461435d565b50505b6001600160a01b0389166000908152609f6020526040812060020154600160a01b900460ff1690614a538661274a848b614b17565b9050614a73614a6c87614a66848b614c4e565b90614c78565b8390614764565b9b9a5050505050505050505050565b6040516001600160a01b038316602482015260448101829052614b1290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152615151565b505050565b60408051602081019091526000815260408051602081019091528281526012841015614b5d57614792614b4b856012615ab3565b614b5690600a615bdf565b8290615236565b6012841115611eb857614792614b74601286615ab3565b614b7f90600a615bdf565b829061525e565b600054610100900460ff16614ba15760005460ff1615614ba5565b303b155b614c085760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109d9565b600054610100900460ff16158015614c2a576000805461ffff19166101011790555b614c32615286565b614c3a615305565b8015613d16576000805461ff001916905550565b604080516020810190915260008152604080516020810190915282518451829161435491906153fd565b60408051602081019091526000815260405180602001604052806143548460000151614cb36012600a614cab9190615bdf565b88519061504f565b90615409565b60408051602081019091526000815260408051602081019091528251845182916143549190615415565b6000614cee82615421565b51835110905092915050565b604080516020810190915260008152614d136001615421565b905060005b82811015610a1257614d2a8285614315565b9150614d37816001615415565b9050614d18565b6040516001600160a01b0380851660248301528316604482015260648101829052614d769085906323b872dd60e01b90608401614aae565b50505050565b60008111614dbc5760405162461bcd60e51b815260206004820152600d60248201526c12d48e880c0b59195c1bdcda5d609a1b60448201526064016109d9565b6001600160a01b03808416600090815260a0602090815260408083209386168352929052205480614e26576001600160a01b03848116600090815260a1602090815260408220805460018101825590835291200180546001600160a01b0319169185169190911790555b6001600160a01b03808516600081815260a06020908152604080832094881680845294909152808220858701905551859392917ff1c0dd7e9b98bbff859029005ef89b127af049cd18df1a8d79f0b7e019911e5691a450505050565b60008311614ed25760405162461bcd60e51b815260206004820152600e60248201527f4b523a20302d776974686472617700000000000000000000000000000000000060448201526064016109d9565b6000614edd866128c2565b90506000614eed86866000611827565b5090506000614efb886140ff565b9050614f0b816139458585614c4e565b614f575760405162461bcd60e51b815260206004820152601460248201527f4b523a20636f6c6c61746572616c546f6f4c6f7700000000000000000000000060448201526064016109d9565b614f618686615ab3565b6001600160a01b03808a16600090815260a060209081526040808320938c168352929052205585851415614fb2576001600160a01b038816600090815260a160205260409020614fb290888661435d565b85876001600160a01b0316896001600160a01b03167f45892a46e6cef329bb642da6d69846d324db43d19008edc141ed82382eda1bee60405160405180910390a45050505050505050565b603480546001600160a01b0319166001600160a01b03838116918217909255603354604051919216907f23e1f881d1e797ea57a7247e53536f0bfc37c42e6645b3bdc4b1c9a0e0d8a13390600090a350565b6000611eb88284615cd8565b60006150736040518060200160405280600081525090565b6001600160a01b03808616600090815260a060209081526040808320938a1683529290529081205490806150a989846001611827565b915091506150c36040518060200160405280600081525090565b60006150d189855190511090565b156151195761510f6150e38a85614c78565b6001600160a01b038d166000908152609f6020526040902060020154600160a01b900460ff1690614764565b9050889150615142565b50506001600160a01b038816600090815260a16020526040902082908490615142908c8a61435d565b9a909950975050505050505050565b60006151a6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661545b9092919063ffffffff16565b805190915015614b1257808060200190518101906151c49190615c2c565b614b125760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109d9565b604080516020810190915260008152604080516020810190915283518190614354908561504f565b6040805160208101909152600081526040805160208101909152835181906143549085615409565b600054610100900460ff166153035760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016109d9565b565b600054610100900460ff166153205760005460ff1615615324565b303b155b6153875760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109d9565b600054610100900460ff161580156153a9576000805461ffff19166101011790555b603380546001600160a01b031916339081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015613d16576000805461ff001916905550565b6000611eb88284615ab3565b6000611eb88284615c89565b6000611eb88284615ae3565b60408051602081019091526000815260405180602001604052806154536012600a61544c9190615bdf565b859061504f565b905292915050565b6060612aa1848460008585843b6154b45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109d9565b600080866001600160a01b031685876040516154d09190615d23565b60006040518083038185875af1925050503d806000811461550d576040519150601f19603f3d011682016040523d82523d6000602084013e615512565b606091505b509150915061552282828661552d565b979650505050505050565b6060831561553c575081611eb8565b82511561554c5782518084602001fd5b8160405162461bcd60e51b81526004016109d99190615d3f565b6001600160a01b0381168114613d1657600080fd5b6000806040838503121561558e57600080fd5b823561559981615566565b946020939093013593505050565b600080600080608085870312156155bd57600080fd5b84356155c881615566565b935060208501356155d881615566565b93969395505050506040820135916060013590565b6000806040838503121561560057600080fd5b823561560b81615566565b9150602083013561561b81615566565b809150509250929050565b60006020828403121561563857600080fd5b5035919050565b8015158114613d1657600080fd5b600080600080600080600060e0888a03121561566857600080fd5b873561567381615566565b9650602088013561568381615566565b955060408801359450606088013561569a81615566565b93506080880135925060a0880135915060c08801356156b88161563f565b8091505092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156156f057600080fd5b813567ffffffffffffffff8082111561570857600080fd5b818401915084601f83011261571c57600080fd5b81358181111561572e5761572e6156c8565b604051601f8201601f19908116603f01168101908382118183101715615756576157566156c8565b8160405282815287602084870101111561576f57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000806000606084860312156157a457600080fd5b83356157af81615566565b92506020840135915060408401356157c681615566565b809150509250925092565b6000806000606084860312156157e657600080fd5b83356157f181615566565b92506020840135915060408401356157c68161563f565b60006020828403121561581a57600080fd5b8135611eb881615566565b600080600080600060a0868803121561583d57600080fd5b853561584881615566565b945060208601359350604086013561585f81615566565b9250606086013561586f8161563f565b949793965091946080013592915050565b60008060008060008060c0878903121561589957600080fd5b8635955060208701356158ab81615566565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60008060008060008060a087890312156158e957600080fd5b86356158f481615566565b9550602087013567ffffffffffffffff8082111561591157600080fd5b818901915089601f83011261592557600080fd5b81358181111561593457600080fd5b8a602082850101111561594657600080fd5b60208301975080965050505060408701359250606087013561596781615566565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156159bd5783516001600160a01b031683529284019291840191600101615998565b50909695505050505050565b6000806000606084860312156159de57600080fd5b83356159e981615566565b925060208401356159f981615566565b915060408401356157c681615566565b60008060008060808587031215615a1f57600080fd5b8435615a2a81615566565b9350602085013592506040850135615a4181615566565b91506060850135615a518161563f565b939692955090935050565b600080600060608486031215615a7157600080fd5b8335615a7c81615566565b92506020840135615a8c81615566565b929592945050506040919091013590565b634e487b7160e01b600052601160045260246000fd5b600082821015615ac557615ac5615a9d565b500390565b600060208284031215615adc57600080fd5b5051919050565b60008219821115615af657615af6615a9d565b500190565b600181815b80851115615b36578160001904821115615b1c57615b1c615a9d565b80851615615b2957918102915b93841c9390800290615b00565b509250929050565b600082615b4d57506001611743565b81615b5a57506000611743565b8160018114615b705760028114615b7a57615b96565b6001915050611743565b60ff841115615b8b57615b8b615a9d565b50506001821b611743565b5060208310610133831016604e8410600b8410161715615bb9575081810a611743565b615bc38383615afb565b8060001904821115615bd757615bd7615a9d565b029392505050565b6000611eb88383615b3e565b634e487b7160e01b600052603260045260246000fd5b6000600019821415615c1557615c15615a9d565b5060010190565b8183823760009101908152919050565b600060208284031215615c3e57600080fd5b8151611eb88161563f565b600060208284031215615c5b57600080fd5b8151611eb881615566565b600060208284031215615c7857600080fd5b815160ff81168114611eb857600080fd5b600082615ca657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fd5b600081615cd057615cd0615a9d565b506000190190565b6000816000190483118215151615615cf257615cf2615a9d565b500290565b60005b83811015615d12578181015183820152602001615cfa565b83811115614d765750506000910152565b60008251615d35818460208701615cf7565b9190910192915050565b6020815260008251806020840152615d5e816040850160208701615cf7565b601f01601f1916919091016040019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a164736f6c634300080a000a",
    "deployedBytecode": "",
    "devdoc": {
        "events": {
            "BurnFeePaid(address,address,uint256,uint256)": {
                "details": "This can be emitted multiple times for a single Kresko asset burn.",
                "params": {
                    "account": "The address of the account burning the Kresko asset.",
                    "paymentAmount": "The amount of the payment collateral asset that was paid.",
                    "paymentCollateralAsset": "The address of the collateral asset used to pay the burn fee.",
                    "paymentValue": "The USD value of the payment."
                }
            },
            "BurnFeeUpdated(uint256)": {
                "params": {
                    "burnFee": "The new burn fee raw value."
                }
            },
            "CollateralAssetAdded(address,uint256,address)": {
                "details": "Can only be emitted once for a given collateral asset.",
                "params": {
                    "collateralAsset": "The address of the collateral asset.",
                    "factor": "The collateral factor.",
                    "oracle": "The address of the oracle."
                }
            },
            "CollateralAssetUpdated(address,uint256,address)": {
                "params": {
                    "collateralAsset": "The address of the collateral asset.",
                    "factor": "The collateral factor.",
                    "oracle": "The oracle address."
                }
            },
            "CollateralDeposited(address,address,uint256)": {
                "params": {
                    "account": "The address of the account depositing collateral.",
                    "amount": "The amount of the collateral asset that was deposited.",
                    "collateralAsset": "The address of the collateral asset."
                }
            },
            "CollateralWithdrawn(address,address,uint256)": {
                "params": {
                    "account": "The address of the account withdrawing collateral.",
                    "amount": "The amount of the collateral asset that was withdrawn.",
                    "collateralAsset": "The address of the collateral asset."
                }
            },
            "FeeRecipientUpdated(address)": {
                "params": {
                    "feeRecipient": "The new fee recipient."
                }
            },
            "KreskoAssetAdded(address,string,uint256,address,uint256)": {
                "details": "Can only be emitted once for a given Kresko asset.",
                "params": {
                    "kFactor": "The k-factor.",
                    "kreskoAsset": "The address of the Kresko asset.",
                    "marketCapLimit": "The initial market capitalization USD limit.",
                    "oracle": "The address of the oracle.",
                    "symbol": "The symbol of the Kresko asset."
                }
            },
            "KreskoAssetBurned(address,address,uint256)": {
                "params": {
                    "account": "The address of the account burning the Kresko asset.",
                    "amount": "The amount of the Kresko asset that was burned.",
                    "kreskoAsset": "The address of the Kresko asset."
                }
            },
            "KreskoAssetMinted(address,address,uint256)": {
                "params": {
                    "account": "The address of the account minting the Kresko asset.",
                    "amount": "The amount of the Kresko asset that was minted.",
                    "kreskoAsset": "The address of the Kresko asset."
                }
            },
            "KreskoAssetUpdated(address,uint256,address,bool,uint256)": {
                "params": {
                    "kFactor": "The k-factor.",
                    "kreskoAsset": "The address of the Kresko asset.",
                    "limit": "The market capitalization USD limit.",
                    "mintable": "The mintable value.",
                    "oracle": "The address of the oracle."
                }
            },
            "LiquidationIncentiveMultiplierUpdated(uint256)": {
                "params": {
                    "liquidationIncentiveMultiplier": "The new liquidation incentive multiplier raw value."
                }
            },
            "LiquidationOccurred(address,address,address,uint256,address,uint256)": {
                "params": {
                    "account": "The address of the account being liquidated.",
                    "collateralSent": "The amount of the seized collateral asset being seized from the account by the liquidator.",
                    "liquidator": "The account performing the liquidation.",
                    "repayAmount": "The amount of the repay Kresko asset being paid back to the protocol by the liquidator.",
                    "repayKreskoAsset": "The address of the Kresko asset being paid back to the protocol by the liquidator.",
                    "seizedCollateralAsset": "The address of the collateral asset being seized from the account by the liquidator."
                }
            },
            "MinimumCollateralizationRatioUpdated(uint256)": {
                "params": {
                    "minimumCollateralizationRatio": "The new minimum collateralization ratio raw value."
                }
            },
            "MinimumDebtValueUpdated(uint256)": {
                "params": {
                    "minimumDebtValue": "The new minimum debt value."
                }
            },
            "SecondsUntilStalePriceUpdated(uint256)": {
                "params": {
                    "secondsUntilStalePrice": "The new seconds until stale price value."
                }
            },
            "TrustedContract(address,bool)": {
                "params": {
                    "contractAddress": "A trusted contract (eg. Kresko Zapper).",
                    "isTrusted": "true if the contract was added, false if removed"
                }
            }
        },
        "kind": "dev",
        "methods": {
            "addCollateralAsset(address,uint256,address,bool)": {
                "details": "Only callable by the owner and cannot be called more than once for an asset.",
                "params": {
                    "_collateralAsset": "The address of the collateral asset.",
                    "_factor": "The collateral factor of the collateral asset as a raw value for a FixedPoint.Unsigned. Must be <= 1e18.",
                    "_oracle": "The oracle address for the collateral asset's USD value."
                }
            },
            "addKreskoAsset(address,string,uint256,address,uint256)": {
                "details": "Only callable by the owner and cannot be called more than once for a given symbol.",
                "params": {
                    "_kFactor": "The k-factor of the Kresko asset as a raw value for a FixedPoint.Unsigned. Must be >= 1e18.",
                    "_kreskoAsset": "The address of the Kresko asset.",
                    "_marketCapUSDLimit": "The initial market capitalization USD limit for the Kresko asset.",
                    "_oracle": "The oracle address for the Kresko asset.",
                    "_symbol": "The symbol of the Kresko asset."
                }
            },
            "burnKreskoAsset(address,address,uint256,uint256)": {
                "params": {
                    "_account": "The address to burn kresko assets for",
                    "_amount": "The amount of the Kresko asset to be burned.",
                    "_kreskoAsset": "The address of the Kresko asset.",
                    "_mintedKreskoAssetIndex": "The index of the collateral asset in the user's minted assets array."
                }
            },
            "calculateMaxLiquidatableValueForAssets(address,address,address)": {
                "details": "Calculates the total value that can be liquidated for a liquidation pair",
                "params": {
                    "_account": "address to liquidate",
                    "_collateralAssetToSeize": "address of the collateral asset being seized from the liquidatee",
                    "_repayKreskoAsset": "address of the kreskoAsset being repaid on behalf of the liquidatee"
                },
                "returns": {
                    "maxLiquidatableUSD": "USD value that can be liquidated, 0 if the pair has no liquidatable value"
                }
            },
            "constructor": {
                "details": "Protects against a call to initialize when this contract is called directly without a proxy."
            },
            "depositCollateral(address,address,uint256)": {
                "params": {
                    "_account": "The user to deposit collateral for.",
                    "_amount": "The amount of the collateral asset to deposit.",
                    "_collateralAsset": "The address of the collateral asset."
                }
            },
            "depositRebasingCollateral(address,address,uint256)": {
                "params": {
                    "_account": "The user to deposit collateral for.",
                    "_collateralAsset": "The address of the NonRebasingWrapperToken collateral asset.",
                    "_rebasingAmount": "The amount of the underlying rebasing token to deposit."
                }
            },
            "getAccountCollateralValue(address)": {
                "details": "O(# of different deposited collateral assets by account) complexity.",
                "params": {
                    "_account": "The account to calculate the collateral value for."
                },
                "returns": {
                    "_0": "The collateral value of a particular account."
                }
            },
            "getAccountKrAssetValue(address)": {
                "params": {
                    "_account": "The account to calculate the Kresko asset value for."
                },
                "returns": {
                    "_0": "The Kresko asset value of a particular account."
                }
            },
            "getAccountMinimumCollateralValue(address)": {
                "details": "Accounts that have their collateral value under the minimum collateral value are considered unhealthy and therefore to avoid liquidations users should maintain a collateral value higher than the value returned.",
                "params": {
                    "_account": "The account to calculate the minimum collateral value for."
                },
                "returns": {
                    "_0": "The minimum collateral value of a particular account."
                }
            },
            "getCollateralValueAndOraclePrice(address,uint256,bool)": {
                "params": {
                    "_amount": "The amount of the collateral asset to calculate the collateral value for.",
                    "_collateralAsset": "The address of the collateral asset.",
                    "_ignoreCollateralFactor": "Boolean indicating if the asset's collateral factor should be ignored."
                },
                "returns": {
                    "_0": "The collateral value for the provided amount of the collateral asset."
                }
            },
            "getDepositedCollateralAssetIndex(address,address)": {
                "params": {
                    "_account": "The account to get the index for.",
                    "_collateralAsset": "The asset lookup address."
                },
                "returns": {
                    "i": "= index of the minted collateral asset."
                }
            },
            "getDepositedCollateralAssets(address)": {
                "params": {
                    "_account": "The account to get the deposited collateral assets for."
                },
                "returns": {
                    "_0": "An array of addresses of collateral assets the account has deposited."
                }
            },
            "getKrAssetValue(address,uint256,bool)": {
                "params": {
                    "_amount": "The amount of the Kresko asset to calculate the value for.",
                    "_ignoreKFactor": "Boolean indicating if the asset's k-factor should be ignored.",
                    "_kreskoAsset": "The address of the Kresko asset."
                },
                "returns": {
                    "_0": "The value for the provided amount of the Kresko asset."
                }
            },
            "getMinimumCollateralValue(address,uint256)": {
                "params": {
                    "_amount": "The Kresko Asset debt amount.",
                    "_krAsset": "The address of the Kresko asset."
                },
                "returns": {
                    "minCollateralValue": "is the minimum collateral value required for this Kresko Asset amount."
                }
            },
            "getMintedKreskoAssets(address)": {
                "params": {
                    "_account": "The account to get the minted Kresko assets for."
                },
                "returns": {
                    "_0": "An array of addresses of Kresko assets the account has minted."
                }
            },
            "getMintedKreskoAssetsIndex(address,address)": {
                "params": {
                    "_account": "The account to get the minted Kresko assets for.",
                    "_kreskoAsset": "The asset lookup address."
                },
                "returns": {
                    "i": "= index of the minted Kresko asset."
                }
            },
            "initialize(uint256,address,uint256,uint256,uint256,uint256)": {
                "params": {
                    "_burnFee": "Initial burn fee as a raw value for a FixedPoint.Unsigned.",
                    "_feeRecipient": "Initial fee recipient.",
                    "_liquidationIncentiveMultiplier": "Initial liquidation incentive multiplier.",
                    "_minimumCollateralizationRatio": "Initial collateralization ratio as a raw value for a FixedPoint.Unsigned.",
                    "_minimumDebtValue": "Initial minimum debt value denominated in USD."
                }
            },
            "isAccountLiquidatable(address)": {
                "details": "Returns true if the account's current collateral value is below the minimum collateral value required to consider the position healthy.",
                "params": {
                    "_account": "The account to check."
                },
                "returns": {
                    "_0": "A boolean indicating if the account can be liquidated."
                }
            },
            "liquidate(address,address,uint256,address,uint256,uint256,bool)": {
                "params": {
                    "_account": "The account to attempt to liquidate.",
                    "_collateralAssetToSeize": "The address of the collateral asset to be seized.",
                    "_depositedCollateralAssetIndex": "Index of the collateral asset in the account's collateral assets array.",
                    "_keepKrAssetDebt": "Liquidator can choose to receive the whole seized amount keeping the krAsset debt. Setting _keepKrAssetDebt to false will instead only send the incentive and repay krAsset debt.",
                    "_mintedKreskoAssetIndex": "The index of the Kresko asset in the account's minted assets array.",
                    "_repayAmount": "The amount of the Kresko asset to be repaid.",
                    "_repayKreskoAsset": "The address of the Kresko asset to be repaid."
                }
            },
            "mintKreskoAsset(address,address,uint256)": {
                "params": {
                    "_account": "The address to mint assets for.",
                    "_amount": "The amount of the Kresko asset to be minted.",
                    "_kreskoAsset": "The address of the Kresko asset."
                }
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "pendingOwner()": {
                "details": "Returns the address of the pending owner."
            },
            "toggleTrustedContract(address)": {
                "params": {
                    "_trustedContract": "Contract to toggle the trusted status for."
                }
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            },
            "updateBurnFee(uint256)": {
                "params": {
                    "_burnFee": "The new burn fee as a raw value for a FixedPoint.Unsigned."
                }
            },
            "updateCollateralAsset(address,uint256,address)": {
                "details": "Only callable by the owner.",
                "params": {
                    "_collateralAsset": "The address of the collateral asset.",
                    "_factor": "The new collateral factor as a raw value for a FixedPoint.Unsigned. Must be <= 1e18.",
                    "_oracle": "The new oracle address for the collateral asset."
                }
            },
            "updateFeeRecipient(address)": {
                "params": {
                    "_feeRecipient": "The new fee recipient."
                }
            },
            "updateKreskoAsset(address,uint256,address,bool,uint256)": {
                "details": "Only callable by the owner.",
                "params": {
                    "_kFactor": "The new k-factor as a raw value for a FixedPoint.Unsigned. Must be >= 1e18.",
                    "_kreskoAsset": "The address of the Kresko asset.",
                    "_marketCapUSDLimit": "The new market capitalization USD limit.",
                    "_mintable": "The new mintable value.",
                    "_oracle": "The new oracle address for the Kresko asset's USD value."
                }
            },
            "updateLiquidationIncentiveMultiplier(uint256)": {
                "params": {
                    "_liquidationIncentiveMultiplier": "The new liquidation incentive multiplie."
                }
            },
            "updateMinimumCollateralizationRatio(uint256)": {
                "details": "Updates the contract's collateralization ratio.",
                "params": {
                    "_minimumCollateralizationRatio": "The new minimum collateralization ratio as a raw value for a FixedPoint.Unsigned."
                }
            },
            "updateMinimumDebtValue(uint256)": {
                "details": "Updates the contract's minimum debt value.",
                "params": {
                    "_minimumDebtValue": "The new minimum debt value as a raw value for a FixedPoint.Unsigned."
                }
            },
            "updateSecondsUntilStalePrice(uint256)": {
                "details": "Updates the contract's seconds until stale price value",
                "params": {
                    "_secondsUntilStalePrice": "The new seconds until stale price."
                }
            },
            "withdrawCollateral(address,address,uint256,uint256)": {
                "details": "Requires the post-withdrawal collateral value to violate minimum collateral requirement.",
                "params": {
                    "_account": "The address to withdraw assets for.",
                    "_amount": "The amount of the collateral asset to withdraw.",
                    "_collateralAsset": "The address of the collateral asset.",
                    "_depositedCollateralAssetIndex": "The index of the collateral asset in the sender's deposited collateral assets array. Only needed if withdrawing the entire deposit of a particular collateral asset."
                }
            },
            "withdrawRebasingCollateral(address,address,uint256,uint256)": {
                "params": {
                    "_account": "The address to withdraw assets for.",
                    "_amount": "The amount of the NonRebasingWrapperToken collateral asset to withdraw.",
                    "_collateralAsset": "The address of the NonRebasingWrapperToken collateral asset.",
                    "_depositedCollateralAssetIndex": "The index of the collateral asset in the sender's deposited collateral assets array. Only needed if withdrawing the entire deposit of a particular collateral asset."
                }
            }
        },
        "stateVariables": {
            "collateralDeposits": {
                "details": "Collateral assets must not rebase."
            }
        },
        "title": "The core of the Kresko protocol.",
        "version": 1
    },
    "userdoc": {
        "events": {
            "BurnFeePaid(address,address,uint256,uint256)": {
                "notice": "Emitted when an account pays a burn fee with a collateral asset upon burning a Kresko asset."
            },
            "BurnFeeUpdated(uint256)": {
                "notice": "Emitted when the burn fee is updated."
            },
            "CollateralAssetAdded(address,uint256,address)": {
                "notice": "Emitted when a collateral asset is added to the protocol."
            },
            "CollateralAssetUpdated(address,uint256,address)": {
                "notice": "Emitted when a collateral asset is updated."
            },
            "CollateralDeposited(address,address,uint256)": {
                "notice": "Emitted when an account deposits collateral."
            },
            "CollateralWithdrawn(address,address,uint256)": {
                "notice": "Emitted when an account withdraws collateral."
            },
            "FeeRecipientUpdated(address)": {
                "notice": "Emitted when the fee recipient is updated."
            },
            "KreskoAssetAdded(address,string,uint256,address,uint256)": {
                "notice": "Emitted when a Kresko asset is added to the protocol."
            },
            "KreskoAssetBurned(address,address,uint256)": {
                "notice": "Emitted when an account burns a Kresko asset."
            },
            "KreskoAssetMinted(address,address,uint256)": {
                "notice": "Emitted when an account mints a Kresko asset."
            },
            "KreskoAssetUpdated(address,uint256,address,bool,uint256)": {
                "notice": "Emitted when a Kresko asset's oracle is updated."
            },
            "LiquidationIncentiveMultiplierUpdated(uint256)": {
                "notice": "Emitted when the liquidation incentive multiplier is updated."
            },
            "LiquidationOccurred(address,address,address,uint256,address,uint256)": {
                "notice": "Emitted when a liquidation occurs."
            },
            "MinimumCollateralizationRatioUpdated(uint256)": {
                "notice": "Emitted when the minimum collateralization ratio is updated."
            },
            "MinimumDebtValueUpdated(uint256)": {
                "notice": "Emitted when the minimum debt value updated."
            },
            "SecondsUntilStalePriceUpdated(uint256)": {
                "notice": "Emitted when the seconds until stale price value is updated."
            },
            "TrustedContract(address,bool)": {
                "notice": "Emitted when the a trusted contract is added/removed."
            }
        },
        "kind": "user",
        "methods": {
            "MAX_BURN_FEE()": {
                "notice": "The maximum configurable burn fee."
            },
            "MAX_DEBT_VALUE()": {
                "notice": "The maximum configurable minimum debt USD value."
            },
            "MAX_LIQUIDATION_INCENTIVE_MULTIPLIER()": {
                "notice": "The maximum configurable liquidation incentive multiplier. This means liquidator receives 25% bonus collateral compared to the debt repaid."
            },
            "MIN_COLLATERALIZATION_RATIO()": {
                "notice": "The minimum configurable minimum collateralization ratio."
            },
            "MIN_LIQUIDATION_INCENTIVE_MULTIPLIER()": {
                "notice": "The minimum configurable liquidation incentive multiplier. This means liquidator only receives equal amount of collateral to debt repaid."
            },
            "ONE_HUNDRED_PERCENT()": {
                "notice": "================================================== =================== Constants ==================== =================================================="
            },
            "addCollateralAsset(address,uint256,address,bool)": {
                "notice": "Adds a collateral asset to the protocol."
            },
            "addKreskoAsset(address,string,uint256,address,uint256)": {
                "notice": "Adds a Kresko asset to the protocol."
            },
            "burnFee()": {
                "notice": "The percent fee imposed upon the value of burned krAssets, taken as collateral and sent to feeRecipient."
            },
            "burnKreskoAsset(address,address,uint256,uint256)": {
                "notice": "Burns existing Kresko assets.Only needed if withdrawing the entire deposit of a particular collateral asset."
            },
            "claimOwnership()": {
                "notice": "Needs to be called by pending owner to claim ownership."
            },
            "collateralAssets(address)": {
                "notice": "Mapping of collateral asset token address to information on the collateral asset."
            },
            "collateralDeposits(address,address)": {
                "notice": "Mapping of account address to a mapping of collateral asset token address to the amount of the collateral asset the account has deposited."
            },
            "collateralExists(address)": {
                "notice": "Returns true if the @param _collateralAsset exists in the protocol"
            },
            "constructor": {
                "notice": "Empty constructor, see `initialize`."
            },
            "depositCollateral(address,address,uint256)": {
                "notice": "Deposits collateral into the protocol."
            },
            "depositRebasingCollateral(address,address,uint256)": {
                "notice": "Deposits a rebasing collateral into the protocol by wrapping the underlying rebasing token."
            },
            "depositedCollateralAssets(address,uint256)": {
                "notice": "Mapping of account address to an array of the addresses of each collateral asset the account has deposited."
            },
            "feeRecipient()": {
                "notice": "The recipient of burn fees."
            },
            "getAccountCollateralValue(address)": {
                "notice": "Gets the collateral value of a particular account."
            },
            "getAccountKrAssetValue(address)": {
                "notice": "Gets the Kresko asset value in USD of a particular account."
            },
            "getAccountMinimumCollateralValue(address)": {
                "notice": "Gets an account's minimum collateral value for its Kresko Asset debts."
            },
            "getCollateralValueAndOraclePrice(address,uint256,bool)": {
                "notice": "Gets the collateral value for a single collateral asset and amount."
            },
            "getDepositedCollateralAssetIndex(address,address)": {
                "notice": "Gets an index for the collateral asset the account has deposited."
            },
            "getDepositedCollateralAssets(address)": {
                "notice": "Gets an array of collateral assets the account has deposited."
            },
            "getKrAssetValue(address,uint256,bool)": {
                "notice": "Gets the USD value for a single Kresko asset and amount."
            },
            "getMinimumCollateralValue(address,uint256)": {
                "notice": "Get the minimum collateral value required to keep a individual debt position healthy."
            },
            "getMintedKreskoAssets(address)": {
                "notice": "Gets an array of Kresko assets the account has minted."
            },
            "getMintedKreskoAssetsIndex(address,address)": {
                "notice": "Gets an index for the Kresko asset the account has minted."
            },
            "initialize(uint256,address,uint256,uint256,uint256,uint256)": {
                "notice": "Initializes the core Kresko protocol."
            },
            "isAccountLiquidatable(address)": {
                "notice": "Calculates if an account's current collateral value is under its minimum collateral value"
            },
            "krAssetExists(address)": {
                "notice": "Returns true if the @param _krAsset exists in the protocol"
            },
            "kreskoAssetDebt(address,address)": {
                "notice": "Mapping of account address to a mapping of Kresko asset token address to the amount of the Kresko asset the account has minted and therefore owes to the protocol."
            },
            "kreskoAssetSymbols(string)": {
                "notice": "Mapping of Kresko asset symbols to whether the symbol is used by an existing Kresko asset."
            },
            "kreskoAssets(address)": {
                "notice": "Mapping of Kresko asset token address to information on the Kresko asset."
            },
            "liquidate(address,address,uint256,address,uint256,uint256,bool)": {
                "notice": "Attempts to liquidate an account by repaying the portion of the account's Kresko asset         debt, receiving in return a portion of the account's collateral at a discounted rate."
            },
            "liquidationIncentiveMultiplier()": {
                "notice": "The factor used to calculate the incentive a liquidator receives in the form of seized collateral."
            },
            "minimumCollateralizationRatio()": {
                "notice": "The absolute minimum ratio of collateral value to debt value that is used to calculate collateral requirements."
            },
            "minimumDebtValue()": {
                "notice": "The minimum USD value of an individual synthetic asset debt position."
            },
            "mintKreskoAsset(address,address,uint256)": {
                "notice": "Mints new Kresko assets."
            },
            "mintedKreskoAssets(address,uint256)": {
                "notice": "Mapping of account address to an array of the addresses of each Kresko asset the account has minted."
            },
            "secondsUntilStalePrice()": {
                "notice": "The number of seconds until a price is considered stale"
            },
            "toggleTrustedContract(address)": {
                "notice": "Toggles a trusted contract to perform actions on behalf of user (eg. Kresko Zapper)."
            },
            "trustedContracts(address)": {
                "notice": "================================================== ===================== State ====================== =================================================="
            },
            "updateBurnFee(uint256)": {
                "notice": "Updates the burn fee."
            },
            "updateCollateralAsset(address,uint256,address)": {
                "notice": "Updates a previously added collateral asset."
            },
            "updateFeeRecipient(address)": {
                "notice": "Updates the fee recipient."
            },
            "updateKreskoAsset(address,uint256,address,bool,uint256)": {
                "notice": "Updates the k-factor of a previously added Kresko asset."
            },
            "updateLiquidationIncentiveMultiplier(uint256)": {
                "notice": "Updates the liquidation incentive multiplier."
            },
            "withdrawCollateral(address,address,uint256,uint256)": {
                "notice": "Withdraws sender's collateral from the protocol."
            },
            "withdrawRebasingCollateral(address,address,uint256,uint256)": {
                "notice": "Withdraws NonRebasingWrapperToken collateral from the protocol and unwraps it."
            }
        },
        "notice": "Responsible for managing collateral and minting / burning overcollateralized synthetic assets called Kresko assets. Management of critical features such as adding new collateral assets / Kresko assets and updating protocol constants such as the burn fee minimum collateralization ratio, and liquidation incentive is restricted to the contract owner.",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 597,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "_initialized",
                "offset": 0,
                "slot": "0",
                "type": "t_bool"
            },
            {
                "astId": 600,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "_initializing",
                "offset": 1,
                "slot": "0",
                "type": "t_bool"
            },
            {
                "astId": 1910,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "__gap",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_uint256)50_storage"
            },
            {
                "astId": 27395,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "_owner",
                "offset": 0,
                "slot": "51",
                "type": "t_address"
            },
            {
                "astId": 27397,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "_pendingOwner",
                "offset": 0,
                "slot": "52",
                "type": "t_address"
            },
            {
                "astId": 27544,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "__gap",
                "offset": 0,
                "slot": "53",
                "type": "t_array(t_uint256)49_storage"
            },
            {
                "astId": 678,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "_status",
                "offset": 0,
                "slot": "102",
                "type": "t_uint256"
            },
            {
                "astId": 721,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "__gap",
                "offset": 0,
                "slot": "103",
                "type": "t_array(t_uint256)49_storage"
            },
            {
                "astId": 16991,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "trustedContracts",
                "offset": 0,
                "slot": "152",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 16995,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "burnFee",
                "offset": 0,
                "slot": "153",
                "type": "t_struct(Unsigned)22772_storage"
            },
            {
                "astId": 16998,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "feeRecipient",
                "offset": 0,
                "slot": "154",
                "type": "t_address"
            },
            {
                "astId": 17002,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "liquidationIncentiveMultiplier",
                "offset": 0,
                "slot": "155",
                "type": "t_struct(Unsigned)22772_storage"
            },
            {
                "astId": 17006,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "minimumCollateralizationRatio",
                "offset": 0,
                "slot": "156",
                "type": "t_struct(Unsigned)22772_storage"
            },
            {
                "astId": 17010,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "minimumDebtValue",
                "offset": 0,
                "slot": "157",
                "type": "t_struct(Unsigned)22772_storage"
            },
            {
                "astId": 17013,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "secondsUntilStalePrice",
                "offset": 0,
                "slot": "158",
                "type": "t_uint256"
            },
            {
                "astId": 17019,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "collateralAssets",
                "offset": 0,
                "slot": "159",
                "type": "t_mapping(t_address,t_struct(CollateralAsset)16949_storage)"
            },
            {
                "astId": 17026,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "collateralDeposits",
                "offset": 0,
                "slot": "160",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
            },
            {
                "astId": 17032,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "depositedCollateralAssets",
                "offset": 0,
                "slot": "161",
                "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
            },
            {
                "astId": 17038,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "kreskoAssets",
                "offset": 0,
                "slot": "162",
                "type": "t_mapping(t_address,t_struct(KrAsset)16962_storage)"
            },
            {
                "astId": 17043,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "kreskoAssetSymbols",
                "offset": 0,
                "slot": "163",
                "type": "t_mapping(t_string_memory_ptr,t_bool)"
            },
            {
                "astId": 17050,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "kreskoAssetDebt",
                "offset": 0,
                "slot": "164",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
            },
            {
                "astId": 17056,
                "contract": "src/contracts/Kresko.sol:Kresko",
                "label": "mintedKreskoAssets",
                "offset": 0,
                "slot": "165",
                "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
                "base": "t_uint256",
                "encoding": "inplace",
                "label": "uint256[49]",
                "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
                "base": "t_uint256",
                "encoding": "inplace",
                "label": "uint256[50]",
                "numberOfBytes": "1600"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_contract(AggregatorV2V3Interface)22228": {
                "encoding": "inplace",
                "label": "contract AggregatorV2V3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => address[])",
                "numberOfBytes": "32",
                "value": "t_array(t_address)dyn_storage"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => uint256))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_uint256)"
            },
            "t_mapping(t_address,t_struct(CollateralAsset)16949_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct Kresko.CollateralAsset)",
                "numberOfBytes": "32",
                "value": "t_struct(CollateralAsset)16949_storage"
            },
            "t_mapping(t_address,t_struct(KrAsset)16962_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct Kresko.KrAsset)",
                "numberOfBytes": "32",
                "value": "t_struct(KrAsset)16962_storage"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_string_memory_ptr,t_bool)": {
                "encoding": "mapping",
                "key": "t_string_memory_ptr",
                "label": "mapping(string => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_string_memory_ptr": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(CollateralAsset)16949_storage": {
                "encoding": "inplace",
                "label": "struct Kresko.CollateralAsset",
                "members": [
                    {
                        "astId": 16939,
                        "contract": "src/contracts/Kresko.sol:Kresko",
                        "label": "factor",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(Unsigned)22772_storage"
                    },
                    {
                        "astId": 16942,
                        "contract": "src/contracts/Kresko.sol:Kresko",
                        "label": "oracle",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_contract(AggregatorV2V3Interface)22228"
                    },
                    {
                        "astId": 16944,
                        "contract": "src/contracts/Kresko.sol:Kresko",
                        "label": "underlyingRebasingToken",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_address"
                    },
                    {
                        "astId": 16946,
                        "contract": "src/contracts/Kresko.sol:Kresko",
                        "label": "decimals",
                        "offset": 20,
                        "slot": "2",
                        "type": "t_uint8"
                    },
                    {
                        "astId": 16948,
                        "contract": "src/contracts/Kresko.sol:Kresko",
                        "label": "exists",
                        "offset": 21,
                        "slot": "2",
                        "type": "t_bool"
                    }
                ],
                "numberOfBytes": "96"
            },
            "t_struct(KrAsset)16962_storage": {
                "encoding": "inplace",
                "label": "struct Kresko.KrAsset",
                "members": [
                    {
                        "astId": 16952,
                        "contract": "src/contracts/Kresko.sol:Kresko",
                        "label": "kFactor",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(Unsigned)22772_storage"
                    },
                    {
                        "astId": 16955,
                        "contract": "src/contracts/Kresko.sol:Kresko",
                        "label": "oracle",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_contract(AggregatorV2V3Interface)22228"
                    },
                    {
                        "astId": 16957,
                        "contract": "src/contracts/Kresko.sol:Kresko",
                        "label": "exists",
                        "offset": 20,
                        "slot": "1",
                        "type": "t_bool"
                    },
                    {
                        "astId": 16959,
                        "contract": "src/contracts/Kresko.sol:Kresko",
                        "label": "mintable",
                        "offset": 21,
                        "slot": "1",
                        "type": "t_bool"
                    },
                    {
                        "astId": 16961,
                        "contract": "src/contracts/Kresko.sol:Kresko",
                        "label": "marketCapUSDLimit",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "96"
            },
            "t_struct(Unsigned)22772_storage": {
                "encoding": "inplace",
                "label": "struct FixedPoint.Unsigned",
                "members": [
                    {
                        "astId": 22771,
                        "contract": "src/contracts/Kresko.sol:Kresko",
                        "label": "rawValue",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "32"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            },
            "t_uint8": {
                "encoding": "inplace",
                "label": "uint8",
                "numberOfBytes": "1"
            }
        }
    }
}
