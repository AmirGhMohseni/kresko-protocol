{
    "address": "0x5DBC0186174F82BcDE0E1e35470B40304E687C39",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "contract IUniswapV2Router02",
                    "name": "_router",
                    "type": "address"
                },
                {
                    "internalType": "contract IUniswapV2Factory",
                    "name": "_factory",
                    "type": "address"
                },
                {
                    "internalType": "contract IKrStaking",
                    "name": "_staking",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }
            ],
            "name": "ClaimRewardsMulti",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "pid",
                    "type": "uint256"
                }
            ],
            "name": "LiquidityAndStakeAdded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "pid",
                    "type": "uint256"
                }
            ],
            "name": "LiquidityAndStakeRemoved",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "tokenA",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenB",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amountADesired",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amountBDesired",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amountAMin",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amountBMin",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "deadline",
                    "type": "uint256"
                }
            ],
            "name": "addLiquidityAndStake",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }
            ],
            "name": "claimRewardsMulti",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "factory",
            "outputs": [
                {
                    "internalType": "contract IUniswapV2Factory",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "router",
            "outputs": [
                {
                    "internalType": "contract IUniswapV2Router02",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "staking",
            "outputs": [
                {
                    "internalType": "contract IKrStaking",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "tokenA",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "tokenB",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "liquidity",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amountAMin",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "amountBMin",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "deadline",
                    "type": "uint256"
                }
            ],
            "name": "withdrawAndRemoveLiquidity",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x92e3d8255a96003a3c8f49499c9c6b14502bef8a50d413d9ea60f8a7040f93e6",
    "receipt": {
        "to": null,
        "from": "0x368F9940674c18d110b47EA12bcd181984C603A6",
        "contractAddress": "0x5DBC0186174F82BcDE0E1e35470B40304E687C39",
        "transactionIndex": 0,
        "gasUsed": "999626",
        "logsBloom": "0x
        "blockHash": "0xcf67aaa8d65c6845b31ebeb5a649123ce581d6957946a0143b3e3eea2e66489c",
        "transactionHash": "0x92e3d8255a96003a3c8f49499c9c6b14502bef8a50d413d9ea60f8a7040f93e6",
        "logs": [],
        "blockNumber": 89741412,
        "cumulativeGasUsed": "0",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0xa80Dd0dD70C5300aB38E717571EE685Eb35dD139",
        "0xF6cA99590e8F54142F5AD18179Ec9B5E244D75Fb",
        "0x5BF8e9Abf85633dC1ABe4BE6664feAD569DB27b1"
    ],
    "numDeployments": 1,
    "solcInputHash": "b2477b9f303919a3ac017b4ecb0d8a20",
    "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IKrStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimRewardsMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"LiquidityAndStakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"LiquidityAndStakeRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityAndStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimRewardsMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IKrStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawAndRemoveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountADesired\":\"optimal amount of token A\",\"amountAMin\":\"min amountA (slippage)\",\"amountBDesired\":\"optimal amount of token B\",\"amountBMin\":\"min amountB (slippage)\",\"deadline\":\"transaction deadline (used by router)\",\"to\":\"address to deposit for\",\"tokenA\":\"address of tokenA\",\"tokenB\":\"address of tokenB\"}},\"claimRewardsMulti(address)\":{\"params\":{\"to\":\"address that receives the rewards\"}},\"withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountAMin\":\"min amountA to receive (slippage)\",\"amountBMin\":\"min amountB to receive (slippage)\",\"deadline\":\"transaction deadline (used by router)\",\"liquidity\":\"liquidity token amount to remove\",\"to\":\"address that receives the underlying\",\"tokenA\":\"address of tokenA\",\"tokenB\":\"address of tokenB\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LiquidityAndStakeAdded(address,uint256,uint256)\":{\"notice\":\"================================================== ============ Events ============================== ==================================================\"}},\"kind\":\"user\",\"methods\":{\"addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Add liquidity to a pair, deposit liquidity tokens to staking\"},\"claimRewardsMulti(address)\":{\"notice\":\"Claim rewards from each pool\"},\"withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraw liquidity tokens from staking, remove the underlying\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/KrStakingUniHelper.sol\":\"KrStakingUniHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"src/contracts/KrStakingUniHelper.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./uniswap/v2-core/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IKrStaking.sol\\\";\\n\\ncontract KrStakingUniHelper {\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Router02 public router;\\n    IUniswapV2Factory public factory;\\n    IKrStaking public staking;\\n\\n    constructor(\\n        IUniswapV2Router02 _router,\\n        IUniswapV2Factory _factory,\\n        IKrStaking _staking\\n    ) {\\n        router = _router;\\n        factory = _factory;\\n        staking = _staking;\\n    }\\n\\n    /**\\n     * ==================================================\\n     * ============ Events ==============================\\n     * ==================================================\\n     */\\n\\n    event LiquidityAndStakeAdded(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event LiquidityAndStakeRemoved(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event ClaimRewardsMulti(address indexed to);\\n\\n    /**\\n     * ==================================================\\n     * ============ Public functions ====================\\n     * ==================================================\\n     */\\n\\n    /**\\n     * @notice Add liquidity to a pair, deposit liquidity tokens to staking\\n     * @param tokenA address of tokenA\\n     * @param tokenB address of tokenB\\n     * @param amountADesired optimal amount of token A\\n     * @param amountBDesired optimal amount of token B\\n     * @param amountAMin min amountA (slippage)\\n     * @param amountBMin min amountB (slippage)\\n     * @param to address to deposit for\\n     * @param deadline transaction deadline (used by router)\\n     */\\n    function addLiquidityAndStake(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        require(to != address(0), \\\"KR: !address\\\");\\n        address pair = factory.getPair(tokenA, tokenB);\\n        (uint256 pid, bool found) = staking.getPidFor(pair);\\n\\n        require(found, \\\"KR: !poolExists\\\");\\n\\n        IERC20(tokenA).safeTransferFrom(msg.sender, address(this), amountADesired);\\n        IERC20(tokenB).safeTransferFrom(msg.sender, address(this), amountBDesired);\\n\\n        IERC20(tokenA).approve(address(router), amountADesired);\\n        IERC20(tokenB).approve(address(router), amountBDesired);\\n\\n        (, , uint256 liquidity) = router.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            address(this),\\n            deadline\\n        );\\n\\n        IERC20(pair).approve(address(staking), liquidity);\\n        staking.deposit(to, pid, liquidity);\\n\\n        emit LiquidityAndStakeAdded(to, liquidity, pid);\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @notice Withdraw liquidity tokens from staking, remove the underlying\\n     * @param tokenA address of tokenA\\n     * @param tokenB address of tokenB\\n     * @param liquidity liquidity token amount to remove\\n     * @param amountAMin min amountA to receive (slippage)\\n     * @param amountBMin min amountB to receive (slippage)\\n     * @param to address that receives the underlying\\n     * @param deadline transaction deadline (used by router)\\n     */\\n    function withdrawAndRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external {\\n        require(to != address(0), \\\"KR: !address\\\");\\n        address pair = factory.getPair(tokenA, tokenB);\\n        (uint256 pid, bool found) = staking.getPidFor(pair);\\n\\n        require(found, \\\"KR: !poolExists\\\");\\n\\n        staking.withdrawFor(msg.sender, pid, liquidity, to);\\n\\n        IERC20(pair).approve(address(router), liquidity);\\n        router.removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\n\\n        emit LiquidityAndStakeRemoved(to, liquidity, pid);\\n    }\\n\\n    /**\\n     * @notice Claim rewards from each pool\\n     * @param to address that receives the rewards\\n     */\\n    function claimRewardsMulti(address to) external {\\n        require(to != address(0), \\\"KR: !address\\\");\\n\\n        uint256 length = staking.poolLength();\\n\\n        for (uint256 i; i < length; i++) {\\n            staking.claimFor(msg.sender, i, to);\\n        }\\n\\n        emit ClaimRewardsMulti(to);\\n    }\\n}\\n\",\"keccak256\":\"0xb49f439fff359391eafee305de7ab971de2863d8335c6970c1f5f1053ecff29f\"},\"src/contracts/interfaces/IKrStaking.sol\":{\"content\":\"pragma solidity >=0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKrStaking {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256[] rewardDebts;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 depositToken; // Address of LP token contract.\\n        uint128 allocPoint; // How many allocation points assigned to this pool.\\n        uint128 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        uint256[] accRewardPerShares; // Accumulated rewards per share, times 1e12.\\n        address[] rewardTokens; // Reward tokens for this pool.\\n    }\\n\\n    struct Reward {\\n        uint256 pid;\\n        address[] tokens;\\n        uint256[] amounts;\\n    }\\n\\n    function getPidFor(address _token) external view returns (uint256 pid, bool found);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function deposit(\\n        address _to,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawFor(\\n        address _for,\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _claimRewardsTo\\n    ) external;\\n\\n    function claimFor(\\n        address _for,\\n        uint256 _pid,\\n        address _rewardRecipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcaff16d847dd859b9101d31c022f4a88fdc967ffc0adbaa633f4ad54fb08c5a1\"},\"src/contracts/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x77483b717fd86de5cd25e59fb77d890a631951dd2b50152c237e4293cc9ce5f1\"},\"src/contracts/uniswap/v2-periphery/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x84373b2af39c116f38d7011fbdf5919540fc8c981a2e5549fe84cd9e420d88bd\"},\"src/contracts/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x050b10e6a0e134193f881aaaa56f3598a1d013bbbdbd3baf11e9b9eb79267474\"}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b506040516110bf3803806110bf83398101604081905261002f91610089565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556100d6565b6001600160a01b038116811461008657600080fd5b50565b60008060006060848603121561009e57600080fd5b83516100a981610071565b60208501519093506100ba81610071565b60408501519092506100cb81610071565b809150509250925092565b610fda806100e56000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063b6842c6011610050578063b6842c60146100dd578063c45a0155146100f0578063f887ea401461010357600080fd5b80632df56a3f146100775780634cf088d91461008c578063b4c29b68146100bc575b600080fd5b61008a610085366004610d3a565b610116565b005b60025461009f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cf6100ca366004610dac565b610459565b6040519081526020016100b3565b61008a6100eb366004610e28565b6108ba565b60015461009f906001600160a01b031681565b60005461009f906001600160a01b031681565b6001600160a01b0382166101605760405162461bcd60e51b815260206004820152600c60248201526b4b523a20216164647265737360a01b60448201526064015b60405180910390fd5b60015460405163e6a4390560e01b81526001600160a01b0389811660048301528881166024830152600092169063e6a4390590604401602060405180830381865afa1580156101b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d79190610e45565b60025460405163ba8fc5bf60e01b81526001600160a01b0380841660048301529293506000928392169063ba8fc5bf906024016040805180830381865afa158015610226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024a9190610e77565b915091508061028d5760405162461bcd60e51b815260206004820152600f60248201526e4b523a2021706f6f6c45786973747360881b6044820152606401610157565b6002546040516343a4534b60e01b815233600482015260248101849052604481018a90526001600160a01b038781166064830152909116906343a4534b90608401600060405180830381600087803b1580156102e857600080fd5b505af11580156102fc573d6000803e3d6000fd5b505060005460405163095ea7b360e01b81526001600160a01b039182166004820152602481018c9052908616925063095ea7b391506044016020604051808303816000875af1158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190610ea3565b50600054604051635d5155ef60e11b81526001600160a01b038c811660048301528b81166024830152604482018b9052606482018a90526084820189905287811660a483015260c482018790529091169063baa2abde9060e40160408051808303816000875af11580156103ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104139190610ebe565b50508188866001600160a01b03167f27b4eb450d703cc6355f1bc733710bf45d86de95f33ef1c672786817a5c9265d60405160405180910390a450505050505050505050565b60006001600160a01b0383166104a05760405162461bcd60e51b815260206004820152600c60248201526b4b523a20216164647265737360a01b6044820152606401610157565b60015460405163e6a4390560e01b81526001600160a01b038b811660048301528a81166024830152600092169063e6a4390590604401602060405180830381865afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190610e45565b60025460405163ba8fc5bf60e01b81526001600160a01b0380841660048301529293506000928392169063ba8fc5bf906024016040805180830381865afa158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a9190610e77565b91509150806105cd5760405162461bcd60e51b815260206004820152600f60248201526e4b523a2021706f6f6c45786973747360881b6044820152606401610157565b6105e26001600160a01b038d1633308d610a32565b6105f76001600160a01b038c1633308c610a32565b60005460405163095ea7b360e01b81526001600160a01b039182166004820152602481018c9052908d169063095ea7b3906044016020604051808303816000875af115801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e9190610ea3565b5060005460405163095ea7b360e01b81526001600160a01b039182166004820152602481018b9052908c169063095ea7b3906044016020604051808303816000875af11580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e69190610ea3565b506000805460405162e8e33760e81b81526001600160a01b038f811660048301528e81166024830152604482018e9052606482018d9052608482018c905260a482018b90523060c483015260e482018990529091169063e8e3370090610104016060604051808303816000875af1158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190610ee2565b60025460405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529194508716925063095ea7b391506044016020604051808303816000875af11580156107e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108049190610ea3565b50600254604051630efe6a8b60e01b81526001600160a01b038981166004830152602482018690526044820184905290911690630efe6a8b90606401600060405180830381600087803b15801561085a57600080fd5b505af115801561086e573d6000803e3d6000fd5b505050508281886001600160a01b03167f67153b1f92f8a4e823af8ca2fdb93c3d313b9dcb1404c5da9a9c44234a3302e960405160405180910390a49c9b505050505050505050505050565b6001600160a01b0381166108ff5760405162461bcd60e51b815260206004820152600c60248201526b4b523a20216164647265737360a01b6044820152606401610157565b6002546040805163040f1f6d60e11b815290516000926001600160a01b03169163081e3eda9160048083019260209291908290030181865afa158015610949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096d9190610f10565b905060005b818110156109f95760025460405163bf82b7b560e01b8152336004820152602481018390526001600160a01b0385811660448301529091169063bf82b7b590606401600060405180830381600087803b1580156109ce57600080fd5b505af11580156109e2573d6000803e3d6000fd5b5050505080806109f190610f29565b915050610972565b506040516001600160a01b038316907fac4bb348f20fccad9f5419b8d566bc60a544d193931dc39efe624899e5d068b790600090a25050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052610aa1908590610aa7565b50505050565b6000610afc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b919092919063ffffffff16565b805190915015610b8c5780806020019051810190610b1a9190610ea3565b610b8c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610157565b505050565b6060610ba08484600085610baa565b90505b9392505050565b606082471015610c225760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610157565b843b610c705760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610157565b600080866001600160a01b03168587604051610c8c9190610f7e565b60006040518083038185875af1925050503d8060008114610cc9576040519150601f19603f3d011682016040523d82523d6000602084013e610cce565b606091505b5091509150610cde828286610ce9565b979650505050505050565b60608315610cf8575081610ba3565b825115610d085782518084602001fd5b8160405162461bcd60e51b81526004016101579190610f9a565b6001600160a01b0381168114610d3757600080fd5b50565b600080600080600080600060e0888a031215610d5557600080fd5b8735610d6081610d22565b96506020880135610d7081610d22565b955060408801359450606088013593506080880135925060a0880135610d9581610d22565b8092505060c0880135905092959891949750929550565b600080600080600080600080610100898b031215610dc957600080fd5b8835610dd481610d22565b97506020890135610de481610d22565b965060408901359550606089013594506080890135935060a0890135925060c0890135610e1081610d22565b8092505060e089013590509295985092959890939650565b600060208284031215610e3a57600080fd5b8135610ba381610d22565b600060208284031215610e5757600080fd5b8151610ba381610d22565b80518015158114610e7257600080fd5b919050565b60008060408385031215610e8a57600080fd5b82519150610e9a60208401610e62565b90509250929050565b600060208284031215610eb557600080fd5b610ba382610e62565b60008060408385031215610ed157600080fd5b505080516020909101519092909150565b600080600060608486031215610ef757600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215610f2257600080fd5b5051919050565b6000600019821415610f4b57634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b83811015610f6d578181015183820152602001610f55565b83811115610aa15750506000910152565b60008251610f90818460208701610f52565b9190910192915050565b6020815260008251806020840152610fb9816040850160208701610f52565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
    "deployedBytecode": "",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
                "params": {
                    "amountADesired": "optimal amount of token A",
                    "amountAMin": "min amountA (slippage)",
                    "amountBDesired": "optimal amount of token B",
                    "amountBMin": "min amountB (slippage)",
                    "deadline": "transaction deadline (used by router)",
                    "to": "address to deposit for",
                    "tokenA": "address of tokenA",
                    "tokenB": "address of tokenB"
                }
            },
            "claimRewardsMulti(address)": {
                "params": {
                    "to": "address that receives the rewards"
                }
            },
            "withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
                "params": {
                    "amountAMin": "min amountA to receive (slippage)",
                    "amountBMin": "min amountB to receive (slippage)",
                    "deadline": "transaction deadline (used by router)",
                    "liquidity": "liquidity token amount to remove",
                    "to": "address that receives the underlying",
                    "tokenA": "address of tokenA",
                    "tokenB": "address of tokenB"
                }
            }
        },
        "version": 1
    },
    "userdoc": {
        "events": {
            "LiquidityAndStakeAdded(address,uint256,uint256)": {
                "notice": "================================================== ============ Events ============================== =================================================="
            }
        },
        "kind": "user",
        "methods": {
            "addLiquidityAndStake(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
                "notice": "Add liquidity to a pair, deposit liquidity tokens to staking"
            },
            "claimRewardsMulti(address)": {
                "notice": "Claim rewards from each pool"
            },
            "withdrawAndRemoveLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
                "notice": "Withdraw liquidity tokens from staking, remove the underlying"
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 16560,
                "contract": "src/contracts/KrStakingUniHelper.sol:KrStakingUniHelper",
                "label": "router",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(IUniswapV2Router02)27257"
            },
            {
                "astId": 16563,
                "contract": "src/contracts/KrStakingUniHelper.sol:KrStakingUniHelper",
                "label": "factory",
                "offset": 0,
                "slot": "1",
                "type": "t_contract(IUniswapV2Factory)26535"
            },
            {
                "astId": 16566,
                "contract": "src/contracts/KrStakingUniHelper.sol:KrStakingUniHelper",
                "label": "staking",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(IKrStaking)22350"
            }
        ],
        "types": {
            "t_contract(IKrStaking)22350": {
                "encoding": "inplace",
                "label": "contract IKrStaking",
                "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Factory)26535": {
                "encoding": "inplace",
                "label": "contract IUniswapV2Factory",
                "numberOfBytes": "20"
            },
            "t_contract(IUniswapV2Router02)27257": {
                "encoding": "inplace",
                "label": "contract IUniswapV2Router02",
                "numberOfBytes": "20"
            }
        }
    }
}
