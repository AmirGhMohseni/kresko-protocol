{
    "address": "0x88603bdfd47Ba5A88EF3020C665a2FdECd81D27f",
    "abi": [
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                        }
                    ],
                    "internalType": "struct Token[]",
                    "name": "_tokens",
                    "type": "tuple[]"
                },
                {
                    "internalType": "address",
                    "name": "_weth",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_kiss",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "Funded",
            "type": "event"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                        }
                    ],
                    "internalType": "struct Token",
                    "name": "_token",
                    "type": "tuple"
                }
            ],
            "name": "addToken",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "accounts",
                    "type": "address[]"
                },
                {
                    "internalType": "uint256",
                    "name": "wethAmount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "ethAmount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "kissAmount",
                    "type": "uint256"
                }
            ],
            "name": "distribute",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "drain",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "drainERC20",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "funded",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "owners",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "uint256",
                            "name": "amount",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                        }
                    ],
                    "internalType": "struct Token[]",
                    "name": "_tokens",
                    "type": "tuple[]"
                }
            ],
            "name": "setTokens",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "accounts",
                    "type": "address[]"
                }
            ],
            "name": "toggleOwners",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x0317f1428158cf4402f2a3ced3a088a5895766fb88af4338c6577c6b6a280842",
    "receipt": {
        "to": null,
        "from": "0xd21040ab567F989E0E751BE56f74ca38804e53e9",
        "contractAddress": "0x88603bdfd47Ba5A88EF3020C665a2FdECd81D27f",
        "transactionIndex": 1,
        "gasUsed": "1321206",
        "logsBloom": "0x
        "blockHash": "0xb5859f7d7c04c33437a377470f8bba85c2fa48bd907fb6dfca9286a5cd5ea43a",
        "transactionHash": "0x0317f1428158cf4402f2a3ced3a088a5895766fb88af4338c6577c6b6a280842",
        "logs": [],
        "blockNumber": 5253886,
        "cumulativeGasUsed": "1321206",
        "status": 1,
        "byzantium": true
    },
    "args": [[], "0x028854b28861A8c32c14B9079Eb7e22642ab9512", "0xAcF353630a688e0fAbCb68AbbdB59A8e3f482656"],
    "numDeployments": 1,
    "solcInputHash": "fb19f3b1d3aeb8423671cfe6035044de",
    "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct Token[]\",\"name\":\"_tokens\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kiss\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct Token\",\"name\":\"_token\",\"type\":\"tuple\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kissAmount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"funded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct Token[]\",\"name\":\"_tokens\",\"type\":\"tuple[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"toggleOwners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/test/Multisender.sol\":\"Multisender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/test/MockERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\ncontract MockERC20 is ERC20 {\\n    mapping(address => bool) public minters;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        uint256 _initialSupply\\n    ) ERC20(_name, _symbol, _decimals) {\\n        _mint(msg.sender, _initialSupply);\\n        minters[msg.sender] = true;\\n    }\\n\\n    function toggleMinters(address[] calldata _minters) external {\\n        require(minters[msg.sender], \\\"!minter\\\");\\n        for (uint256 i; i < _minters.length; i++) {\\n            minters[_minters[i]] = !minters[_minters[i]];\\n        }\\n    }\\n\\n    function mint(address to, uint256 value) public virtual {\\n        require(minters[msg.sender], \\\"!minter\\\");\\n        _mint(to, value);\\n    }\\n\\n    function burn(address from, uint256 value) public virtual {\\n        require(minters[msg.sender], \\\"!minter\\\");\\n        _burn(from, value);\\n    }\\n}\\n\",\"keccak256\":\"0xbc4f19ac61b02e74f6bcfeccd868f190672cc804187a8b947d74fd4a0f39eb9b\",\"license\":\"MIT\"},\"src/contracts/test/Multisender.sol\":{\"content\":\"pragma solidity >=0.8.14;\\n\\nimport \\\"./MockERC20.sol\\\";\\nimport \\\"./WETH.sol\\\";\\n\\n/* solhint-disable no-empty-blocks */\\n\\nstruct Token {\\n    uint256 amount;\\n    address token;\\n}\\n\\ncontract Multisender {\\n    mapping(address => bool) public owners;\\n    mapping(address => bool) public funded;\\n\\n    Token[] internal tokens;\\n    WETH internal weth;\\n    address internal kiss;\\n\\n    event Funded(address indexed account);\\n\\n    constructor(\\n        Token[] memory _tokens,\\n        address _weth,\\n        address _kiss\\n    ) {\\n        owners[msg.sender] = true;\\n\\n        for (uint256 i; i < _tokens.length; i++) {\\n            tokens.push(_tokens[i]);\\n        }\\n        weth = WETH(_weth);\\n        kiss = _kiss;\\n    }\\n\\n    function addToken(Token memory _token) external {\\n        require(owners[msg.sender], \\\"!o\\\");\\n        tokens.push(_token);\\n    }\\n\\n    function setTokens(Token[] memory _tokens) external {\\n        require(owners[msg.sender], \\\"!o\\\");\\n        for (uint256 i; i < _tokens.length; i++) {\\n            tokens[i].amount = _tokens[i].amount;\\n            tokens[i].token = _tokens[i].token;\\n        }\\n    }\\n\\n    function toggleOwners(address[] calldata accounts) external {\\n        require(owners[msg.sender], \\\"!o\\\");\\n        for (uint256 i; i < accounts.length; i++) {\\n            owners[accounts[i]] = !owners[accounts[i]];\\n        }\\n    }\\n\\n    function distribute(\\n        address[] calldata accounts,\\n        uint256 wethAmount,\\n        uint256 ethAmount,\\n        uint256 kissAmount\\n    ) external {\\n        require(owners[msg.sender], \\\"!o\\\");\\n        for (uint256 i; i < accounts.length; i++) {\\n            if (funded[accounts[i]]) continue;\\n\\n            funded[accounts[i]] = true;\\n            for (uint256 j; j < tokens.length; j++) {\\n                MockERC20(tokens[j].token).mint(accounts[i], tokens[j].amount);\\n            }\\n\\n            weth.deposit(wethAmount);\\n            weth.transfer(accounts[i], wethAmount);\\n            MockERC20(kiss).transfer(accounts[i], kissAmount);\\n\\n            payable(accounts[i]).transfer(ethAmount);\\n\\n            emit Funded(accounts[i]);\\n        }\\n    }\\n\\n    function drain() external {\\n        require(owners[msg.sender], \\\"!o\\\");\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function drainERC20() external {\\n        require(owners[msg.sender], \\\"!o\\\");\\n        MockERC20(kiss).transfer(msg.sender, MockERC20(kiss).balanceOf(address(this)));\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x9f86b759d30b5067d1498bdc2737e66529f128f64ae28fde7c0515b3967486b7\"},\"src/contracts/test/WETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"../vendor/WETH9.sol\\\";\\n\\ncontract WETH is WETH9 {\\n    function deposit(uint256 amount) public {\\n        balanceOf[msg.sender] += amount;\\n        emit Deposit(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x24e95b91aa2d38caef0669e2c71a7d3d2707d5d48c41fa7527a2118a51c9fca4\",\"license\":\"MIT\"},\"src/contracts/vendor/WETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.14;\\n\\ncontract WETH9 {\\n    string public name = \\\"Wrapped Ether\\\";\\n    string public symbol = \\\"WETH\\\";\\n    uint8 public decimals = 18;\\n\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    function deposit() public payable virtual {\\n        balanceOf[msg.sender] += msg.value;\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 wad) public virtual {\\n        require(balanceOf[msg.sender] >= wad, \\\"WETH9: Error\\\");\\n        balanceOf[msg.sender] -= wad;\\n        payable(msg.sender).transfer(wad);\\n        emit Withdrawal(msg.sender, wad);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function approve(address guy, uint256 wad) public virtual returns (bool) {\\n        allowance[msg.sender][guy] = wad;\\n        emit Approval(msg.sender, guy, wad);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 wad) public returns (bool) {\\n        return transferFrom(msg.sender, dst, wad);\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) public virtual returns (bool) {\\n        require(balanceOf[src] >= wad, \\\"WETH9: Error\\\");\\n\\n        if (src != msg.sender && allowance[src][msg.sender] != type(uint256).max) {\\n            require(allowance[src][msg.sender] >= wad, \\\"WETH9: Error\\\");\\n            allowance[src][msg.sender] -= wad;\\n        }\\n\\n        balanceOf[src] -= wad;\\n        balanceOf[dst] += wad;\\n\\n        emit Transfer(src, dst, wad);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x10f82e368eb1e3e13170024d8e5a38fddc72881a369e9b4ff334cd80363fe537\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b5060405162001aff38038062001aff833981810160405281019062000037919062000460565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060005b83518110156200014d576002848281518110620000b357620000b2620004db565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508080620001449062000539565b91505062000091565b5081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000586565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200023d82620001f2565b810181811067ffffffffffffffff821117156200025f576200025e62000203565b5b80604052505050565b600062000274620001d9565b905062000282828262000232565b919050565b600067ffffffffffffffff821115620002a557620002a462000203565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000819050919050565b620002d581620002c0565b8114620002e157600080fd5b50565b600081519050620002f581620002ca565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200032882620002fb565b9050919050565b6200033a816200031b565b81146200034657600080fd5b50565b6000815190506200035a816200032f565b92915050565b600060408284031215620003795762000378620002bb565b5b62000385604062000268565b905060006200039784828501620002e4565b6000830152506020620003ad8482850162000349565b60208301525092915050565b6000620003d0620003ca8462000287565b62000268565b90508083825260208201905060408402830185811115620003f657620003f5620002b6565b5b835b818110156200042357806200040e888262000360565b845260208401935050604081019050620003f8565b5050509392505050565b600082601f830112620004455762000444620001ed565b5b815162000457848260208601620003b9565b91505092915050565b6000806000606084860312156200047c576200047b620001e3565b5b600084015167ffffffffffffffff8111156200049d576200049c620001e8565b5b620004ab868287016200042d565b9350506020620004be8682870162000349565b9250506040620004d18682870162000349565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200054682620002c0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200057b576200057a6200050a565b5b600182019050919050565b61156980620005966000396000f3fe60806040526004361061007f5760003560e01c80637a9f788d1161004e5780637a9f788d146101425780639804cb4d1461016b5780639890220b14610194578063f8594305146101ab57610086565b8063022914a7146100885780631857f346146100c557806341bdc8a4146100ee57806345f9fc781461010557610086565b3661008657005b005b34801561009457600080fd5b506100af60048036038101906100aa9190610f0b565b6101d4565b6040516100bc9190610f53565b60405180910390f35b3480156100d157600080fd5b506100ec60048036038101906100e79190611009565b6101f4565b005b3480156100fa57600080fd5b506101036107b6565b005b34801561011157600080fd5b5061012c60048036038101906101279190610f0b565b61097f565b6040516101399190610f53565b60405180910390f35b34801561014e57600080fd5b5061016960048036038101906101649190611091565b61099f565b005b34801561017757600080fd5b50610192600480360381019061018d9190611282565b610b40565b005b3480156101a057600080fd5b506101a9610cb8565b005b3480156101b757600080fd5b506101d260048036038101906101cd91906112cb565b610d8c565b005b60006020528060005260406000206000915054906101000a900460ff1681565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661027f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027690611355565b60405180910390fd5b60005b858590508110156107ae57600160008787848181106102a4576102a3611375565b5b90506020020160208101906102b99190610f0b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661079b57600180600088888581811061031d5761031c611375565b5b90506020020160208101906103329190610f0b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060005b6002805490508110156104a457600281815481106103a7576103a6611375565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1988888581811061040757610406611375565b5b905060200201602081019061041c9190610f0b565b600284815481106104305761042f611375565b5b9060005260206000209060020201600001546040518363ffffffff1660e01b815260040161045f9291906113c2565b600060405180830381600087803b15801561047957600080fd5b505af115801561048d573d6000803e3d6000fd5b50505050808061049c9061141a565b915050610386565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25856040518263ffffffff1660e01b81526004016105009190611462565b600060405180830381600087803b15801561051a57600080fd5b505af115801561052e573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87878481811061058357610582611375565b5b90506020020160208101906105989190610f0b565b866040518363ffffffff1660e01b81526004016105b69291906113c2565b6020604051808303816000875af11580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f991906114a9565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87878481811061064b5761064a611375565b5b90506020020160208101906106609190610f0b565b846040518363ffffffff1660e01b815260040161067e9291906113c2565b6020604051808303816000875af115801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c191906114a9565b508585828181106106d5576106d4611375565b5b90506020020160208101906106ea9190610f0b565b73ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561072f573d6000803e3d6000fd5b5085858281811061074357610742611375565b5b90506020020160208101906107589190610f0b565b73ffffffffffffffffffffffffffffffffffffffff167fb436c2bf863ccd7b8f63171201efd4792066b4ce8e543dde9c3e9e9ab98e216c60405160405180910390a25b80806107a69061141a565b915050610282565b505050505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083890611355565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108db91906114d6565b602060405180830381865afa1580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c9190611506565b6040518363ffffffff1660e01b81526004016109399291906113c2565b6020604051808303816000875af1158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c91906114a9565b50565b60016020528060005260406000206000915054906101000a900460ff1681565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2190611355565b60405180910390fd5b60005b82829050811015610b3b57600080848484818110610a4e57610a4d611375565b5b9050602002016020810190610a639190610f0b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615600080858585818110610ac257610ac1611375565b5b9050602002016020810190610ad79190610f0b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610b339061141a565b915050610a2d565b505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610bcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc290611355565b60405180910390fd5b60005b8151811015610cb457818181518110610bea57610be9611375565b5b60200260200101516000015160028281548110610c0a57610c09611375565b5b906000526020600020906002020160000181905550818181518110610c3257610c31611375565b5b60200260200101516020015160028281548110610c5257610c51611375565b5b906000526020600020906002020160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610cac9061141a565b915050610bce565b5050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a90611355565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610d89573d6000803e3d6000fd5b50565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0e90611355565b60405180910390fd5b60028190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ed882610ead565b9050919050565b610ee881610ecd565b8114610ef357600080fd5b50565b600081359050610f0581610edf565b92915050565b600060208284031215610f2157610f20610ea3565b5b6000610f2f84828501610ef6565b91505092915050565b60008115159050919050565b610f4d81610f38565b82525050565b6000602082019050610f686000830184610f44565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610f9357610f92610f6e565b5b8235905067ffffffffffffffff811115610fb057610faf610f73565b5b602083019150836020820283011115610fcc57610fcb610f78565b5b9250929050565b6000819050919050565b610fe681610fd3565b8114610ff157600080fd5b50565b60008135905061100381610fdd565b92915050565b60008060008060006080868803121561102557611024610ea3565b5b600086013567ffffffffffffffff81111561104357611042610ea8565b5b61104f88828901610f7d565b9550955050602061106288828901610ff4565b935050604061107388828901610ff4565b925050606061108488828901610ff4565b9150509295509295909350565b600080602083850312156110a8576110a7610ea3565b5b600083013567ffffffffffffffff8111156110c6576110c5610ea8565b5b6110d285828601610f7d565b92509250509250929050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611127826110de565b810181811067ffffffffffffffff82111715611146576111456110ef565b5b80604052505050565b6000611159610e99565b9050611165828261111e565b919050565b600067ffffffffffffffff821115611185576111846110ef565b5b602082029050602081019050919050565b600080fd5b6000604082840312156111b1576111b0611196565b5b6111bb604061114f565b905060006111cb84828501610ff4565b60008301525060206111df84828501610ef6565b60208301525092915050565b60006111fe6111f98461116a565b61114f565b9050808382526020820190506040840283018581111561122157611220610f78565b5b835b8181101561124a5780611236888261119b565b845260208401935050604081019050611223565b5050509392505050565b600082601f83011261126957611268610f6e565b5b81356112798482602086016111eb565b91505092915050565b60006020828403121561129857611297610ea3565b5b600082013567ffffffffffffffff8111156112b6576112b5610ea8565b5b6112c284828501611254565b91505092915050565b6000604082840312156112e1576112e0610ea3565b5b60006112ef8482850161119b565b91505092915050565b600082825260208201905092915050565b7f216f000000000000000000000000000000000000000000000000000000000000600082015250565b600061133f6002836112f8565b915061134a82611309565b602082019050919050565b6000602082019050818103600083015261136e81611332565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6113ad81610ecd565b82525050565b6113bc81610fd3565b82525050565b60006040820190506113d760008301856113a4565b6113e460208301846113b3565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142582610fd3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611457576114566113eb565b5b600182019050919050565b600060208201905061147760008301846113b3565b92915050565b61148681610f38565b811461149157600080fd5b50565b6000815190506114a38161147d565b92915050565b6000602082840312156114bf576114be610ea3565b5b60006114cd84828501611494565b91505092915050565b60006020820190506114eb60008301846113a4565b92915050565b60008151905061150081610fdd565b92915050565b60006020828403121561151c5761151b610ea3565b5b600061152a848285016114f1565b9150509291505056fea2646970667358221220262824b3c8cc1f4af32a4df321f964bad26077cdfeacbb5ea56621c8aafdbc0764736f6c634300080e0033",
    "deployedBytecode": "0x60806040526004361061007f5760003560e01c80637a9f788d1161004e5780637a9f788d146101425780639804cb4d1461016b5780639890220b14610194578063f8594305146101ab57610086565b8063022914a7146100885780631857f346146100c557806341bdc8a4146100ee57806345f9fc781461010557610086565b3661008657005b005b34801561009457600080fd5b506100af60048036038101906100aa9190610f0b565b6101d4565b6040516100bc9190610f53565b60405180910390f35b3480156100d157600080fd5b506100ec60048036038101906100e79190611009565b6101f4565b005b3480156100fa57600080fd5b506101036107b6565b005b34801561011157600080fd5b5061012c60048036038101906101279190610f0b565b61097f565b6040516101399190610f53565b60405180910390f35b34801561014e57600080fd5b5061016960048036038101906101649190611091565b61099f565b005b34801561017757600080fd5b50610192600480360381019061018d9190611282565b610b40565b005b3480156101a057600080fd5b506101a9610cb8565b005b3480156101b757600080fd5b506101d260048036038101906101cd91906112cb565b610d8c565b005b60006020528060005260406000206000915054906101000a900460ff1681565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661027f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027690611355565b60405180910390fd5b60005b858590508110156107ae57600160008787848181106102a4576102a3611375565b5b90506020020160208101906102b99190610f0b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661079b57600180600088888581811061031d5761031c611375565b5b90506020020160208101906103329190610f0b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060005b6002805490508110156104a457600281815481106103a7576103a6611375565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1988888581811061040757610406611375565b5b905060200201602081019061041c9190610f0b565b600284815481106104305761042f611375565b5b9060005260206000209060020201600001546040518363ffffffff1660e01b815260040161045f9291906113c2565b600060405180830381600087803b15801561047957600080fd5b505af115801561048d573d6000803e3d6000fd5b50505050808061049c9061141a565b915050610386565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25856040518263ffffffff1660e01b81526004016105009190611462565b600060405180830381600087803b15801561051a57600080fd5b505af115801561052e573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87878481811061058357610582611375565b5b90506020020160208101906105989190610f0b565b866040518363ffffffff1660e01b81526004016105b69291906113c2565b6020604051808303816000875af11580156105d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f991906114a9565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87878481811061064b5761064a611375565b5b90506020020160208101906106609190610f0b565b846040518363ffffffff1660e01b815260040161067e9291906113c2565b6020604051808303816000875af115801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c191906114a9565b508585828181106106d5576106d4611375565b5b90506020020160208101906106ea9190610f0b565b73ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561072f573d6000803e3d6000fd5b5085858281811061074357610742611375565b5b90506020020160208101906107589190610f0b565b73ffffffffffffffffffffffffffffffffffffffff167fb436c2bf863ccd7b8f63171201efd4792066b4ce8e543dde9c3e9e9ab98e216c60405160405180910390a25b80806107a69061141a565b915050610282565b505050505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083890611355565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108db91906114d6565b602060405180830381865afa1580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c9190611506565b6040518363ffffffff1660e01b81526004016109399291906113c2565b6020604051808303816000875af1158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c91906114a9565b50565b60016020528060005260406000206000915054906101000a900460ff1681565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2190611355565b60405180910390fd5b60005b82829050811015610b3b57600080848484818110610a4e57610a4d611375565b5b9050602002016020810190610a639190610f0b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615600080858585818110610ac257610ac1611375565b5b9050602002016020810190610ad79190610f0b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610b339061141a565b915050610a2d565b505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610bcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc290611355565b60405180910390fd5b60005b8151811015610cb457818181518110610bea57610be9611375565b5b60200260200101516000015160028281548110610c0a57610c09611375565b5b906000526020600020906002020160000181905550818181518110610c3257610c31611375565b5b60200260200101516020015160028281548110610c5257610c51611375565b5b906000526020600020906002020160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080610cac9061141a565b915050610bce565b5050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a90611355565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610d89573d6000803e3d6000fd5b50565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0e90611355565b60405180910390fd5b60028190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ed882610ead565b9050919050565b610ee881610ecd565b8114610ef357600080fd5b50565b600081359050610f0581610edf565b92915050565b600060208284031215610f2157610f20610ea3565b5b6000610f2f84828501610ef6565b91505092915050565b60008115159050919050565b610f4d81610f38565b82525050565b6000602082019050610f686000830184610f44565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610f9357610f92610f6e565b5b8235905067ffffffffffffffff811115610fb057610faf610f73565b5b602083019150836020820283011115610fcc57610fcb610f78565b5b9250929050565b6000819050919050565b610fe681610fd3565b8114610ff157600080fd5b50565b60008135905061100381610fdd565b92915050565b60008060008060006080868803121561102557611024610ea3565b5b600086013567ffffffffffffffff81111561104357611042610ea8565b5b61104f88828901610f7d565b9550955050602061106288828901610ff4565b935050604061107388828901610ff4565b925050606061108488828901610ff4565b9150509295509295909350565b600080602083850312156110a8576110a7610ea3565b5b600083013567ffffffffffffffff8111156110c6576110c5610ea8565b5b6110d285828601610f7d565b92509250509250929050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611127826110de565b810181811067ffffffffffffffff82111715611146576111456110ef565b5b80604052505050565b6000611159610e99565b9050611165828261111e565b919050565b600067ffffffffffffffff821115611185576111846110ef565b5b602082029050602081019050919050565b600080fd5b6000604082840312156111b1576111b0611196565b5b6111bb604061114f565b905060006111cb84828501610ff4565b60008301525060206111df84828501610ef6565b60208301525092915050565b60006111fe6111f98461116a565b61114f565b9050808382526020820190506040840283018581111561122157611220610f78565b5b835b8181101561124a5780611236888261119b565b845260208401935050604081019050611223565b5050509392505050565b600082601f83011261126957611268610f6e565b5b81356112798482602086016111eb565b91505092915050565b60006020828403121561129857611297610ea3565b5b600082013567ffffffffffffffff8111156112b6576112b5610ea8565b5b6112c284828501611254565b91505092915050565b6000604082840312156112e1576112e0610ea3565b5b60006112ef8482850161119b565b91505092915050565b600082825260208201905092915050565b7f216f000000000000000000000000000000000000000000000000000000000000600082015250565b600061133f6002836112f8565b915061134a82611309565b602082019050919050565b6000602082019050818103600083015261136e81611332565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6113ad81610ecd565b82525050565b6113bc81610fd3565b82525050565b60006040820190506113d760008301856113a4565b6113e460208301846113b3565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142582610fd3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611457576114566113eb565b5b600182019050919050565b600060208201905061147760008301846113b3565b92915050565b61148681610f38565b811461149157600080fd5b50565b6000815190506114a38161147d565b92915050565b6000602082840312156114bf576114be610ea3565b5b60006114cd84828501611494565b91505092915050565b60006020820190506114eb60008301846113a4565b92915050565b60008151905061150081610fdd565b92915050565b60006020828403121561151c5761151b610ea3565b5b600061152a848285016114f1565b9150509291505056fea2646970667358221220262824b3c8cc1f4af32a4df321f964bad26077cdfeacbb5ea56621c8aafdbc0764736f6c634300080e0033",
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 523,
                "contract": "src/contracts/test/Multisender.sol:Multisender",
                "label": "owners",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 527,
                "contract": "src/contracts/test/Multisender.sol:Multisender",
                "label": "funded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_bool)"
            },
            {
                "astId": 531,
                "contract": "src/contracts/test/Multisender.sol:Multisender",
                "label": "tokens",
                "offset": 0,
                "slot": "2",
                "type": "t_array(t_struct(Token)519_storage)dyn_storage"
            },
            {
                "astId": 534,
                "contract": "src/contracts/test/Multisender.sol:Multisender",
                "label": "weth",
                "offset": 0,
                "slot": "3",
                "type": "t_contract(WETH)903"
            },
            {
                "astId": 536,
                "contract": "src/contracts/test/Multisender.sol:Multisender",
                "label": "kiss",
                "offset": 0,
                "slot": "4",
                "type": "t_address"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_struct(Token)519_storage)dyn_storage": {
                "base": "t_struct(Token)519_storage",
                "encoding": "dynamic_array",
                "label": "struct Token[]",
                "numberOfBytes": "32"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_contract(WETH)903": {
                "encoding": "inplace",
                "label": "contract WETH",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_struct(Token)519_storage": {
                "encoding": "inplace",
                "label": "struct Token",
                "members": [
                    {
                        "astId": 516,
                        "contract": "src/contracts/test/Multisender.sol:Multisender",
                        "label": "amount",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    },
                    {
                        "astId": 518,
                        "contract": "src/contracts/test/Multisender.sol:Multisender",
                        "label": "token",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_address"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
