{
    "address": "0xAcF353630a688e0fAbCb68AbbdB59A8e3f482656",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "name_",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "symbol_",
                    "type": "string"
                },
                {
                    "internalType": "uint8",
                    "name": "dec_",
                    "type": "uint8"
                },
                {
                    "internalType": "address",
                    "name": "kresko_",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newMinter",
                    "type": "address"
                }
            ],
            "name": "NewMinter",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "pendingNewMinter",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "unlockTimestamp",
                    "type": "uint256"
                }
            ],
            "name": "NewMinterInitiated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "Paused",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "previousAdminRole",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "newAdminRole",
                    "type": "bytes32"
                }
            ],
            "name": "RoleAdminChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }
            ],
            "name": "RoleGranted",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }
            ],
            "name": "RoleRevoked",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "Unpaused",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "DEFAULT_ADMIN_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "MINTER_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "OPERATOR_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "OPERATOR_ROLE_PERIOD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "PAUSER_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "burn",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "burnFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "shares",
                    "type": "uint256"
                }
            ],
            "name": "convertToAssets",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "assets",
                    "type": "uint256"
                }
            ],
            "name": "convertToShares",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "subtractedValue",
                    "type": "uint256"
                }
            ],
            "name": "decreaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_from",
                    "type": "address"
                }
            ],
            "name": "destroy",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                }
            ],
            "name": "getRoleAdmin",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getRoleMember",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                }
            ],
            "name": "getRoleMemberCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "_role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                }
            ],
            "name": "grantRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "hasRole",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "addedValue",
                    "type": "uint256"
                }
            ],
            "name": "increaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_amount",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "_to",
                    "type": "address"
                }
            ],
            "name": "issue",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "kresko",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "mint",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "operatorRoleTimestamp",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pendingOperator",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "renounceRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "revokeRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "_newName",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "_newSymbol",
                    "type": "string"
                }
            ],
            "name": "setMetadata",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes4",
                    "name": "interfaceId",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x0d64ddf7bddc6c8cfe0da44568f263faa83316b445b94f5afa4d9660ff8fc57e",
    "receipt": {
        "to": null,
        "from": "0xd21040ab567F989E0E751BE56f74ca38804e53e9",
        "contractAddress": "0xAcF353630a688e0fAbCb68AbbdB59A8e3f482656",
        "transactionIndex": 2,
        "gasUsed": "3854505",
        "logsBloom": "0x
        "blockHash": "0xe7c9e146b9e32b90df0db03d166bfe62f8300487619fabd5ee6a552259bda108",
        "transactionHash": "0x0d64ddf7bddc6c8cfe0da44568f263faa83316b445b94f5afa4d9660ff8fc57e",
        "logs": [
            {
                "transactionIndex": 2,
                "blockNumber": 5250846,
                "transactionHash": "0x0d64ddf7bddc6c8cfe0da44568f263faa83316b445b94f5afa4d9660ff8fc57e",
                "address": "0xAcF353630a688e0fAbCb68AbbdB59A8e3f482656",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x000000000000000000000000d21040ab567f989e0e751be56f74ca38804e53e9",
                    "0x000000000000000000000000d21040ab567f989e0e751be56f74ca38804e53e9"
                ],
                "data": "0x",
                "logIndex": 1,
                "blockHash": "0xe7c9e146b9e32b90df0db03d166bfe62f8300487619fabd5ee6a552259bda108"
            },
            {
                "transactionIndex": 2,
                "blockNumber": 5250846,
                "transactionHash": "0x0d64ddf7bddc6c8cfe0da44568f263faa83316b445b94f5afa4d9660ff8fc57e",
                "address": "0xAcF353630a688e0fAbCb68AbbdB59A8e3f482656",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
                    "0x000000000000000000000000d21040ab567f989e0e751be56f74ca38804e53e9",
                    "0x000000000000000000000000d21040ab567f989e0e751be56f74ca38804e53e9"
                ],
                "data": "0x",
                "logIndex": 2,
                "blockHash": "0xe7c9e146b9e32b90df0db03d166bfe62f8300487619fabd5ee6a552259bda108"
            },
            {
                "transactionIndex": 2,
                "blockNumber": 5250846,
                "transactionHash": "0x0d64ddf7bddc6c8cfe0da44568f263faa83316b445b94f5afa4d9660ff8fc57e",
                "address": "0xAcF353630a688e0fAbCb68AbbdB59A8e3f482656",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
                    "0x000000000000000000000000d21040ab567f989e0e751be56f74ca38804e53e9",
                    "0x000000000000000000000000d21040ab567f989e0e751be56f74ca38804e53e9"
                ],
                "data": "0x",
                "logIndex": 3,
                "blockHash": "0xe7c9e146b9e32b90df0db03d166bfe62f8300487619fabd5ee6a552259bda108"
            },
            {
                "transactionIndex": 2,
                "blockNumber": 5250846,
                "transactionHash": "0x0d64ddf7bddc6c8cfe0da44568f263faa83316b445b94f5afa4d9660ff8fc57e",
                "address": "0xAcF353630a688e0fAbCb68AbbdB59A8e3f482656",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd",
                    "0x00000000000000000000000087a7f2d14c4f09d55bf514738deb72f4209aa76c",
                    "0x000000000000000000000000d21040ab567f989e0e751be56f74ca38804e53e9"
                ],
                "data": "0x",
                "logIndex": 4,
                "blockHash": "0xe7c9e146b9e32b90df0db03d166bfe62f8300487619fabd5ee6a552259bda108"
            },
            {
                "transactionIndex": 2,
                "blockNumber": 5250846,
                "transactionHash": "0x0d64ddf7bddc6c8cfe0da44568f263faa83316b445b94f5afa4d9660ff8fc57e",
                "address": "0xAcF353630a688e0fAbCb68AbbdB59A8e3f482656",
                "topics": [
                    "0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b",
                    "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
                    "0x000000000000000000000000d21040ab567f989e0e751be56f74ca38804e53e9",
                    "0x000000000000000000000000d21040ab567f989e0e751be56f74ca38804e53e9"
                ],
                "data": "0x",
                "logIndex": 5,
                "blockHash": "0xe7c9e146b9e32b90df0db03d166bfe62f8300487619fabd5ee6a552259bda108"
            }
        ],
        "blockNumber": 5250846,
        "cumulativeGasUsed": "3930015",
        "status": 1,
        "byzantium": true
    },
    "args": ["KISS", "KISS", 18, "0x87A7F2d14c4F09d55bf514738Deb72F4209aa76C"],
    "numDeployments": 1,
    "solcInputHash": "fb63edc30c47f2b64b14360c203a9d64",
    "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"dec_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"kresko_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"NewMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingNewMinter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"NewMinterInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kresko\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorRoleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kresko\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"destroy(uint256,address)\":{\"params\":{\"_amount\":\"amount to burn\",\"_from\":\"address to burn tokens from\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"params\":{\"_role\":\"role to grant\",\"_to\":\"address to grant role for\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"issue(uint256,address)\":{\"params\":{\"_amount\":\"amount to mint\",\"_to\":\"address to mint tokens to\"}},\"mint(address,uint256)\":{\"details\":\"Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"}},\"title\":\"Kresko Integrated Stable System\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"destroy(uint256,address)\":{\"notice\":\"Allows OPERATOR_ROLE to burn tokens\"},\"grantRole(bytes32,address)\":{\"notice\":\"Overrides `AccessControl.grantRole` for following: * Implement a cooldown period of `OPERATOR_ROLE_PERIOD` minutes for setting a new OPERATOR_ROLE * Limited to 2 role members (Converter & Kresko) * EOA cannot be granted the operator roleOPERATOR_ROLE can still be revoked without this cooldown periodPAUSER_ROLE can still be granted without this cooldown period\"},\"issue(uint256,address)\":{\"notice\":\"Allows OPERATOR_ROLE to mint tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/kiss/KISS.sol\":\"KISS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x322088ced3c1d027a3260de4e5a867b2264adeef252b94158a9725767873ea31\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x978847fbff92d66d27d8767402a90ba996970b1936b372406aa17f5492bd8dc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\nimport \\\"../extensions/ERC20Pausable.sol\\\";\\nimport \\\"../../../access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        _setupRole(MINTER_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public virtual {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20, ERC20Pausable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2cd54808b851c4db22f459065af0b7a952262741a85a73923e7a660767cd7baa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/diamond/DiamondState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {EnumerableSet} from \\\"../libs/EnumerableSet.sol\\\";\\nimport {FacetAddressAndPosition, FacetFunctionSelectors, RoleData, ENTERED, NOT_ENTERED} from \\\"./DiamondTypes.sol\\\";\\n\\nimport {LibDiamondCut} from \\\"./libs/LibDiamondCut.sol\\\";\\nimport {LibOwnership} from \\\"./libs/LibOwnership.sol\\\";\\n\\nusing LibDiamondCut for DiamondState global;\\nusing LibOwnership for DiamondState global;\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                 Main Layout                                */\\n/* -------------------------------------------------------------------------- */\\n\\nstruct DiamondState {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Proxy                                    */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Maps function selector to the facet address and\\n    /// the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    /// @notice Maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    /// @notice Facet addresses\\n    address[] facetAddresses;\\n    /// @notice ERC165 query implementation\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Initialization                               */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Initialization status\\n    bool initialized;\\n    /// @notice Domain field separator\\n    bytes32 domainSeparator;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  Ownership                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /// @notice Current owner of the diamond\\n    address contractOwner;\\n    /// @notice Pending new diamond owner\\n    address pendingOwner;\\n    /// @notice Storage version\\n    uint8 storageVersion;\\n    /// @notice address(this) replacement for FF\\n    address self;\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Access Control                               */\\n    /* -------------------------------------------------------------------------- */\\n    mapping(bytes32 => RoleData) _roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Reentrancy                                 */\\n    /* -------------------------------------------------------------------------- */\\n    uint256 entered;\\n}\\n\",\"keccak256\":\"0x2ac47bdeb8d5d3f6aeabf941a0156e092cc40416a7e1fde68eafe125fe6de4a6\",\"license\":\"MIT\"},\"src/contracts/diamond/DiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable func-visibility */\\n\\npragma solidity >=0.8.14;\\n\\nimport \\\"./DiamondState.sol\\\";\\n\\n// Storage position\\nbytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"kresko.diamond.storage\\\");\\n\\nfunction ds() pure returns (DiamondState storage state) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0xa67ec48f5630f20bc19f8fc8d6f0d0670f323fa826a9f14d0dc76bd1130f5fc6\",\"license\":\"MIT\"},\"src/contracts/diamond/DiamondTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/// @dev set the initial value to 1 as we do not\\n/// wanna hinder possible gas refunds by setting it to 0 on exit.\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                 Reentrancy                                 */\\n/* -------------------------------------------------------------------------- */\\nuint256 constant NOT_ENTERED = 1;\\nuint256 constant ENTERED = 2;\\n\\n/* ========================================================================== */\\n/*                                   STRUCTS                                  */\\n/* ========================================================================== */\\n\\nstruct FacetAddressAndPosition {\\n    address facetAddress;\\n    // position in facetFunctionSelectors.functionSelectors array\\n    uint96 functionSelectorPosition;\\n}\\n\\nstruct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    // position of facetAddress in facetAddresses array\\n    uint256 facetAddressPosition;\\n}\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\",\"keccak256\":\"0x370ffd042b931cf8c3bd841462d4e52ed17a605e120d513a60a9b3eca2a21e9d\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IAuthorizationFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IAuthorizationFacet {\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xad30bb8e523b808b6f9854b3f9d84c1483e805806e833ce445dd563b79822bfa\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IDiamondCutFacet {\\n    /// @dev  Add=0, Replace=1, Remove=2\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    /// a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x9c96b87c0784a0eea3f4f288f7582dbf30ee6b293a2b38292680c66caa03bb6b\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IDiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupeFacet {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xd2383fcf3158a0750b9d69a785d1bcd2590a79fd584fe6a67865fbb9e2ece2da\",\"license\":\"MIT\"},\"src/contracts/diamond/interfaces/IOwnershipFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/// @title Contract Ownership\\ninterface IOwnershipFacet {\\n    /// @dev Pending contract ownership transfer is initiated.\\n    event PendingOwnershipTransfer(address indexed previousOwner, address indexed newOwner);\\n    /// @dev Ownership of a contract is transferred\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Get the address of pending owner\\n    /// @return pendingOwner_ The address of the pending owner.\\n    function pendingOwner() external view returns (address pendingOwner_);\\n\\n    /// @notice Set the address of the new pending owner of the contract\\n    /// @param _newOwner The address of the pending owner\\n    function transferOwnership(address _newOwner) external;\\n\\n    /// @notice Change the ownership of the contract to the pending owner\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xc2daced23dde00112415ccd9e79eb558ae7d8ac79bf841ee73467d4b694bb9b6\",\"license\":\"MIT\"},\"src/contracts/diamond/libs/LibDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {IDiamondCutFacet} from \\\"../interfaces/IDiamondCutFacet.sol\\\";\\n\\nimport {Meta} from \\\"../../libs/Meta.sol\\\";\\nimport {DiamondEvent} from \\\"../../libs/Events.sol\\\";\\nimport {DiamondState} from \\\"../DiamondState.sol\\\";\\n\\n// solhint-disable-next-line func-visibility\\nfunction initializeDiamondCut(address _init, bytes memory _calldata) {\\n    if (_init == address(0)) {\\n        require(_calldata.length == 0, \\\"DiamondCut: _init is address(0) but_calldata is not empty\\\");\\n    } else {\\n        require(_calldata.length > 0, \\\"DiamondCut: _calldata is empty but _init is not address(0)\\\");\\n        Meta.enforceHasContractCode(_init, \\\"DiamondCut: _init address has no code\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up the error\\n                revert(string(error));\\n            } else {\\n                revert(\\\"DiamondCut: _init function reverted\\\");\\n            }\\n        }\\n    }\\n}\\n\\nlibrary LibDiamondCut {\\n    /* -------------------------------------------------------------------------- */\\n    /*                              Diamond Functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    function diamondCut(\\n        DiamondState storage self,\\n        IDiamondCutFacet.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCutFacet.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCutFacet.FacetCutAction.Add) {\\n                self.addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCutFacet.FacetCutAction.Replace) {\\n                self.replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCutFacet.FacetCutAction.Remove) {\\n                self.removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondEvent.DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        require(_facetAddress != address(0), \\\"DiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(self.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            self.addFacet(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondCut: Can't add function that already exists\\\");\\n            self.addFunction(selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        require(_facetAddress != address(0), \\\"DiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(self.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            self.addFacet(_facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondCut: Can't replace function with same function\\\");\\n            self.removeFunction(oldFacetAddress, selector);\\n            self.addFunction(selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondCut: No selectors in facet to cut\\\");\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = self.selectorToFacetAndPosition[selector].facetAddress;\\n            self.removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondState storage self, address _facetAddress) internal {\\n        Meta.enforceHasContractCode(_facetAddress, \\\"DiamondCut: New facet has no code\\\");\\n        self.facetFunctionSelectors[_facetAddress].facetAddressPosition = self.facetAddresses.length;\\n        self.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondState storage self,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        self.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        self.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        self.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondState storage self,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(_facetAddress != address(0), \\\"DiamondCut: Can't remove function that doesn't exist\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = self.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = self.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = self.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            self.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            self.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        self.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete self.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = self.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = self.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = self.facetAddresses[lastFacetAddressPosition];\\n                self.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                self.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            self.facetAddresses.pop();\\n            delete self.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd387234a1c4071ff701dfca07c973036ad1cc040c5681f65737b48f4b57c4dc\",\"license\":\"MIT\"},\"src/contracts/diamond/libs/LibOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {IERC165} from \\\"../../shared/IERC165.sol\\\";\\nimport {IDiamondCutFacet} from \\\"../interfaces/IDiamondCutFacet.sol\\\";\\nimport {IDiamondLoupeFacet} from \\\"../interfaces/IDiamondLoupeFacet.sol\\\";\\nimport {IOwnershipFacet} from \\\"../interfaces/IOwnershipFacet.sol\\\";\\nimport {IAuthorizationFacet} from \\\"../interfaces/IAuthorizationFacet.sol\\\";\\n\\nimport {GeneralEvent, AuthEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {Meta} from \\\"../../libs/Meta.sol\\\";\\n\\nimport {NOT_ENTERED} from \\\"../DiamondTypes.sol\\\";\\nimport {DiamondState} from \\\"../DiamondState.sol\\\";\\n\\nlibrary LibOwnership {\\n    /* -------------------------------------------------------------------------- */\\n    /*                         Initialization & Ownership                         */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Ownership initializer\\n    /// @notice Only called on the first deployment\\n    function initialize(DiamondState storage self, address _owner) internal {\\n        require(!self.initialized, Error.ALREADY_INITIALIZED);\\n        self.entered = NOT_ENTERED;\\n        self.initialized = true;\\n        self.storageVersion++;\\n        self.contractOwner = _owner;\\n\\n        self.supportedInterfaces[type(IDiamondLoupeFacet).interfaceId] = true;\\n        self.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        self.supportedInterfaces[type(IDiamondCutFacet).interfaceId] = true;\\n        self.supportedInterfaces[type(IOwnershipFacet).interfaceId] = true;\\n        self.supportedInterfaces[type(IAuthorizationFacet).interfaceId] = true;\\n\\n        emit GeneralEvent.Deployed(_owner, self.storageVersion);\\n        emit AuthEvent.OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Initiate ownership transfer to a new address\\n     * @param _newOwner address that is set as the pending new owner\\n     * @notice caller must be the current contract owner\\n     */\\n    function initiateOwnershipTransfer(DiamondState storage self, address _newOwner) internal {\\n        require(Meta.msgSender() == self.contractOwner, Error.DIAMOND_INVALID_OWNER);\\n        require(_newOwner != address(0), \\\"DS: Owner cannot be 0-address\\\");\\n\\n        self.pendingOwner = _newOwner;\\n\\n        emit AuthEvent.PendingOwnershipTransfer(self.contractOwner, _newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfer the ownership to the new pending owner\\n     * @notice caller must be the pending owner\\n     */\\n    function finalizeOwnershipTransfer(DiamondState storage self) internal {\\n        require(Meta.msgSender() == self.pendingOwner, Error.DIAMOND_INVALID_PENDING_OWNER);\\n        self.contractOwner = self.pendingOwner;\\n        self.pendingOwner = address(0);\\n\\n        emit AuthEvent.OwnershipTransferred(self.contractOwner, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x79b180fa770e5ef4724dbd1abc81af31a3ebf18e28d4e836bfb2daba1ab9dd4c\",\"license\":\"MIT\"},\"src/contracts/kiss/KISS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\\\";\\n\\nimport {IKreskoAssetIssuer} from \\\"../kreskoasset/IKreskoAssetIssuer.sol\\\";\\nimport {IKISS} from \\\"./interfaces/IKISS.sol\\\";\\nimport {Role} from \\\"../libs/Authorization.sol\\\";\\n\\n/* solhint-disable not-rely-on-time */\\n\\n/**\\n * @title Kresko Integrated Stable System\\n * @author Kresko\\n */\\ncontract KISS is IKISS, IKreskoAssetIssuer, ERC20PresetMinterPauser {\\n    bytes32 public constant OPERATOR_ROLE = 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd;\\n    uint256 public constant OPERATOR_ROLE_PERIOD = 1 minutes; // testnet\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Layout                                   */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // AccessControl\\n    uint256 public operatorRoleTimestamp;\\n    address public pendingOperator;\\n    address public kresko;\\n\\n    // ERC20\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Events                                   */\\n    /* -------------------------------------------------------------------------- */\\n    event NewMinterInitiated(address pendingNewMinter, uint256 unlockTimestamp);\\n    event NewMinter(address newMinter);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Writes                                   */\\n    /* -------------------------------------------------------------------------- */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 dec_,\\n        address kresko_\\n    ) ERC20PresetMinterPauser(name_, symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = dec_;\\n        kresko = kresko_;\\n\\n        // AccessControl\\n        // 1. Setup admin\\n        // 2. Kresko protocol can mint\\n        // 3. Remove unnecessary MINTER_ROLE from multisig\\n        _setupRole(Role.ADMIN, _msgSender());\\n        _setupRole(Role.OPERATOR, kresko_);\\n        _revokeRole(MINTER_ROLE, _msgSender());\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n        return\\n            interfaceId != 0xffffffff &&\\n            (interfaceId == type(IKISS).interfaceId ||\\n                interfaceId == type(IKreskoAssetIssuer).interfaceId ||\\n                interfaceId == 0x01ffc9a7 ||\\n                interfaceId == 0x36372b07);\\n    }\\n\\n    /**\\n     * @notice Allows OPERATOR_ROLE to mint tokens\\n     *\\n     * @param _to address to mint tokens to\\n     * @param _amount amount to mint\\n     */\\n    function issue(uint256 _amount, address _to) public override onlyRole(Role.OPERATOR) returns (uint256) {\\n        require(msg.sender.code.length > 0, \\\"KISS: EOA\\\");\\n        _mint(_to, _amount);\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice Allows OPERATOR_ROLE to burn tokens\\n     *\\n     * @param _from address to burn tokens from\\n     * @param _amount amount to burn\\n     */\\n    function destroy(uint256 _amount, address _from) external onlyRole(Role.OPERATOR) returns (uint256) {\\n        require(msg.sender.code.length > 0, \\\"KISS: EOA\\\");\\n        _burn(_from, _amount);\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice Overrides `AccessControl.grantRole` for following:\\n     * * Implement a cooldown period of `OPERATOR_ROLE_PERIOD` minutes for setting a new OPERATOR_ROLE\\n     * * Limited to 2 role members (Converter & Kresko)\\n     * * EOA cannot be granted the operator role\\n     *\\n     * @notice OPERATOR_ROLE can still be revoked without this cooldown period\\n     * @notice PAUSER_ROLE can still be granted without this cooldown period\\n     * @param _role role to grant\\n     * @param _to address to grant role for\\n     */\\n    function grantRole(bytes32 _role, address _to)\\n        public\\n        override(AccessControl, IAccessControl)\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        // Handle OPERATOR_ROLE explicitly\\n        if (_role == Role.OPERATOR) {\\n            require(_to.code.length > 0, \\\"KISS: EOA\\\");\\n            if (pendingOperator != address(0)) {\\n                // Ensure cooldown period\\n\\n                require(operatorRoleTimestamp < block.timestamp, \\\"KISS: !OPERATOR_ROLE_PERIOD\\\");\\n                // Grant role\\n                _grantRole(Role.OPERATOR, pendingOperator);\\n                emit NewMinter(_msgSender());\\n                // Reset pending owner\\n                // No need to touch the timestamp (next call will just trigger the cooldown period)\\n                pendingOperator = address(0);\\n            } else if (operatorRoleTimestamp != 0) {\\n                // Do not allow more than 2 minters\\n                require(getRoleMemberCount(Role.OPERATOR) <= 1, \\\"KISS: !minterRevoked\\\");\\n                // Set the timestamp for the cooldown period\\n                operatorRoleTimestamp = block.timestamp + OPERATOR_ROLE_PERIOD;\\n                // Set the pending minter, execution to upper clause next call\\n                pendingOperator = _to;\\n                emit NewMinterInitiated(_to, operatorRoleTimestamp);\\n            } else {\\n                // Initialize converter\\n                _grantRole(Role.OPERATOR, _to);\\n                emit NewMinter(_to);\\n                // Set the timestamp, execution is not coming here again\\n                operatorRoleTimestamp = block.timestamp;\\n            }\\n        } else {\\n            // Default behavior\\n            _grantRole(_role, _to);\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Views                                   */\\n    /* -------------------------------------------------------------------------- */\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Testnet                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    function convertToShares(uint256 assets) external view returns (uint256) {\\n        return assets;\\n    }\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256) {\\n        return shares;\\n    }\\n\\n    /**\\n     * @notice Switch metadata\\n     * @param _newName new token name\\n     * @param _newSymbol new token symbol\\n     */\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function setMetadata(string memory _newName, string memory _newSymbol) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _name = _newSymbol;\\n        _symbol = _newName;\\n    }\\n}\\n\",\"keccak256\":\"0x619edbcaef41c9ee04b60e3fd3eb638071309c2e0a0c365a92c280789204dcc4\",\"license\":\"MIT\"},\"src/contracts/kiss/interfaces/IKISS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IKISS {\\n    function operatorRoleTimestamp() external returns (uint256);\\n\\n    function pendingOperator() external returns (address);\\n\\n    function kresko() external returns (address);\\n}\\n\",\"keccak256\":\"0x80ba9a88bb68d184bc432707e2742c5e076450e90b4f380ed8c07cef01a836d0\",\"license\":\"MIT\"},\"src/contracts/kreskoasset/IKreskoAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"../shared/IERC20Upgradeable.sol\\\";\\nimport {Rebase} from \\\"../shared/Rebase.sol\\\";\\n\\ninterface IKreskoAsset is IERC20Upgradeable, IAccessControlEnumerableUpgradeable {\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _owner,\\n        address _kresko\\n    ) external;\\n\\n    function kresko() external view returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function rebaseInfo() external view returns (Rebase memory);\\n\\n    function isRebased() external view returns (bool);\\n\\n    function rebase(uint256 _denominator, bool _positive) external;\\n\\n    function updateMetaData(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _version\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd2f05f62cd482d8436627c94fd7d4532d4b3e0503fecc777c07f09f6bf97bb3a\",\"license\":\"MIT\"},\"src/contracts/kreskoasset/IKreskoAssetAnchor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\ninterface IKreskoAssetAnchor is IAccessControlEnumerableUpgradeable {\\n    function asset() external view returns (address);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function deposit(uint256, address) external returns (uint256);\\n\\n    function withdraw(\\n        uint256,\\n        address,\\n        address\\n    ) external returns (uint256);\\n\\n    function issue(uint256 _assets, address _to) external returns (uint256 shares);\\n\\n    function destroy(uint256 _assets, address _from) external returns (uint256 shares);\\n\\n    function initialize(\\n        address _asset,\\n        string memory _name,\\n        string memory _symbol,\\n        address _owner\\n    ) external;\\n\\n    function maxDeposit(address) external view returns (uint256);\\n\\n    function maxMint(address) external view returns (uint256);\\n\\n    function maxRedeem(address owner) external view returns (uint256);\\n\\n    function maxWithdraw(address owner) external view returns (uint256);\\n\\n    function mint(uint256 _shares, address _receiver) external returns (uint256 assets);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    function previewMint(uint256 shares) external view returns (uint256);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function updateMetaData(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _version\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2dbdb5edf608c9dbcf89c720f18f909a53445030ae8255e4fac518935590c85f\",\"license\":\"MIT\"},\"src/contracts/kreskoasset/IKreskoAssetIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/// @title KreskoAsset issuer interface\\n/// @author Kresko\\n/// @notice Contract that can issue/destroy Kresko Assets through Kresko\\n/// @dev This interface is used by KISS & KreskoAssetAnchor\\ninterface IKreskoAssetIssuer {\\n    function issue(uint256 _assets, address _to) external returns (uint256 shares);\\n\\n    function destroy(uint256 _assets, address _from) external returns (uint256 shares);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5537d33f7ac02c68f59528446b86436306fa083052b0fe14aed71f41bfa416cb\",\"license\":\"MIT\"},\"src/contracts/libs/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\nimport {Error} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @title Library for operations on arrays\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Removes an element by copying the last element to the element to remove's place and removing\\n     * the last element.\\n     * @param _addresses The address array containing the item to be removed.\\n     * @param _elementToRemove The element to be removed.\\n     * @param _elementIndex The index of the element to be removed.\\n     */\\n    function removeAddress(\\n        address[] storage _addresses,\\n        address _elementToRemove,\\n        uint256 _elementIndex\\n    ) internal {\\n        require(_addresses[_elementIndex] == _elementToRemove, Error.ARRAY_OUT_OF_BOUNDS);\\n\\n        uint256 lastIndex = _addresses.length - 1;\\n        // If the index to remove is not the last one, overwrite the element at the index\\n        // with the last element.\\n        if (_elementIndex != lastIndex) {\\n            _addresses[_elementIndex] = _addresses[lastIndex];\\n        }\\n        // Remove the last element.\\n        _addresses.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xf903d0e3b9fb538cbbb13d320ea90dbc17ecc55ffc270d48bac5af67a7b27da4\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libs/Authorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"../vendor/gnosis/IGnosisSafeL2.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport {AuthEvent} from \\\"./Events.sol\\\";\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\nimport {Error} from \\\"./Errors.sol\\\";\\nimport {Meta} from \\\"./Meta.sol\\\";\\nimport {ds} from \\\"../diamond/DiamondStorage.sol\\\";\\n\\n/* solhint-disable state-visibility */\\n\\n/**\\n * @title Shared library for access control\\n * @author Kresko\\n */\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                    Roles                                   */\\n/* -------------------------------------------------------------------------- */\\n\\nlibrary Role {\\n    /// @dev role that grants other roles\\n    bytes32 constant ADMIN = 0x00;\\n    /// @dev keccak256(\\\"kresko.roles.minter.operator\\\")\\n    bytes32 constant OPERATOR = 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd;\\n    /// @dev keccak256(\\\"kresko.roles.minter.manager\\\")\\n    bytes32 constant MANAGER = 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0;\\n    /// @dev keccak256(\\\"kresko.roles.minter.safety.council\\\")\\n    bytes32 constant SAFETY_COUNCIL = 0x9c387ecf1663f9144595993e2c602b45de94bf8ba3a110cb30e3652d79b581c0;\\n}\\n\\nlibrary Authorization {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    function hasRole(bytes32 role, address account) internal view returns (bool) {\\n        return ds()._roles[role].members[account];\\n    }\\n\\n    function getRoleMemberCount(bytes32 role) internal view returns (uint256) {\\n        return ds()._roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `Meta.msgSender` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function checkRole(bytes32 role) internal view {\\n        _checkRole(role, Meta.msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return ds()._roles[role].adminRole;\\n    }\\n\\n    function getRoleMember(bytes32 role, uint256 index) internal view returns (address) {\\n        return ds()._roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @notice Checks if the target contract implements the ERC165 interfaceId for the multisig.\\n     *\\n     */\\n    function setupSecurityCouncil(address _councilAddress) internal {\\n        require(getRoleMemberCount(Role.SAFETY_COUNCIL) == 0, Error.SAFETY_COUNCIL_EXISTS);\\n        require(IGnosisSafeL2(_councilAddress).isOwner(msg.sender), Error.ADDRESS_INVALID_SAFETY_COUNCIL);\\n\\n        ds()._roles[Role.SAFETY_COUNCIL].members[_councilAddress] = true;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].add(_councilAddress);\\n\\n        emit AuthEvent.RoleGranted(Role.SAFETY_COUNCIL, _councilAddress, Meta.msgSender());\\n    }\\n\\n    function transferSecurityCouncil(address _newCouncil) internal {\\n        hasRole(Role.SAFETY_COUNCIL, msg.sender);\\n        require(IGnosisSafeL2(_newCouncil).getOwners().length >= 5, Error.MULTISIG_NOT_ENOUGH_OWNERS);\\n\\n        // As this is called by the multisig - just check that it's not an EOA\\n        ds()._roles[Role.SAFETY_COUNCIL].members[msg.sender] = false;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].remove(msg.sender);\\n\\n        ds()._roles[Role.SAFETY_COUNCIL].members[_newCouncil] = true;\\n        ds()._roleMembers[Role.SAFETY_COUNCIL].add(_newCouncil);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) internal {\\n        checkRole(getRoleAdmin(role));\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) internal {\\n        checkRole(getRoleAdmin(role));\\n        _revokeRole(role, account);\\n        ds()._roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function _renounceRole(bytes32 role, address account) internal {\\n        require(account == Meta.msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        ds()._roles[role].adminRole = adminRole;\\n        emit AuthEvent.RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * @notice Cannot grant the role `SAFETY_COUNCIL` - must be done via explicit function.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal ensureNotSafetyCouncil(role) {\\n        if (!hasRole(role, account)) {\\n            ds()._roles[role].members[account] = true;\\n            ds()._roleMembers[role].add(account);\\n            emit AuthEvent.RoleGranted(role, account, Meta.msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            ds()._roles[role].members[account] = false;\\n            ds()._roleMembers[role].remove(account);\\n            emit AuthEvent.RoleRevoked(role, account, Meta.msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensure we use the explicit `grantSafetyCouncilRole` function.\\n     */\\n    modifier ensureNotSafetyCouncil(bytes32 role) {\\n        require(role != Role.SAFETY_COUNCIL, Error.ADDRESS_INVALID_SAFETY_COUNCIL);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf8d261c125f778899772973840bc391a7d733cbed5e039b5a2f57128bfc9eada\",\"license\":\"MIT\"},\"src/contracts/libs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity >=0.8.14;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x383c949d8da7fe5cc88bad0fa0a9510154caf2451e3c3c0596ade13e1058dfaa\",\"license\":\"MIT\"},\"src/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity <0.9.0;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @author Kresko\\n * @title Error codes\\n * @notice Kresko-specific revert return values and their explanation\\n * @dev First number indicates the domain for the error\\n */\\nlibrary Error {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                    Diamond                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // Preserve readability for the diamond proxy\\n    string public constant DIAMOND_INVALID_FUNCTION_SIGNATURE = \\\"krDiamond: function does not exist\\\";\\n    string public constant DIAMOND_INVALID_PENDING_OWNER = \\\"krDiamond: Must be pending contract owner\\\";\\n    string public constant DIAMOND_INVALID_OWNER = \\\"krDiamond: Must be diamond owner\\\";\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   1. General                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_OWNER = \\\"100\\\"; // The sender must be owner\\n    string public constant NOT_OPERATOR = \\\"101\\\"; // The sender must be operator\\n    string public constant ZERO_WITHDRAW = \\\"102\\\"; // Withdraw must be greater than 0\\n    string public constant ZERO_DEPOSIT = \\\"103\\\"; // Deposit must be greater than 0\\n    string public constant ZERO_ADDRESS = \\\"104\\\"; // Address provided cannot be address(0)\\n    string public constant ALREADY_INITIALIZED = \\\"105\\\"; // Contract has already been initialized\\n    string public constant RE_ENTRANCY = \\\"106\\\"; // Function does not allow re-entrant calls\\n    string public constant NOT_ENOUGH_BALANCE = \\\"107\\\"; // Transfer of rebasing token exceeds value\\n    string public constant NOT_ENOUGH_ALLOWANCE = \\\"108\\\"; // TransferFrom of rebasing token exceeds allowance\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   2. Minter                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant NOT_LIQUIDATABLE = \\\"200\\\"; // Account has collateral deposits exceeding minCollateralValue\\n    string public constant ZERO_MINT = \\\"201\\\"; // Mint amount must be greater than 0\\n    string public constant ZERO_BURN = \\\"202\\\"; // Burn amount must be greater than 0\\n    string public constant ADDRESS_INVALID_ORACLE = \\\"203\\\"; // Oracle address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_NRWT = \\\"204\\\"; // Underlying rebasing token address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_FEERECIPIENT = \\\"205\\\"; // Fee recipient address cant be set to address(0)\\n    string public constant ADDRESS_INVALID_COLLATERAL = \\\"206\\\"; // Collateral address cant be set to address(0)\\n    string public constant COLLATERAL_EXISTS = \\\"207\\\"; // Collateral has already been added into the protocol\\n    string public constant COLLATERAL_INVALID_FACTOR = \\\"208\\\"; // cFactor must be greater than 1FP\\n    string public constant COLLATERAL_WITHDRAW_OVERFLOW = \\\"209\\\"; // Withdraw amount cannot reduce accounts collateral value under minCollateralValue\\n    string public constant KRASSET_INVALID_FACTOR = \\\"210\\\"; // kFactor must be greater than 1FP\\n    string public constant KRASSET_BURN_AMOUNT_OVERFLOW = \\\"211\\\"; // Repaying more than account has debt\\n    string public constant KRASSET_EXISTS = \\\"212\\\"; // KrAsset is already added\\n    string public constant PARAM_CLOSE_FEE_TOO_HIGH = \\\"213\\\"; // \\\"Close fee exceeds MAX_CLOSE_FEE\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_LOW = \\\"214\\\"; // \\\"Liquidation incentive less than MIN_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_LIQUIDATION_INCENTIVE_HIGH = \\\"215\\\"; // \\\"Liquidation incentive greater than MAX_LIQUIDATION_INCENTIVE_MULTIPLIER\\\"\\n    string public constant PARAM_MIN_COLLATERAL_RATIO_LOW = \\\"216\\\"; // Minimum collateral ratio less than MIN_COLLATERALIZATION_RATIO\\n    string public constant PARAM_MIN_DEBT_AMOUNT_HIGH = \\\"217\\\"; // Minimum debt param argument exceeds MAX_DEBT_VALUE\\n    string public constant COLLATERAL_DOESNT_EXIST = \\\"218\\\"; // Collateral does not exist within the protocol\\n    string public constant KRASSET_DOESNT_EXIST = \\\"219\\\"; // KrAsset does not exist within the protocol\\n    string public constant KRASSET_NOT_MINTABLE = \\\"220\\\"; // KrAsset is not mintable\\n    string public constant KRASSET_SYMBOL_EXISTS = \\\"221\\\"; // KrAsset with this symbol is already within the protocl\\n    string public constant KRASSET_COLLATERAL_LOW = \\\"222\\\"; // Collateral deposits do not cover the amount being minted\\n    string public constant KRASSET_MINT_AMOUNT_LOW = \\\"223\\\"; // Debt position must be greater than the minimum debt position value\\n    string public constant KRASSET_MAX_SUPPLY_REACHED = \\\"224\\\"; // KrAsset being minted has reached its current supply limit\\n    string public constant SELF_LIQUIDATION = \\\"225\\\"; // Account cannot liquidate itself\\n    string public constant ZERO_REPAY = \\\"226\\\"; // Account cannot liquidate itself\\n    string public constant STALE_PRICE = \\\"227\\\"; // Price for the asset is stale\\n    string public constant LIQUIDATION_OVERFLOW = \\\"228\\\"; // Repaying more USD value than allowed\\n    string public constant ADDRESS_INVALID_SAFETY_COUNCIL = \\\"229\\\"; // Account responsible for the safety council role must be a multisig\\n    string public constant SAFETY_COUNCIL_EXISTS = \\\"230\\\"; // Only one council role can exist\\n    string public constant NOT_SAFETY_COUNCIL = \\\"231\\\"; // Sender must have the role `Role.SAFETY_COUNCIL`\\n    string public constant ACTION_PAUSED_FOR_ASSET = \\\"232\\\"; // This action is currently paused for this asset\\n    string public constant INVALID_ASSET_SUPPLIED = \\\"233\\\"; // Asset supplied is not a collateral nor a krAsset\\n    string public constant KRASSET_NOT_ANCHOR = \\\"234\\\"; // Address is not the anchor for the krAsset\\n    string public constant INVALID_LT = \\\"235\\\"; // Liquidation threshold is greater than minimum collateralization ratio\\n    string public constant COLLATERAL_INSUFFICIENT_AMOUNT = \\\"236\\\"; // Insufficient amount of collateral to complete the operation\\n    string public constant MULTISIG_NOT_ENOUGH_OWNERS = \\\"237\\\"; // Multisig has invalid amount of owners\\n    string public constant PARAM_OPEN_FEE_TOO_HIGH = \\\"238\\\"; // \\\"Close fee exceeds MAX_OPEN_FEE\\\"\\n    string public constant INVALID_FEE_TYPE = \\\"239\\\"; // \\\"Invalid fee type\\n    string public constant KRASSET_INVALID_ANCHOR = \\\"240\\\"; // krAsset anchor does not support the correct interfaceId\\n    string public constant KRASSET_INVALID_CONTRACT = \\\"241\\\"; // krAsset does not support the correct interfaceId\\n    string public constant KRASSET_MARKET_CLOSED = \\\"242\\\"; // KrAsset's market is currently closed\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   3. Staking                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REWARD_PER_BLOCK_MISSING = \\\"300\\\"; // Each reward token must have a reward per block value\\n    string public constant REWARD_TOKENS_MISSING = \\\"301\\\"; // Pool must include an array of reward token addresses\\n    string public constant POOL_EXISTS = \\\"302\\\"; // Pool with this deposit token already exists\\n    string public constant POOL_DOESNT_EXIST = \\\"303\\\"; // Pool with this deposit token does not exist\\n    string public constant ADDRESS_INVALID_REWARD_RECIPIENT = \\\"304\\\"; // Reward recipient cant be address(0)\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   4. Libraries                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant ARRAY_OUT_OF_BOUNDS = \\\"400\\\"; // Array out of bounds error\\n    string public constant PRICEFEEDS_MUST_MATCH_STATUS_FEEDS = \\\"401\\\"; // Supplied price feeds must match status feeds in length\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   5. KrAsset                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant REBASING_DENOMINATOR_LOW = \\\"500\\\"; // denominator of rebases must be >= 1\\n    string public constant ISSUER_NOT_KRESKO = \\\"501\\\"; // issue must be done by kresko\\n    string public constant REDEEMER_NOT_KRESKO = \\\"502\\\"; // redeem must be done by kresko\\n    string public constant DESTROY_OVERFLOW = \\\"503\\\"; // trying to destroy more than allowed\\n    string public constant ISSUE_OVERFLOW = \\\"504\\\"; // trying to destroy more than allowed\\n    string public constant MINT_OVERFLOW = \\\"505\\\"; // trying to destroy more than allowed\\n    string public constant DEPOSIT_OVERFLOW = \\\"506\\\"; // trying to destroy more than allowed\\n    string public constant REDEEM_OVERFLOW = \\\"507\\\"; // trying to destroy more than allowed\\n    string public constant WITHDRAW_OVERFLOW = \\\"508\\\"; // trying to destroy more than allowed\\n    string public constant ZERO_SHARES = \\\"509\\\"; // amount of shares must be greater than 0\\n    string public constant ZERO_ASSETS = \\\"510\\\"; // amount of assets must be greater than 0\\n    string public constant INVALID_SCALED_AMOUNT = \\\"511\\\"; // amount of debt scaled must be greater than 0\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              6. STABILITY RATES                            */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant STABILITY_RATES_ALREADY_INITIALIZED = \\\"601\\\"; // stability rates for the asset are already initialized\\n    string public constant INVALID_OPTIMAL_RATE = \\\"602\\\"; // the optimal price rate configured is less than 1e27 for the asset\\n    string public constant INVALID_PRICE_RATE_DELTA = \\\"603\\\"; // the price rate delta configured is less than 1e27 for the asset\\n    string public constant STABILITY_RATES_NOT_INITIALIZED = \\\"604\\\"; // the stability rates for the asset are not initialized\\n    string public constant STABILITY_RATE_OVERFLOW = \\\"605\\\"; // the stability rates is > max uint128\\n    string public constant DEBT_INDEX_OVERFLOW = \\\"606\\\"; // the debt index is > max uint128\\n    string public constant KISS_NOT_SET = \\\"607\\\"; // the debt index is > max uint128\\n    string public constant STABILITY_RATE_REPAYMENT_AMOUNT_ZERO = \\\"608\\\"; // interest being repaid cannot be 0\\n    string public constant STABILITY_RATE_INTEREST_IS_ZERO = \\\"609\\\"; // account must have accrued interest to repay it\\n    string public constant INTEREST_REPAY_NOT_PARTIAL = \\\"610\\\"; // account must have accrued interest to repay it\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              7. AMM ORACLE                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string public constant PAIR_ADDRESS_IS_ZERO = \\\"701\\\"; // Pair address to configure cannot be zero\\n    string public constant INVALID_UPDATE_PERIOD = \\\"702\\\"; // Update period must be greater than the minimum\\n    string public constant PAIR_ALREADY_EXISTS = \\\"703\\\"; // Pair with the address is already initialized\\n    string public constant PAIR_DOES_NOT_EXIST = \\\"704\\\"; // Pair supplied does not exist\\n    string public constant INVALID_LIQUIDITY = \\\"706\\\"; // Pair initializaition requires that the pair has liquidity\\n    string public constant UPDATE_PERIOD_NOT_FINISHED = \\\"707\\\"; // Update can only be called once per update period\\n    string public constant INVALID_PAIR = \\\"708\\\"; // Pair being consulted does not have the token that the price was requested for\\n}\\n\",\"keccak256\":\"0x65a2a3b52958654dc1a9e8d4fef123f9c51ed6c4fa8236378e9606a800ccfdfd\",\"license\":\"MIT\"},\"src/contracts/libs/Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {IDiamondCutFacet} from \\\"../diamond/interfaces/IDiamondCutFacet.sol\\\";\\nimport {Action} from \\\"../minter/MinterTypes.sol\\\";\\n\\n/* solhint-disable var-name-mixedcase */\\n\\n/**\\n * @author Kresko\\n * @title Events\\n * @notice Event definitions\\n */\\n\\nlibrary GeneralEvent {\\n    /**\\n     * @dev Triggered when the contract has been deployed\\n     */\\n    event Deployed(address indexed owner, uint8 version);\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(address indexed operator, uint8 version);\\n}\\n\\nlibrary DiamondEvent {\\n    event DiamondCut(IDiamondCutFacet.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\\nlibrary MinterEvent {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Collateral                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a collateral asset is added to the protocol.\\n     * @dev Can only be emitted once for a given collateral asset.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The address of the oracle.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     */\\n    event CollateralAssetAdded(\\n        address indexed collateralAsset,\\n        uint256 factor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        address anchor\\n    );\\n\\n    /**\\n     * @notice Emitted when a collateral asset is updated.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param factor The collateral factor.\\n     * @param oracle The oracle address.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     */\\n    event CollateralAssetUpdated(\\n        address indexed collateralAsset,\\n        uint256 factor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        address anchor\\n    );\\n\\n    /**\\n     * @notice Emitted when an account deposits collateral.\\n     * @param account The address of the account depositing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was deposited.\\n     */\\n    event CollateralDeposited(address indexed account, address indexed collateralAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account withdraws collateral.\\n     * @param account The address of the account withdrawing collateral.\\n     * @param collateralAsset The address of the collateral asset.\\n     * @param amount The amount of the collateral asset that was withdrawn.\\n     */\\n    event CollateralWithdrawn(address indexed account, address indexed collateralAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when AMM oracle is set.\\n     * @param ammOracle The address of the AMM oracle.\\n     */\\n    event AMMOracleUpdated(address indexed ammOracle);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Kresko Assets                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a Kresko asset is added to the protocol.\\n     * @dev Can only be emitted once for a given Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param anchor anchor token\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     * @param supplyLimit The total supply limit.\\n     * @param closeFee The close fee percentage.\\n     * @param openFee The open fee percentage.\\n     */\\n    event KreskoAssetAdded(\\n        address indexed kreskoAsset,\\n        address anchor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        uint256 kFactor,\\n        uint256 supplyLimit,\\n        uint256 closeFee,\\n        uint256 openFee\\n    );\\n\\n    /**\\n     * @notice Emitted when a Kresko asset's oracle is updated.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param kFactor The k-factor.\\n     * @param oracle The address of the oracle.\\n     * @param marketStatusOracle The address of the market status oracle.\\n     * @param supplyLimit The total supply limit.\\n     * @param closeFee The close fee percentage.\\n     * @param openFee The open fee percentage.\\n     */\\n    event KreskoAssetUpdated(\\n        address indexed kreskoAsset,\\n        address anchor,\\n        address indexed oracle,\\n        address indexed marketStatusOracle,\\n        uint256 kFactor,\\n        uint256 supplyLimit,\\n        uint256 closeFee,\\n        uint256 openFee\\n    );\\n\\n    /**\\n     * @notice Emitted when an account mints a Kresko asset.\\n     * @param account The address of the account minting the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the Kresko asset that was minted.\\n     */\\n    event KreskoAssetMinted(address indexed account, address indexed kreskoAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account burns a Kresko asset.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the Kresko asset that was burned.\\n     */\\n    event KreskoAssetBurned(address indexed account, address indexed kreskoAsset, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an account burns a Kresko asset.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param kreskoAsset The address of the Kresko asset.\\n     * @param amount The amount of the Kresko asset that was burned.\\n     * @param interestRepaid The amount of the KISS repaid due to interest accrual\\n     */\\n    event DebtPositionClosed(\\n        address indexed account,\\n        address indexed kreskoAsset,\\n        uint256 indexed amount,\\n        uint256 interestRepaid\\n    );\\n\\n    /**\\n     * @notice Emitted when an account pays a close fee with a collateral asset upon burning a Kresko asset.\\n     * @dev This can be emitted multiple times for a single Kresko asset burn.\\n     * @param account The address of the account burning the Kresko asset.\\n     * @param paymentCollateralAsset The address of the collateral asset used to pay the close fee.\\n     * @param paymentAmount The amount of the payment collateral asset that was paid.\\n     * @param paymentValue The USD value of the payment.\\n     */\\n    event CloseFeePaid(\\n        address indexed account,\\n        address indexed paymentCollateralAsset,\\n        uint256 indexed paymentAmount,\\n        uint256 paymentValue\\n    );\\n\\n    /**\\n     * @notice Emitted when an account pays an open fee with a collateral asset upon minting a Kresko asset.\\n     * @dev This can be emitted multiple times for a single Kresko asset mint.\\n     * @param account The address of the account minting the Kresko asset.\\n     * @param paymentCollateralAsset The address of the collateral asset used to pay the open fee.\\n     * @param paymentAmount The amount of the payment collateral asset that was paid.\\n     * @param paymentValue The USD value of the payment.\\n     */\\n    event OpenFeePaid(\\n        address indexed account,\\n        address indexed paymentCollateralAsset,\\n        uint256 indexed paymentAmount,\\n        uint256 paymentValue\\n    );\\n\\n    /**\\n     * @notice Emitted when a liquidation occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param repayKreskoAsset The address of the Kresko asset being paid back to the protocol by the liquidator.\\n     * @param repayAmount The amount of the repay Kresko asset being paid back to the protocol by the liquidator.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event LiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed repayKreskoAsset,\\n        uint256 repayAmount,\\n        address seizedCollateralAsset,\\n        uint256 collateralSent\\n    );\\n\\n    /**\\n     * @notice Emitted when a liquidation of interest occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param repayKreskoAsset The address of the Kresko asset being paid back to the protocol by the liquidator.\\n     * @param repayUSD The value of the repay Kresko asset being paid back to the protocol by the liquidator.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event InterestLiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed repayKreskoAsset,\\n        uint256 repayUSD,\\n        address seizedCollateralAsset,\\n        uint256 collateralSent\\n    );\\n    /**\\n     * @notice Emitted when a batch liquidation of interest occurs.\\n     * @param account The address of the account being liquidated.\\n     * @param liquidator The account performing the liquidation.\\n     * @param seizedCollateralAsset The address of the collateral asset being seized from the account by the liquidator.\\n     * @param repayUSD The value of the repay Kresko asset being paid back to the protocol by the liquidator.\\n     * @param collateralSent The amount of the seized collateral asset being seized from the account by the liquidator.\\n     */\\n    event BatchInterestLiquidationOccurred(\\n        address indexed account,\\n        address indexed liquidator,\\n        address indexed seizedCollateralAsset,\\n        uint256 repayUSD,\\n        uint256 collateralSent\\n    );\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Parameters                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Emitted when a safety state is triggered for an asset\\n     * @param action Target action\\n     * @param asset Asset affected\\n     * @param description change description\\n     */\\n    event SafetyStateChange(Action indexed action, address indexed asset, string indexed description);\\n\\n    /**\\n     * @notice Emitted when the fee recipient is updated.\\n     * @param feeRecipient The new fee recipient.\\n     */\\n    event FeeRecipientUpdated(address indexed feeRecipient);\\n\\n    /**\\n     * @notice Emitted when the liquidation incentive multiplier is updated.\\n     * @param liquidationIncentiveMultiplier The new liquidation incentive multiplier raw value.\\n     */\\n    event LiquidationIncentiveMultiplierUpdated(uint256 indexed liquidationIncentiveMultiplier);\\n\\n    /**\\n     * @notice Emitted when the minimum collateralization ratio is updated.\\n     * @param minimumCollateralizationRatio The new minimum collateralization ratio raw value.\\n     */\\n    event MinimumCollateralizationRatioUpdated(uint256 indexed minimumCollateralizationRatio);\\n\\n    /**\\n     * @notice Emitted when the minimum debt value updated.\\n     * @param minimumDebtValue The new minimum debt value.\\n     */\\n    event MinimumDebtValueUpdated(uint256 indexed minimumDebtValue);\\n\\n    /**\\n     * @notice Emitted when the liquidation threshold value is updated\\n     * @param liquidationThreshold The new liquidation threshold value.\\n     */\\n    event LiquidationThresholdUpdated(uint256 indexed liquidationThreshold);\\n}\\n\\nlibrary StakingEvent {\\n    event LiquidityAndStakeAdded(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event LiquidityAndStakeRemoved(address indexed to, uint256 indexed amount, uint256 indexed pid);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 indexed amount);\\n    event ClaimRewards(address indexed user, address indexed rewardToken, uint256 indexed amount);\\n    event ClaimRewardsMulti(address indexed to);\\n}\\n\\nlibrary AuthEvent {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event PendingOwnershipTransfer(address indexed previousOwner, address indexed newOwner);\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\\nlibrary InterestRateEvent {\\n    /**\\n     * @dev Emitted when @param account repaid their @param asset interest @param value\\n     */\\n    event StabilityRateConfigured(\\n        address indexed asset,\\n        uint256 indexed stabilityRateBase,\\n        uint256 indexed priceRateDelta,\\n        uint256 rateSlope1,\\n        uint256 rateSlope2\\n    );\\n    /**\\n     * @dev Emitted when @param account repaid their @param asset interest @param value\\n     */\\n    event StabilityRateInterestRepaid(address indexed account, address indexed asset, uint256 value);\\n    /**\\n     * @dev Emitted when @param account repaid all interest @param value\\n     */\\n    event StabilityRateInterestBatchRepaid(address indexed account, uint256 value);\\n\\n    /**\\n     * @notice Emitted when KISS address is set.\\n     * @param KISS The address of KISS.\\n     */\\n    event KISSUpdated(address indexed KISS);\\n}\\n\",\"keccak256\":\"0xf4085e155cd9e13e6bb0dcc3689cfab26dddb3f93a5058bcaa406d8e5502defa\",\"license\":\"MIT\"},\"src/contracts/libs/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.14;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SignedSafeMathUpgradeable.sol\\\";\\n\\n/* solhint-disable  func-name-mixedcase */\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\n\\nlibrary FixedPoint {\\n    using SafeMathUpgradeable for uint256;\\n    using SignedSafeMathUpgradeable for int256;\\n\\n    uint256 internal constant FP_DECIMALS = 18;\\n    uint256 internal constant FP_SCALING_FACTOR = 10**FP_DECIMALS;\\n    int256 internal constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n\\n    // --------------------------------------- UNSIGNED ---------------------------------------------------------------\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED ------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored\\n    //   internally as int256 10^76.\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or\\n     * division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------- Additional Fixed Point math functions specific to Kresko protocol -------------------\\n\\n    function ONE_HUNDRED_PERCENT() internal pure returns (Unsigned memory) {\\n        return FixedPoint.Unsigned(1e18);\\n    }\\n\\n    function ONE_USD() internal pure returns (Unsigned memory) {\\n        return FixedPoint.Unsigned(1e18);\\n    }\\n\\n    function toFixedPoint(uint256 value) internal pure returns (Unsigned memory) {\\n        return FixedPoint.Unsigned(value);\\n    }\\n\\n    function toFixedPoint(uint128 value) internal pure returns (Unsigned memory) {\\n        return FixedPoint.Unsigned(value);\\n    }\\n\\n    function toFixedPoint(int256 value) internal pure returns (Unsigned memory) {\\n        return FixedPoint.Unsigned(uint256(value));\\n    }\\n}\\n\",\"keccak256\":\"0xbfe38c4f96f96a419d9cac2181cb20398f37ea7b5e86bcd72b73b36094e56f87\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/libs/Meta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-inline-assembly */\\n\\npragma solidity >=0.8.14;\\n\\nlibrary Meta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"));\\n\\n    function domainSeparator(string memory name, string memory version)\\n        internal\\n        view\\n        returns (bytes32 domainSeparator_)\\n    {\\n        domainSeparator_ = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                getChainID(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x3f3c3c3fc475ea52b4f9d635dd5c90c984458ba7510ebc0e4c3ae9702ad7d39e\",\"license\":\"MIT\"},\"src/contracts/libs/Percentages.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.10;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00).\\n * The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary Percentages {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(or(iszero(percentage), iszero(gt(value, div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage))))) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(add(mul(value, percentage), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(iszero(gt(value, div(sub(not(0), div(percentage, 2)), PERCENTAGE_FACTOR))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)), percentage)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d49de48721f554dbd1580961804c32c44dbfd943f5b1ff4f8b00bbeecc62df6\",\"license\":\"BUSL-1.1\"},\"src/contracts/libs/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity >=0.8.14;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x6e6036354cbb95e2337d987382a7845a2fbe9d687e2cff9dde2fe63d50d7f9fe\",\"license\":\"MIT\"},\"src/contracts/libs/WadRay.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.10;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRay {\\n    // HALF_WAD and HALF_RAY expressed with extended notation\\n    // as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings: https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0559fb40c491d5cc7cd26e4c98cc184795e46120342c299bdd0f75af58275add\",\"license\":\"BUSL-1.1\"},\"src/contracts/minter/InterestRateState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {LibStabilityRate} from \\\"./libs/LibStabilityRate.sol\\\";\\n\\nusing LibStabilityRate for StabilityRateConfig global;\\n\\n/* solhint-disable var-name-mixedcase */\\n\\n// Asset data\\nstruct StabilityRateConfig {\\n    // Interest index for debt\\n    uint128 debtIndex;\\n    // Represents the optimal price rate between an oracle report and an AMM twap\\n    uint128 optimalPriceRate;\\n    // Slope of the variable interest curve when rate > 0 and <= optimalPriceRate.\\n    // Expressed in ray\\n    uint128 rateSlope1;\\n    // Slope of the variable interest curve when rate > optimalPriceRate.\\n    // Expressed in ray\\n    uint128 rateSlope2;\\n    /**\\n     * Represents the excess price premium in either direction.\\n     * Expressed in ray\\n     * Eg. 1/20 ray = 5% price premium in either direction is considered excess\\n     */\\n    uint128 priceRateDelta;\\n    // Current accrual rate for debt\\n    uint128 stabilityRate;\\n    // Base accrual rate for debt\\n    uint128 stabilityRateBase;\\n    // Asset to configure\\n    address asset;\\n    // Last update for the asset\\n    uint40 lastUpdateTimestamp;\\n}\\n\\n// User data\\nstruct StabilityRateUser {\\n    uint128 debtScaled;\\n    uint128 lastDebtIndex;\\n}\\n\\n// Storage layout\\nstruct InterestRateState {\\n    // asset address -> asset data\\n    mapping(address => StabilityRateConfig) srAssets;\\n    // account address -> asset address -> user data\\n    mapping(address => mapping(address => StabilityRateUser)) srUserInfo;\\n    // interest repayment token is KISS\\n    address kiss;\\n}\\n\\n// Storage position\\nbytes32 constant INTEREST_RATE_STORAGE_POSITION = keccak256(\\\"kresko.interest.rate.storage\\\");\\n\\n// solhint-disable func-visibility\\nfunction irs() pure returns (InterestRateState storage state) {\\n    bytes32 position = INTEREST_RATE_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x2a74d915103338e55d54fae2307180656559217e51025e665b3cf3df91466189\",\"license\":\"MIT\"},\"src/contracts/minter/MinterState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {LibKrAsset} from \\\"./libs/LibKrAsset.sol\\\";\\nimport {LibAccount} from \\\"./libs/LibAccount.sol\\\";\\nimport {LibCollateral} from \\\"./libs/LibCollateral.sol\\\";\\nimport {LibCalculation} from \\\"./libs/LibCalculation.sol\\\";\\nimport {LibRepay} from \\\"./libs/LibRepay.sol\\\";\\nimport {LibMint} from \\\"./libs/LibMint.sol\\\";\\nimport {FixedPoint} from \\\"../libs/FixedPoint.sol\\\";\\nimport {Action, SafetyState, CollateralAsset, KrAsset} from \\\"./MinterTypes.sol\\\";\\n\\n/* solhint-disable state-visibility */\\nusing LibCalculation for MinterState global;\\nusing LibKrAsset for MinterState global;\\nusing LibCollateral for MinterState global;\\nusing LibAccount for MinterState global;\\nusing LibRepay for MinterState global;\\nusing LibMint for MinterState global;\\n\\n/**\\n * @title Storage layout for the minter state\\n * @author Kresko\\n */\\nstruct MinterState {\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Initialization                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Initialization version\\n    uint256 initializations;\\n    bytes32 domainSeparator;\\n    /* -------------------------------------------------------------------------- */\\n    /*                           Configurable Parameters                          */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice The recipient of protocol fees.\\n    address feeRecipient;\\n    /// @notice The factor used to calculate the incentive a liquidator receives in the form of seized collateral.\\n    FixedPoint.Unsigned liquidationIncentiveMultiplier;\\n    /// @notice The absolute minimum ratio of collateral value to debt value used to calculate collateral requirements.\\n    FixedPoint.Unsigned minimumCollateralizationRatio;\\n    /// @notice The minimum USD value of an individual synthetic asset debt position.\\n    FixedPoint.Unsigned minimumDebtValue;\\n    /// @notice The collateralization ratio at which positions may be liquidated.\\n    FixedPoint.Unsigned liquidationThreshold;\\n    /// @notice Flag tells if there is a need to perform safety checks on user actions\\n    bool safetyStateSet;\\n    /// @notice asset -> action -> state\\n    mapping(address => mapping(Action => SafetyState)) safetyState;\\n    /* -------------------------------------------------------------------------- */\\n    /*                              Collateral Assets                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Mapping of collateral asset token address to information on the collateral asset.\\n    mapping(address => CollateralAsset) collateralAssets;\\n    /**\\n     * @notice Mapping of account -> asset -> deposit amount\\n     */\\n    mapping(address => mapping(address => uint256)) collateralDeposits;\\n    /// @notice Mapping of account -> collateral asset addresses deposited\\n    mapping(address => address[]) depositedCollateralAssets;\\n    /* -------------------------------------------------------------------------- */\\n    /*                                Kresko Assets                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Mapping of kresko asset token address to information on the Kresko asset.\\n    mapping(address => KrAsset) kreskoAssets;\\n    /// @notice Mapping of account -> krAsset -> debt amount owed to the protocol\\n    mapping(address => mapping(address => uint256)) kreskoAssetDebt;\\n    /// @notice Mapping of account -> addresses of borrowed krAssets\\n    mapping(address => address[]) mintedKreskoAssets;\\n    /// @notice The AMM oracle address.\\n    address ammOracle;\\n    /// @notice Offchain oracle decimals\\n    uint8 extOracleDecimals;\\n}\\n\",\"keccak256\":\"0x7540b68e6b0a2cc62d374826727424494dbcce43e99784cc5484b7c03e9c641e\",\"license\":\"MIT\"},\"src/contracts/minter/MinterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable func-visibility */\\n\\npragma solidity >=0.8.14;\\n\\nimport {MinterState} from \\\"./MinterState.sol\\\";\\n\\n// Storage position\\nbytes32 constant MINTER_STORAGE_POSITION = keccak256(\\\"kresko.minter.storage\\\");\\n\\nfunction ms() pure returns (MinterState storage state) {\\n    bytes32 position = MINTER_STORAGE_POSITION;\\n    assembly {\\n        state.slot := position\\n    }\\n}\\n\",\"keccak256\":\"0x420e480023e1df437fb43a18c3c1cbf2b29e93378f025249512df02f8840a314\",\"license\":\"MIT\"},\"src/contracts/minter/MinterTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {AggregatorV2V3Interface} from \\\"../vendor/flux/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {FixedPoint} from \\\"../libs/FixedPoint.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {LibAssetUtility} from \\\"./libs/LibAssetUtility.sol\\\";\\n\\n/* solhint-disable state-visibility */\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                  CONSTANTS                                 */\\n/* -------------------------------------------------------------------------- */\\n\\nlibrary Constants {\\n    uint256 constant ONE_HUNDRED_PERCENT = 1e18;\\n\\n    /// @dev The maximum configurable close fee.\\n    uint256 constant MAX_CLOSE_FEE = 10e16; // 10%\\n\\n    /// @dev The maximum configurable open fee.\\n    uint256 constant MAX_OPEN_FEE = 10e16; // 10%\\n\\n    /// @dev The minimum configurable minimum collateralization ratio.\\n    uint256 constant MIN_COLLATERALIZATION_RATIO = ONE_HUNDRED_PERCENT;\\n\\n    /// @dev The minimum configurable liquidation incentive multiplier.\\n    /// This means liquidator only receives equal amount of collateral to debt repaid.\\n    uint256 constant MIN_LIQUIDATION_INCENTIVE_MULTIPLIER = ONE_HUNDRED_PERCENT;\\n\\n    /// @dev The maximum configurable liquidation incentive multiplier.\\n    /// This means liquidator receives 25% bonus collateral compared to the debt repaid.\\n    uint256 constant MAX_LIQUIDATION_INCENTIVE_MULTIPLIER = 1.25e18; // 125%\\n\\n    /// @dev The maximum configurable minimum debt USD value.\\n    uint256 constant MAX_DEBT_VALUE = 1000e18; // $1,000\\n}\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                    ENUM                                    */\\n/* -------------------------------------------------------------------------- */\\n\\n/**\\n * @dev Protocol user facing actions\\n *\\n * Deposit = 0\\n * Withdraw = 1,\\n * Repay = 2,\\n * Borrow = 3,\\n * Liquidate = 4\\n */\\nenum Action {\\n    Deposit,\\n    Withdraw,\\n    Repay,\\n    Borrow,\\n    Liquidation\\n}\\n\\n/**\\n * @dev Fee types\\n *\\n * Open = 0\\n * Close = 1\\n */\\nenum Fee {\\n    Open,\\n    Close\\n}\\n\\n/* ========================================================================== */\\n/*                                   STRUCTS                                  */\\n/* ========================================================================== */\\n\\n/**\\n * @notice Initialization arguments for the protocol\\n */\\nstruct MinterInitArgs {\\n    address operator;\\n    address council;\\n    address feeRecipient;\\n    uint8 extOracleDecimals;\\n    uint256 liquidationIncentiveMultiplier;\\n    uint256 minimumCollateralizationRatio;\\n    uint256 minimumDebtValue;\\n    uint256 liquidationThreshold;\\n}\\n\\n/**\\n * @notice Configurable parameters within the protocol\\n */\\n\\nstruct MinterParams {\\n    FixedPoint.Unsigned minimumCollateralizationRatio;\\n    FixedPoint.Unsigned liquidationIncentiveMultiplier;\\n    FixedPoint.Unsigned minimumDebtValue;\\n    FixedPoint.Unsigned liquidationThreshold;\\n    address feeRecipient;\\n    uint8 extOracleDecimals;\\n}\\n\\n/**\\n * @notice Information on a token that is a KreskoAsset.\\n * @dev Each KreskoAsset has 18 decimals.\\n * @param kFactor The k-factor used for calculating the required collateral value for KreskoAsset debt.\\n * @param oracle The oracle that provides the USD price of one KreskoAsset.\\n * @param supplyLimit The total supply limit of the KreskoAsset.\\n * @param anchor The anchor address\\n * @param closeFee The percentage paid in fees when closing a debt position of this type.\\n * @param openFee The percentage paid in fees when opening a debt position of this type.\\n * @param exists Whether the KreskoAsset exists within the protocol.\\n */\\nstruct KrAsset {\\n    FixedPoint.Unsigned kFactor;\\n    AggregatorV2V3Interface oracle;\\n    AggregatorV2V3Interface marketStatusOracle;\\n    uint256 supplyLimit;\\n    address anchor;\\n    FixedPoint.Unsigned closeFee;\\n    FixedPoint.Unsigned openFee;\\n    bool exists;\\n}\\nusing LibAssetUtility for KrAsset global;\\n/**\\n * @notice Information on a token that can be used as collateral.\\n * @dev Setting the factor to zero effectively makes the asset useless as collateral while still allowing\\n * it to be deposited and withdrawn.\\n * @param factor The collateral factor used for calculating the value of the collateral.\\n * @param oracle The oracle that provides the USD price of one collateral asset.\\n * @param anchor If the collateral is a KreskoAsset, the anchor address\\n * @param decimals The decimals for the token, stored here to avoid repetitive external calls.\\n * @param exists Whether the collateral asset exists within the protocol.\\n */\\nstruct CollateralAsset {\\n    FixedPoint.Unsigned factor;\\n    AggregatorV2V3Interface oracle;\\n    AggregatorV2V3Interface marketStatusOracle;\\n    address anchor;\\n    uint8 decimals;\\n    bool exists;\\n}\\nusing LibAssetUtility for CollateralAsset global;\\n\\n/// @notice Configuration for pausing `Action`\\nstruct Pause {\\n    bool enabled;\\n    uint256 timestamp0;\\n    uint256 timestamp1;\\n}\\n\\n/// @notice Safety configuration for assets\\nstruct SafetyState {\\n    Pause pause;\\n}\\n\",\"keccak256\":\"0x8dc6fec97bc8cbf35c63c9c6063617606283dddec9c3fbc90c4371c8977f1ce6\",\"license\":\"MIT\"},\"src/contracts/minter/interfaces/IUniswapV2Oracle.sol\":{\"content\":\"pragma solidity >=0.8.14;\\n\\ninterface IUniswapV2Oracle {\\n    function consultKrAsset(address _krAsset, uint256 _amount) external view returns (uint256 amountOut);\\n\\n    function consult(\\n        address _pair,\\n        address _token,\\n        uint256 _amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    function initPair(\\n        address _pairAddress,\\n        address _krAsset,\\n        uint256 _updatePeriod\\n    ) external;\\n\\n    function configurePair(address _pairAddress, uint256 _updatePeriod) external;\\n\\n    function update(address _pairAddress) external;\\n\\n    function krAssets(address) external returns (address);\\n\\n    function owner() external returns (address);\\n\\n    function factory() external returns (address);\\n}\\n\",\"keccak256\":\"0xcf1331459b2491451baf06b63eb01ac2d1bf19ecc74c9e2249af8373ce777fd6\"},\"src/contracts/minter/libs/LibAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {KrAsset, CollateralAsset} from \\\"../MinterTypes.sol\\\";\\nimport {RebaseMath, Rebase} from \\\"../../shared/Rebase.sol\\\";\\nimport {IKreskoAsset} from \\\"../../kreskoasset/IKreskoAsset.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\n\\nlibrary LibAccount {\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using RebaseMath for uint256;\\n    using WadRay for uint256;\\n    using LibDecimals for FixedPoint.Unsigned;\\n\\n    /**\\n     * @notice Gets an array of Kresko assets the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @return An array of addresses of Kresko assets the account has minted.\\n     */\\n    function getMintedKreskoAssets(MinterState storage self, address _account)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        return self.mintedKreskoAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Gets an array of collateral assets the account has deposited.\\n     * @param _account The account to get the deposited collateral assets for.\\n     * @return An array of addresses of collateral assets the account has deposited.\\n     */\\n    function getDepositedCollateralAssets(MinterState storage self, address _account)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        return self.depositedCollateralAssets[_account];\\n    }\\n\\n    /**\\n     * @notice Get `_account` collateral amount for `_asset`\\n     * @notice Performs rebasing conversion for KreskoAssets\\n     * @param _asset The asset address\\n     * @param _account The account to query amount for\\n     * @return Amount of collateral for `_asset`\\n     */\\n    function getCollateralDeposits(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        return self.collateralAssets[_asset].toRebasingAmount(self.collateralDeposits[_account][_asset]);\\n    }\\n\\n    /**\\n     * @notice Calculates if an account's current collateral value is under its minimum collateral value.\\n     * @dev Returns true if the account's current collateral value is below the minimum collateral value.\\n     * required to consider the position healthy.\\n     * @param _account The account to check.\\n     * @return A boolean indicating if the account can be liquidated.\\n     */\\n    function isAccountLiquidatable(MinterState storage self, address _account) internal view returns (bool) {\\n        return\\n            self.getAccountCollateralValue(_account).isLessThan(\\n                self.getAccountMinimumCollateralValueAtRatio(_account, self.liquidationThreshold)\\n            );\\n    }\\n\\n    /**\\n     * @notice Overload function for calculating liquidatable status with a future liquidated collateral value\\n     * @param _account The account to check.\\n     * @param _valueLiquidated Value liquidated, eg. in a batch liquidation\\n     * @return A boolean indicating if the account can be liquidated.\\n     */\\n    function isAccountLiquidatable(\\n        MinterState storage self,\\n        address _account,\\n        FixedPoint.Unsigned memory _valueLiquidated\\n    ) internal view returns (bool) {\\n        return\\n            self.getAccountCollateralValue(_account).sub(_valueLiquidated).isLessThan(\\n                self.getAccountMinimumCollateralValueAtRatio(_account, self.liquidationThreshold)\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value of a particular account.\\n     * @dev O(# of different deposited collateral assets by account) complexity.\\n     * @param _account The account to calculate the collateral value for.\\n     * @return totalCollateralValue The collateral value of a particular account.\\n     */\\n    function getAccountCollateralValue(MinterState storage self, address _account)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory totalCollateralValue)\\n    {\\n        address[] memory assets = self.depositedCollateralAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            (FixedPoint.Unsigned memory collateralValue, ) = self.getCollateralValueAndOraclePrice(\\n                asset,\\n                self.getCollateralDeposits(_account, asset),\\n                false // Take the collateral factor into consideration.\\n            );\\n            totalCollateralValue = totalCollateralValue.add(collateralValue);\\n        }\\n\\n        return totalCollateralValue;\\n    }\\n\\n    /**\\n     * @notice Get an account's minimum collateral value required\\n     *         to back a Kresko asset amount at a given collateralization ratio.\\n     * @dev Accounts that have their collateral value under the minimum collateral value are considered unhealthy,\\n     *      accounts with their collateral value under the liquidation threshold are considered liquidatable.\\n     * @param _account The account to calculate the minimum collateral value for.\\n     * @param _ratio The collateralization ratio required: higher ratio = more collateral required\\n     * @return The minimum collateral value at a given collateralization ratio for a given account.\\n     */\\n    function getAccountMinimumCollateralValueAtRatio(\\n        MinterState storage self,\\n        address _account,\\n        FixedPoint.Unsigned memory _ratio\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        return self.getAccountKrAssetValue(_account).mul(_ratio);\\n    }\\n\\n    /**\\n     * @notice Gets the Kresko asset value in USD of a particular account.\\n     * @param _account The account to calculate the Kresko asset value for.\\n     * @return value The Kresko asset value of a particular account.\\n     */\\n    function getAccountKrAssetValue(MinterState storage self, address _account)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory value)\\n    {\\n        address[] memory assets = self.mintedKreskoAssets[_account];\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n            value = value.add(self.getKrAssetValue(asset, self.getKreskoAssetDebtScaled(_account, asset), false));\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @notice Get `_account` scaled debt amount for `_asset`\\n     * @notice debt amount of an account has one external effects\\n     * * Effect #1: Stability rate accrual through debt index\\n     * @param _asset The asset address\\n     * @param _account The account to query amount for\\n     * @return Amount of scaled debt for `_asset`\\n     */\\n    function getKreskoAssetDebtScaled(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        uint256 debt = self.kreskoAssets[_asset].toRebasingAmount(irs().srUserInfo[_account][_asset].debtScaled);\\n        if (debt == 0) {\\n            return 0;\\n        }\\n\\n        return debt.rayMul(irs().srAssets[_asset].getNormalizedDebtIndex()).rayToWad();\\n    }\\n\\n    /**\\n     * @notice Get `_account` principal debt amount for `_asset`\\n     * @notice Principal debt amount of an account has one external effects\\n     * * Effect #1: Asset is rebased due to stock split/reverse split\\n     * @param _asset The asset address\\n     * @param _account The account to query amount for\\n     * @return Amount of principal debt for `_asset`\\n     */\\n    function getKreskoAssetDebtPrincipal(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256) {\\n        return self.kreskoAssets[_asset].toRebasingAmount(self.kreskoAssetDebt[_account][_asset]);\\n    }\\n\\n    /**\\n     * @notice Get the total interest accrued on top of debt\\n     * * eg: scaled debt - principal debt\\n     * @return assetAmount the interest denominated in _asset\\n     * @return kissAmount the interest denominated in KISS, ignores K-factor\\n     **/\\n    function getKreskoAssetDebtInterest(\\n        MinterState storage self,\\n        address _account,\\n        address _asset\\n    ) internal view returns (uint256 assetAmount, uint256 kissAmount) {\\n        assetAmount =\\n            self.getKreskoAssetDebtScaled(_account, _asset) -\\n            self.getKreskoAssetDebtPrincipal(_account, _asset);\\n        kissAmount = self.getKrAssetValue(_asset, assetAmount, true).fromFixedPointPriceToWad();\\n    }\\n\\n    /**\\n     * @notice Gets an index for the Kresko asset the account has minted.\\n     * @param _account The account to get the minted Kresko assets for.\\n     * @param _kreskoAsset The asset lookup address.\\n     * @return i = index of the minted Kresko asset.\\n     */\\n    function getMintedKreskoAssetsIndex(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset\\n    ) internal view returns (uint256 i) {\\n        for (i; i < self.mintedKreskoAssets[_account].length; i++) {\\n            if (self.mintedKreskoAssets[_account][i] == _kreskoAsset) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets an index for the collateral asset the account has deposited.\\n     * @param _account The account to get the index for.\\n     * @param _collateralAsset The asset lookup address.\\n     * @return i = index of the minted collateral asset.\\n     */\\n    function getDepositedCollateralAssetIndex(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset\\n    ) internal view returns (uint256 i) {\\n        for (i; i < self.depositedCollateralAssets[_account].length; i++) {\\n            if (self.depositedCollateralAssets[_account][i] == _collateralAsset) {\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe44bd4899a146c0acce8278fec7ef79ac2cdc4a343ea9b246743a621b909b6b6\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibAssetUtility.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {CollateralAsset, KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {LibDecimals, FixedPoint} from \\\"../libs/LibDecimals.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\n\\n/**\\n * @title LibAssetUtility\\n * @author Kresko\\n * @notice Utility functions for KrAsset and CollateralAsset structs\\n */\\nlibrary LibAssetUtility {\\n    using FixedPoint for int256;\\n    using FixedPoint for uint256;\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using LibDecimals for int256;\\n\\n    /**\\n     * @notice Amount of non rebasing tokens -> amount of rebasing tokens\\n     * @param self the kresko asset struct\\n     * @param _nonRebasedAmount the amount to convert\\n     */\\n    function toRebasingAmount(KrAsset memory self, uint256 _nonRebasedAmount) internal view returns (uint256) {\\n        return IKreskoAssetAnchor(self.anchor).convertToAssets(_nonRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of non rebasing tokens -> amount of rebasing tokens\\n     * @dev if collateral is not a kresko asset, returns the input\\n     * @param self the collateral asset struct\\n     * @param _nonRebasedAmount the amount to convert\\n     */\\n    function toRebasingAmount(CollateralAsset memory self, uint256 _nonRebasedAmount) internal view returns (uint256) {\\n        if (self.anchor == address(0)) return _nonRebasedAmount;\\n        return IKreskoAssetAnchor(self.anchor).convertToAssets(_nonRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of rebasing tokens -> amount of non rebasing tokens\\n     * @param self the kresko asset struct\\n     * @param _maybeRebasedAmount the amount to convert\\n     */\\n    function toNonRebasingAmount(KrAsset memory self, uint256 _maybeRebasedAmount) internal view returns (uint256) {\\n        return IKreskoAssetAnchor(self.anchor).convertToShares(_maybeRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Amount of rebasing tokens -> amount of non rebasing tokens\\n     * @dev if collateral is not a kresko asset, returns the input\\n     * @param self the collateral asset struct\\n     * @param _maybeRebasedAmount the amount to convert\\n     */\\n    function toNonRebasingAmount(CollateralAsset memory self, uint256 _maybeRebasedAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (self.anchor == address(0)) return _maybeRebasedAmount;\\n        return IKreskoAssetAnchor(self.anchor).convertToShares(_maybeRebasedAmount);\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a collateral asset in uint256 with extOracleDecimals\\n     */\\n    function uintPrice(CollateralAsset memory self) internal view returns (uint256) {\\n        return uint256(self.oracle.latestAnswer());\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in uint256 with extOracleDecimals\\n     */\\n    function uintPrice(KrAsset memory self) internal view returns (uint256) {\\n        return uint256(self.oracle.latestAnswer());\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a collateral asset in uint256 with 18 decimals\\n     */\\n    function wadPrice(CollateralAsset memory self) internal view returns (uint256) {\\n        return self.oracle.latestAnswer().oraclePriceToWad();\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in uint256 with 18 decimals\\n     */\\n    function wadPrice(KrAsset memory self) internal view returns (uint256) {\\n        return self.oracle.latestAnswer().oraclePriceToWad();\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a collateral asset in FixedPoint.Unsigned\\n     */\\n    function fixedPointPrice(CollateralAsset memory self) internal view returns (FixedPoint.Unsigned memory) {\\n        return self.oracle.latestAnswer().toFixedPoint();\\n    }\\n\\n    /**\\n     * @notice Get the oracle price of a kresko asset in FixedPoint.Unsigned\\n     */\\n    function fixedPointPrice(KrAsset memory self) internal view returns (FixedPoint.Unsigned memory) {\\n        return self.oracle.latestAnswer().toFixedPoint();\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in uint256\\n     */\\n    function uintUSD(CollateralAsset memory self, uint256 _assetAmount) internal view returns (uint256) {\\n        return self.uintPrice() * _assetAmount;\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in uint256\\n     */\\n    function uintUSD(KrAsset memory self, uint256 _assetAmount) internal view returns (uint256) {\\n        return self.uintPrice() * _assetAmount;\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in FixedPoint.Unsigned\\n     */\\n    function fixedPointUSD(CollateralAsset memory self, uint256 _assetAmount)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        return self.fixedPointPrice().mul(_assetAmount.toFixedPoint());\\n    }\\n\\n    /**\\n     * @notice Get value for @param _assetAmount of @param self in FixedPoint.Unsigned\\n     */\\n    function fixedPointUSD(KrAsset memory self, uint256 _assetAmount)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        return self.fixedPointPrice().mul(_assetAmount.toFixedPoint());\\n    }\\n}\\n\",\"keccak256\":\"0xaa2f9cd2a52815da43031164d38d8aaa4990cf80f2e49fba33aacfc9df89d02a\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\n\\n/**\\n * @title Calculation library for liquidation & fee values\\n * @author Kresko\\n */\\nlibrary LibCalculation {\\n    using Arrays for address[];\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /**\\n     * @dev Calculates the total value that can be liquidated for a liquidation pair\\n     * @param _account address to liquidate\\n     * @param _repayKreskoAsset address of the kreskoAsset being repaid on behalf of the liquidatee\\n     * @param _collateralAssetToSeize address of the collateral asset being seized from the liquidatee\\n     * @return maxLiquidatableUSD USD value that can be liquidated, 0 if the pair has no liquidatable value\\n     */\\n    function calculateMaxLiquidatableValueForAssets(\\n        MinterState storage self,\\n        address _account,\\n        address _repayKreskoAsset,\\n        address _collateralAssetToSeize\\n    ) internal view returns (FixedPoint.Unsigned memory maxLiquidatableUSD) {\\n        FixedPoint.Unsigned memory minCollateralRequired = self.getAccountMinimumCollateralValueAtRatio(\\n            _account,\\n            self.liquidationThreshold\\n        );\\n        FixedPoint.Unsigned memory accountCollateralValue = self.getAccountCollateralValue(_account);\\n\\n        // Account is not liquidatable\\n        if (accountCollateralValue.isGreaterThanOrEqual(minCollateralRequired)) {\\n            return FixedPoint.Unsigned(0);\\n        }\\n\\n        FixedPoint.Unsigned memory valueGainedPerUSDRepaid = self.calcValueGainedPerUSDRepaid(\\n            _repayKreskoAsset,\\n            _collateralAssetToSeize\\n        );\\n\\n        // Max repayment value for this pair\\n        maxLiquidatableUSD = minCollateralRequired.sub(accountCollateralValue).div(valueGainedPerUSDRepaid);\\n\\n        // Diminish liquidatable value for assets with lower cFactor\\n        // This is desired as they have more seizable value.\\n        FixedPoint.Unsigned memory cFactor = self.collateralAssets[_collateralAssetToSeize].factor;\\n\\n        if (\\n            self.depositedCollateralAssets[_account].length > 1 && cFactor.isLessThan(FixedPoint.ONE_HUNDRED_PERCENT())\\n        ) {\\n            // cFactor^4 is the diminishing factor (cFactor = 1 == nothing happens)\\n            return maxLiquidatableUSD.mul(cFactor.pow(4));\\n        }\\n    }\\n\\n    function calcValueGainedPerUSDRepaid(\\n        MinterState storage self,\\n        address _repayKreskoAsset,\\n        address _collateralToSeize\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        KrAsset memory krAsset = self.kreskoAssets[_repayKreskoAsset];\\n        FixedPoint.Unsigned memory cFactor = self.collateralAssets[_collateralToSeize].factor;\\n        return\\n            krAsset\\n                .kFactor\\n                .mul(self.liquidationThreshold)\\n                .mul(FixedPoint.ONE_HUNDRED_PERCENT().sub(krAsset.closeFee))\\n                .mul(cFactor)\\n                .div(self.liquidationIncentiveMultiplier)\\n                .sub(FixedPoint.ONE_USD());\\n    }\\n\\n    /**\\n     * @notice Calculate amount of collateral to seize during the liquidation process.\\n     * @param _liquidationIncentiveMultiplier The liquidation incentive multiplier.\\n     * @param _collateralOraclePriceUSD The address of the collateral asset to be seized.\\n     * @param _kreskoAssetRepayAmountUSD Kresko asset amount being repaid in exchange for the seized collateral.\\n     */\\n    function calculateAmountToSeize(\\n        FixedPoint.Unsigned memory _liquidationIncentiveMultiplier,\\n        FixedPoint.Unsigned memory _collateralOraclePriceUSD,\\n        FixedPoint.Unsigned memory _kreskoAssetRepayAmountUSD\\n    ) internal pure returns (FixedPoint.Unsigned memory) {\\n        // Seize amount = (repay amount USD * liquidation incentive / collateral price USD).\\n        // Denominate seize amount in collateral type\\n        // Apply liquidation incentive multiplier\\n        return _kreskoAssetRepayAmountUSD.mul(_liquidationIncentiveMultiplier).div(_collateralOraclePriceUSD);\\n    }\\n\\n    /**\\n     * @notice Calculates the fee to be taken from a user's deposited collateral assets.\\n     * @param _collateralAsset The collateral asset from which to take to the fee.\\n     * @param _account The owner of the collateral.\\n     * @param _feeValue The original value of the fee.\\n     * @param _collateralAssetIndex The collateral asset's index in the user's depositedCollateralAssets array.\\n     *\\n     * @return transferAmount to be received as a uint256\\n     * @return feeValuePaid FixedPoint.Unsigned representing the fee value paid.\\n     */\\n    function calcFee(\\n        MinterState storage self,\\n        address _collateralAsset,\\n        address _account,\\n        FixedPoint.Unsigned memory _feeValue,\\n        uint256 _collateralAssetIndex\\n    ) internal returns (uint256 transferAmount, FixedPoint.Unsigned memory feeValuePaid) {\\n        uint256 depositAmount = self.getCollateralDeposits(_account, _collateralAsset);\\n\\n        // Don't take the collateral asset's collateral factor into consideration.\\n        (FixedPoint.Unsigned memory depositValue, FixedPoint.Unsigned memory oraclePrice) = self\\n            .getCollateralValueAndOraclePrice(_collateralAsset, depositAmount, true);\\n\\n        // If feeValue < depositValue, the entire fee can be charged for this collateral asset.\\n        if (_feeValue.isLessThan(depositValue)) {\\n            // We want to make sure that transferAmount is < depositAmount.\\n            // Proof:\\n            //   depositValue <= oraclePrice * depositAmount (<= due to a potential loss of precision)\\n            //   feeValue < depositValue\\n            // Meaning:\\n            //   feeValue < oraclePrice * depositAmount\\n            // Solving for depositAmount we get:\\n            //   feeValue / oraclePrice < depositAmount\\n            // Due to integer division:\\n            //   transferAmount = floor(feeValue / oracleValue)\\n            //   transferAmount <= feeValue / oraclePrice\\n            // We see that:\\n            //   transferAmount <= feeValue / oraclePrice < depositAmount\\n            //   transferAmount < depositAmount\\n            transferAmount = self.collateralAssets[_collateralAsset].decimals.fromCollateralFixedPointAmount(\\n                _feeValue.div(oraclePrice)\\n            );\\n            feeValuePaid = _feeValue;\\n        } else {\\n            // If the feeValue >= depositValue, the entire deposit\\n            // should be taken as the fee.\\n            transferAmount = depositAmount;\\n            feeValuePaid = depositValue;\\n            // Because the entire deposit is taken, remove it from the depositCollateralAssets array.\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAsset, _collateralAssetIndex);\\n        }\\n\\n        return (transferAmount, feeValuePaid);\\n    }\\n}\\n\",\"keccak256\":\"0x7d1458d82a8d2add3e4c678670bf4df972ad358632de9c762bf3072d6ebd5e3e\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {AggregatorV2V3Interface} from \\\"../../vendor/flux/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {IKreskoAssetAnchor} from \\\"../../kreskoasset/IKreskoAssetAnchor.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\n\\nimport {CollateralAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\n/**\\n * @title Library for collateral related operations\\n * @author Kresko\\n */\\nlibrary LibCollateral {\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using LibDecimals for uint8;\\n    using Arrays for address[];\\n\\n    /**\\n     * In case a collateral asset is also a kresko asset, convert an amount to anchor shares\\n     * @param _amount amount to possibly convert\\n     * @param _collateralAsset address of the collateral asset\\n     */\\n    function normalizeCollateralAmount(\\n        MinterState storage self,\\n        uint256 _amount,\\n        address _collateralAsset\\n    ) internal view returns (uint256 amount) {\\n        CollateralAsset memory asset = self.collateralAssets[_collateralAsset];\\n        if (asset.anchor != address(0)) {\\n            return IKreskoAssetAnchor(asset.anchor).convertToShares(_amount);\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @notice Get the state of a specific collateral asset\\n     * @param _asset Address of the asset.\\n     * @return State of assets `CollateralAsset` struct\\n     */\\n    function collateralAsset(MinterState storage self, address _asset) internal view returns (CollateralAsset memory) {\\n        return self.collateralAssets[_asset];\\n    }\\n\\n    /**\\n     * @notice Gets the collateral value for a single collateral asset and amount.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _amount The amount of the collateral asset to calculate the collateral value for.\\n     * @param _ignoreCollateralFactor Boolean indicating if the asset's collateral factor should be ignored.\\n     * @return The collateral value for the provided amount of the collateral asset.\\n     */\\n    function getCollateralValueAndOraclePrice(\\n        MinterState storage self,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        bool _ignoreCollateralFactor\\n    ) internal view returns (FixedPoint.Unsigned memory, FixedPoint.Unsigned memory) {\\n        CollateralAsset memory asset = self.collateralAssets[_collateralAsset];\\n\\n        FixedPoint.Unsigned memory fixedPointAmount = asset.decimals.toCollateralFixedPointAmount(_amount);\\n        FixedPoint.Unsigned memory oraclePrice = asset.fixedPointPrice();\\n        FixedPoint.Unsigned memory value = fixedPointAmount.mul(oraclePrice);\\n\\n        if (!_ignoreCollateralFactor) {\\n            value = value.mul(asset.factor);\\n        }\\n        return (value, oraclePrice);\\n    }\\n\\n    function verifyAndRecordCollateralWithdrawal(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _withdrawAmount,\\n        uint256 _collateralDeposits,\\n        uint256 _depositedCollateralAssetIndex\\n    ) internal {\\n        require(_withdrawAmount > 0, Error.ZERO_WITHDRAW);\\n        require(\\n            _depositedCollateralAssetIndex <= self.depositedCollateralAssets[_account].length - 1,\\n            Error.ARRAY_OUT_OF_BOUNDS\\n        );\\n\\n        // Ensure the withdrawal does not result in the account having a collateral value\\n        // under the minimum collateral amount required to maintain a healthy position.\\n        // I.e. the new account's collateral value must still exceed the account's minimum\\n        // collateral value.\\n        // Get the account's current collateral value.\\n        FixedPoint.Unsigned memory accountCollateralValue = self.getAccountCollateralValue(_account);\\n        // Get the collateral value that the account will lose as a result of this withdrawal.\\n        (FixedPoint.Unsigned memory withdrawnCollateralValue, ) = self.getCollateralValueAndOraclePrice(\\n            _collateralAsset,\\n            _withdrawAmount,\\n            false // Take the collateral factor into consideration.\\n        );\\n        // Get the account's minimum collateral value.\\n        FixedPoint.Unsigned memory accountMinCollateralValue = self.getAccountMinimumCollateralValueAtRatio(\\n            _account,\\n            self.minimumCollateralizationRatio\\n        );\\n        // Require accountCollateralValue - withdrawnCollateralValue >= accountMinCollateralValue.\\n        require(\\n            accountCollateralValue.sub(withdrawnCollateralValue).isGreaterThanOrEqual(accountMinCollateralValue),\\n            Error.COLLATERAL_INSUFFICIENT_AMOUNT\\n        );\\n\\n        // Record the withdrawal.\\n        self.collateralDeposits[_account][_collateralAsset] = self\\n            .collateralAssets[_collateralAsset]\\n            .toNonRebasingAmount(_collateralDeposits - _withdrawAmount);\\n\\n        // If the user is withdrawing all of the collateral asset, remove the collateral asset\\n        // from the user's deposited collateral assets array.\\n        if (_withdrawAmount == _collateralDeposits) {\\n            self.depositedCollateralAssets[_account].removeAddress(_collateralAsset, _depositedCollateralAssetIndex);\\n        }\\n\\n        emit MinterEvent.CollateralWithdrawn(_account, _collateralAsset, _collateralDeposits);\\n    }\\n\\n    /**\\n     * @notice Records account as having deposited an amount of a collateral asset.\\n     * @dev Token transfers are expected to be done by the caller.\\n     * @param _account The address of the collateral asset.\\n     * @param _collateralAsset The address of the collateral asset.\\n     * @param _depositAmount The amount of the collateral asset deposited.\\n     */\\n    function recordCollateralDeposit(\\n        MinterState storage self,\\n        address _account,\\n        address _collateralAsset,\\n        uint256 _depositAmount\\n    ) internal {\\n        // Because the depositedCollateralAssets[_account] is pushed to if the existing\\n        // deposit amount is 0, require the amount to be > 0. Otherwise, the depositedCollateralAssets[_account]\\n        // could be filled with duplicates, causing collateral to be double-counted in the collateral value.\\n        require(_depositAmount > 0, Error.ZERO_DEPOSIT);\\n\\n        // If the account does not have an existing deposit for this collateral asset,\\n        // push it to the list of the account's deposited collateral assets.\\n        uint256 existingDepositAmount = self.getCollateralDeposits(_account, _collateralAsset);\\n        if (existingDepositAmount == 0) {\\n            self.depositedCollateralAssets[_account].push(_collateralAsset);\\n        }\\n        // Record the deposit.\\n        unchecked {\\n            self.collateralDeposits[_account][_collateralAsset] = self\\n                .collateralAssets[_collateralAsset]\\n                .toNonRebasingAmount(existingDepositAmount + _depositAmount);\\n        }\\n\\n        emit MinterEvent.CollateralDeposited(_account, _collateralAsset, _depositAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x4ae7711fb8764d0931b197453cd5633ca8c641729d032def4a09c101327b16be\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibDecimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {ms} from \\\"../MinterStorage.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\n\\n/**\\n * @title Library for Kresko specific decimals\\n */\\nlibrary LibDecimals {\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /**\\n     * @notice For a given collateral asset and amount, returns a FixedPoint.Unsigned representation.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals > 18, there may be a loss of precision.\\n     * @param _collateralAssetDecimals The collateral asset's number of decimals\\n     * @param _amount The amount of the collateral asset.\\n     * @return A FixedPoint.Unsigned of amount scaled according to the collateral asset's decimals.\\n     */\\n    function toCollateralFixedPointAmount(uint256 _collateralAssetDecimals, uint256 _amount)\\n        internal\\n        pure\\n        returns (FixedPoint.Unsigned memory)\\n    {\\n        // Initially, use the amount as the raw value for the FixedPoint.Unsigned,\\n        // which internally uses FixedPoint.FP_DECIMALS (18) decimals. Most collateral\\n        // assets will have 18 decimals.\\n        FixedPoint.Unsigned memory fixedPointAmount = FixedPoint.Unsigned(_amount);\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_collateralAssetDecimals < FixedPoint.FP_DECIMALS) {\\n            // If the decimals are less than 18, multiply the amount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token of a 17 decimal token will  cause the\\n            // initial setting of amount to be 0.1, so we multiply\\n            // by 10 ** (18 - 17) = 10 to get it to 0.1 * 10 = 1.\\n            return fixedPointAmount.mul(10**(FixedPoint.FP_DECIMALS - _collateralAssetDecimals));\\n        } else if (_collateralAssetDecimals > FixedPoint.FP_DECIMALS) {\\n            // If the decimals are greater than 18, divide the amount\\n            // to get the correct fixed point value.\\n            // Note because FixedPoint numbers are 18 decimals, this results\\n            // in loss of precision. E.g. if the collateral asset has 19\\n            // decimals and the deposit amount is only 1 uint, this will divide\\n            // 1 by 10 ** (19 - 18), resulting in 1 / 10 = 0\\n            return fixedPointAmount.div(10**(_collateralAssetDecimals - FixedPoint.FP_DECIMALS));\\n        }\\n        return fixedPointAmount;\\n    }\\n\\n    /**\\n     * @notice For a given collateral asset and fixed point amount, i.e. where a rawValue of 1e18 is equal to 1\\n     *   whole token, returns the amount according to the collateral asset's decimals.\\n     * @dev If the collateral asset has decimals other than 18, the amount is scaled appropriately.\\n     *   If decimals < 18, there may be a loss of precision.\\n     * @param _collateralAssetDecimals The collateral asset's number of decimals\\n     * @param _fixedPointAmount The fixed point amount of the collateral asset.\\n     * @return An amount that is compatible with the collateral asset's decimals.\\n     */\\n    function fromCollateralFixedPointAmount(\\n        uint256 _collateralAssetDecimals,\\n        FixedPoint.Unsigned memory _fixedPointAmount\\n    ) internal pure returns (uint256) {\\n        // Initially, use the rawValue, which internally uses FixedPoint.FP_DECIMALS (18) decimals\\n        // Most collateral assets will have 18 decimals.\\n        uint256 amount = _fixedPointAmount.rawValue;\\n        // Handle cases where the collateral asset's decimal amount is not 18.\\n        if (_collateralAssetDecimals < FixedPoint.FP_DECIMALS) {\\n            // If the decimals are less than 18, divide the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 17 decimals, divide by 10 ** (18 - 17) = 10\\n            // to get a value of 1e17.\\n            // This may result in a loss of precision.\\n            return amount / (10**(FixedPoint.FP_DECIMALS - _collateralAssetDecimals));\\n        } else if (_collateralAssetDecimals > FixedPoint.FP_DECIMALS) {\\n            // If the decimals are greater than 18, multiply the depositAmount\\n            // to get the correct fixed point value.\\n            // E.g. 1 full token will result in amount being 1e18 at this point,\\n            // so if the token has 19 decimals, multiply by 10 ** (19 - 18) = 10\\n            // to get a value of 1e19.\\n            return amount * (10**(_collateralAssetDecimals - FixedPoint.FP_DECIMALS));\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Divides an uint256 @param _value with @param _priceWithOracleDecimals\\n     * @param _value Left side value of the division\\n     * @param wadValue result with 18 decimals\\n     */\\n    function divByPrice(uint256 _value, uint256 _priceWithOracleDecimals) internal view returns (uint256 wadValue) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals >= 18) return _priceWithOracleDecimals;\\n        return (_value / _priceWithOracleDecimals) * 10**(oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an uint256 with extOracleDecimals into a number with 18 decimals\\n     * @param _wadPrice value with extOracleDecimals\\n     */\\n    function fromWadPriceToUint(uint256 _wadPrice) internal view returns (uint256 priceWithOracleDecimals) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) return _wadPrice;\\n        return _wadPrice / 10**(18 - oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an 18 decimal price to a FixedPoint with extOracleDecimals\\n     * @param _wadPrice value with extOracleDecimals\\n     * @return priceWithOracleDecimals FixedPoint value with extOracleDecimals\\n     */\\n    function fromWadPriceToFixedPoint(uint256 _wadPrice)\\n        internal\\n        view\\n        returns (FixedPoint.Unsigned memory priceWithOracleDecimals)\\n    {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) {\\n            return FixedPoint.Unsigned(_wadPrice);\\n        }\\n        return FixedPoint.Unsigned(_wadPrice / 10**(18 - oracleDecimals));\\n    }\\n\\n    /**\\n     * @notice Converts an uint256 with extOracleDecimals into a number with 18 decimals\\n     * @param _priceWithOracleDecimals value with extOracleDecimals\\n     * @return wadPrice price with 18 decimals\\n     */\\n    function oraclePriceToWad(uint256 _priceWithOracleDecimals) internal view returns (uint256 wadPrice) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) {\\n            return _priceWithOracleDecimals;\\n        }\\n        return _priceWithOracleDecimals * 10**(18 - oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an int256 with extOracleDecimals into a number with 18 decimals\\n     * @param _priceWithOracleDecimals value with extOracleDecimals\\n     * @return wadPrice price with 18 decimals\\n     */\\n    function oraclePriceToWad(int256 _priceWithOracleDecimals) internal view returns (uint256 wadPrice) {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals >= 18) return uint256(_priceWithOracleDecimals);\\n        return uint256(_priceWithOracleDecimals) * 10**(18 - oracleDecimals);\\n    }\\n\\n    /**\\n     * @notice Converts an int256 with extOracleDecimals into a number with 18 decimals\\n     * @param _priceWithOracleDecimals value with extOracleDecimals\\n     * @return wadPrice price with 18 decimals\\n     */\\n    function fromFixedPointPriceToWad(FixedPoint.Unsigned memory _priceWithOracleDecimals)\\n        internal\\n        view\\n        returns (uint256 wadPrice)\\n    {\\n        uint8 oracleDecimals = ms().extOracleDecimals;\\n        if (oracleDecimals == 18) return _priceWithOracleDecimals.rawValue;\\n        return _priceWithOracleDecimals.rawValue * 10**(18 - oracleDecimals);\\n    }\\n}\\n\",\"keccak256\":\"0xf0d9dac1ffd0f934845dedac0746a0ff02cb7caf379a1eb7624a97fe0e310d6f\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibKrAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {IUniswapV2Oracle} from \\\"../interfaces/IUniswapV2Oracle.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\nlibrary LibKrAsset {\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using FixedPoint for uint256;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  Functions                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Get the state of a specific krAsset\\n     * @param _asset Address of the asset.\\n     * @return State of assets `KrAsset` struct\\n     */\\n    function kreskoAsset(MinterState storage self, address _asset) internal view returns (KrAsset memory) {\\n        return self.kreskoAssets[_asset];\\n    }\\n\\n    /**\\n     * @notice Gets the USD value for a single Kresko asset and amount.\\n     * @param _kreskoAsset The address of the Kresko asset.\\n     * @param _amount The amount of the Kresko asset to calculate the value for.\\n     * @param _ignoreKFactor Boolean indicating if the asset's k-factor should be ignored.\\n     * @return The value for the provided amount of the Kresko asset.\\n     */\\n    function getKrAssetValue(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _amount,\\n        bool _ignoreKFactor\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        FixedPoint.Unsigned memory value = krAsset.fixedPointUSD(_amount);\\n\\n        if (!_ignoreKFactor) {\\n            value = value.mul(krAsset.kFactor);\\n        }\\n\\n        return value;\\n    }\\n\\n    function getKrAssetAMMPrice(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _amount\\n    ) internal view returns (FixedPoint.Unsigned memory) {\\n        if (self.ammOracle == address(0)) {\\n            return FixedPoint.Unsigned(0);\\n        }\\n        return IUniswapV2Oracle(self.ammOracle).consultKrAsset(_kreskoAsset, _amount).toFixedPoint();\\n    }\\n\\n    /**\\n     * @notice Get the minimum collateral value required to\\n     * back a Kresko asset amount at a given collateralization ratio.\\n     * @param _krAsset The address of the Kresko asset.\\n     * @param _amount The Kresko Asset debt amount.\\n     * @return minCollateralValue is the minimum collateral value required for this Kresko Asset amount.\\n     * @param _ratio The collateralization ratio required: higher ratio = more collateral required.\\n     */\\n    function getMinimumCollateralValueAtRatio(\\n        MinterState storage self,\\n        address _krAsset,\\n        uint256 _amount,\\n        FixedPoint.Unsigned memory _ratio\\n    ) internal view returns (FixedPoint.Unsigned memory minCollateralValue) {\\n        // Calculate the collateral value required to back this Kresko asset amount at the given ratio\\n        return self.getKrAssetValue(_krAsset, _amount, false).mul(_ratio);\\n    }\\n}\\n\",\"keccak256\":\"0xbb345937de789d58b3f4859330cd909ab3c05c1d5669de9f5da6ad87c3e8dab9\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n// solhint-disable not-rely-on-time\\n// solhint-disable-next-line\\nimport {SafeERC20Upgradeable, IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {IKreskoAssetIssuer} from \\\"../../kreskoasset/IKreskoAssetIssuer.sol\\\";\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\n\\nimport {LibCalculation} from \\\"./LibCalculation.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\n\\nlibrary LibMint {\\n    using Arrays for address[];\\n\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n    using WadRay for uint256;\\n\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using LibCalculation for MinterState;\\n\\n    /// @notice Mint kresko assets with stability rate updates.\\n    /// @dev Updates the principal in MinterState and stability rate adjusted values in InterestRateState\\n    /// @param _kreskoAsset the asset being repaid\\n    /// @param _anchor the anchor token of the asset being repaid\\n    /// @param _amount the asset amount being burned\\n    /// @param _account the account the debt is subtracted from\\n    function mint(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        address _anchor,\\n        uint256 _amount,\\n        address _account\\n    ) internal {\\n        // Update global debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get possibly rebalanced amount of kresko asset\\n        uint256 issued = IKreskoAssetIssuer(_anchor).issue(_amount, _account);\\n        // Calculate debt index scaled value\\n        uint256 amountScaled = issued.wadToRay().rayDiv(newDebtIndex);\\n        require(amountScaled != 0, Error.INVALID_SCALED_AMOUNT);\\n        // Increase principal debt\\n        self.kreskoAssetDebt[_account][_kreskoAsset] += issued;\\n        // Update scaled values for the user\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled += uint128(amountScaled);\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n        // Update the global rate for the asset\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n    }\\n\\n    /**\\n     * @notice Charges the protocol open fee based off the value of the minted asset.\\n     * @dev Takes the fee from the account's collateral assets. Attempts collateral assets\\n     *   in reverse order of the account's deposited collateral assets array.\\n     * @param _account The account to charge the open fee from.\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _kreskoAssetAmountMinted The amount of the kresko asset being minted.\\n     */\\n    function chargeOpenFee(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _kreskoAssetAmountMinted\\n    ) internal {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        // Calculate the value of the fee according to the value of the krAssets being minted.\\n        FixedPoint.Unsigned memory feeValue = krAsset.fixedPointUSD(_kreskoAssetAmountMinted).mul(krAsset.openFee);\\n\\n        // Do nothing if the fee value is 0.\\n        if (feeValue.rawValue == 0) {\\n            return;\\n        }\\n\\n        address[] memory accountCollateralAssets = self.depositedCollateralAssets[_account];\\n        // Iterate backward through the account's deposited collateral assets to safely\\n        // traverse the array while still being able to remove elements if necessary.\\n        // This is because removing the last element of the array does not shift around\\n        // other elements in the array.\\n        for (uint256 i = accountCollateralAssets.length - 1; i >= 0; i--) {\\n            address collateralAssetAddress = accountCollateralAssets[i];\\n\\n            (uint256 transferAmount, FixedPoint.Unsigned memory feeValuePaid) = self.calcFee(\\n                collateralAssetAddress,\\n                _account,\\n                feeValue,\\n                i\\n            );\\n\\n            // Remove the transferAmount from the stored deposit for the account.\\n            self.collateralDeposits[_account][collateralAssetAddress] -= self\\n                .collateralAssets[collateralAssetAddress]\\n                .toNonRebasingAmount(transferAmount);\\n\\n            // Transfer the fee to the feeRecipient.\\n            IERC20Upgradeable(collateralAssetAddress).safeTransfer(self.feeRecipient, transferAmount);\\n            emit MinterEvent.OpenFeePaid(_account, collateralAssetAddress, transferAmount, feeValuePaid.rawValue);\\n\\n            feeValue = feeValue.sub(feeValuePaid);\\n            // If the entire fee has been paid, no more action needed.\\n            if (feeValue.rawValue == 0) {\\n                return;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa746667957449d61eb4b1128d503a35506eb7bc4513e72a07304330491842d13\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibRepay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n// solhint-disable not-rely-on-time\\n\\nimport {Arrays} from \\\"../../libs/Arrays.sol\\\";\\nimport {MinterEvent, InterestRateEvent} from \\\"../../libs/Events.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {IERC20Upgradeable} from \\\"../../shared/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"../../shared/SafeERC20Upgradeable.sol\\\";\\nimport {IKreskoAssetIssuer} from \\\"../../kreskoasset/IKreskoAssetIssuer.sol\\\";\\n\\nimport {LibDecimals} from \\\"../libs/LibDecimals.sol\\\";\\nimport {LibCalculation} from \\\"./LibCalculation.sol\\\";\\nimport {KrAsset} from \\\"../MinterTypes.sol\\\";\\nimport {irs} from \\\"../InterestRateState.sol\\\";\\nimport {MinterState} from \\\"../MinterState.sol\\\";\\n\\nlibrary LibRepay {\\n    using Arrays for address[];\\n\\n    using LibDecimals for uint8;\\n    using LibDecimals for uint256;\\n    using WadRay for uint256;\\n\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using LibCalculation for MinterState;\\n\\n    /// @notice Repay user kresko asset debt with stability rate updates.\\n    /// @dev Updates the principal in MinterState and stability rate adjusted values in InterestRateState\\n    /// @param _kreskoAsset the asset being repaid\\n    /// @param _anchor the anchor token of the asset being repaid\\n    /// @param _burnAmount the asset amount being burned\\n    /// @param _account the account the debt is subtracted from\\n    function repay(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        address _anchor,\\n        uint256 _burnAmount,\\n        address _account\\n    ) internal {\\n        // Update global debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get the possibly rebalanced amount of destroyed tokens\\n        uint256 destroyed = IKreskoAssetIssuer(_anchor).destroy(_burnAmount, msg.sender);\\n        // Calculate the debt index scaled amount\\n        uint256 amountScaled = destroyed.wadToRay().rayDiv(newDebtIndex);\\n        require(amountScaled != 0, Error.INVALID_SCALED_AMOUNT);\\n\\n        // Decrease the principal debt\\n        self.kreskoAssetDebt[_account][_kreskoAsset] -= destroyed;\\n        // Decrease the scaled debt and set user asset's last debt index\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled -= uint128(amountScaled);\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n        // Update the stability rate for the asset\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n    }\\n\\n    /**\\n     * @notice Repays accrued stability rate interest for a single asset\\n     * @param _account Account to repay interest for\\n     * @param _kreskoAsset Kresko asset to repay interest for\\n     * @return kissRepayAmount amount repaid\\n     */\\n    function repayFullStabilityRateInterest(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset\\n    ) internal returns (uint256 kissRepayAmount) {\\n        // Update debt index for the asset\\n        uint256 newDebtIndex = irs().srAssets[_kreskoAsset].updateDebtIndex();\\n        // Get the accrued interest in repayment token\\n        (, kissRepayAmount) = self.getKreskoAssetDebtInterest(_account, _kreskoAsset);\\n\\n        // If no interest has accrued no further operations needed\\n        // Do not revert because we want the preserve new debt index and stability rate\\n        if (kissRepayAmount == 0) {\\n            // Update stability rate for asset\\n            irs().srAssets[_kreskoAsset].updateStabilityRate();\\n            return 0;\\n        }\\n\\n        // Transfer the accrued interest\\n        IERC20Upgradeable(irs().kiss).safeTransferFrom(msg.sender, self.feeRecipient, kissRepayAmount);\\n\\n        // Update scaled values for the user\\n        irs().srUserInfo[_account][_kreskoAsset].debtScaled = uint128(\\n            self.getKreskoAssetDebtPrincipal(_account, _kreskoAsset).wadToRay().rayDiv(newDebtIndex)\\n        );\\n        irs().srUserInfo[_account][_kreskoAsset].lastDebtIndex = uint128(newDebtIndex);\\n\\n        // Remove from minted kresko assets if debt is cleared\\n        if (self.getKreskoAssetDebtPrincipal(_account, _kreskoAsset) == 0) {\\n            self.mintedKreskoAssets[_account].removeAddress(\\n                _kreskoAsset,\\n                self.getMintedKreskoAssetsIndex(_account, _kreskoAsset)\\n            );\\n        }\\n\\n        // Update stability rates\\n        irs().srAssets[_kreskoAsset].updateStabilityRate();\\n        // Emit event with the account, asset and amount repaid\\n        emit InterestRateEvent.StabilityRateInterestRepaid(_account, _kreskoAsset, kissRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Charges the protocol close fee based off the value of the burned asset.\\n     * @dev Takes the fee from the account's collateral assets. Attempts collateral assets\\n     *   in reverse order of the account's deposited collateral assets array.\\n     * @param _account The account to charge the close fee from.\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _burnAmount The amount of the kresko asset being burned.\\n     */\\n    function chargeCloseFee(\\n        MinterState storage self,\\n        address _account,\\n        address _kreskoAsset,\\n        uint256 _burnAmount\\n    ) internal {\\n        KrAsset memory krAsset = self.kreskoAssets[_kreskoAsset];\\n        // Calculate the value of the fee according to the value of the krAssets being burned.\\n        FixedPoint.Unsigned memory feeValue = krAsset.fixedPointUSD(_burnAmount).mul(krAsset.closeFee);\\n\\n        // Do nothing if the fee value is 0.\\n        if (feeValue.rawValue == 0) {\\n            return;\\n        }\\n\\n        address[] memory accountCollateralAssets = self.depositedCollateralAssets[_account];\\n        // Iterate backward through the account's deposited collateral assets to safely\\n        // traverse the array while still being able to remove elements if necessary.\\n        // This is because removing the last element of the array does not shift around\\n        // other elements in the array.\\n\\n        for (uint256 i = accountCollateralAssets.length - 1; i >= 0; i--) {\\n            address collateralAssetAddress = accountCollateralAssets[i];\\n\\n            (uint256 transferAmount, FixedPoint.Unsigned memory feeValuePaid) = self.calcFee(\\n                collateralAssetAddress,\\n                _account,\\n                feeValue,\\n                i\\n            );\\n\\n            // Remove the transferAmount from the stored deposit for the account.\\n            self.collateralDeposits[_account][collateralAssetAddress] -= self\\n                .collateralAssets[collateralAssetAddress]\\n                .toNonRebasingAmount(transferAmount);\\n\\n            // Transfer the fee to the feeRecipient.\\n            IERC20Upgradeable(collateralAssetAddress).safeTransfer(self.feeRecipient, transferAmount);\\n            emit MinterEvent.CloseFeePaid(_account, collateralAssetAddress, transferAmount, feeValuePaid.rawValue);\\n\\n            feeValue = feeValue.sub(feeValuePaid);\\n            // If the entire fee has been paid, no more action needed.\\n            if (feeValue.rawValue == 0) {\\n                return;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check that debt repaid does not leave a dust position, if it does:\\n     * return an amount that pays up to minDebtValue\\n     * @param _kreskoAsset The address of the kresko asset being burned.\\n     * @param _burnAmount The amount being burned\\n     * @param _debtAmount The debt amount of `_account`\\n     * @return amount == 0 or >= minDebtAmount\\n     */\\n    function ensureNotDustPosition(\\n        MinterState storage self,\\n        address _kreskoAsset,\\n        uint256 _burnAmount,\\n        uint256 _debtAmount\\n    ) internal view returns (uint256 amount) {\\n        // If the requested burn would put the user's debt position below the minimum\\n        // debt value, close up to the minimum debt value instead.\\n        FixedPoint.Unsigned memory krAssetValue = self.getKrAssetValue(_kreskoAsset, _debtAmount - _burnAmount, true);\\n        if (krAssetValue.isGreaterThan(0) && krAssetValue.isLessThan(self.minimumDebtValue)) {\\n            FixedPoint.Unsigned memory minDebtValue = self.minimumDebtValue.div(\\n                self.kreskoAssets[_kreskoAsset].fixedPointPrice()\\n            );\\n            amount = _debtAmount - minDebtValue.rawValue;\\n        } else {\\n            amount = _burnAmount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe5f75300bb5b365226e5b6f13b39cd9fbd7d68933f9f52f68eec17542a474791\",\"license\":\"MIT\"},\"src/contracts/minter/libs/LibStabilityRate.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.14;\\n\\nimport {IKreskoAsset} from \\\"../../kreskoasset/IKreskoAsset.sol\\\";\\nimport {IERC20Upgradeable} from \\\"../../shared/IERC20Upgradeable.sol\\\";\\n\\nimport {FixedPoint} from \\\"../../libs/FixedPoint.sol\\\";\\nimport {WadRay} from \\\"../../libs/WadRay.sol\\\";\\nimport {Error} from \\\"../../libs/Errors.sol\\\";\\nimport {Percentages} from \\\"../../libs/Percentages.sol\\\";\\nimport {LibKrAsset} from \\\"../libs/LibKrAsset.sol\\\";\\n\\nimport {StabilityRateConfig} from \\\"../InterestRateState.sol\\\";\\nimport {ms} from \\\"../MinterStorage.sol\\\";\\n\\n/* solhint-disable not-rely-on-time */\\n\\n/**\\n * @author Kresko\\n * @title AMM price stability rate library, derived from Aave Protocols VariableDebtToken calculations\\n * @notice Library for performing stability rate related operations\\n */\\nlibrary LibStabilityRate {\\n    using WadRay for uint256;\\n    using WadRay for uint128;\\n    using Percentages for uint256;\\n    using FixedPoint for FixedPoint.Unsigned;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @notice Cumulates the stability rate from previous update and multiplies the debt index with it.\\n     * @dev Updates the updated timestamp\\n     * @dev New debt index cannot overflow uint128\\n     * @param self configuration for the asset\\n     * @return newDebtIndex the updated index\\n     */\\n    function updateDebtIndex(StabilityRateConfig storage self) internal returns (uint256 newDebtIndex) {\\n        if (self.asset == address(0)) return WadRay.RAY;\\n\\n        newDebtIndex = self.debtIndex;\\n        // only cumulating if there is any assets minted and rate is over 0\\n        if (IERC20Upgradeable(self.asset).totalSupply() != 0) {\\n            uint256 cumulatedStabilityRate = self.calculateCompoundedInterest(block.timestamp);\\n            newDebtIndex = cumulatedStabilityRate.rayMul(self.debtIndex);\\n            require(newDebtIndex <= type(uint128).max, Error.DEBT_INDEX_OVERFLOW);\\n            self.debtIndex = uint128(newDebtIndex);\\n        }\\n\\n        self.lastUpdateTimestamp = uint40(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Updates the current stability rate for an asset\\n     * @dev New stability rate cannot overflow uint128\\n     * @param self rate configuration for the asset\\n     */\\n    function updateStabilityRate(StabilityRateConfig storage self) internal {\\n        if (self.asset == address(0)) return;\\n\\n        uint256 stabilityRate = calculateStabilityRate(self);\\n        require(stabilityRate <= type(uint128).max, Error.STABILITY_RATE_OVERFLOW);\\n        self.stabilityRate = uint128(stabilityRate);\\n    }\\n\\n    /**\\n     * @notice Get the current price rate between AMM and oracle pricing\\n     * @dev Raw return value of ammPrice == 0 when no AMM pair exists OR liquidity of the pair does not qualify\\n     * @param self rate configuration for the asset\\n     * @return priceRate the current price rate\\n     */\\n    function getPriceRate(StabilityRateConfig storage self) internal view returns (uint256 priceRate) {\\n        FixedPoint.Unsigned memory oraclePrice = ms().getKrAssetValue(self.asset, 1 ether, true);\\n        FixedPoint.Unsigned memory ammPrice = ms().getKrAssetAMMPrice(self.asset, 1 ether);\\n        // no pair, no effect\\n        if (ammPrice.rawValue == 0) {\\n            return 0;\\n        }\\n        return ammPrice.div(oraclePrice).div(10).rawValue;\\n    }\\n\\n    /**\\n     * @notice Calculate new stability rate from the current price rate\\n     * @dev Separate calculations exist for following cases:\\n     * case 1: AMM premium > optimal + delta\\n     * case 2: AMM premium < optimal - delta\\n     * case 3: AMM premium <= optimal + delta && AMM premium >= optimal - delta\\n     * @param self rate configuration for the asset\\n     * @return stabilityRate the current stability rate\\n     */\\n    function calculateStabilityRate(StabilityRateConfig storage self) internal view returns (uint256 stabilityRate) {\\n        uint256 priceRate = self.getPriceRate(); // 0.95 RAY = -5% PREMIUM, 1.05 RAY = +5% PREMIUM\\n\\n        // Return base rate if no AMM price exists\\n        if (priceRate == 0) {\\n            return self.stabilityRateBase;\\n        }\\n        // If AMM price > priceRate + delta, eg. AMM price is higher than oracle price\\n        if (priceRate > self.optimalPriceRate + self.priceRateDelta) {\\n            uint256 excessRate = priceRate - WadRay.RAY;\\n            stabilityRate =\\n                self.stabilityRateBase.rayDiv(priceRate.percentMul(125e2)) +\\n                ((WadRay.RAY - excessRate).rayMul(self.rateSlope1));\\n            // If AMM price < pricaRate + delta, AMM price is lower than oracle price\\n        } else if (priceRate < self.optimalPriceRate - self.priceRateDelta) {\\n            uint256 multiplier = (WadRay.RAY - priceRate).rayDiv(self.priceRateDelta);\\n            stabilityRate =\\n                (self.stabilityRateBase + self.rateSlope1) +\\n                WadRay.RAY.rayMul(multiplier).rayMul(self.rateSlope2);\\n            // Default case, AMM price is within optimal range of oracle price\\n        } else {\\n            stabilityRate = self.stabilityRateBase + (priceRate.rayMul(self.rateSlope1));\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers\\n     * with the advantage of great gas cost reductions\\n     * The Aave whitepaper contains reference to the approximation\\n     * with a table showing the margin of error per different time periods\\n     *\\n     * @param self rate configuration for the asset\\n     * @param _currentTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(StabilityRateConfig storage self, uint256 _currentTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 exp = _currentTimestamp - uint256(self.lastUpdateTimestamp);\\n\\n        if (exp == 0) {\\n            return WadRay.RAY;\\n        }\\n\\n        uint256 expMinusOne;\\n        uint256 expMinusTwo;\\n        uint256 basePowerTwo;\\n        uint256 basePowerThree;\\n        unchecked {\\n            expMinusOne = exp - 1;\\n\\n            expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n            basePowerTwo = self.stabilityRate.rayMul(self.stabilityRate) / (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\n            basePowerThree = basePowerTwo.rayMul(self.stabilityRate) / SECONDS_PER_YEAR;\\n        }\\n\\n        uint256 secondTerm = exp * expMinusOne * basePowerTwo;\\n        unchecked {\\n            secondTerm /= 2;\\n        }\\n        uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\\n        unchecked {\\n            thirdTerm /= 6;\\n        }\\n\\n        return WadRay.RAY + (self.stabilityRate * exp) / SECONDS_PER_YEAR + secondTerm + thirdTerm;\\n    }\\n\\n    /**\\n     * @dev Returns the ongoing normalized debt index for the borrowers\\n     * A value of 1e27 means there is no interest. As time passes, the interest is accrued\\n     * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n     * @param self rate configuration for the asset\\n     * @return The normalized debt index. expressed in ray\\n     **/\\n    function getNormalizedDebtIndex(StabilityRateConfig storage self) internal view returns (uint256) {\\n        if (self.asset == address(0)) return WadRay.RAY;\\n        //solium-disable-next-line\\n        if (self.lastUpdateTimestamp == uint40(block.timestamp)) {\\n            //if the index was updated in the same block, no need to perform any calculation\\n            return self.debtIndex;\\n        }\\n\\n        return self.calculateCompoundedInterest(block.timestamp).rayMul(self.debtIndex);\\n    }\\n}\\n\",\"keccak256\":\"0x22a0928bd0cc089cdee6b4fe20a2d1706848e380c60efba6079cb6962168c629\",\"license\":\"agpl-3.0\"},\"src/contracts/shared/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc769e2950b896b7ccad33ee8c42948778d8ef6eb13a9de733fd5c968fd35729e\",\"license\":\"MIT\"},\"src/contracts/shared/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\n/* solhint-disable func-name-mixedcase */\\n\\ninterface IERC20Upgradeable {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function name() external view returns (string memory);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6e71c915a009a354a711867b60cad322092cb48b83eb09c1ec3a37d036380828\",\"license\":\"MIT\"},\"src/contracts/shared/Rebase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\nimport {FixedPointMathLib} from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\nstruct Rebase {\\n    bool positive;\\n    uint256 denominator;\\n}\\n\\nlibrary RebaseMath {\\n    using FixedPointMathLib for uint256;\\n\\n    function unrebase(uint256 self, Rebase memory _rebase) internal pure returns (uint256) {\\n        if (_rebase.denominator == 0) return self;\\n        return _rebase.positive ? self.divWadDown(_rebase.denominator) : self.mulWadDown(_rebase.denominator);\\n    }\\n\\n    function rebase(uint256 self, Rebase memory _rebase) internal pure returns (uint256) {\\n        if (_rebase.denominator == 0) return self;\\n        return _rebase.positive ? self.mulWadDown(_rebase.denominator) : self.divWadDown(_rebase.denominator);\\n    }\\n}\\n\",\"keccak256\":\"0x3bd071ae945d526c8858620739dc2a502b56516654eb715fef9e73da6f1b6458\",\"license\":\"MIT\"},\"src/contracts/shared/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ea70193765a0a396b50e7f3bf7c0913339c5e7f3f06d0a12288261b374bc0ba\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestMarketOpen() external view returns (bool);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    function getMarketOpen(uint256 roundId) external view returns (bool);\\n\\n    event AnswerUpdated(int256 indexed current, bool marketOpen, uint256 indexed roundId, uint256 updatedAt);\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xe542890a51377bca4d1d6ce9b85cd180433deab789e8b63b8c306aff0bc4c446\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcb2f40bda00b52487beb7940f2da015deb59968c858bf7973d9a4313961f5392\",\"license\":\"MIT\"},\"src/contracts/vendor/flux/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n    \\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            bool marketOpen,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x1a5485cbb73bb42e632252456aa9a7b20c77ea6a0803d47d50309f5511784369\",\"license\":\"MIT\"},\"src/contracts/vendor/gnosis/IGnosisSafeL2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14;\\n\\ninterface IGnosisSafeL2 {\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x62d4c6ebee8a2bd5a5eb86d29ff2c88b1cd500f14b892795e579188a2b763c0b\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b50604051620048da380380620048da833981810160405281019062000037919062000a80565b8383818181600590805190602001906200005392919062000790565b5080600690805190602001906200006c92919062000790565b5050506000600760006101000a81548160ff021916908315150217905550620000ae6000801b620000a26200026460201b60201c565b6200026c60201b60201c565b620000ef7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6620000e36200026460201b60201c565b6200026c60201b60201c565b620001307f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a620001246200026460201b60201c565b6200026c60201b60201c565b505083600b90805190602001906200014a92919062000790565b5082600c90805190602001906200016392919062000790565b5081600d60006101000a81548160ff021916908360ff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001e46000801b620001d86200026460201b60201c565b6200026c60201b60201c565b620002197f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b826200026c60201b60201c565b6200025a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66200024e6200026460201b60201c565b6200028260201b60201c565b5050505062000c66565b600033905090565b6200027e8282620002ca60201b60201c565b5050565b6200029982826200031260201b620015561760201c565b620002c581600160008581526020019081526020016000206200040460201b620016371790919060201c565b505050565b620002e182826200043c60201b620016671760201c565b6200030d81600160008581526020019081526020016000206200052d60201b620017471790919060201c565b505050565b6200032482826200056560201b60201c565b156200040057600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620003a56200026460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600062000434836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620005cf60201b60201c565b905092915050565b6200044e82826200056560201b60201c565b6200052957600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620004ce6200026460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006200055d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620006f360201b60201c565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008083600101600084815260200190815260200160002054905060008114620006e757600060018262000604919062000b69565b90506000600186600001805490506200061e919062000b69565b90508181146200069457600086600001828154811062000643576200064262000ba4565b5b90600052602060002001549050808760000184815481106200066a576200066962000ba4565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480620006ab57620006aa62000bd3565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050620006ed565b60009150505b92915050565b60006200070783836200076d60201b60201c565b6200076257826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000767565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b8280546200079e9062000c31565b90600052602060002090601f016020900481019282620007c257600085556200080e565b82601f10620007dd57805160ff19168380011785556200080e565b828001600101855582156200080e579182015b828111156200080d578251825591602001919060010190620007f0565b5b5090506200081d919062000821565b5090565b5b808211156200083c57600081600090555060010162000822565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620008a9826200085e565b810181811067ffffffffffffffff82111715620008cb57620008ca6200086f565b5b80604052505050565b6000620008e062000840565b9050620008ee82826200089e565b919050565b600067ffffffffffffffff8211156200091157620009106200086f565b5b6200091c826200085e565b9050602081019050919050565b60005b83811015620009495780820151818401526020810190506200092c565b8381111562000959576000848401525b50505050565b6000620009766200097084620008f3565b620008d4565b90508281526020810184848401111562000995576200099462000859565b5b620009a284828562000929565b509392505050565b600082601f830112620009c257620009c162000854565b5b8151620009d48482602086016200095f565b91505092915050565b600060ff82169050919050565b620009f581620009dd565b811462000a0157600080fd5b50565b60008151905062000a1581620009ea565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000a488262000a1b565b9050919050565b62000a5a8162000a3b565b811462000a6657600080fd5b50565b60008151905062000a7a8162000a4f565b92915050565b6000806000806080858703121562000a9d5762000a9c6200084a565b5b600085015167ffffffffffffffff81111562000abe5762000abd6200084f565b5b62000acc87828801620009aa565b945050602085015167ffffffffffffffff81111562000af05762000aef6200084f565b5b62000afe87828801620009aa565b935050604062000b118782880162000a04565b925050606062000b248782880162000a69565b91505092959194509250565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000b768262000b30565b915062000b838362000b30565b92508282101562000b995762000b9862000b3a565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000c4a57607f821691505b60208210810362000c605762000c5f62000c02565b5b50919050565b613c648062000c766000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80638456cb5911610130578063ac7e534e116100b8578063d547741f1161007c578063d547741f146106ef578063d77e128c1461070b578063dd62ed3e14610729578063e63ab1e914610759578063f5b541a61461077757610232565b8063ac7e534e14610623578063b696a6ad14610641578063c6e6f59214610671578063ca15c873146106a1578063d5391393146106d157610232565b806395af0e2b116100ff57806395af0e2b1461056957806395d89b4114610587578063a217fddf146105a5578063a457c2d7146105c3578063a9059cbb146105f357610232565b80638456cb59146104cf5780638dec3daa146104d95780639010d07c1461050957806391d148541461053957610232565b8063313ce567116101be57806342966c681161018257806342966c681461042d57806351335b50146104495780635c975abb1461046557806370a082311461048357806379cc6790146104b357610232565b8063313ce5671461039d57806336568abe146103bb57806339509351146103d75780633f4ba83a1461040757806340c10f191461041157610232565b806318160ddd1161020557806318160ddd146102e557806323b872dd14610303578063248a9ca314610333578063272b0c3f146103635780632f2ff15d1461038157610232565b806301ffc9a71461023757806306fdde031461026757806307a2d13a14610285578063095ea7b3146102b5575b600080fd5b610251600480360381019061024c91906127cf565b610795565b60405161025e9190612817565b60405180910390f35b61026f6108f9565b60405161027c91906128cb565b60405180910390f35b61029f600480360381019061029a9190612923565b61098b565b6040516102ac919061295f565b60405180910390f35b6102cf60048036038101906102ca91906129d8565b610995565b6040516102dc9190612817565b60405180910390f35b6102ed6109b8565b6040516102fa919061295f565b60405180910390f35b61031d60048036038101906103189190612a18565b6109c2565b60405161032a9190612817565b60405180910390f35b61034d60048036038101906103489190612aa1565b6109f1565b60405161035a9190612add565b60405180910390f35b61036b610a10565b604051610378919061295f565b60405180910390f35b61039b60048036038101906103969190612af8565b610a16565b005b6103a5610da3565b6040516103b29190612b54565b60405180910390f35b6103d560048036038101906103d09190612af8565b610dba565b005b6103f160048036038101906103ec91906129d8565b610e3d565b6040516103fe9190612817565b60405180910390f35b61040f610e74565b005b61042b600480360381019061042691906129d8565b610eee565b005b61044760048036038101906104429190612923565b610f6c565b005b610463600480360381019061045e9190612ca4565b610f80565b005b61046d610fc0565b60405161047a9190612817565b60405180910390f35b61049d60048036038101906104989190612d1c565b610fd7565b6040516104aa919061295f565b60405180910390f35b6104cd60048036038101906104c891906129d8565b611020565b005b6104d7611040565b005b6104f360048036038101906104ee9190612d49565b6110ba565b604051610500919061295f565b60405180910390f35b610523600480360381019061051e9190612d89565b611157565b6040516105309190612dd8565b60405180910390f35b610553600480360381019061054e9190612af8565b611186565b6040516105609190612817565b60405180910390f35b6105716111f0565b60405161057e919061295f565b60405180910390f35b61058f6111f5565b60405161059c91906128cb565b60405180910390f35b6105ad611287565b6040516105ba9190612add565b60405180910390f35b6105dd60048036038101906105d891906129d8565b61128e565b6040516105ea9190612817565b60405180910390f35b61060d600480360381019061060891906129d8565b611305565b60405161061a9190612817565b60405180910390f35b61062b611328565b6040516106389190612dd8565b60405180910390f35b61065b60048036038101906106569190612d49565b61134e565b604051610668919061295f565b60405180910390f35b61068b60048036038101906106869190612923565b6113eb565b604051610698919061295f565b60405180910390f35b6106bb60048036038101906106b69190612aa1565b6113f5565b6040516106c8919061295f565b60405180910390f35b6106d9611419565b6040516106e69190612add565b60405180910390f35b61070960048036038101906107049190612af8565b61143d565b005b61071361145e565b6040516107209190612dd8565b60405180910390f35b610743600480360381019061073e9190612df3565b611484565b604051610750919061295f565b60405180910390f35b61076161150b565b60405161076e9190612add565b60405180910390f35b61077f61152f565b60405161078c9190612add565b60405180910390f35b600063ffffffff60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141580156108f257507f5c2b4dfd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061089157507ffa3ebfaf000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108c157506301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108f157506336372b0760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b5b9050919050565b6060600b805461090890612e62565b80601f016020809104026020016040519081016040528092919081815260200182805461093490612e62565b80156109815780601f1061095657610100808354040283529160200191610981565b820191906000526020600020905b81548152906001019060200180831161096457829003601f168201915b5050505050905090565b6000819050919050565b6000806109a0611777565b90506109ad81858561177f565b600191505092915050565b6000600454905090565b6000806109cd611777565b90506109da858285611948565b6109e58585856119d4565b60019150509392505050565b6000806000838152602001908152602001600020600101549050919050565b60085481565b6000801b610a2381611c56565b7f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b8303610d935760008273ffffffffffffffffffffffffffffffffffffffff163b11610aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9e90612edf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c15574260085410610b41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3890612f4b565b60405180910390fd5b610b907f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611c6a565b7f6adffd5c93085d835dac6f3b40adf7c242ca4b3284048d20c3d8a501748dc973610bb9611777565b604051610bc69190612dd8565b60405180910390a16000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d8e565b600060085414610d21576001610c4d7f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b6113f5565b1115610c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8590612fb7565b60405180910390fd5b603c42610c9b9190613006565b60088190555081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507e796b9188078b706afc21dc367f7acab967fb9f87b74734e94fa1833cb2250a82600854604051610d1492919061305c565b60405180910390a1610d8d565b610d4e7f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b83611c6a565b7f6adffd5c93085d835dac6f3b40adf7c242ca4b3284048d20c3d8a501748dc97382604051610d7d9190612dd8565b60405180910390a1426008819055505b5b610d9e565b610d9d8383611c6a565b5b505050565b6000600d60009054906101000a900460ff16905090565b610dc2611777565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e26906130f7565b60405180910390fd5b610e398282611c9e565b5050565b600080610e48611777565b9050610e69818585610e5a8589611484565b610e649190613006565b61177f565b600191505092915050565b610ea57f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610ea0611777565b611186565b610ee4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edb90613189565b60405180910390fd5b610eec611cd2565b565b610f1f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610f1a611777565b611186565b610f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f559061321b565b60405180910390fd5b610f688282611d35565b5050565b610f7d610f77611777565b82611e95565b50565b6000801b610f8d81611c56565b81600b9080519060200190610fa39291906126c0565b5082600c9080519060200190610fba9291906126c0565b50505050565b6000600760009054906101000a900460ff16905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110328261102c611777565b83611948565b61103c8282611e95565b5050565b6110717f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61106c611777565b611186565b6110b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a7906132ad565b60405180910390fd5b6110b861206d565b565b60007f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b6110e981611c56565b60003373ffffffffffffffffffffffffffffffffffffffff163b11611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a90612edf565b60405180910390fd5b61114d8385611e95565b8391505092915050565b600061117e82600160008681526020019081526020016000206120d090919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b603c81565b6060600c805461120490612e62565b80601f016020809104026020016040519081016040528092919081815260200182805461123090612e62565b801561127d5780601f106112525761010080835404028352916020019161127d565b820191906000526020600020905b81548152906001019060200180831161126057829003601f168201915b5050505050905090565b6000801b81565b600080611299611777565b905060006112a78286611484565b9050838110156112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e39061333f565b60405180910390fd5b6112f9828686840361177f565b60019250505092915050565b600080611310611777565b905061131d8185856119d4565b600191505092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b61137d81611c56565b60003373ffffffffffffffffffffffffffffffffffffffff163b116113d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ce90612edf565b60405180910390fd5b6113e18385611d35565b8391505092915050565b6000819050919050565b6000611412600160008481526020019081526020016000206120ea565b9050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b611446826109f1565b61144f81611c56565b6114598383611c9e565b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b7f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b81565b6115608282611186565b1561163357600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506115d8611777565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600061165f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6120ff565b905092915050565b6116718282611186565b61174357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506116e8611777565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600061176f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612213565b905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036117ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e5906133d1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361185d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185490613463565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161193b919061295f565b60405180910390a3505050565b60006119548484611484565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146119ce57818110156119c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b7906134cf565b60405180910390fd5b6119cd848484840361177f565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3a90613561565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa9906135f3565b60405180910390fd5b611abd838383612283565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3b90613685565b60405180910390fd5b818103600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bd99190613006565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c3d919061295f565b60405180910390a3611c50848484612293565b50505050565b611c6781611c62611777565b612298565b50565b611c748282611667565b611c99816001600085815260200190815260200160002061174790919063ffffffff16565b505050565b611ca88282611556565b611ccd816001600085815260200190815260200160002061163790919063ffffffff16565b505050565b611cda612335565b6000600760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d1e611777565b604051611d2b9190612dd8565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9b906136f1565b60405180910390fd5b611db060008383612283565b8060046000828254611dc29190613006565b9250508190555080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e189190613006565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611e7d919061295f565b60405180910390a3611e9160008383612293565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efb90613783565b60405180910390fd5b611f1082600083612283565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8e90613815565b60405180910390fd5b818103600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160046000828254611fef9190613835565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612054919061295f565b60405180910390a361206883600084612293565b505050565b61207561237e565b6001600760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120b9611777565b6040516120c69190612dd8565b60405180910390a1565b60006120df83600001836123c8565b60001c905092915050565b60006120f8826000016123f3565b9050919050565b600080836001016000848152602001908152602001600020549050600081146122075760006001826121319190613835565b90506000600186600001805490506121499190613835565b90508181146121b857600086600001828154811061216a57612169613869565b5b906000526020600020015490508087600001848154811061218e5761218d613869565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806121cc576121cb613898565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061220d565b60009150505b92915050565b600061221f8383612404565b61227857826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061227d565b600090505b92915050565b61228e838383612427565b505050565b505050565b6122a28282611186565b612331576122c78173ffffffffffffffffffffffffffffffffffffffff16601461247f565b6122d58360001c602061247f565b6040516020016122e692919061399b565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232891906128cb565b60405180910390fd5b5050565b61233d610fc0565b61237c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237390613a21565b60405180910390fd5b565b612386610fc0565b156123c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bd90613a8d565b60405180910390fd5b565b60008260000182815481106123e0576123df613869565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6124328383836126bb565b61243a610fc0565b1561247a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247190613b1f565b60405180910390fd5b505050565b6060600060028360026124929190613b3f565b61249c9190613006565b67ffffffffffffffff8111156124b5576124b4612b79565b5b6040519080825280601f01601f1916602001820160405280156124e75781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061251f5761251e613869565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061258357612582613869565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026125c39190613b3f565b6125cd9190613006565b90505b600181111561266d577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061260f5761260e613869565b5b1a60f81b82828151811061262657612625613869565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061266690613b99565b90506125d0565b50600084146126b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a890613c0e565b60405180910390fd5b8091505092915050565b505050565b8280546126cc90612e62565b90600052602060002090601f0160209004810192826126ee5760008555612735565b82601f1061270757805160ff1916838001178555612735565b82800160010185558215612735579182015b82811115612734578251825591602001919060010190612719565b5b5090506127429190612746565b5090565b5b8082111561275f576000816000905550600101612747565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6127ac81612777565b81146127b757600080fd5b50565b6000813590506127c9816127a3565b92915050565b6000602082840312156127e5576127e461276d565b5b60006127f3848285016127ba565b91505092915050565b60008115159050919050565b612811816127fc565b82525050565b600060208201905061282c6000830184612808565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561286c578082015181840152602081019050612851565b8381111561287b576000848401525b50505050565b6000601f19601f8301169050919050565b600061289d82612832565b6128a7818561283d565b93506128b781856020860161284e565b6128c081612881565b840191505092915050565b600060208201905081810360008301526128e58184612892565b905092915050565b6000819050919050565b612900816128ed565b811461290b57600080fd5b50565b60008135905061291d816128f7565b92915050565b6000602082840312156129395761293861276d565b5b60006129478482850161290e565b91505092915050565b612959816128ed565b82525050565b60006020820190506129746000830184612950565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129a58261297a565b9050919050565b6129b58161299a565b81146129c057600080fd5b50565b6000813590506129d2816129ac565b92915050565b600080604083850312156129ef576129ee61276d565b5b60006129fd858286016129c3565b9250506020612a0e8582860161290e565b9150509250929050565b600080600060608486031215612a3157612a3061276d565b5b6000612a3f868287016129c3565b9350506020612a50868287016129c3565b9250506040612a618682870161290e565b9150509250925092565b6000819050919050565b612a7e81612a6b565b8114612a8957600080fd5b50565b600081359050612a9b81612a75565b92915050565b600060208284031215612ab757612ab661276d565b5b6000612ac584828501612a8c565b91505092915050565b612ad781612a6b565b82525050565b6000602082019050612af26000830184612ace565b92915050565b60008060408385031215612b0f57612b0e61276d565b5b6000612b1d85828601612a8c565b9250506020612b2e858286016129c3565b9150509250929050565b600060ff82169050919050565b612b4e81612b38565b82525050565b6000602082019050612b696000830184612b45565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612bb182612881565b810181811067ffffffffffffffff82111715612bd057612bcf612b79565b5b80604052505050565b6000612be3612763565b9050612bef8282612ba8565b919050565b600067ffffffffffffffff821115612c0f57612c0e612b79565b5b612c1882612881565b9050602081019050919050565b82818337600083830152505050565b6000612c47612c4284612bf4565b612bd9565b905082815260208101848484011115612c6357612c62612b74565b5b612c6e848285612c25565b509392505050565b600082601f830112612c8b57612c8a612b6f565b5b8135612c9b848260208601612c34565b91505092915050565b60008060408385031215612cbb57612cba61276d565b5b600083013567ffffffffffffffff811115612cd957612cd8612772565b5b612ce585828601612c76565b925050602083013567ffffffffffffffff811115612d0657612d05612772565b5b612d1285828601612c76565b9150509250929050565b600060208284031215612d3257612d3161276d565b5b6000612d40848285016129c3565b91505092915050565b60008060408385031215612d6057612d5f61276d565b5b6000612d6e8582860161290e565b9250506020612d7f858286016129c3565b9150509250929050565b60008060408385031215612da057612d9f61276d565b5b6000612dae85828601612a8c565b9250506020612dbf8582860161290e565b9150509250929050565b612dd28161299a565b82525050565b6000602082019050612ded6000830184612dc9565b92915050565b60008060408385031215612e0a57612e0961276d565b5b6000612e18858286016129c3565b9250506020612e29858286016129c3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e7a57607f821691505b602082108103612e8d57612e8c612e33565b5b50919050565b7f4b4953533a20454f410000000000000000000000000000000000000000000000600082015250565b6000612ec960098361283d565b9150612ed482612e93565b602082019050919050565b60006020820190508181036000830152612ef881612ebc565b9050919050565b7f4b4953533a20214f50455241544f525f524f4c455f504552494f440000000000600082015250565b6000612f35601b8361283d565b9150612f4082612eff565b602082019050919050565b60006020820190508181036000830152612f6481612f28565b9050919050565b7f4b4953533a20216d696e7465725265766f6b6564000000000000000000000000600082015250565b6000612fa160148361283d565b9150612fac82612f6b565b602082019050919050565b60006020820190508181036000830152612fd081612f94565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613011826128ed565b915061301c836128ed565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561305157613050612fd7565b5b828201905092915050565b60006040820190506130716000830185612dc9565b61307e6020830184612950565b9392505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006130e1602f8361283d565b91506130ec82613085565b604082019050919050565b60006020820190508181036000830152613110816130d4565b9050919050565b7f45524332305072657365744d696e7465725061757365723a206d75737420686160008201527f76652070617573657220726f6c6520746f20756e706175736500000000000000602082015250565b600061317360398361283d565b915061317e82613117565b604082019050919050565b600060208201905081810360008301526131a281613166565b9050919050565b7f45524332305072657365744d696e7465725061757365723a206d75737420686160008201527f7665206d696e74657220726f6c6520746f206d696e7400000000000000000000602082015250565b600061320560368361283d565b9150613210826131a9565b604082019050919050565b60006020820190508181036000830152613234816131f8565b9050919050565b7f45524332305072657365744d696e7465725061757365723a206d75737420686160008201527f76652070617573657220726f6c6520746f207061757365000000000000000000602082015250565b600061329760378361283d565b91506132a28261323b565b604082019050919050565b600060208201905081810360008301526132c68161328a565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061332960258361283d565b9150613334826132cd565b604082019050919050565b600060208201905081810360008301526133588161331c565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006133bb60248361283d565b91506133c68261335f565b604082019050919050565b600060208201905081810360008301526133ea816133ae565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061344d60228361283d565b9150613458826133f1565b604082019050919050565b6000602082019050818103600083015261347c81613440565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006134b9601d8361283d565b91506134c482613483565b602082019050919050565b600060208201905081810360008301526134e8816134ac565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061354b60258361283d565b9150613556826134ef565b604082019050919050565b6000602082019050818103600083015261357a8161353e565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006135dd60238361283d565b91506135e882613581565b604082019050919050565b6000602082019050818103600083015261360c816135d0565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061366f60268361283d565b915061367a82613613565b604082019050919050565b6000602082019050818103600083015261369e81613662565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006136db601f8361283d565b91506136e6826136a5565b602082019050919050565b6000602082019050818103600083015261370a816136ce565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061376d60218361283d565b915061377882613711565b604082019050919050565b6000602082019050818103600083015261379c81613760565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006137ff60228361283d565b915061380a826137a3565b604082019050919050565b6000602082019050818103600083015261382e816137f2565b9050919050565b6000613840826128ed565b915061384b836128ed565b92508282101561385e5761385d612fd7565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006139086017836138c7565b9150613913826138d2565b601782019050919050565b600061392982612832565b61393381856138c7565b935061394381856020860161284e565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006139856011836138c7565b91506139908261394f565b601182019050919050565b60006139a6826138fb565b91506139b2828561391e565b91506139bd82613978565b91506139c9828461391e565b91508190509392505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613a0b60148361283d565b9150613a16826139d5565b602082019050919050565b60006020820190508181036000830152613a3a816139fe565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000613a7760108361283d565b9150613a8282613a41565b602082019050919050565b60006020820190508181036000830152613aa681613a6a565b9050919050565b7f45524332305061757361626c653a20746f6b656e207472616e7366657220776860008201527f696c652070617573656400000000000000000000000000000000000000000000602082015250565b6000613b09602a8361283d565b9150613b1482613aad565b604082019050919050565b60006020820190508181036000830152613b3881613afc565b9050919050565b6000613b4a826128ed565b9150613b55836128ed565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b8e57613b8d612fd7565b5b828202905092915050565b6000613ba4826128ed565b915060008203613bb757613bb6612fd7565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000613bf860208361283d565b9150613c0382613bc2565b602082019050919050565b60006020820190508181036000830152613c2781613beb565b905091905056fea264697066735822122028ca11cbdd1d018309094c58e5fe266330344729e3fb5791956e241d8c11e26964736f6c634300080e0033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c80638456cb5911610130578063ac7e534e116100b8578063d547741f1161007c578063d547741f146106ef578063d77e128c1461070b578063dd62ed3e14610729578063e63ab1e914610759578063f5b541a61461077757610232565b8063ac7e534e14610623578063b696a6ad14610641578063c6e6f59214610671578063ca15c873146106a1578063d5391393146106d157610232565b806395af0e2b116100ff57806395af0e2b1461056957806395d89b4114610587578063a217fddf146105a5578063a457c2d7146105c3578063a9059cbb146105f357610232565b80638456cb59146104cf5780638dec3daa146104d95780639010d07c1461050957806391d148541461053957610232565b8063313ce567116101be57806342966c681161018257806342966c681461042d57806351335b50146104495780635c975abb1461046557806370a082311461048357806379cc6790146104b357610232565b8063313ce5671461039d57806336568abe146103bb57806339509351146103d75780633f4ba83a1461040757806340c10f191461041157610232565b806318160ddd1161020557806318160ddd146102e557806323b872dd14610303578063248a9ca314610333578063272b0c3f146103635780632f2ff15d1461038157610232565b806301ffc9a71461023757806306fdde031461026757806307a2d13a14610285578063095ea7b3146102b5575b600080fd5b610251600480360381019061024c91906127cf565b610795565b60405161025e9190612817565b60405180910390f35b61026f6108f9565b60405161027c91906128cb565b60405180910390f35b61029f600480360381019061029a9190612923565b61098b565b6040516102ac919061295f565b60405180910390f35b6102cf60048036038101906102ca91906129d8565b610995565b6040516102dc9190612817565b60405180910390f35b6102ed6109b8565b6040516102fa919061295f565b60405180910390f35b61031d60048036038101906103189190612a18565b6109c2565b60405161032a9190612817565b60405180910390f35b61034d60048036038101906103489190612aa1565b6109f1565b60405161035a9190612add565b60405180910390f35b61036b610a10565b604051610378919061295f565b60405180910390f35b61039b60048036038101906103969190612af8565b610a16565b005b6103a5610da3565b6040516103b29190612b54565b60405180910390f35b6103d560048036038101906103d09190612af8565b610dba565b005b6103f160048036038101906103ec91906129d8565b610e3d565b6040516103fe9190612817565b60405180910390f35b61040f610e74565b005b61042b600480360381019061042691906129d8565b610eee565b005b61044760048036038101906104429190612923565b610f6c565b005b610463600480360381019061045e9190612ca4565b610f80565b005b61046d610fc0565b60405161047a9190612817565b60405180910390f35b61049d60048036038101906104989190612d1c565b610fd7565b6040516104aa919061295f565b60405180910390f35b6104cd60048036038101906104c891906129d8565b611020565b005b6104d7611040565b005b6104f360048036038101906104ee9190612d49565b6110ba565b604051610500919061295f565b60405180910390f35b610523600480360381019061051e9190612d89565b611157565b6040516105309190612dd8565b60405180910390f35b610553600480360381019061054e9190612af8565b611186565b6040516105609190612817565b60405180910390f35b6105716111f0565b60405161057e919061295f565b60405180910390f35b61058f6111f5565b60405161059c91906128cb565b60405180910390f35b6105ad611287565b6040516105ba9190612add565b60405180910390f35b6105dd60048036038101906105d891906129d8565b61128e565b6040516105ea9190612817565b60405180910390f35b61060d600480360381019061060891906129d8565b611305565b60405161061a9190612817565b60405180910390f35b61062b611328565b6040516106389190612dd8565b60405180910390f35b61065b60048036038101906106569190612d49565b61134e565b604051610668919061295f565b60405180910390f35b61068b60048036038101906106869190612923565b6113eb565b604051610698919061295f565b60405180910390f35b6106bb60048036038101906106b69190612aa1565b6113f5565b6040516106c8919061295f565b60405180910390f35b6106d9611419565b6040516106e69190612add565b60405180910390f35b61070960048036038101906107049190612af8565b61143d565b005b61071361145e565b6040516107209190612dd8565b60405180910390f35b610743600480360381019061073e9190612df3565b611484565b604051610750919061295f565b60405180910390f35b61076161150b565b60405161076e9190612add565b60405180910390f35b61077f61152f565b60405161078c9190612add565b60405180910390f35b600063ffffffff60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141580156108f257507f5c2b4dfd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061089157507ffa3ebfaf000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108c157506301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108f157506336372b0760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b5b9050919050565b6060600b805461090890612e62565b80601f016020809104026020016040519081016040528092919081815260200182805461093490612e62565b80156109815780601f1061095657610100808354040283529160200191610981565b820191906000526020600020905b81548152906001019060200180831161096457829003601f168201915b5050505050905090565b6000819050919050565b6000806109a0611777565b90506109ad81858561177f565b600191505092915050565b6000600454905090565b6000806109cd611777565b90506109da858285611948565b6109e58585856119d4565b60019150509392505050565b6000806000838152602001908152602001600020600101549050919050565b60085481565b6000801b610a2381611c56565b7f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b8303610d935760008273ffffffffffffffffffffffffffffffffffffffff163b11610aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9e90612edf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c15574260085410610b41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3890612f4b565b60405180910390fd5b610b907f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611c6a565b7f6adffd5c93085d835dac6f3b40adf7c242ca4b3284048d20c3d8a501748dc973610bb9611777565b604051610bc69190612dd8565b60405180910390a16000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d8e565b600060085414610d21576001610c4d7f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b6113f5565b1115610c8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8590612fb7565b60405180910390fd5b603c42610c9b9190613006565b60088190555081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507e796b9188078b706afc21dc367f7acab967fb9f87b74734e94fa1833cb2250a82600854604051610d1492919061305c565b60405180910390a1610d8d565b610d4e7f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b83611c6a565b7f6adffd5c93085d835dac6f3b40adf7c242ca4b3284048d20c3d8a501748dc97382604051610d7d9190612dd8565b60405180910390a1426008819055505b5b610d9e565b610d9d8383611c6a565b5b505050565b6000600d60009054906101000a900460ff16905090565b610dc2611777565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e26906130f7565b60405180910390fd5b610e398282611c9e565b5050565b600080610e48611777565b9050610e69818585610e5a8589611484565b610e649190613006565b61177f565b600191505092915050565b610ea57f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610ea0611777565b611186565b610ee4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edb90613189565b60405180910390fd5b610eec611cd2565b565b610f1f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610f1a611777565b611186565b610f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f559061321b565b60405180910390fd5b610f688282611d35565b5050565b610f7d610f77611777565b82611e95565b50565b6000801b610f8d81611c56565b81600b9080519060200190610fa39291906126c0565b5082600c9080519060200190610fba9291906126c0565b50505050565b6000600760009054906101000a900460ff16905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110328261102c611777565b83611948565b61103c8282611e95565b5050565b6110717f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61106c611777565b611186565b6110b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a7906132ad565b60405180910390fd5b6110b861206d565b565b60007f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b6110e981611c56565b60003373ffffffffffffffffffffffffffffffffffffffff163b11611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a90612edf565b60405180910390fd5b61114d8385611e95565b8391505092915050565b600061117e82600160008681526020019081526020016000206120d090919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b603c81565b6060600c805461120490612e62565b80601f016020809104026020016040519081016040528092919081815260200182805461123090612e62565b801561127d5780601f106112525761010080835404028352916020019161127d565b820191906000526020600020905b81548152906001019060200180831161126057829003601f168201915b5050505050905090565b6000801b81565b600080611299611777565b905060006112a78286611484565b9050838110156112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e39061333f565b60405180910390fd5b6112f9828686840361177f565b60019250505092915050565b600080611310611777565b905061131d8185856119d4565b600191505092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b61137d81611c56565b60003373ffffffffffffffffffffffffffffffffffffffff163b116113d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ce90612edf565b60405180910390fd5b6113e18385611d35565b8391505092915050565b6000819050919050565b6000611412600160008481526020019081526020016000206120ea565b9050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b611446826109f1565b61144f81611c56565b6114598383611c9e565b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b7f112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd60001b81565b6115608282611186565b1561163357600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506115d8611777565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600061165f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6120ff565b905092915050565b6116718282611186565b61174357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506116e8611777565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600061176f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612213565b905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036117ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e5906133d1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361185d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185490613463565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161193b919061295f565b60405180910390a3505050565b60006119548484611484565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146119ce57818110156119c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b7906134cf565b60405180910390fd5b6119cd848484840361177f565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3a90613561565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa9906135f3565b60405180910390fd5b611abd838383612283565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3b90613685565b60405180910390fd5b818103600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bd99190613006565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c3d919061295f565b60405180910390a3611c50848484612293565b50505050565b611c6781611c62611777565b612298565b50565b611c748282611667565b611c99816001600085815260200190815260200160002061174790919063ffffffff16565b505050565b611ca88282611556565b611ccd816001600085815260200190815260200160002061163790919063ffffffff16565b505050565b611cda612335565b6000600760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d1e611777565b604051611d2b9190612dd8565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9b906136f1565b60405180910390fd5b611db060008383612283565b8060046000828254611dc29190613006565b9250508190555080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e189190613006565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611e7d919061295f565b60405180910390a3611e9160008383612293565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efb90613783565b60405180910390fd5b611f1082600083612283565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8e90613815565b60405180910390fd5b818103600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160046000828254611fef9190613835565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612054919061295f565b60405180910390a361206883600084612293565b505050565b61207561237e565b6001600760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120b9611777565b6040516120c69190612dd8565b60405180910390a1565b60006120df83600001836123c8565b60001c905092915050565b60006120f8826000016123f3565b9050919050565b600080836001016000848152602001908152602001600020549050600081146122075760006001826121319190613835565b90506000600186600001805490506121499190613835565b90508181146121b857600086600001828154811061216a57612169613869565b5b906000526020600020015490508087600001848154811061218e5761218d613869565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806121cc576121cb613898565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061220d565b60009150505b92915050565b600061221f8383612404565b61227857826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061227d565b600090505b92915050565b61228e838383612427565b505050565b505050565b6122a28282611186565b612331576122c78173ffffffffffffffffffffffffffffffffffffffff16601461247f565b6122d58360001c602061247f565b6040516020016122e692919061399b565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232891906128cb565b60405180910390fd5b5050565b61233d610fc0565b61237c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237390613a21565b60405180910390fd5b565b612386610fc0565b156123c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bd90613a8d565b60405180910390fd5b565b60008260000182815481106123e0576123df613869565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6124328383836126bb565b61243a610fc0565b1561247a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247190613b1f565b60405180910390fd5b505050565b6060600060028360026124929190613b3f565b61249c9190613006565b67ffffffffffffffff8111156124b5576124b4612b79565b5b6040519080825280601f01601f1916602001820160405280156124e75781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061251f5761251e613869565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061258357612582613869565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026125c39190613b3f565b6125cd9190613006565b90505b600181111561266d577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061260f5761260e613869565b5b1a60f81b82828151811061262657612625613869565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061266690613b99565b90506125d0565b50600084146126b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a890613c0e565b60405180910390fd5b8091505092915050565b505050565b8280546126cc90612e62565b90600052602060002090601f0160209004810192826126ee5760008555612735565b82601f1061270757805160ff1916838001178555612735565b82800160010185558215612735579182015b82811115612734578251825591602001919060010190612719565b5b5090506127429190612746565b5090565b5b8082111561275f576000816000905550600101612747565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6127ac81612777565b81146127b757600080fd5b50565b6000813590506127c9816127a3565b92915050565b6000602082840312156127e5576127e461276d565b5b60006127f3848285016127ba565b91505092915050565b60008115159050919050565b612811816127fc565b82525050565b600060208201905061282c6000830184612808565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561286c578082015181840152602081019050612851565b8381111561287b576000848401525b50505050565b6000601f19601f8301169050919050565b600061289d82612832565b6128a7818561283d565b93506128b781856020860161284e565b6128c081612881565b840191505092915050565b600060208201905081810360008301526128e58184612892565b905092915050565b6000819050919050565b612900816128ed565b811461290b57600080fd5b50565b60008135905061291d816128f7565b92915050565b6000602082840312156129395761293861276d565b5b60006129478482850161290e565b91505092915050565b612959816128ed565b82525050565b60006020820190506129746000830184612950565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129a58261297a565b9050919050565b6129b58161299a565b81146129c057600080fd5b50565b6000813590506129d2816129ac565b92915050565b600080604083850312156129ef576129ee61276d565b5b60006129fd858286016129c3565b9250506020612a0e8582860161290e565b9150509250929050565b600080600060608486031215612a3157612a3061276d565b5b6000612a3f868287016129c3565b9350506020612a50868287016129c3565b9250506040612a618682870161290e565b9150509250925092565b6000819050919050565b612a7e81612a6b565b8114612a8957600080fd5b50565b600081359050612a9b81612a75565b92915050565b600060208284031215612ab757612ab661276d565b5b6000612ac584828501612a8c565b91505092915050565b612ad781612a6b565b82525050565b6000602082019050612af26000830184612ace565b92915050565b60008060408385031215612b0f57612b0e61276d565b5b6000612b1d85828601612a8c565b9250506020612b2e858286016129c3565b9150509250929050565b600060ff82169050919050565b612b4e81612b38565b82525050565b6000602082019050612b696000830184612b45565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612bb182612881565b810181811067ffffffffffffffff82111715612bd057612bcf612b79565b5b80604052505050565b6000612be3612763565b9050612bef8282612ba8565b919050565b600067ffffffffffffffff821115612c0f57612c0e612b79565b5b612c1882612881565b9050602081019050919050565b82818337600083830152505050565b6000612c47612c4284612bf4565b612bd9565b905082815260208101848484011115612c6357612c62612b74565b5b612c6e848285612c25565b509392505050565b600082601f830112612c8b57612c8a612b6f565b5b8135612c9b848260208601612c34565b91505092915050565b60008060408385031215612cbb57612cba61276d565b5b600083013567ffffffffffffffff811115612cd957612cd8612772565b5b612ce585828601612c76565b925050602083013567ffffffffffffffff811115612d0657612d05612772565b5b612d1285828601612c76565b9150509250929050565b600060208284031215612d3257612d3161276d565b5b6000612d40848285016129c3565b91505092915050565b60008060408385031215612d6057612d5f61276d565b5b6000612d6e8582860161290e565b9250506020612d7f858286016129c3565b9150509250929050565b60008060408385031215612da057612d9f61276d565b5b6000612dae85828601612a8c565b9250506020612dbf8582860161290e565b9150509250929050565b612dd28161299a565b82525050565b6000602082019050612ded6000830184612dc9565b92915050565b60008060408385031215612e0a57612e0961276d565b5b6000612e18858286016129c3565b9250506020612e29858286016129c3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e7a57607f821691505b602082108103612e8d57612e8c612e33565b5b50919050565b7f4b4953533a20454f410000000000000000000000000000000000000000000000600082015250565b6000612ec960098361283d565b9150612ed482612e93565b602082019050919050565b60006020820190508181036000830152612ef881612ebc565b9050919050565b7f4b4953533a20214f50455241544f525f524f4c455f504552494f440000000000600082015250565b6000612f35601b8361283d565b9150612f4082612eff565b602082019050919050565b60006020820190508181036000830152612f6481612f28565b9050919050565b7f4b4953533a20216d696e7465725265766f6b6564000000000000000000000000600082015250565b6000612fa160148361283d565b9150612fac82612f6b565b602082019050919050565b60006020820190508181036000830152612fd081612f94565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613011826128ed565b915061301c836128ed565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561305157613050612fd7565b5b828201905092915050565b60006040820190506130716000830185612dc9565b61307e6020830184612950565b9392505050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006130e1602f8361283d565b91506130ec82613085565b604082019050919050565b60006020820190508181036000830152613110816130d4565b9050919050565b7f45524332305072657365744d696e7465725061757365723a206d75737420686160008201527f76652070617573657220726f6c6520746f20756e706175736500000000000000602082015250565b600061317360398361283d565b915061317e82613117565b604082019050919050565b600060208201905081810360008301526131a281613166565b9050919050565b7f45524332305072657365744d696e7465725061757365723a206d75737420686160008201527f7665206d696e74657220726f6c6520746f206d696e7400000000000000000000602082015250565b600061320560368361283d565b9150613210826131a9565b604082019050919050565b60006020820190508181036000830152613234816131f8565b9050919050565b7f45524332305072657365744d696e7465725061757365723a206d75737420686160008201527f76652070617573657220726f6c6520746f207061757365000000000000000000602082015250565b600061329760378361283d565b91506132a28261323b565b604082019050919050565b600060208201905081810360008301526132c68161328a565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061332960258361283d565b9150613334826132cd565b604082019050919050565b600060208201905081810360008301526133588161331c565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006133bb60248361283d565b91506133c68261335f565b604082019050919050565b600060208201905081810360008301526133ea816133ae565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061344d60228361283d565b9150613458826133f1565b604082019050919050565b6000602082019050818103600083015261347c81613440565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006134b9601d8361283d565b91506134c482613483565b602082019050919050565b600060208201905081810360008301526134e8816134ac565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061354b60258361283d565b9150613556826134ef565b604082019050919050565b6000602082019050818103600083015261357a8161353e565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006135dd60238361283d565b91506135e882613581565b604082019050919050565b6000602082019050818103600083015261360c816135d0565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061366f60268361283d565b915061367a82613613565b604082019050919050565b6000602082019050818103600083015261369e81613662565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006136db601f8361283d565b91506136e6826136a5565b602082019050919050565b6000602082019050818103600083015261370a816136ce565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061376d60218361283d565b915061377882613711565b604082019050919050565b6000602082019050818103600083015261379c81613760565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006137ff60228361283d565b915061380a826137a3565b604082019050919050565b6000602082019050818103600083015261382e816137f2565b9050919050565b6000613840826128ed565b915061384b836128ed565b92508282101561385e5761385d612fd7565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006139086017836138c7565b9150613913826138d2565b601782019050919050565b600061392982612832565b61393381856138c7565b935061394381856020860161284e565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006139856011836138c7565b91506139908261394f565b601182019050919050565b60006139a6826138fb565b91506139b2828561391e565b91506139bd82613978565b91506139c9828461391e565b91508190509392505050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613a0b60148361283d565b9150613a16826139d5565b602082019050919050565b60006020820190508181036000830152613a3a816139fe565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000613a7760108361283d565b9150613a8282613a41565b602082019050919050565b60006020820190508181036000830152613aa681613a6a565b9050919050565b7f45524332305061757361626c653a20746f6b656e207472616e7366657220776860008201527f696c652070617573656400000000000000000000000000000000000000000000602082015250565b6000613b09602a8361283d565b9150613b1482613aad565b604082019050919050565b60006020820190508181036000830152613b3881613afc565b9050919050565b6000613b4a826128ed565b9150613b55836128ed565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b8e57613b8d612fd7565b5b828202905092915050565b6000613ba4826128ed565b915060008203613bb757613bb6612fd7565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000613bf860208361283d565b9150613c0382613bc2565b602082019050919050565b60006020820190508181036000830152613c2781613beb565b905091905056fea264697066735822122028ca11cbdd1d018309094c58e5fe266330344729e3fb5791956e241d8c11e26964736f6c634300080e0033",
    "devdoc": {
        "author": "Kresko",
        "kind": "dev",
        "methods": {
            "allowance(address,address)": {
                "details": "See {IERC20-allowance}."
            },
            "approve(address,uint256)": {
                "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
            },
            "balanceOf(address)": {
                "details": "See {IERC20-balanceOf}."
            },
            "burn(uint256)": {
                "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
            },
            "burnFrom(address,uint256)": {
                "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
            },
            "decimals()": {
                "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "decreaseAllowance(address,uint256)": {
                "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
            },
            "destroy(uint256,address)": {
                "params": {
                    "_amount": "amount to burn",
                    "_from": "address to burn tokens from"
                }
            },
            "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
            },
            "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
            },
            "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
            },
            "grantRole(bytes32,address)": {
                "params": {
                    "_role": "role to grant",
                    "_to": "address to grant role for"
                }
            },
            "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
            },
            "increaseAllowance(address,uint256)": {
                "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
            },
            "issue(uint256,address)": {
                "params": {
                    "_amount": "amount to mint",
                    "_to": "address to mint tokens to"
                }
            },
            "mint(address,uint256)": {
                "details": "Creates `amount` new tokens for `to`. See {ERC20-_mint}. Requirements: - the caller must have the `MINTER_ROLE`."
            },
            "name()": {
                "details": "Returns the name of the token."
            },
            "pause()": {
                "details": "Pauses all token transfers. See {ERC20Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
            },
            "paused()": {
                "details": "Returns true if the contract is paused, and false otherwise."
            },
            "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
            },
            "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
            },
            "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
            },
            "symbol()": {
                "details": "Returns the symbol of the token, usually a shorter version of the name."
            },
            "totalSupply()": {
                "details": "See {IERC20-totalSupply}."
            },
            "transfer(address,uint256)": {
                "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
            },
            "transferFrom(address,address,uint256)": {
                "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
            },
            "unpause()": {
                "details": "Unpauses all token transfers. See {ERC20Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
            }
        },
        "title": "Kresko Integrated Stable System",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "destroy(uint256,address)": {
                "notice": "Allows OPERATOR_ROLE to burn tokens"
            },
            "grantRole(bytes32,address)": {
                "notice": "Overrides `AccessControl.grantRole` for following: * Implement a cooldown period of `OPERATOR_ROLE_PERIOD` minutes for setting a new OPERATOR_ROLE * Limited to 2 role members (Converter & Kresko) * EOA cannot be granted the operator roleOPERATOR_ROLE can still be revoked without this cooldown periodPAUSER_ROLE can still be granted without this cooldown period"
            },
            "issue(uint256,address)": {
                "notice": "Allows OPERATOR_ROLE to mint tokens"
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 2695,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "_roles",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)2690_storage)"
            },
            {
                "astId": 3009,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "_roleMembers",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_struct(AddressSet)4823_storage)"
            },
            {
                "astId": 3337,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "_balances",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 3343,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "_allowances",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
            },
            {
                "astId": 3345,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "_totalSupply",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
            },
            {
                "astId": 3347,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "_name",
                "offset": 0,
                "slot": "5",
                "type": "t_string_storage"
            },
            {
                "astId": 3349,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "_symbol",
                "offset": 0,
                "slot": "6",
                "type": "t_string_storage"
            },
            {
                "astId": 3231,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "_paused",
                "offset": 0,
                "slot": "7",
                "type": "t_bool"
            },
            {
                "astId": 7533,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "operatorRoleTimestamp",
                "offset": 0,
                "slot": "8",
                "type": "t_uint256"
            },
            {
                "astId": 7535,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "pendingOperator",
                "offset": 0,
                "slot": "9",
                "type": "t_address"
            },
            {
                "astId": 7537,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "kresko",
                "offset": 0,
                "slot": "10",
                "type": "t_address"
            },
            {
                "astId": 7539,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "_name",
                "offset": 0,
                "slot": "11",
                "type": "t_string_storage"
            },
            {
                "astId": 7541,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "_symbol",
                "offset": 0,
                "slot": "12",
                "type": "t_string_storage"
            },
            {
                "astId": 7543,
                "contract": "src/contracts/kiss/KISS.sol:KISS",
                "label": "_decimals",
                "offset": 0,
                "slot": "13",
                "type": "t_uint8"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
                "base": "t_bytes32",
                "encoding": "dynamic_array",
                "label": "bytes32[]",
                "numberOfBytes": "32"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => uint256))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_uint256)"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)4823_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
                "numberOfBytes": "32",
                "value": "t_struct(AddressSet)4823_storage"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)2690_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct AccessControl.RoleData)",
                "numberOfBytes": "32",
                "value": "t_struct(RoleData)2690_storage"
            },
            "t_mapping(t_bytes32,t_uint256)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(AddressSet)4823_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.AddressSet",
                "members": [
                    {
                        "astId": 4822,
                        "contract": "src/contracts/kiss/KISS.sol:KISS",
                        "label": "_inner",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(Set)4522_storage"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(RoleData)2690_storage": {
                "encoding": "inplace",
                "label": "struct AccessControl.RoleData",
                "members": [
                    {
                        "astId": 2687,
                        "contract": "src/contracts/kiss/KISS.sol:KISS",
                        "label": "members",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_mapping(t_address,t_bool)"
                    },
                    {
                        "astId": 2689,
                        "contract": "src/contracts/kiss/KISS.sol:KISS",
                        "label": "adminRole",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_bytes32"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(Set)4522_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.Set",
                "members": [
                    {
                        "astId": 4517,
                        "contract": "src/contracts/kiss/KISS.sol:KISS",
                        "label": "_values",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_array(t_bytes32)dyn_storage"
                    },
                    {
                        "astId": 4521,
                        "contract": "src/contracts/kiss/KISS.sol:KISS",
                        "label": "_indexes",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_mapping(t_bytes32,t_uint256)"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            },
            "t_uint8": {
                "encoding": "inplace",
                "label": "uint8",
                "numberOfBytes": "1"
            }
        }
    }
}
