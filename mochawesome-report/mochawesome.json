{
  "stats": {
    "suites": 3,
    "tests": 2,
    "passes": 0,
    "pending": 0,
    "failures": 2,
    "start": "2023-05-12T04:05:27.571Z",
    "end": "2023-05-12T04:05:31.524Z",
    "duration": 3953,
    "testsRegistered": 2,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "eeeb554a-de6b-45ef-af95-d39daf8c4337",
      "title": "",
      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
      "file": "/src/test/minter/03-liquidation.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e2d209de-5ca2-43fc-ba91-dddcd78c7e35",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "737df673-1252-4836-a7ad-5e3685f809c7",
              "parentUUID": "e2d209de-5ca2-43fc-ba91-dddcd78c7e35",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 136,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// -------------------------------- Set up mock assets --------------------------------\nconst collateralArgs = {\n    name: \"CollateralAsset\",\n    price: 10,\n    factor: 1,\n    decimals: 18,\n};\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.collateral = await this.collateral.update(collateralArgs);\nthis.collateral.setPrice(collateralArgs.price);\n// Set up mock KreskoAsset\nconst krAssetArgs = {\n    name: \"KreskoAsset\",\n    price: 11,\n    factor: 1,\n    supplyLimit: 100000000,\n    closeFee: _test_utils_1.defaultCloseFee,\n    openFee: _test_utils_1.defaultOpenFee,\n};\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\nthis.krAsset.setPrice(krAssetArgs.price);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, (0, lib_1.toFixedPoint)(1), (0, lib_1.toFixedPoint)(1.05), assetInfo.oracle, assetInfo.oracle);\n// -------------------------------- Set up userOne deposit/debt --------------------------------\nawait this.collateral.setBalance(hardhat_1.default.users.liquidator, hardhat_1.default.toBig(100000000));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.liquidator.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(100000000),\n    },\n});\n// Deposit collateral\nthis.defaultDepositAmount = 20; // 20 * $10 = $200 in collateral asset value\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount),\n    },\n});\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount,\n    asset: this.collateral,\n});\n// Mint KrAsset\nthis.defaultMintAmount = 10; // 10 * $11 = $110 in debt value\nawait (0, krassets_1.mintKrAsset)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultMintAmount,\n    asset: this.krAsset,\n});",
              "err": {},
              "uuid": "ffe3bd1b-2114-4f9e-9640-187b31660ff4",
              "parentUUID": "e2d209de-5ca2-43fc-ba91-dddcd78c7e35",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2cd33233-70bd-477c-8913-5f64fec58b13",
              "title": "#liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "3e7e24aa-867e-4785-9f30-bd4169e5d605",
                  "title": "#liquidate",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userTwo tokens to use for liquidation\nawait this.krAsset.mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userTwo.address]: hardhat_1.default.toBig(10000),\n});\n// Update collateral price from $10 to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);",
                      "err": {},
                      "uuid": "e3a3edbf-c6e3-4ec5-a74e-650f54d88b19",
                      "parentUUID": "3e7e24aa-867e-4785-9f30-bd4169e5d605",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should liquidate up to LT with a single CDP",
                      "fullTitle": "Minter #liquidation #liquidate should liquidate up to LT with a single CDP",
                      "timedOut": false,
                      "duration": 422,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "const userThree = hardhat_1.default.users.userThree;\nconst deposits = (0, lib_1.toBig)(15);\nconst borrows = (0, lib_1.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait this.collateral.setBalance(userThree, deposits);\nawait (0, collaterals_1.depositCollateral)({\n    user: userThree,\n    amount: deposits,\n    asset: this.collateral,\n});\nawait (0, krassets_1.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset,\n});\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\nthis.collateral.setPrice(7.5);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, liquidations_1.liquidate)(userThree, this.krAsset, this.collateral);\n(0, chai_1.expect)(await (0, liquidations_1.getCR)(userThree.address)).to.be.closeTo(1.4, CR_DELTA);\n// expect(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                      "err": {
                        "message": "AssertionError: expected 1.4001650712542735 to be close to 1.4 +/- 1e-7",
                        "estack": "AssertionError: expected 1.4001650712542735 to be close to 1.4 +/- 1e-7\n    at Proxy.closeTo (node_modules/.pnpm/chai@4.3.7/node_modules/chai/lib/chai/core/assertions.js:2979:10)\n    at Proxy.methodWrapper (node_modules/.pnpm/chai@4.3.7/node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Proxy.<anonymous> (node_modules/.pnpm/chai-bn@0.3.1_chai@4.3.7/node_modules/chai-bn/chai-bn.js:49:31)\n    at Proxy.overwritingMethodWrapper (node_modules/.pnpm/chai@4.3.7/node_modules/chai/lib/chai/utils/overwriteMethod.js:78:33)\n    at Proxy.<anonymous> (node_modules/.pnpm/@ethereum-waffle+chai@3.4.4/node_modules/@ethereum-waffle/chai/dist/cjs/matchers/bigNumber.js:66:20)\n    at Proxy.overwritingMethodWrapper (node_modules/.pnpm/chai@4.3.7/node_modules/chai/lib/chai/utils/overwriteMethod.js:78:33)\n    at doAsserterAsyncAndAddThen (node_modules/.pnpm/chai-as-promised@7.1.1_chai@4.3.7/node_modules/chai-as-promised/lib/chai-as-promised.js:289:22)\n    at Proxy.<anonymous> (node_modules/.pnpm/chai-as-promised@7.1.1_chai@4.3.7/node_modules/chai-as-promised/lib/chai-as-promised.js:255:20)\n    at Proxy.overwritingMethodWrapper (node_modules/.pnpm/chai@4.3.7/node_modules/chai/lib/chai/utils/overwriteMethod.js:78:33)\n    at Context.<anonymous> (src/test/minter/03-liquidation.ts:445:62)",
                        "diff": null
                      },
                      "uuid": "5a0f0e94-59d2-48e4-893f-717512ab6fe5",
                      "parentUUID": "3e7e24aa-867e-4785-9f30-bd4169e5d605",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to LT with multiple CDPs",
                      "fullTitle": "Minter #liquidation #liquidate should liquidate up to LT with multiple CDPs",
                      "timedOut": false,
                      "duration": 3187,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "const collateral2 = await (0, collaterals_1.addMockCollateralAsset)({\n    name: \"Collateral2\",\n    decimals: 18,\n    factor: 1,\n    price: 10,\n});\nconst userThree = hardhat_1.default.users.userThree;\nconst [deposits1, deposits2] = [(0, lib_1.toBig)(10), (0, lib_1.toBig)(5)];\nconst borrows = (0, lib_1.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait Promise.all([\n    await this.collateral.setBalance(userThree, deposits1),\n    await collateral2.setBalance(userThree, deposits2),\n    await (0, collaterals_1.depositCollateral)({\n        user: userThree,\n        amount: deposits1,\n        asset: this.collateral,\n    }),\n    await (0, collaterals_1.depositCollateral)({\n        user: userThree,\n        amount: deposits2,\n        asset: collateral2,\n    }),\n    await (0, krassets_1.mintKrAsset)({\n        user: userThree,\n        amount: borrows,\n        asset: this.krAsset,\n    }),\n]);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\n// seemingly random order of updates to test that the liquidation works regardless\nthis.collateral.setPrice(6.25);\nawait collateral2.update({\n    factor: 0.975,\n    name: \"updated\",\n});\nawait this.krAsset.update({\n    factor: 1.05,\n    name: \"updated\",\n    closeFee: 0.02,\n    openFee: 0,\n    supplyLimit: 1000000,\n});\n(0, chai_1.expect)(await (0, liquidations_1.getCR)(userThree.address)).to.be.greaterThan(1.05);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, liquidations_1.liquidate)(userThree, this.krAsset, this.collateral);\n(0, chai_1.expect)(await (0, liquidations_1.getCR)(userThree.address)).to.be.lessThan(1.4);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, liquidations_1.liquidate)(userThree, this.krAsset, collateral2);\n(0, chai_1.expect)(await (0, liquidations_1.getCR)(userThree.address)).to.be.closeTo(1.4, CR_DELTA);\n// expect(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                      "err": {
                        "message": "AssertionError: expected 1.4000348968379857 to be close to 1.4 +/- 1e-7",
                        "estack": "AssertionError: expected 1.4000348968379857 to be close to 1.4 +/- 1e-7\n    at Proxy.closeTo (node_modules/.pnpm/chai@4.3.7/node_modules/chai/lib/chai/core/assertions.js:2979:10)\n    at Proxy.methodWrapper (node_modules/.pnpm/chai@4.3.7/node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Proxy.<anonymous> (node_modules/.pnpm/chai-bn@0.3.1_chai@4.3.7/node_modules/chai-bn/chai-bn.js:49:31)\n    at Proxy.overwritingMethodWrapper (node_modules/.pnpm/chai@4.3.7/node_modules/chai/lib/chai/utils/overwriteMethod.js:78:33)\n    at Proxy.<anonymous> (node_modules/.pnpm/@ethereum-waffle+chai@3.4.4/node_modules/@ethereum-waffle/chai/dist/cjs/matchers/bigNumber.js:66:20)\n    at Proxy.overwritingMethodWrapper (node_modules/.pnpm/chai@4.3.7/node_modules/chai/lib/chai/utils/overwriteMethod.js:78:33)\n    at doAsserterAsyncAndAddThen (node_modules/.pnpm/chai-as-promised@7.1.1_chai@4.3.7/node_modules/chai-as-promised/lib/chai-as-promised.js:289:22)\n    at Proxy.<anonymous> (node_modules/.pnpm/chai-as-promised@7.1.1_chai@4.3.7/node_modules/chai-as-promised/lib/chai-as-promised.js:255:20)\n    at Proxy.overwritingMethodWrapper (node_modules/.pnpm/chai@4.3.7/node_modules/chai/lib/chai/utils/overwriteMethod.js:78:33)\n    at Context.<anonymous> (src/test/minter/03-liquidation.ts:509:62)",
                        "diff": null
                      },
                      "uuid": "d6821043-fec6-41e9-bb37-ae130cde95cd",
                      "parentUUID": "3e7e24aa-867e-4785-9f30-bd4169e5d605",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "5a0f0e94-59d2-48e4-893f-717512ab6fe5",
                    "d6821043-fec6-41e9-bb37-ae130cde95cd"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 3609,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}