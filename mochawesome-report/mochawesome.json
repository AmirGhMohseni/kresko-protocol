{
  "stats": {
    "suites": 77,
    "tests": 234,
    "passes": 229,
    "pending": 5,
    "failures": 0,
    "start": "2023-04-04T01:22:46.636Z",
    "end": "2023-04-04T01:24:42.568Z",
    "duration": 115932,
    "testsRegistered": 234,
    "passPercent": 100,
    "pendingPercent": 2.1367521367521367,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cd61192d-22f8-4664-8c06-f69cd5966ae4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "341a28db-b473-4de9-bda5-15ebb48a5e0d",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "265b1d4a-d853-4521-a883-a6ae0cd65ee9",
              "parentUUID": "341a28db-b473-4de9-bda5-15ebb48a5e0d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0b0433b0-c479-4f7e-ab59-92bd81aff9d2",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(hardhat_1.default.users.deployer.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "93f8be89-1ddc-4442-8a9c-72418cdf682f",
                  "parentUUID": "0b0433b0-c479-4f7e-ab59-92bd81aff9d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await hardhat_1.default.Diamond.facets()).map(f => f.facetAddress);\nconst facetAddressesArtifact = this.facets.map(f => f.facetAddress);\n(0, chai_1.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, chai_1.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "c886ee06-ce75-4d49-acbd-6c41304cb6b0",
                  "parentUUID": "0b0433b0-c479-4f7e-ab59-92bd81aff9d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await hardhat_1.default.Diamond.facets()).flatMap(f => f.functionSelectors);\nconst facetSelectorsOnArtifact = this.facets.flatMap(f => f.functionSelectors);\n(0, chai_1.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, chai_1.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "3cb55a46-9e30-4c4a-b976-0c346d2ce27f",
                  "parentUUID": "0b0433b0-c479-4f7e-ab59-92bd81aff9d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93f8be89-1ddc-4442-8a9c-72418cdf682f",
                "c886ee06-ce75-4d49-acbd-6c41304cb6b0",
                "3cb55a46-9e30-4c4a-b976-0c346d2ce27f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "d3bb06dc-6cad-42c0-9246-fd9970b97281",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "d1fd9ae5-ab33-40a2-990c-9bf35dc122a7",
              "parentUUID": "d3bb06dc-6cad-42c0-9246-fd9970b97281",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8c1565cf-b653-4685-83dd-59d48ac60fea",
              "title": "#ownership",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(hardhat_1.default.addr.deployer);",
                  "err": {},
                  "uuid": "6e251f7f-5e39-4d10-8d95-2cc54aa1f38e",
                  "parentUUID": "8c1565cf-b653-4685-83dd-59d48ac60fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.ADMIN, hardhat_1.default.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "76e796c5-1551-4737-8f9c-7982c8a56e6b",
                  "parentUUID": "8c1565cf-b653-4685-83dd-59d48ac60fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hardhat_1.default.users.userOne;\nawait hardhat_1.default.Diamond.transferOwnership(pendingOwner.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "0a31549a-83b9-4296-b9a5-796d9b77e3e6",
                  "parentUUID": "8c1565cf-b653-4685-83dd-59d48ac60fea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hardhat_1.default.users.userOne;\nawait hardhat_1.default.Diamond.transferOwnership(pendingOwner.address);\nawait hardhat_1.default.Diamond.connect(pendingOwner).acceptOwnership();\n(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "1edf49ef-7444-4f0e-8ff9-f1995023449e",
                  "parentUUID": "8c1565cf-b653-4685-83dd-59d48ac60fea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e251f7f-5e39-4d10-8d95-2cc54aa1f38e",
                "76e796c5-1551-4737-8f9c-7982c8a56e6b",
                "0a31549a-83b9-4296-b9a5-796d9b77e3e6",
                "1edf49ef-7444-4f0e-8ff9-f1995023449e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "bf61e777-7e3f-48b1-a5a1-a852e5c16700",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "28f6b62d-d38b-43e8-88b5-62ea71c00436",
              "parentUUID": "bf61e777-7e3f-48b1-a5a1-a852e5c16700",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "987ff521-157a-4797-93d9-2c7a7476c2de",
              "title": "#upgrades",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 909,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await smock_1.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hardhat_1.default.deploy(\"SmockInit\");\nconst signatures = hardhat_1.default.getSignatures([...typechain_1.SmockFacet__factory.abi]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: types_1.FacetCutAction.Add,\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hardhat_1.default.addr.userOne);\nawait hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = hardhat_1.default.ethers.utils.id(\"kresko.test.operator\");\nconst isTestOperator = await hardhat_1.default.Diamond.hasRole(TEST_OPERATOR_ROLE, hardhat_1.default.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, chai_1.expect)(isTestOperator).to.equal(true);\nconst Facet = await hardhat_1.default.ethers.getContractAt([...typechain_1.SmockFacet__factory.abi], hardhat_1.default.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, chai_1.expect)(operatorFromNewStorage).to.equal(hardhat_1.default.addr.userOne);",
                  "err": {},
                  "uuid": "8f0c7f12-e563-413d-84c4-b739d9f142d9",
                  "parentUUID": "987ff521-157a-4797-93d9-2c7a7476c2de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 432,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, add_facet_1.addFacet)({\n    name: \"SmockFacet\",\n    initializerName: \"SmockInit\",\n    initializerArgs: hardhat_1.default.addr.userOne,\n});\nconst facetsBefore = await hardhat_1.default.Diamond.facets();\n(0, chai_1.expect)(facetsBefore.filter(f => f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, remove_facet_1.removeFacet)({ name: \"SmockFacet\" });\nconst facetsAfter = await hardhat_1.default.Diamond.facets();\n(0, chai_1.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, chai_1.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "786a162e-eb2c-4186-9f41-05705bdc7046",
                  "parentUUID": "987ff521-157a-4797-93d9-2c7a7476c2de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(hardhat_1.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hardhat_1.default.addr.nonadmin;\nawait hardhat_1.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hardhat_1.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hardhat_1.default.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await hardhat_1.default.Diamond.facetAddress(signature);\nconst functions = await hardhat_1.default.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: hardhat_1.default.ethers.constants.AddressZero,\n    action: types_1.FacetCutAction.Remove,\n    functionSelectors: [signature],\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hardhat_1.default.addr.userOne;\nconst initData = await hardhat_1.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nawait tx.wait();\n// Ensure rest of the functions remain\nconst functionsAfterCut = await hardhat_1.default.Diamond.facetFunctionSelectors(facetAddress);\n(0, chai_1.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst filter = hardhat_1.default.Diamond.filters[\"PendingOwnershipTransfer(address,address)\"](hardhat_1.default.addr.deployer, correctOwner);\nconst [event] = await hardhat_1.default.Diamond.queryFilter(filter);\nconst { previousOwner, newOwner } = event.args;\n(0, chai_1.expect)(previousOwner).to.equal(hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(test_1.Error.DIAMOND_INVALID_FUNCTION_SIGNATURE);",
                  "err": {},
                  "uuid": "73bad2dc-f882-4352-b793-a76dd2b09407",
                  "parentUUID": "987ff521-157a-4797-93d9-2c7a7476c2de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(hardhat_1.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hardhat_1.default.addr.nonadmin;\nawait hardhat_1.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hardhat_1.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hardhat_1.default.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await hardhat_1.default.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await hardhat_1.default.deploy(\"DiamondOwnershipFacet\", {\n    deploymentName: \"DiamondOwnershipFacet2\",\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: types_1.FacetCutAction.Replace,\n    functionSelectors: [signature],\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hardhat_1.default.addr.userOne;\nconst initData = await hardhat_1.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nawait tx.wait();\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(test_1.Error.DIAMOND_INVALID_PENDING_OWNER);\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await hardhat_1.default.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, chai_1.expect)(functionsNewFacet.length).to.equal(1);\n(0, chai_1.expect)(functionsNewFacet).to.have.members([signature]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await hardhat_1.default.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, chai_1.expect)(functionsOldFacet).to.not.have.members([signature]);\n(0, chai_1.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).acceptOwnership());\nconst currentOwner = await hardhat_1.default.Diamond.owner();\n(0, chai_1.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "fca849cf-9676-485a-a067-9fc6f51bc80f",
                  "parentUUID": "987ff521-157a-4797-93d9-2c7a7476c2de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 706,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);\nconst Factory = await smock_1.smock.mock(\"SmockInit\");\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait hardhat_1.default.Diamond.upgradeState(tx.to, tx.data);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "ab2737bd-c8ea-41bf-a3f1-576f3934508f",
                  "parentUUID": "987ff521-157a-4797-93d9-2c7a7476c2de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 1504,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await smock_1.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hardhat_1.default.deploy(\"SmockInit\");\nconst signatures = hardhat_1.default.getSignatures([...typechain_1.SmockFacet__factory.abi]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: types_1.FacetCutAction.Add,\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hardhat_1.default.addr.userOne);\nawait hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nconst Diamond = await hardhat_1.default.ethers.getContractAt(\"SmockFacet\", hardhat_1.default.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, chai_1.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await smock_1.smock.mock(\"SmockFacet2\");\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = hardhat_1.default.getSignatures([...typechain_1.SmockFacet2__factory.abi]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: types_1.FacetCutAction.Add,\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait hardhat_1.default.Diamond.diamondCut([Cut2], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await hardhat_1.default.ethers.getContractAt(\"SmockFacet2\", hardhat_1.default.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, chai_1.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, chai_1.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "5ed26a5d-93bd-48ae-a79c-9c746092ee49",
                  "parentUUID": "987ff521-157a-4797-93d9-2c7a7476c2de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f0c7f12-e563-413d-84c4-b739d9f142d9",
                "786a162e-eb2c-4186-9f41-05705bdc7046",
                "73bad2dc-f882-4352-b793-a76dd2b09407",
                "fca849cf-9676-485a-a067-9fc6f51bc80f",
                "ab2737bd-c8ea-41bf-a3f1-576f3934508f",
                "5ed26a5d-93bd-48ae-a79c-9c746092ee49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3672,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "46b744f7-a117-4205-a5b7-2b905cb5eb29",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "dfad2ea1-9b5f-48bc-b110-397ab140f284",
              "parentUUID": "46b744f7-a117-4205-a5b7-2b905cb5eb29",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6db0ad4b-7cc1-4452-b371-ea6753f22e17",
              "title": "#initialization - anchor",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = this.krAssets.find(k => k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "3eee4e5e-873b-43f8-b4fb-63a792c52641",
                  "parentUUID": "6db0ad4b-7cc1-4452-b371-ea6753f22e17",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(KreskoAsset.initialize(name, symbol, 18, hardhat_1.default.addr.deployer, hardhat_1.default.Diamond.address)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "a4215f69-a777-4120-bcd3-8cf349c6981d",
                  "parentUUID": "6db0ad4b-7cc1-4452-b371-ea6753f22e17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await hardhat_1.default.deployments.get(symbol);\nconst implementationAddress = deployment.implementation;\n(0, chai_1.expect)(implementationAddress).to.not.equal(hardhat_1.default.ethers.constants.AddressZero);\nconst KreskoAssetImpl = await hardhat_1.default.ethers.getContractAt(\"KreskoAsset\", implementationAddress);\nawait (0, chai_1.expect)(KreskoAssetImpl.initialize(name, symbol, 18, hardhat_1.default.addr.deployer, hardhat_1.default.Diamond.address)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "52ed6cce-dcce-47ad-9180-e48e50e50875",
                  "parentUUID": "6db0ad4b-7cc1-4452-b371-ea6753f22e17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await KreskoAsset.name()).to.equal(name);\n(0, chai_1.expect)(await KreskoAsset.symbol()).to.equal(symbol);\n(0, chai_1.expect)(await KreskoAsset.kresko()).to.equal(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(await KreskoAsset.hasRole(test_1.Role.ADMIN, hardhat_1.default.addr.deployer)).to.equal(true);\n(0, chai_1.expect)(await KreskoAsset.hasRole(test_1.Role.OPERATOR, hardhat_1.default.Diamond.address)).to.equal(true);\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(\"200000000000000000000\");\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).to.equal(0);\n(0, chai_1.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "b3b32d49-9b55-42ab-a001-f52a7b369938",
                  "parentUUID": "6db0ad4b-7cc1-4452-b371-ea6753f22e17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, chai_1.expect)(KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);\n(0, chai_1.expect)(await KreskoAsset.name()).to.equal(newName);\n(0, chai_1.expect)(await KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "a5f58367-1b6b-48e3-97d2-2102c038bfd2",
                  "parentUUID": "6db0ad4b-7cc1-4452-b371-ea6753f22e17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4215f69-a777-4120-bcd3-8cf349c6981d",
                "52ed6cce-dcce-47ad-9180-e48e50e50875",
                "b3b32d49-9b55-42ab-a001-f52a7b369938",
                "a5f58367-1b6b-48e3-97d2-2102c038bfd2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 65,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "5729d156-69c8-40ef-9f4b-45503cee7fa1",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - wrapped\"",
                  "fullTitle": "KreskoAsset #initialization - wrapped \"before each\" hook in \"#initialization - wrapped\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = hardhat_1.default.krAssets.find(k => k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "895660ac-3f12-4cce-9ec3-c774f3974cae",
                  "parentUUID": "5729d156-69c8-40ef-9f4b-45503cee7fa1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(KreskoAssetAnchor.initialize(KreskoAsset.address, name, symbol, hardhat_1.default.addr.deployer)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "0b670f34-0735-49f9-b63e-6f24c3387ad9",
                  "parentUUID": "5729d156-69c8-40ef-9f4b-45503cee7fa1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await hardhat_1.default.deployments.get(shared_1.anchorTokenPrefix + symbol);\nconst implementationAddress = deployment.implementation;\n(0, chai_1.expect)(implementationAddress).to.not.equal(hardhat_1.default.ethers.constants.AddressZero);\nconst KreskoAssetAnchorImpl = await hardhat_1.default.ethers.getContractAt(\"KreskoAssetAnchor\", implementationAddress);\nawait (0, chai_1.expect)(KreskoAssetAnchorImpl.initialize(KreskoAsset.address, name, symbol, hardhat_1.default.addr.deployer)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "13a478e7-e83c-4cc2-a53d-af04cbc0052d",
                  "parentUUID": "5729d156-69c8-40ef-9f4b-45503cee7fa1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, chai_1.expect)(KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);\n(0, chai_1.expect)(await KreskoAssetAnchor.name()).to.equal(newName);\n(0, chai_1.expect)(await KreskoAssetAnchor.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "ff7110d9-eed6-4fa7-a893-75ff03d23deb",
                  "parentUUID": "5729d156-69c8-40ef-9f4b-45503cee7fa1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await KreskoAssetAnchor.name()).to.equal(name);\n(0, chai_1.expect)(await KreskoAssetAnchor.symbol()).to.equal(shared_1.anchorTokenPrefix + symbol);\n(0, chai_1.expect)(await KreskoAssetAnchor.asset()).to.equal(KreskoAsset.address);\n(0, chai_1.expect)(await KreskoAssetAnchor.hasRole(test_1.Role.ADMIN, hardhat_1.default.addr.deployer)).to.equal(true);\n(0, chai_1.expect)(await KreskoAssetAnchor.hasRole(test_1.Role.OPERATOR, hardhat_1.default.Diamond.address)).to.equal(true);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(\"200000000000000000000\");\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(await KreskoAsset.totalSupply());\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).to.equal(0);\n(0, chai_1.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "124eacc0-a63a-46af-9624-7f8f4369ad8d",
                  "parentUUID": "5729d156-69c8-40ef-9f4b-45503cee7fa1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b670f34-0735-49f9-b63e-6f24c3387ad9",
                "13a478e7-e83c-4cc2-a53d-af04cbc0052d",
                "ff7110d9-eed6-4fa7-a893-75ff03d23deb",
                "124eacc0-a63a-46af-9624-7f8f4369ad8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 59,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "7f1adb01-55eb-4af9-8079-9be64d7e8b11",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "422b86ef-00b1-4636-a94e-720e41016041",
              "parentUUID": "7f1adb01-55eb-4af9-8079-9be64d7e8b11",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.owner = hardhat_1.default.users.deployer;\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol);\nthis.mintAmount = 125;\nawait this.krAsset.contract.grantRole(test_1.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "3759f164-a280-40b0-8031-aeea5f70745b",
              "parentUUID": "7f1adb01-55eb-4af9-8079-9be64d7e8b11",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3523b7c2-94ab-4a47-8a99-439b2ec8f8d2",
              "title": "#mint",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "cbd83df7-1197-4c1e-ae84-5a896ab631fc",
                  "parentUUID": "3523b7c2-94ab-4a47-8a99-439b2ec8f8d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(hardhat_1.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "31d41e07-492c-4d9c-9152-ec64d90f7b73",
                  "parentUUID": "3523b7c2-94ab-4a47-8a99-439b2ec8f8d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait (0, chai_1.expect)(this.krAsset.contract.connect(hardhat_1.default.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userOne.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and all account balances unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "732d4c55-5382-430f-8a57-eb4ebe3dc280",
                  "parentUUID": "3523b7c2-94ab-4a47-8a99-439b2ec8f8d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.renounceRole(test_1.Role.OPERATOR, this.owner.address);\nawait (0, chai_1.expect)(this.krAsset.contract.connect(hardhat_1.default.users.admin).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.admin.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);",
                  "err": {},
                  "uuid": "70d51fc6-010f-4e0a-b328-1cc234d8aea2",
                  "parentUUID": "3523b7c2-94ab-4a47-8a99-439b2ec8f8d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cbd83df7-1197-4c1e-ae84-5a896ab631fc",
                "31d41e07-492c-4d9c-9152-ec64d90f7b73",
                "732d4c55-5382-430f-8a57-eb4ebe3dc280",
                "70d51fc6-010f-4e0a-b328-1cc234d8aea2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 131,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "654b26bc-30ec-4997-9b60-4b397637678e",
              "title": "#burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.mintAmount = 250;\nawait this.krAsset.contract.connect(this.owner).mint(hardhat_1.default.users.userOne.address, this.mintAmount);",
                  "err": {},
                  "uuid": "a93ac3e2-082e-4b1f-8f40-4e990f6ef2d0",
                  "parentUUID": "654b26bc-30ec-4997-9b60-4b397637678e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(hardhat_1.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "dcf23fb4-013c-43d0-9702-7ae4acac450f",
                  "parentUUID": "654b26bc-30ec-4997-9b60-4b397637678e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.connect(this.owner).approve(hardhat_1.default.users.userOne.address, this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.allowance(this.owner.address, hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(hardhat_1.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, chai_1.expect)(await this.krAsset.contract.allowance(this.owner.address, hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "0b56a5d8-098a-420d-88de-a6cdd2c21d53",
                  "parentUUID": "654b26bc-30ec-4997-9b60-4b397637678e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\n// gh-actions fix\nif (process.env.TESTCI) {\n    await (0, chai_1.expect)(this.krAsset.contract.connect(this.owner).burn(hardhat_1.default.users.userOne.address, overUserBalance)).to.be.reverted;\n}\nelse {\n    await (0, chai_1.expect)(this.krAsset.contract.connect(this.owner).burn(hardhat_1.default.users.userOne.address, overUserBalance)).to.be.reverted;\n}\n// Check total supply and user's balances are unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "9fc0eff6-65e3-495a-9321-f926df87d15e",
                  "parentUUID": "654b26bc-30ec-4997-9b60-4b397637678e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(this.krAsset.contract.connect(hardhat_1.default.users.userTwo).burn(hardhat_1.default.users.userOne.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userTwo.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and user's balances unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "157322da-093f-4eda-b027-39d6d27dce6e",
                  "parentUUID": "654b26bc-30ec-4997-9b60-4b397637678e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dcf23fb4-013c-43d0-9702-7ae4acac450f",
                "0b56a5d8-098a-420d-88de-a6cdd2c21d53",
                "9fc0eff6-65e3-495a-9321-f926df87d15e",
                "157322da-093f-4eda-b027-39d6d27dce6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 119,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "8f175d54-42c1-476f-b60d-11ce22209473",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "caa0887f-2768-46ff-91ad-a418800d2902",
              "parentUUID": "8f175d54-42c1-476f-b60d-11ce22209473",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol).contract;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(test_1.Role.OPERATOR, hardhat_1.default.addr.deployer);",
              "err": {},
              "uuid": "8f81b09d-3350-494b-9e2d-77a334184dbd",
              "parentUUID": "8f175d54-42c1-476f-b60d-11ce22209473",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "135add3c-d2aa-4d3c-aedc-6ca1f899962f",
              "title": "#rebase",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(\"1.525\");\nconst positive = true;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive)).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).equal(denominator);\n(0, chai_1.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "61d49efc-c708-446c-af69-a9063bd48250",
                  "parentUUID": "135add3c-d2aa-4d3c-aedc-6ca1f899962f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(\"1.525\");\nconst positive = false;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive)).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).equal(denominator);\n(0, chai_1.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "b7c0349e-44a0-4e19-bc0d-b2ae8b06a5be",
                  "parentUUID": "135add3c-d2aa-4d3c-aedc-6ca1f899962f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(1);\nconst positive = false;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive)).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "7a312946-1156-4ebe-be59-0b7e8a71c1c6",
                  "parentUUID": "135add3c-d2aa-4d3c-aedc-6ca1f899962f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "7a3cb950-b4ed-479e-8bfb-a621716871d1",
                  "title": "#balance + supply",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                      "err": {},
                      "uuid": "5c1bf827-4362-4453-b146-cb46c4acd8b0",
                      "parentUUID": "7a3cb950-b4ed-479e-8bfb-a621716871d1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 25,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "f9d67d1c-2f11-430b-8a2b-1f299c4f6fbd",
                      "parentUUID": "7a3cb950-b4ed-479e-8bfb-a621716871d1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "101c7834-f28b-4c58-89cd-db26d5be7edd",
                      "parentUUID": "7a3cb950-b4ed-479e-8bfb-a621716871d1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "87e6787a-93de-49cf-b7d8-1f4b10f6b4e9",
                      "parentUUID": "7a3cb950-b4ed-479e-8bfb-a621716871d1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "2bb7fb13-ed3e-421b-846f-39cc3774a746",
                      "parentUUID": "7a3cb950-b4ed-479e-8bfb-a621716871d1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "a138cbe5-2ff1-422c-8b3a-3842d7aea1c8",
                      "parentUUID": "7a3cb950-b4ed-479e-8bfb-a621716871d1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "ed1764fa-4b3e-4a3f-9677-665ddc659ca9",
                      "parentUUID": "7a3cb950-b4ed-479e-8bfb-a621716871d1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5c1bf827-4362-4453-b146-cb46c4acd8b0",
                    "f9d67d1c-2f11-430b-8a2b-1f299c4f6fbd",
                    "101c7834-f28b-4c58-89cd-db26d5be7edd",
                    "87e6787a-93de-49cf-b7d8-1f4b10f6b4e9",
                    "2bb7fb13-ed3e-421b-846f-39cc3774a746",
                    "a138cbe5-2ff1-422c-8b3a-3842d7aea1c8",
                    "ed1764fa-4b3e-4a3f-9677-665ddc659ca9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 161,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "d5515017-6023-45fc-9e3e-91edb009052d",
                  "title": "#transfer",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 48,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "1ad35922-d047-4dcb-b85b-811a44275aad",
                      "parentUUID": "d5515017-6023-45fc-9e3e-91edb009052d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 47,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "376ea933-474b-4f43-9859-b7120e1cbd37",
                      "parentUUID": "d5515017-6023-45fc-9e3e-91edb009052d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 101,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "50bd04c7-500a-4600-9834-fdeb41b651b1",
                      "parentUUID": "d5515017-6023-45fc-9e3e-91edb009052d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 97,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "263b44c9-782d-4e01-8635-a853875810ed",
                      "parentUUID": "d5515017-6023-45fc-9e3e-91edb009052d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 93,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "bcb541e2-8cf3-41c5-ac8e-f3d8ccf52045",
                      "parentUUID": "d5515017-6023-45fc-9e3e-91edb009052d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "6743fcaa-2648-4f23-a71b-5ea01426eb54",
                      "parentUUID": "d5515017-6023-45fc-9e3e-91edb009052d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1ad35922-d047-4dcb-b85b-811a44275aad",
                    "376ea933-474b-4f43-9859-b7120e1cbd37",
                    "50bd04c7-500a-4600-9834-fdeb41b651b1",
                    "263b44c9-782d-4e01-8635-a853875810ed",
                    "bcb541e2-8cf3-41c5-ac8e-f3d8ccf52045",
                    "6743fcaa-2648-4f23-a71b-5ea01426eb54"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 480,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "61d49efc-c708-446c-af69-a9063bd48250",
                "b7c0349e-44a0-4e19-bc0d-b2ae8b06a5be",
                "7a312946-1156-4ebe-be59-0b7e8a71c1c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 61,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "89155d5f-334c-4aeb-aa4c-4b706a0cd0a2",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "4475e5ac-9a15-42b3-ba74-afa838e3e819",
              "parentUUID": "89155d5f-334c-4aeb-aa4c-4b706a0cd0a2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const asset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol);\nKreskoAsset = asset.contract;\nKreskoAssetAnchor = asset.anchor;\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(test_1.Role.OPERATOR, hardhat_1.default.addr.deployer),\n    KreskoAssetAnchor.grantRole(test_1.Role.OPERATOR, hardhat_1.default.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hardhat_1.default.ethers.constants.MaxUint256),\n]);",
              "err": {},
              "uuid": "3be07a4f-41ed-484f-aac2-21ab6a57f995",
              "parentUUID": "89155d5f-334c-4aeb-aa4c-4b706a0cd0a2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7f92b416-828b-47c9-9e18-cd0c325aa3e2",
              "title": "#minting and burning",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(test_1.defaultMintAmount.add(test_1.defaultMintAmount));\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "7221fa7d-ed66-4980-81fc-1d1bfa7dac4c",
                  "parentUUID": "7f92b416-828b-47c9-9e18-cd0c325aa3e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "38b33788-3394-49d6-8aa0-8e8682345ffd",
                  "parentUUID": "7f92b416-828b-47c9-9e18-cd0c325aa3e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "72261851-9200-43df-8df7-cb3d52d4e955",
                  "parentUUID": "7f92b416-828b-47c9-9e18-cd0c325aa3e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 167,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "1be954fd-aa59-41e6-8b55-07dd841de97b",
                  "parentUUID": "7f92b416-828b-47c9-9e18-cd0c325aa3e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 164,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nawait KreskoAssetAnchor.withdraw(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "467b3e6c-ef10-4791-a6ad-3c9477927f1b",
                  "parentUUID": "7f92b416-828b-47c9-9e18-cd0c325aa3e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "40c5e239-89fb-4735-8e2d-fe6210e3abe4",
                  "title": "#rebases",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "988fe299-28a2-4732-b942-de0c08a71c44",
                      "title": "#conversions",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 187,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "5834d359-407a-48e9-b7b4-30788183f318",
                          "parentUUID": "988fe299-28a2-4732-b942-de0c08a71c44",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 187,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "e6a64ab9-0dc2-44c5-b01a-120cbda29708",
                          "parentUUID": "988fe299-28a2-4732-b942-de0c08a71c44",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 180,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "f86e126f-fc12-459f-9639-edadc8fedb07",
                          "parentUUID": "988fe299-28a2-4732-b942-de0c08a71c44",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 190,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "7460a58f-ec96-4671-a1b3-45eb63c4a89f",
                          "parentUUID": "988fe299-28a2-4732-b942-de0c08a71c44",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 175,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "a71e784c-738c-40da-9485-6c640727a67b",
                          "parentUUID": "988fe299-28a2-4732-b942-de0c08a71c44",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 175,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "59be9037-4f45-4dc8-b29f-3d0844fc05fc",
                          "parentUUID": "988fe299-28a2-4732-b942-de0c08a71c44",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 182,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "8ee977c4-1321-46f7-b44f-3eb72930a862",
                          "parentUUID": "988fe299-28a2-4732-b942-de0c08a71c44",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 196,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "edd966b9-0b97-4821-b2d6-fca21ac95480",
                          "parentUUID": "988fe299-28a2-4732-b942-de0c08a71c44",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "5834d359-407a-48e9-b7b4-30788183f318",
                        "e6a64ab9-0dc2-44c5-b01a-120cbda29708",
                        "f86e126f-fc12-459f-9639-edadc8fedb07",
                        "7460a58f-ec96-4671-a1b3-45eb63c4a89f",
                        "a71e784c-738c-40da-9485-6c640727a67b",
                        "59be9037-4f45-4dc8-b29f-3d0844fc05fc",
                        "8ee977c4-1321-46f7-b44f-3eb72930a862",
                        "edd966b9-0b97-4821-b2d6-fca21ac95480"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1472,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "7221fa7d-ed66-4980-81fc-1d1bfa7dac4c",
                "38b33788-3394-49d6-8aa0-8e8682345ffd",
                "72261851-9200-43df-8df7-cb3d52d4e955",
                "1be954fd-aa59-41e6-8b55-07dd841de97b",
                "467b3e6c-ef10-4791-a6ad-3c9477927f1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 515,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "109807fe-3f37-4d49-ba78-54879c431a4d",
          "title": "Minter - Init",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
          "file": "/src/test/minter/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Init\"",
              "fullTitle": "Minter - Init \"before each\" hook in \"Minter - Init\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "33c62635-cb33-41ac-8eac-c7ff8852df5b",
              "parentUUID": "109807fe-3f37-4d49-ba78-54879c431a4d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "415e29eb-1c3f-4edb-b753-973574132533",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
              "file": "/src/test/minter/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct initial state",
                  "fullTitle": "Minter - Init #initialization sets correct initial state",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.minterInitializations()).to.equal(1);\nconst { args } = await (0, shared_1.getMinterInitializer)(hardhat_1.default);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.ADMIN, args.admin)).to.equal(true);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.SAFETY_COUNCIL, hardhat_1.default.Multisig.address)).to.equal(true);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.feeRecipient()).to.equal(args.treasury);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue).to.equal(args.liquidationIncentiveMultiplier);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.minimumCollateralizationRatio()).rawValue).to.equal(args.minimumCollateralizationRatio);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.minimumDebtValue()).rawValue).to.equal(args.minimumDebtValue);",
                  "err": {},
                  "uuid": "51691121-0e90-403c-81bf-c5aebc46667f",
                  "parentUUID": "415e29eb-1c3f-4edb-b753-973574132533",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize twice",
                  "fullTitle": "Minter - Init #initialization cant initialize twice",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.minterInitializations()).to.equal(1);\nconst initializer = await (0, shared_1.getMinterInitializer)(hardhat_1.default);\nconst initializerContract = await hardhat_1.default.getContractOrFork(initializer.name);\nconst tx = await initializerContract.populateTransaction.initialize(initializer.args);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.upgradeState(tx.to, tx.data)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED);",
                  "err": {},
                  "uuid": "e53e4b7a-8759-48f1-bc8c-0c876a006682",
                  "parentUUID": "415e29eb-1c3f-4edb-b753-973574132533",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures all facets correctly",
                  "fullTitle": "Minter - Init #initialization configures all facets correctly",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await hardhat_1.default.Diamond.facets()).map(([facetAddress, functionSelectors]) => ({\n    facetAddress,\n    functionSelectors,\n}));\nconst expectedFacets = await Promise.all([...shared_1.minterFacets, ...shared_1.diamondFacets].map(async (name) => {\n    const deployment = await hardhat_1.default.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find(f => f.facetAddress === deployment.address)\n            .functionSelectors,\n    };\n}));\n(0, chai_1.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "87483972-ea48-4a53-822d-156659933082",
                  "parentUUID": "415e29eb-1c3f-4edb-b753-973574132533",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51691121-0e90-403c-81bf-c5aebc46667f",
                "e53e4b7a-8759-48f1-bc8c-0c876a006682",
                "87483972-ea48-4a53-822d-156659933082"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 127,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "5a9f1943-24f4-44a5-ad43-857e28a64af6",
          "title": "Minter - Configuration",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "4ad6c14a-2ea2-4911-ac48-4149c7d1841c",
              "parentUUID": "5a9f1943-24f4-44a5-ad43-857e28a64af6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5d566cb0-844b-457c-9dad-f2dea30000fa",
              "title": "#configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Diamond = hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer);\nconst update = (0, test_1.getNewMinterParams)(hardhat_1.default.users.treasury.address);\nawait (0, chai_1.expect)(Diamond.updateLiquidationIncentiveMultiplier(update.liquidationIncentiveMultiplier)).to.not.be\n    .reverted;\nawait (0, chai_1.expect)(Diamond.updateMinimumCollateralizationRatio(update.minimumCollateralizationRatio)).to.not.be\n    .reverted;\nawait (0, chai_1.expect)(Diamond.updateMinimumDebtValue(update.minimumDebtValue)).to.not.be.reverted;\nawait (0, chai_1.expect)(Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, chai_1.expect)(Diamond.updateFeeRecipient(update.feeRecipient)).to.not.be.reverted;\nconst { liquidationIncentiveMultiplier, minimumCollateralizationRatio, minimumDebtValue, liquidationThreshold, feeRecipient, } = await hardhat_1.default.Diamond.getAllParams();\n(0, chai_1.expect)(update.liquidationIncentiveMultiplier.toBigInt()).to.equal(liquidationIncentiveMultiplier.rawValue);\n(0, chai_1.expect)(update.minimumCollateralizationRatio.toBigInt()).to.equal(minimumCollateralizationRatio.rawValue);\n(0, chai_1.expect)(update.minimumDebtValue.toBigInt()).to.equal(minimumDebtValue.rawValue);\n(0, chai_1.expect)(update.liquidationThreshold.toBigInt()).to.equal(liquidationThreshold.rawValue);\n(0, chai_1.expect)(update.feeRecipient).to.equal(feeRecipient);",
                  "err": {},
                  "uuid": "fd8411e7-806a-4ceb-9b43-177faf6c3cc6",
                  "parentUUID": "5d566cb0-844b-457c-9dad-f2dea30000fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 1635,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract } = await (0, collaterals_1.addMockCollateralAsset)(test_1.defaultCollateralArgs);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.collateralExists(contract.address)).to.equal(true);\nconst [, oraclePrice] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(contract.address, hardhat_1.default.toBig(1), true);\n(0, chai_1.expect)(Number(oraclePrice)).to.equal(hardhat_1.default.toBig(test_1.defaultCollateralArgs.price, 8));",
                  "err": {},
                  "uuid": "151a2d96-09ff-4cb0-a2d4-495f7d821335",
                  "parentUUID": "5d566cb0-844b-457c-9dad-f2dea30000fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 2189,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, kresko } = await (0, krassets_1.addMockKreskoAsset)();\nconst values = await kresko();\nconst kreskoPriceAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.krAssetExists(contract.address)).to.equal(true);\n(0, chai_1.expect)(values.exists).to.equal(true);\n(0, chai_1.expect)(Number(values.kFactor)).to.equal(Number((0, lib_1.toFixedPoint)(test_1.defaultKrAssetArgs.factor)));\n(0, chai_1.expect)(kreskoPriceAnswer).to.equal(test_1.defaultKrAssetArgs.price);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.supplyLimit)).to.equal(test_1.defaultKrAssetArgs.supplyLimit);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.closeFee.rawValue)).to.equal(test_1.defaultKrAssetArgs.closeFee);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.openFee.rawValue)).to.equal(test_1.defaultKrAssetArgs.openFee);",
                  "err": {},
                  "uuid": "4d39f95b-bc65-44d0-93ad-edcd01d47bb9",
                  "parentUUID": "5d566cb0-844b-457c-9dad-f2dea30000fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update AMM oracle",
                  "fullTitle": "Minter - Configuration #configuration can update AMM oracle",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ammOracle = await smock_1.smock.fake(\"UniswapV2Oracle\");\nawait hardhat_1.default.Diamond.updateAMMOracle(ammOracle.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.ammOracle()).to.equal(ammOracle.address);",
                  "err": {},
                  "uuid": "a6025f57-a79a-40d3-bef4-7d2da171cad8",
                  "parentUUID": "5d566cb0-844b-457c-9dad-f2dea30000fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter - Configuration #configuration can update external oracle decimals",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hardhat_1.default.Diamond.updateExtOracleDecimals(decimals);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.extOracleDecimals()).to.equal(decimals);",
                  "err": {},
                  "uuid": "13561246-371f-4b52-8288-abdb506e98d2",
                  "parentUUID": "5d566cb0-844b-457c-9dad-f2dea30000fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update values of a kresko asset",
                  "timedOut": false,
                  "duration": 2906,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, anchor, priceFeed } = await (0, krassets_1.addMockKreskoAsset)();\nconst oracleAnswer = hardhat_1.default.fromBig(await priceFeed.latestAnswer(), 8);\nconst kreskoAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(oracleAnswer).to.equal(kreskoAnswer);\n(0, chai_1.expect)(oracleAnswer).to.equal(test_1.defaultKrAssetArgs.price);\nconst update = {\n    factor: (0, lib_1.toFixedPoint)(1.2),\n    supplyLimit: 12000,\n    price: 20,\n    closeFee: (0, lib_1.toFixedPoint)(0.02),\n    openFee: (0, lib_1.toFixedPoint)(0.02),\n};\nconst [newPriceFeed] = await (0, test_1.getMockOracleFor)(await contract.name(), update.price);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).updateKreskoAsset(contract.address, anchor.address, update.factor, newPriceFeed.address, newPriceFeed.address, hardhat_1.default.toBig(update.supplyLimit), update.closeFee, update.openFee);\nconst newValues = await hardhat_1.default.Diamond.kreskoAsset(contract.address);\nconst updatedOracleAnswer = hardhat_1.default.fromBig(await newPriceFeed.latestAnswer(), 8);\nconst newKreskoAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(newValues.exists).to.equal(true);\n(0, chai_1.expect)(Number(newValues.kFactor)).to.equal(Number(update.factor));\n(0, chai_1.expect)(hardhat_1.default.fromBig(newValues.supplyLimit)).to.equal(update.supplyLimit);\n(0, chai_1.expect)(updatedOracleAnswer).to.equal(newKreskoAnswer);\n(0, chai_1.expect)(updatedOracleAnswer).to.equal(update.price);",
                  "err": {},
                  "uuid": "fb963ee6-1967-4283-8039-6efe2e4b279a",
                  "parentUUID": "5d566cb0-844b-457c-9dad-f2dea30000fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd8411e7-806a-4ceb-9b43-177faf6c3cc6",
                "151a2d96-09ff-4cb0-a2d4-495f7d821335",
                "4d39f95b-bc65-44d0-93ad-edcd01d47bb9",
                "a6025f57-a79a-40d3-bef4-7d2da171cad8",
                "13561246-371f-4b52-8288-abdb506e98d2",
                "fb963ee6-1967-4283-8039-6efe2e4b279a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6796,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "8e862743-b4b2-4d60-a92b-83df3e4e208d",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "025449be-5c76-42af-9ed5-852cf98d54ed",
              "parentUUID": "8e862743-b4b2-4d60-a92b-83df3e4e208d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.initialBalance = (0, lib_1.toBig)(100000);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userOne.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n// expect(await this.collateral!.contract.balanceOf(hre.users.userOne.address)).to.equal(this.initialBalance);\nthis.depositArgs = {\n    user: hardhat_1.default.users.userOne,\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(10000),\n};",
              "err": {},
              "uuid": "2dbdd724-1ff8-4875-92ba-562b05374d47",
              "parentUUID": "8e862743-b4b2-4d60-a92b-83df3e4e208d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "702e76ce-6176-4f08-a2d0-0dffd9eb3b2d",
              "title": "#collateral",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "0af8947c-7f02-4539-bdc0-a933edddb2f3",
                  "title": "#deposit",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Account has no deposited assets\nconst depositedCollateralAssetsBefore = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Account now has deposited assets\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Account's collateral deposit balances have increased\n(0, chai_1.expect)(await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address)).to.equal(this.depositArgs.amount);\n// Kresko contract's collateral balance has increased\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address)).to.equal(this.depositArgs.amount);\n// Account's collateral balance has decreased\n(0, chai_1.expect)((0, lib_1.fromBig)(await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address))).to.equal((0, lib_1.fromBig)(this.initialBalance) - (0, lib_1.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "9471a798-c292-429b-94ac-ad5815f43cec",
                      "parentUUID": "0af8947c-7f02-4539-bdc0-a933edddb2f3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load arbitrary user with sufficient collateral for testing purposes\nconst arbitraryUser = hardhat_1.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositArgs.amount);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositArgs.amount);\n// Confirm the depositor's (arbitraryUser) wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await this.collateral.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)((0, lib_1.fromBig)(depositorBalanceAfter)).to.equal((0, lib_1.fromBig)(this.initialBalance) - (0, lib_1.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "8a8d34d1-0ede-4c1e-a19f-904ff82251e7",
                      "parentUUID": "0af8947c-7f02-4539-bdc0-a933edddb2f3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositArgs.amount.add(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "7ec3b560-f42d-42a4-878b-bfe0e5b92bdb",
                      "parentUUID": "0af8947c-7f02-4539-bdc0-a933edddb2f3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 1508,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nconst collateralArgs = {\n    name: \"SecondCollateral\",\n    price: _test_utils_1.defaultOraclePrice,\n    factor: 1,\n    decimals: _test_utils_1.defaultDecimals,\n};\nconst { contract, mocks } = await (0, collaterals_1.addMockCollateralAsset)(collateralArgs);\nawait mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userOne.address]: this.initialBalance,\n});\nawait mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n// Deposit batch of first collateral type\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, contract.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address, contract.address]);",
                      "err": {},
                      "uuid": "08d03dba-93f0-48e7-9892-85fe276d41df",
                      "parentUUID": "0af8947c-7f02-4539-bdc0-a933edddb2f3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"CollateralDeposited\");\n(0, chai_1.expect)(event.account).to.equal(this.depositArgs.user.address);\n(0, chai_1.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.amount).to.equal(this.depositArgs.amount);",
                      "err": {},
                      "uuid": "5da057f4-3ee3-4882-96d4-d7a127c06d32",
                      "parentUUID": "0af8947c-7f02-4539-bdc0-a933edddb2f3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, \"0x0000000000000000000000000000000000000001\", this.depositArgs.amount)).to.be.revertedWith(errors_1.Error.COLLATERAL_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "ad52f2b4-ca4a-4fda-bd6a-8c3606805c07",
                      "parentUUID": "0af8947c-7f02-4539-bdc0-a933edddb2f3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, 0)).to.be.revertedWith(errors_1.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "d92b4b78-8368-4409-ae01-f0d42b511396",
                      "parentUUID": "0af8947c-7f02-4539-bdc0-a933edddb2f3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 64,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer, devTwo, extOne } = await hardhat_1.default.ethers.getNamedSigners();\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, 0], [deployer, devTwo, extOne]);\nconst isDepositPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isDepositPaused).to.equal(true);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, 0)).to.be.revertedWith(errors_1.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "273ccfb9-a2ca-4ddc-b184-97c2072563e8",
                      "parentUUID": "0af8947c-7f02-4539-bdc0-a933edddb2f3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9471a798-c292-429b-94ac-ad5815f43cec",
                    "8a8d34d1-0ede-4c1e-a19f-904ff82251e7",
                    "7ec3b560-f42d-42a4-878b-bfe0e5b92bdb",
                    "08d03dba-93f0-48e7-9892-85fe276d41df",
                    "5da057f4-3ee3-4882-96d4-d7a127c06d32",
                    "ad52f2b4-ca4a-4fda-bd6a-8c3606805c07",
                    "d92b4b78-8368-4409-ae01-f0d42b511396",
                    "273ccfb9-a2ca-4ddc-b184-97c2072563e8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1684,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "dbd4e637-28b6-4ad9-b67c-27c3141c563b",
                  "title": "#withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw \"before each\" hook in \"#withdraw\"",
                      "timedOut": false,
                      "duration": 10,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, this.depositArgs.amount)).not.to.be.reverted;\nthis.collateral = this.collaterals[0];\nthis.depositAmount = this.depositArgs.amount;",
                      "err": {},
                      "uuid": "074540d1-6ff6-4238-9f31-c3d786fee4cf",
                      "parentUUID": "dbd4e637-28b6-4ad9-b67c-27c3141c563b",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "5872fff8-1362-4c1f-86b2-4dc51ff068a5",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 36,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance);",
                          "err": {},
                          "uuid": "c7aaab0f-8cbd-43ff-a342-e12fc7efda1a",
                          "parentUUID": "5872fff8-1362-4c1f-86b2-4dc51ff068a5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 32,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = this.depositAmount.div(2);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance.sub(amountDeposited));",
                          "err": {},
                          "uuid": "ee542629-f158-4b41-a840-9616d5e0e88a",
                          "parentUUID": "5872fff8-1362-4c1f-86b2-4dc51ff068a5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 51,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).grantRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address)).to.equal(true);\nconst collateralBefore = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.depositAmount, 0)).to.not.be.reverted;\nconst collateralAfter = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n// Ensure that collateral was withdrawn\n(0, chai_1.expect)(collateralAfter).to.equal(collateralBefore.sub(this.depositAmount));",
                          "err": {},
                          "uuid": "4c3b2305-6456-46fc-8613-ae1b17eafb6b",
                          "parentUUID": "5872fff8-1362-4c1f-86b2-4dc51ff068a5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 29,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"CollateralWithdrawn\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.amount).to.equal(this.depositAmount);",
                          "err": {},
                          "uuid": "2aaeffdd-cb54-4cef-9113-df9b6115e9db",
                          "parentUUID": "5872fff8-1362-4c1f-86b2-4dc51ff068a5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 24,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "93f01cd9-d1d3-4882-ba76-c000438332c2",
                          "parentUUID": "5872fff8-1362-4c1f-86b2-4dc51ff068a5",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "5a9a8223-0651-482a-9469-8aa255eb53e1",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 42,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "this.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\n// userOne mints some kr assets\nthis.mintAmount = (0, lib_1.toBig)(100);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await hardhat_1.default.Diamond.minimumCollateralizationRatio();",
                              "err": {},
                              "uuid": "595a7049-21d0-4877-af1f-198c18c7aa22",
                              "parentUUID": "5a9a8223-0651-482a-9469-8aa255eb53e1",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 93,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, lib_1.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, chai_1.expect)(accountCollateralValue.rawValue\n    .sub(withdrawnCollateralValue.rawValue)\n    .gte(accountMinCollateralValue.rawValue)).to.be.true;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance.sub(this.depositAmount.sub(withdrawAmount)));\n// Ensure the account's minimum collateral value is <= the account collateral value\n// These are FixedPoint.Unsigned, be sure to use `rawValue` when appropriate!\nconst accountMinCollateralValueAfter = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, this.mcr);\nconst accountCollateralValueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(accountMinCollateralValueAfter.rawValue.lte(accountCollateralValueAfter.rawValue)).to.be\n    .true;",
                              "err": {},
                              "uuid": "00d6b7ca-358f-4f30-b00b-f5074aa5f8aa",
                              "parentUUID": "5a9a8223-0651-482a-9469-8aa255eb53e1",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 66,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const user = hardhat_1.default.users.userFour;\nawait this.collateral.setBalance(user, ethers_1.BigNumber.from(0));\nawait this.collateral.setBalance(user, (0, lib_1.toBig)(1000));\nawait this.collateral.contract.connect(user).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(1000),\n    user,\n});\nawait (0, collaterals_1.withdrawCollateral)({\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(1010),\n    user,\n});\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(user.address)).to.equal((0, lib_1.toBig)(1000));",
                              "err": {},
                              "uuid": "d1738c65-dd81-452b-90e4-63ef98349e42",
                              "parentUUID": "5a9a8223-0651-482a-9469-8aa255eb53e1",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 9,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, 0, withdrawAmount)).to.be.revertedWith(errors_1.Error.ZERO_WITHDRAW);",
                              "err": {},
                              "uuid": "84a1edb1-0b12-4861-8055-a5483a4b7dd4",
                              "parentUUID": "5a9a8223-0651-482a-9469-8aa255eb53e1",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 47,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = this.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, chai_1.expect)(accountCollateralValue.rawValue\n    .sub(withdrawnCollateralValue.rawValue)\n    .lt(accountMinCollateralValue.rawValue)).to.be.true;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 0)).to.be.revertedWith(errors_1.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                              "err": {},
                              "uuid": "a304e872-1990-4b9d-b0e6-46be837e2400",
                              "parentUUID": "5a9a8223-0651-482a-9469-8aa255eb53e1",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 7,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 1)).to.be.revertedWith(errors_1.Error.ARRAY_OUT_OF_BOUNDS);",
                              "err": {},
                              "uuid": "b17a9dfa-469e-4b28-b10e-1744c2d4ac4c",
                              "parentUUID": "5a9a8223-0651-482a-9469-8aa255eb53e1",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "00d6b7ca-358f-4f30-b00b-f5074aa5f8aa",
                            "d1738c65-dd81-452b-90e4-63ef98349e42",
                            "84a1edb1-0b12-4861-8055-a5483a4b7dd4",
                            "a304e872-1990-4b9d-b0e6-46be837e2400",
                            "b17a9dfa-469e-4b28-b10e-1744c2d4ac4c"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 222,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 15000
                        }
                      ],
                      "passes": [
                        "c7aaab0f-8cbd-43ff-a342-e12fc7efda1a",
                        "ee542629-f158-4b41-a840-9616d5e0e88a",
                        "4c3b2305-6456-46fc-8613-ae1b17eafb6b",
                        "2aaeffdd-cb54-4cef-9113-df9b6115e9db",
                        "93f01cd9-d1d3-4882-ba76-c000438332c2"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 172,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "ff6b8b34-3944-494a-81ae-cbc4d8241963",
                  "title": "#deposit - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events \"before each\" hook in \"#deposit - rebase events\"",
                      "timedOut": false,
                      "duration": 93,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = hardhat_1.default.users.userThree;\narbitraryUserDiamond = hardhat_1.default.Diamond.connect(arbitraryUser);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.krAsset = this.krAssets.find(k => k.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait arbitraryUserDiamond.mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await arbitraryUserDiamond.kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "fdf56288-4bc3-41e2-9ed5-2961fa15e6cd",
                      "parentUUID": "ff6b8b34-3944-494a-81ae-cbc4d8241963",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "6d7708f0-94d6-4dc6-a27f-a20a612125eb",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 44,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(expectedDepositsAfter);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "b5cd4866-7d55-46ab-bea3-ffa89adf48b9",
                          "parentUUID": "6d7708f0-94d6-4dc6-a27f-a20a612125eb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 43,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmountAfterRebase);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "30ac69a7-2dcc-45f1-9d93-f3d4ae8e8f60",
                          "parentUUID": "6d7708f0-94d6-4dc6-a27f-a20a612125eb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 43,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "61b8a735-2a5e-4a77-a92a-4c435cf1952b",
                          "parentUUID": "6d7708f0-94d6-4dc6-a27f-a20a612125eb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 48,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "cf7ed469-237c-4dfb-b172-7acf1924cc56",
                          "parentUUID": "6d7708f0-94d6-4dc6-a27f-a20a612125eb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 67,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "0f1a243b-cea3-4829-b8b5-8a6114919710",
                          "parentUUID": "6d7708f0-94d6-4dc6-a27f-a20a612125eb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 66,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get deposits after\nconst depositsAfterRebase = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfterRebase).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "b8091706-d10f-4f97-b8ea-a8756ec8d423",
                          "parentUUID": "6d7708f0-94d6-4dc6-a27f-a20a612125eb",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b5cd4866-7d55-46ab-bea3-ffa89adf48b9",
                        "30ac69a7-2dcc-45f1-9d93-f3d4ae8e8f60",
                        "61b8a735-2a5e-4a77-a92a-4c435cf1952b",
                        "cf7ed469-237c-4dfb-b172-7acf1924cc56",
                        "0f1a243b-cea3-4829-b8b5-8a6114919710",
                        "b8091706-d10f-4f97-b8ea-a8756ec8d423"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 311,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "54694f53-baa3-42c7-99fb-d719d9ffffb3",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 60,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get collateral value of account after\nconst valueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(valueBefore.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "85cf2b33-2710-4d27-b639-c1a26732dc81",
                          "parentUUID": "54694f53-baa3-42c7-99fb-d719d9ffffb3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 59,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get collateral value of account after\nconst valueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(valueBefore.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "08a909a6-6855-4748-a659-71de847e3fd6",
                          "parentUUID": "54694f53-baa3-42c7-99fb-d719d9ffffb3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 46,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "73b0e5b7-6a77-43ed-8d44-d4b59524bbc4",
                          "parentUUID": "54694f53-baa3-42c7-99fb-d719d9ffffb3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 44,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "fea79234-f98e-463e-8212-cf0944c422eb",
                          "parentUUID": "54694f53-baa3-42c7-99fb-d719d9ffffb3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 75,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(finalValue.rawValue).to.bignumber.equal(expectedValueAfterSecondDeposit.rawValue);",
                          "err": {},
                          "uuid": "1ae226ef-e71b-4af8-9d56-c99f3453cad1",
                          "parentUUID": "54694f53-baa3-42c7-99fb-d719d9ffffb3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 72,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(finalValue.rawValue).to.bignumber.equal(expectedValueAfterSecondDeposit.rawValue);",
                          "err": {},
                          "uuid": "feea580a-62ee-4d77-a91c-eed607808b24",
                          "parentUUID": "54694f53-baa3-42c7-99fb-d719d9ffffb3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "85cf2b33-2710-4d27-b639-c1a26732dc81",
                        "08a909a6-6855-4748-a659-71de847e3fd6",
                        "73b0e5b7-6a77-43ed-8d44-d4b59524bbc4",
                        "fea79234-f98e-463e-8212-cf0944c422eb",
                        "1ae226ef-e71b-4af8-9d56-c99f3453cad1",
                        "feea580a-62ee-4d77-a91c-eed607808b24"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 356,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "0bfa4802-6e6a-4a72-be00-46600d5e9583",
                  "title": "#withdraw - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events \"before each\" hook in \"#withdraw - rebase events\"",
                      "timedOut": false,
                      "duration": 105,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = hardhat_1.default.users.userThree;\narbitraryUserDiamond = hardhat_1.default.Diamond.connect(arbitraryUser);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.krAsset = this.krAssets.find(k => k.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait arbitraryUserDiamond.mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await arbitraryUserDiamond.kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "c52b49af-bf94-45b8-a67e-3306af64e773",
                      "parentUUID": "0bfa4802-6e6a-4a72-be00-46600d5e9583",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "61b5fb53-e9e8-4381-a418-bfd81ceab0a0",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 88,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "11c77210-5133-4e9c-b798-f8adada5ce4b",
                          "parentUUID": "61b5fb53-e9e8-4381-a418-bfd81ceab0a0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 90,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "d345f2b6-2459-41bc-b7fb-7751a9e2b65f",
                          "parentUUID": "61b5fb53-e9e8-4381-a418-bfd81ceab0a0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 86,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "709254fd-6d08-4392-8f4f-6543c1d70051",
                          "parentUUID": "61b5fb53-e9e8-4381-a418-bfd81ceab0a0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 95,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "59c6113e-f34d-46f6-92fe-20e953898af0",
                          "parentUUID": "61b5fb53-e9e8-4381-a418-bfd81ceab0a0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 128,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "2ef8b50e-2a29-41eb-98b8-0437a850c4a1",
                          "parentUUID": "61b5fb53-e9e8-4381-a418-bfd81ceab0a0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 139,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "66d742ca-0143-45a0-b94a-cc9574d64b20",
                          "parentUUID": "61b5fb53-e9e8-4381-a418-bfd81ceab0a0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 79,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, lib_1.toBig)(10);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await this.collateral.contract.balanceOf(arbitraryUser.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "bf07e7aa-b20c-4e53-bad2-72e3a1521699",
                          "parentUUID": "61b5fb53-e9e8-4381-a418-bfd81ceab0a0",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "11c77210-5133-4e9c-b798-f8adada5ce4b",
                        "d345f2b6-2459-41bc-b7fb-7751a9e2b65f",
                        "709254fd-6d08-4392-8f4f-6543c1d70051",
                        "59c6113e-f34d-46f6-92fe-20e953898af0",
                        "2ef8b50e-2a29-41eb-98b8-0437a850c4a1",
                        "66d742ca-0143-45a0-b94a-cc9574d64b20",
                        "bf07e7aa-b20c-4e53-bad2-72e3a1521699"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 705,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "8d1c66cc-e2fc-496e-8418-9136ef31dcf3",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 96,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "0a493a7e-1818-4425-84b6-1a9ce93cc777",
                          "parentUUID": "8d1c66cc-e2fc-496e-8418-9136ef31dcf3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 86,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "8576910a-f55a-4fef-ba13-5c0cef6ed2f6",
                          "parentUUID": "8d1c66cc-e2fc-496e-8418-9136ef31dcf3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 91,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "605e0dce-ba9a-4ad5-8005-856f90877f51",
                          "parentUUID": "8d1c66cc-e2fc-496e-8418-9136ef31dcf3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 95,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "1009ba58-2c89-44ed-bc20-9e3fc6627de8",
                          "parentUUID": "8d1c66cc-e2fc-496e-8418-9136ef31dcf3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 128,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "2066db70-9c18-48cd-911b-4b8e1805e3eb",
                          "parentUUID": "8d1c66cc-e2fc-496e-8418-9136ef31dcf3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 127,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "35fed6cd-8910-4b4f-b274-1a7469bb41a5",
                          "parentUUID": "8d1c66cc-e2fc-496e-8418-9136ef31dcf3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 130,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, lib_1.toBig)(10);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [nrcValueBefore] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.collateral.address);\nconst [withdrawValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\nconst expectedNrcValueAfter = nrcValueBefore.rawValue.sub(withdrawValue.rawValue);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\nconst finalAccountValue = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.collateral.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(expectedNrcValueAfter);\n(0, chai_1.expect)(finalAccountValue.rawValue).to.bignumber.equal(accountValueBefore.rawValue.sub(withdrawValue.rawValue));",
                          "err": {},
                          "uuid": "2e86a7a6-8010-473c-9684-0533578266fb",
                          "parentUUID": "8d1c66cc-e2fc-496e-8418-9136ef31dcf3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0a493a7e-1818-4425-84b6-1a9ce93cc777",
                        "8576910a-f55a-4fef-ba13-5c0cef6ed2f6",
                        "605e0dce-ba9a-4ad5-8005-856f90877f51",
                        "1009ba58-2c89-44ed-bc20-9e3fc6627de8",
                        "2066db70-9c18-48cd-911b-4b8e1805e3eb",
                        "35fed6cd-8910-4b4f-b274-1a7469bb41a5",
                        "2e86a7a6-8010-473c-9684-0533578266fb"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 753,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "42852f22-f7b1-489b-842e-cd05b9a4985c",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "63505ccd-690b-4252-b0e6-636c03a8b577",
              "parentUUID": "42852f22-f7b1-489b-842e-cd05b9a4985c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 117,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// -------------------------------- Set up mock assets --------------------------------\nconst collateralArgs = {\n    name: \"CollateralAsset\",\n    price: 10,\n    factor: 1,\n    decimals: 18,\n};\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.collateral = await this.collateral.update(collateralArgs);\nthis.collateral.setPrice(collateralArgs.price);\n// Set up mock KreskoAsset\nconst krAssetArgs = {\n    name: \"KreskoAsset\",\n    price: 11,\n    factor: 1,\n    supplyLimit: 100000000,\n    closeFee: _test_utils_1.defaultCloseFee,\n    openFee: _test_utils_1.defaultOpenFee,\n};\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\nthis.krAsset.setPrice(krAssetArgs.price);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// -------------------------------- Set up userOne deposit/debt --------------------------------\nawait this.collateral.setBalance(hardhat_1.default.users.liquidator, hardhat_1.default.toBig(100000000));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.liquidator.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(100000000),\n    },\n});\n// Deposit collateral\nthis.defaultDepositAmount = 20; // 20 * $10 = $200 in collateral asset value\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount),\n    },\n});\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount,\n    asset: this.collateral,\n});\n// // Mint KrAsset\nthis.defaultMintAmount = 10; // 10 * $11 = $110 in debt value\nawait (0, krassets_1.mintKrAsset)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultMintAmount,\n    asset: this.krAsset,\n});",
              "err": {},
              "uuid": "bfbdc6d4-7d07-406b-91ec-9543ce5f84a5",
              "parentUUID": "42852f22-f7b1-489b-842e-cd05b9a4985c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c04fa388-0763-4967-aa60-bf70350bfadf",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#maxLiquidatableValue\"",
                  "fullTitle": "Minter #maxLiquidatableValue \"before each\" hook in \"#maxLiquidatableValue\"",
                  "timedOut": false,
                  "duration": 1580,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "user = hardhat_1.default.users.userOne;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount * 100));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount * 100),\n    },\n});\nnewCollateral = await (0, collaterals_1.addMockCollateralAsset)({\n    name: \"Coll\",\n    decimals: 8,\n    price: 10,\n    factor: 0.9,\n});\nawait newCollateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount * 100, 8));\nawait newCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount * 100, 8),\n    },\n});",
                  "err": {},
                  "uuid": "9e88f886-c250-4bcb-8644-a7d57eaefc3f",
                  "parentUUID": "c04fa388-0763-4967-aa60-bf70350bfadf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct max liquidation with single market cdp",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct max liquidation with single market cdp",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral,\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, this.collateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, this.collateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValue).to.equal(maxLiquidatableValue.rawValue);",
                  "err": {},
                  "uuid": "1b15203a-8a93-4cc0-b56f-835914558942",
                  "parentUUID": "c04fa388-0763-4967-aa60-bf70350bfadf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct max liquidation with multiple cdps",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct max liquidation with multiple cdps",
                  "timedOut": false,
                  "duration": 191,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral,\n});\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: (0, lib_1.toBig)(0.1, 8),\n    asset: newCollateral,\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, this.collateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, this.collateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValue).to.equal(maxLiquidatableValue.rawValue);\nconst expectedMaxLiquidatableValueNewCollateral = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, newCollateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValueNewCollateral.gt(0)).to.be.true;\nconst maxLiquidatableValueNewCollateral = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, newCollateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValueNewCollateral).to.equal(maxLiquidatableValueNewCollateral.rawValue);",
                  "err": {},
                  "uuid": "fc4aa4ec-6c0e-46c7-bb81-97b0c6df832b",
                  "parentUUID": "c04fa388-0763-4967-aa60-bf70350bfadf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b15203a-8a93-4cc0-b56f-835914558942",
                "fc4aa4ec-6c0e-46c7-bb81-97b0c6df832b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 311,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "15b6e7e5-3594-408d-bb6e-33726ad8aa50",
              "title": "#liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9dc39b78-07f8-4113-b924-c6affb4a0067",
                  "title": "#isAccountLiquidatable",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should identify accounts below their liquidation threshold",
                      "fullTitle": "Minter #liquidation #isAccountLiquidatable should identify accounts below their liquidation threshold",
                      "timedOut": false,
                      "duration": 48,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that current amount is under min collateral value\nconst liquidationThreshold = await hardhat_1.default.Diamond.liquidationThreshold();\nconst minCollateralUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, liquidationThreshold);\n(0, chai_1.expect)(this.defaultDepositAmount * this.collateral.deployArgs.price >\n    hardhat_1.default.fromBig(minCollateralUSD.rawValue, 8));\n// The account should be NOT liquidatable as collateral value ($200) >= min collateral value ($154)\nconst initialCanLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(initialCanLiquidate).to.equal(false);\n// Update collateral price to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);\nconst [, newCollateralOraclePrice] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, hardhat_1.default.toBig(1), true);\n(0, chai_1.expect)(hardhat_1.default.fromBig(newCollateralOraclePrice.rawValue, 8)).to.equal(newCollateralPrice);\n// The account should be liquidatable as collateral value ($140) < min collateral value ($154)\nconst secondaryCanLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(secondaryCanLiquidate).to.equal(true);",
                      "err": {},
                      "uuid": "eae9e128-f536-4ab0-94b4-48434e4348f4",
                      "parentUUID": "9dc39b78-07f8-4113-b924-c6affb4a0067",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "eae9e128-f536-4ab0-94b4-48434e4348f4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 48,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                  "title": "#liquidate",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userTwo tokens to use for liquidation\nawait this.krAsset.mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userTwo.address]: hardhat_1.default.toBig(10000),\n});\n// Update collateral price from $10 to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);",
                      "err": {},
                      "uuid": "14174c0d-8441-46a7-ad7b-25ebaf6da763",
                      "parentUUID": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 140,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm we can liquidate this account\nconst canLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(canLiquidate).to.equal(true);\n// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\nconst beforeUserOneDebtAmount = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst beforeUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userTwo.address);\nconst beforeUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userTwo.address);\nconst beforeKreskoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n// Liquidate userOne\nconst maxLiq = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(hardhat_1.default.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst maxRepayAmount = hardhat_1.default.toBig(Number(maxLiq.rawValue.div(await this.krAsset.getPrice())));\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, maxRepayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst afterUserOneDebtAmount = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(afterUserOneDebtAmount.eq(beforeUserOneDebtAmount.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst afterUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(afterUserOneCollateralAmount.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\nconst afterUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userTwo.address);\n(0, chai_1.expect)(afterUserTwoKreskoAssetBalance.eq(beforeUserTwoKreskoAssetBalance.sub(maxRepayAmount)));\n// Confirm that userTwo has received some collateral from the contract\nconst afterUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userTwo.address);\n(0, chai_1.expect)(afterUserTwoCollateralBalance).gt(beforeUserTwoCollateralBalance);\n// Confirm that Kresko contract's collateral balance has decreased.\nconst afterKreskoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(afterKreskoCollateralBalance).lt(beforeKreskoCollateralBalance);",
                      "err": {},
                      "uuid": "fbf4e089-142d-459a-8805-eb440f7fff82",
                      "parentUUID": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 70,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt liquidation\nconst repayAmount = 10; // userTwo holds Kresko assets that can be used to repay userOne's loan\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, typechain_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userTwo), \"LiquidationOccurred\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.liquidator).to.equal(hardhat_1.default.users.userTwo.address);\n(0, chai_1.expect)(event.repayKreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.repayAmount).to.equal(repayAmount);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);",
                      "err": {},
                      "uuid": "9d358df5-19e4-4c57-a00a-8591f4ad6979",
                      "parentUUID": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Update collateral price from $5 to $10\nconst newCollateralPrice = 10;\nthis.collateral.setPrice(newCollateralPrice);\n// Confirm that the account has sufficient collateral to not be liquidated\nconst liquidationThreshold = await hardhat_1.default.Diamond.liquidationThreshold();\nconst minimumCollateralUSDValueRequired = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, liquidationThreshold);\nconst currUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(hardhat_1.default.fromBig(currUserOneCollateralAmount) * newCollateralPrice >\n    hardhat_1.default.fromBig(minimumCollateralUSDValueRequired.rawValue, 8));\nconst canLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(canLiquidate).to.equal(false);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "069289b4-80b3-435e-bbc1-4a3f64b41d80",
                      "parentUUID": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.ZERO_REPAY);",
                      "err": {},
                      "uuid": "07a945ff-a980-4a2f-9298-6fd91edd9031",
                      "parentUUID": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "timedOut": false,
                      "duration": 53,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add(hardhat_1.default.toBig(1));\n// Liquidation should fail\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.KRASSET_BURN_AMOUNT_OVERFLOW);",
                      "err": {},
                      "uuid": "5d6f9e83-e1d1-4cfb-a1fe-79849a5c5733",
                      "parentUUID": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const maxLiquidation = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(hardhat_1.default.users.userOne.address, this.krAsset.address, this.collateral.address)).rawValue, 8);\nconst repaymentAmount = hardhat_1.default.toBig((maxLiquidation + 1) / this.krAsset.deployArgs.price);\n// Ensure liquidation cannot happen\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repaymentAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.LIQUIDATION_OVERFLOW);",
                      "err": {},
                      "uuid": "7434fb4f-230e-4a7c-b73a-9ae304713051",
                      "parentUUID": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.collateral.setPrice(this.collateral.deployArgs.price);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address)).to.be.false;\nconst minCollateralUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, await hardhat_1.default.Diamond.minimumCollateralizationRatio());\nconst liquidationThresholdUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, await hardhat_1.default.Diamond.liquidationThreshold());\nthis.collateral.setPrice(this.collateral.deployArgs.price * 0.775);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(accountCollateralValue.rawValue.lt(minCollateralUSD.rawValue)).to.be.true;\n(0, chai_1.expect)(accountCollateralValue.rawValue.gt(liquidationThresholdUSD.rawValue)).to.be.true;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address)).to.be.false;",
                      "err": {},
                      "uuid": "ab246e58-2b0a-48a2-b81c-49403322dc44",
                      "parentUUID": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "fullTitle": "Minter #liquidation #liquidate should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(0);\n// Liquidation should succeed despite lack of token approval\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\n// Confirm that liquidator's token approval is still 0\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "2fe3b6a0-e829-4ae1-93d5-0cdc13418831",
                      "parentUUID": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidator increases contract's token approval\nconst repayAmount = 10;\nawait this.krAsset.contract.connect(hardhat_1.default.users.userTwo).approve(hardhat_1.default.Diamond.address, repayAmount);\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(repayAmount);\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "96166bf4-95ab-4e34-87bd-a9d393a2375e",
                      "parentUUID": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.SELF_LIQUIDATION);",
                      "err": {},
                      "uuid": "6b2e0971-c7e1-4052-9929-6e6e09d4ee88",
                      "parentUUID": "51c30b5b-eeab-4148-aadc-2402349b5cf1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fbf4e089-142d-459a-8805-eb440f7fff82",
                    "9d358df5-19e4-4c57-a00a-8591f4ad6979",
                    "069289b4-80b3-435e-bbc1-4a3f64b41d80",
                    "07a945ff-a980-4a2f-9298-6fd91edd9031",
                    "5d6f9e83-e1d1-4cfb-a1fe-79849a5c5733",
                    "7434fb4f-230e-4a7c-b73a-9ae304713051",
                    "ab246e58-2b0a-48a2-b81c-49403322dc44",
                    "2fe3b6a0-e829-4ae1-93d5-0cdc13418831",
                    "96166bf4-95ab-4e34-87bd-a9d393a2375e",
                    "6b2e0971-c7e1-4052-9929-6e6e09d4ee88"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 611,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "a0e9e13c-d0c8-4c39-b0a5-6e4a201c3d48",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 977,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "userToLiquidate = hardhat_1.default.users.userThree;\nuserToLiquidateTwo = hardhat_1.default.users.userFour;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\n// Deposit collateral for liquidator\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.liquidator,\n    asset: this.collateral,\n    amount: liquidatorAmounts.collateralDeposits,\n});\nawait (0, _test_utils_1.leverageKrAsset)(userToLiquidate, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nawait (0, _test_utils_1.leverageKrAsset)(userToLiquidateTwo, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\n// 1.5 = collateral value === debt value * MCR\n(0, chai_1.expect)(await (0, _test_utils_1.getHealthFactor)(userToLiquidate)).to.lessThanOrEqual(1.51);\n(0, chai_1.expect)(await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo)).to.lessThanOrEqual(1.51);\n// not liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.false;",
                      "err": {},
                      "uuid": "f111d15a-a1ba-47e8-8543-eb32e6de6c5d",
                      "parentUUID": "a0e9e13c-d0c8-4c39-b0a5-6e4a201c3d48",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address))).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "b9ecdb19-dea0-4e04-9d7e-b524f16765b0",
                      "parentUUID": "a0e9e13c-d0c8-4c39-b0a5-6e4a201c3d48",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 67,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address))).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "db166b44-cd16-4fd6-a460-c93948f8e472",
                      "parentUUID": "a0e9e13c-d0c8-4c39-b0a5-6e4a201c3d48",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 330,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.collateral.setPrice(5);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.collateral);",
                      "err": {},
                      "uuid": "ff4df854-ce38-43c7-8efa-4ce56fcb0dd6",
                      "parentUUID": "a0e9e13c-d0c8-4c39-b0a5-6e4a201c3d48",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 340,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.krAsset.setPrice(rebasePrice * 2);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, chai_1.expect)((0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.collateral)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "78d456f5-047e-4b0e-97e1-a869f4b5acef",
                      "parentUUID": "a0e9e13c-d0c8-4c39-b0a5-6e4a201c3d48",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 827,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0,\n};\n// Get values for a liquidation that happens before rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidate.address)).rawValue, 8);\nresults.userOneHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidate);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidateTwo.address)).rawValue, 8);\nresults.userTwoHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo);\n(0, chai_1.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.collateralSeized * denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.debtRepaid * denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "c65bde13-d00a-4aa3-a669-d6429f78646b",
                      "parentUUID": "a0e9e13c-d0c8-4c39-b0a5-6e4a201c3d48",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 810,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0,\n};\n// Get values for a liquidation that happens before rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidate.address)).rawValue, 8);\nresults.userOneHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidate);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidateTwo.address)).rawValue, 8);\nresults.userTwoHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo);\n(0, chai_1.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.collateralSeized / denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.debtRepaid / denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "27b20528-6550-4e51-9112-2b80cb4d52c6",
                      "parentUUID": "a0e9e13c-d0c8-4c39-b0a5-6e4a201c3d48",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b9ecdb19-dea0-4e04-9d7e-b524f16765b0",
                    "db166b44-cd16-4fd6-a460-c93948f8e472",
                    "ff4df854-ce38-43c7-8efa-4ce56fcb0dd6",
                    "78d456f5-047e-4b0e-97e1-a869f4b5acef",
                    "c65bde13-d00a-4aa3-a669-d6429f78646b",
                    "27b20528-6550-4e51-9112-2b80cb4d52c6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2443,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "0a9a4405-1e05-40b4-b5cc-03122acb08cd",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "d373ed4b-9c0a-4665-872f-38a3131ee8d6",
              "parentUUID": "0a9a4405-1e05-40b4-b5cc-03122acb08cd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.krAsset = this.krAssets.find(c => c.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nthis.krAsset.setPrice(this.krAsset.deployArgs.price);\nthis.krAsset.setMarketOpen(this.krAsset.deployArgs.marketOpen);\n// Load account with collateral\nthis.initialBalance = (0, lib_1.toBig)(100000);\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, this.initialBalance);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.collateral.setPrice(this.collateral.deployArgs.price);\n// User deposits 10,000 collateral\nawait (0, collaterals_1.depositCollateral)({\n    amount: 10000,\n    user: hardhat_1.default.users.userOne,\n    asset: this.collateral,\n});",
              "err": {},
              "uuid": "643b310f-366e-412c-91ca-5621818d5ff0",
              "parentUUID": "0a9a4405-1e05-40b4-b5cc-03122acb08cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "63c614ff-9f17-4c20-aa53-c39c800126ae",
              "title": "#mint+burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "58d18246-2d06-4820-aa50-7acc7c466261",
                  "title": "#mint",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await this.krAsset.mocks.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "ed424e3b-d9bb-4b23-b3bc-108a67f48149",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 134,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, lib_1.toBig)(5);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, lib_1.toBig)(5);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsFinal).to.deep.equal([this.krAsset.address]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "d6fdfb57-02f6-4f3b-8e96-4a1d083babb7",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 2482,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Add second mock krAsset to protocol\nconst secondKrAssetArgs = {\n    name: \"SecondKreskoAsset\",\n    symbol: \"SecondKreskoAsset\",\n    price: 5,\n    marketOpen: true,\n    factor: 1,\n    supplyLimit: 100000,\n    closeFee: _test_utils_1.defaultCloseFee,\n    openFee: 0,\n};\nconst { contract: secondKreskoAsset } = await (0, krassets_1.addMockKreskoAsset)(secondKrAssetArgs);\n// Mint Kresko asset\nconst secondMintAmount = (0, lib_1.toBig)(2);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, secondKreskoAsset.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsFinal).to.deep.equal([this.krAsset.address, secondKreskoAsset.address]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, secondKreskoAsset.address);\n(0, chai_1.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await secondKreskoAsset.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await secondKreskoAsset.totalSupply();\n(0, chai_1.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "cea9c40c-8e30-423b-a659-8c74187da37b",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, lib_1.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await hardhat_1.default.Diamond.minimumDebtValue();\n(0, chai_1.expect)((0, lib_1.fromBig)(mintAmountUSDValue.rawValue, 8)).to.equal(Number(currMinimumDebtValue) / 10 ** 8);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "86d64897-007d-454a-9741-69c1e577b4ed",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).grantRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address)).to.equal(true);\n// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userOneDebtFromUserThreeMint = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userOneDebtFromUserThreeMint).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "7aef6eb0-f4f5-4fe2-8785-996ca538f24a",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 40,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mintAmount = (0, lib_1.toBig)(500);\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"KreskoAssetMinted\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.amount).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "a0f4ee65-853b-4588-8e69-125664978f56",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, lib_1.toBig)(1);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userTwo.address, this.krAsset.address, mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userOne.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "819b9683-dce6-45f2-b4b8-e753fe887a38",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is below the contract's current minimum debt value\nconst minAmount = 100000000; // 8 decimals\nconst mintAmount = minAmount - 1;\nconst mintAmountUSDValue = await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await hardhat_1.default.Diamond.minimumDebtValue();\n(0, chai_1.expect)(Number(mintAmountUSDValue)).to.be.lessThan(Number(currMinimumDebtValue));\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(errors_1.Error.KRASSET_MINT_AMOUNT_LOW);",
                      "err": {},
                      "uuid": "a846f1c2-cdb4-448c-a059-088c329ca167",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, \"0x0000000000000000000000000000000000000002\", (0, lib_1.toBig)(1))).to.be.revertedWith(errors_1.Error.KRASSET_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "733a33ce-62e6-476c-9c7a-fb67ce99af97",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// We can ignore price and collateral factor as both this.collateral and this.krAsset both\n// have the same price ($10) and same collateral factor (1)\nconst collateralAmountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n// Apply 150% MCR and increase deposit amount to be above the maximum allowed by MCR\nconst mcrAmount = (0, lib_1.fromBig)(collateralAmountDeposited) / 1.5;\nconst mintAmount = (0, lib_1.toBig)(mcrAmount + 1);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(errors_1.Error.KRASSET_COLLATERAL_LOW);",
                      "err": {},
                      "uuid": "7192b5fc-e7d6-40c4-b522-bd23e58df294",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).depositCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, (0, lib_1.toBig)(10000))).not.to.be.reverted;\nconst krAsset = await hardhat_1.default.Diamond.kreskoAsset(this.krAsset.address);\nconst overSupplyLimit = (0, lib_1.fromBig)(krAsset.supplyLimit) + 1;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(overSupplyLimit))).to.be.revertedWith(errors_1.Error.KRASSET_MAX_SUPPLY_REACHED);",
                      "err": {},
                      "uuid": "75d028db-3a49-4b7a-90f5-e28a2e94de00",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 55,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.krAsset.setMarketOpen(false);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(1))).to.be.revertedWith(errors_1.Error.KRASSET_MARKET_CLOSED);\n// Confirm that the user has no minted krAssets\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Confirm that opening the market makes krAsset mintable again\nthis.krAsset.setMarketOpen(true);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(1));\n// Confirm the array of the user's minted Kresko assets has been pushed to\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);",
                      "err": {},
                      "uuid": "7d91684b-595f-4b83-9a75-0bed326bfc9b",
                      "parentUUID": "58d18246-2d06-4820-aa50-7acc7c466261",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ed424e3b-d9bb-4b23-b3bc-108a67f48149",
                    "d6fdfb57-02f6-4f3b-8e96-4a1d083babb7",
                    "cea9c40c-8e30-423b-a659-8c74187da37b",
                    "86d64897-007d-454a-9741-69c1e577b4ed",
                    "7aef6eb0-f4f5-4fe2-8785-996ca538f24a",
                    "a0f4ee65-853b-4588-8e69-125664978f56",
                    "819b9683-dce6-45f2-b4b8-e753fe887a38",
                    "a846f1c2-cdb4-448c-a059-088c329ca167",
                    "733a33ce-62e6-476c-9c7a-fb67ce99af97",
                    "7192b5fc-e7d6-40c4-b522-bd23e58df294",
                    "75d028db-3a49-4b7a-90f5-e28a2e94de00",
                    "7d91684b-595f-4b83-9a75-0bed326bfc9b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3007,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "afca743f-2e4c-465f-8097-8431b0bb246a",
                  "title": "#mint - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "d9f08c11-c91b-4753-8de9-a47615c9093c",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 68,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "c45943a1-ca03-4243-9341-2e05b36d7bcc",
                          "parentUUID": "d9f08c11-c91b-4753-8de9-a47615c9093c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 68,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "de05866c-223c-465a-896c-cc99bd896544",
                          "parentUUID": "d9f08c11-c91b-4753-8de9-a47615c9093c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 68,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "6ae6f13f-4c62-46fa-a5ff-41d7369284bf",
                          "parentUUID": "d9f08c11-c91b-4753-8de9-a47615c9093c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 69,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "63945312-8129-411f-96be-eb9399a23c7f",
                          "parentUUID": "d9f08c11-c91b-4753-8de9-a47615c9093c",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c45943a1-ca03-4243-9341-2e05b36d7bcc",
                        "de05866c-223c-465a-896c-cc99bd896544",
                        "6ae6f13f-4c62-46fa-a5ff-41d7369284bf",
                        "63945312-8129-411f-96be-eb9399a23c7f"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 273,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "ac8914bc-acc7-4477-b67c-07409e62a3dc",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 77,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "0baf3d75-eb9d-456e-96bc-d5a8036a0efe",
                          "parentUUID": "ac8914bc-acc7-4477-b67c-07409e62a3dc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 78,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "5348de30-d48b-4f25-bb7f-218e106eefcb",
                          "parentUUID": "ac8914bc-acc7-4477-b67c-07409e62a3dc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 70,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice, 8) / denominator);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "4acb0e6d-0972-45f1-8034-7d158afbb5a0",
                          "parentUUID": "ac8914bc-acc7-4477-b67c-07409e62a3dc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 72,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.mul(denominator), 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "0c26e5c5-7e03-4529-9935-f1e94d79d22d",
                          "parentUUID": "ac8914bc-acc7-4477-b67c-07409e62a3dc",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0baf3d75-eb9d-456e-96bc-d5a8036a0efe",
                        "5348de30-d48b-4f25-bb7f-218e106eefcb",
                        "4acb0e6d-0972-45f1-8034-7d158afbb5a0",
                        "0c26e5c5-7e03-4529-9935-f1e94d79d22d"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 297,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "6ade8095-8878-4c6d-8472-c6ac1ebc46fd",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 182,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Assert\n(0, chai_1.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, chai_1.expect)(valueBeforeRebase.rawValue).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n// Adjust price and rebase\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterFirstRebase.rawValue, this.krAsset)).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterFirstRebase.rawValue, this.krAsset)).to.bignumber.equal(valueBeforeRebase.rawValue);\n// Mint after rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterSecondMint).to.bignumber.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterSecondMint.rawValue, this.krAsset)).to.bignumber.closeTo(debtValueAfterFirstMint.rawValue.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(valueBeforeRebase.rawValue.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "42dba1c5-84de-4c01-8c77-012b64750c1e",
                          "parentUUID": "6ade8095-8878-4c6d-8472-c6ac1ebc46fd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 181,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Assert\n(0, chai_1.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, chai_1.expect)(valueBeforeRebase.rawValue).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n// Adjust price and rebase\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(debtValueAfterFirstRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(debtValueAfterFirstMint.rawValue, this.krAsset));\n(0, chai_1.expect)(debtValueAfterFirstRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));\n// Mint after rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(await (0, calculations_1.toScaledAmount)(debtValueAfterFirstMint.rawValue.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "c2313830-93b9-40eb-905d-1d6523fd254c",
                          "parentUUID": "6ade8095-8878-4c6d-8472-c6ac1ebc46fd",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "42dba1c5-84de-4c01-8c77-012b64750c1e",
                        "c2313830-93b9-40eb-905d-1d6523fd254c"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 363,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                  "title": "#burn",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 98,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Create userOne debt position\nthis.mintAmount = (0, lib_1.toBig)(2);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Load userThree with Kresko Assets\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userThree.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userThree.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(hardhat_1.default.users.userThree.address)).to.equal(this.initialBalance);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).depositCollateral(hardhat_1.default.users.userThree.address, this.collateral.address, (0, lib_1.toBig)(10000))).not.to.be.reverted;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).mintKreskoAsset(hardhat_1.default.users.userThree.address, this.krAsset.address, this.mintAmount);",
                      "err": {},
                      "uuid": "4eb62db0-1a81-482d-9349-685ac1d1cb27",
                      "parentUUID": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, lib_1.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "c1831d2b-3c15-4288-bbb1-c82c5d2609fb",
                      "parentUUID": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "1f8032fc-3d5f-4c1d-8f8a-287abbf8dd9b",
                      "parentUUID": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 73,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).grantRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address)).to.equal(true);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, lib_1.toBig)(1);\nconst kreskoAssetIndex = 0;\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.mintAmount);\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(userThreeBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userOneDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "13caac26-ed4f-43f7-b44f-f35eddc022d4",
                      "parentUUID": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "cbc31d0a-07b9-4869-b7ff-542fb21a9f47",
                      "parentUUID": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst minDebtValue = (0, lib_1.fromBig)((await hardhat_1.default.Diamond.minimumDebtValue()).rawValue, 8);\nconst oraclePrice = this.krAsset.deployArgs.price;\nconst burnAmount = hardhat_1.default.toBig((0, lib_1.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, chai_1.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "10a3e23f-6266-42ef-988a-324a3a7e0c63",
                      "parentUUID": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 47,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, this.mintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"KreskoAssetBurned\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.amount).to.equal(this.mintAmount.div(5));",
                      "err": {},
                      "uuid": "a8fa40d7-a6d4-4fd1-aea9-20b23bc04de5",
                      "parentUUID": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 114,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = this.mintAmount.add(secondMintAmount);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, secondMintAmount);\nconst kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.not.reverted;",
                      "err": {},
                      "uuid": "7311ae59-aeeb-413b-bfe6-b41530dc7605",
                      "parentUUID": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, 0, kreskoAssetIndex)).to.be.revertedWith(errors_1.Error.ZERO_BURN);",
                      "err": {},
                      "uuid": "86baf1ee-71b2-4b4e-9161-dba6bc6efeee",
                      "parentUUID": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 38,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "b7ce42d7-38c2-47d9-a95c-c08ef7c1479c",
                      "parentUUID": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst burnAmount = debt.add(hardhat_1.default.toBig(1));\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "eaa926e9-ad70-4fe2-b8dc-2a85ec241b5d",
                      "parentUUID": "427fff9c-3ddb-46bc-9a1d-99af379f53a3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "dd7b1bb6-4dc8-419f-b749-9a0626156266",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 140,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01;\nconst openFeeBig = (0, lib_1.toBig)(openFee); // use toBig() to emulate closeFee's 18 decimals on contract\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\nawait this.krAsset.update({\n    ..._test_utils_1.defaultKrAssetArgs,\n    openFee,\n});\nconst mintAmount = (0, lib_1.toBig)(1);\nconst mintValue = mintAmount.mul(this.krAsset.deployArgs.price);\nconst expectedFeeValue = mintValue.mul(openFeeBig);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Mint Kresko asset\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, chai_1.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, lib_1.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, chai_1.expect)(feeRecipientBalanceIncrease).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"OpenFeePaid\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.paymentAmount).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, lib_1.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst feeRes = await hardhat_1.default.Diamond.calcExpectedFee(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount, _test_utils_1.Fee.OPEN);\nconst output = feeRes.toString().split(\",\");\nconst openFeeAmount = Number(output[1]) / 10 ** 18;\n(0, chai_1.expect)(openFeeAmount).eq(normalizedExpectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "f5bf939e-fbfc-4656-9a90-b75df5a15a0d",
                          "parentUUID": "dd7b1bb6-4dc8-419f-b749-9a0626156266",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f5bf939e-fbfc-4656-9a90-b75df5a15a0d"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 140,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "e4b7d64d-4185-47d0-8340-6ede5ffccff8",
                      "title": "Protocol close fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 62,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, lib_1.toBig)(1);\nconst burnValue = burnAmount.mul(this.krAsset.deployArgs.price);\nconst closeFee = (0, lib_1.toBig)(this.krAsset.deployArgs.closeFee); // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.mul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, chai_1.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, lib_1.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, chai_1.expect)(feeRecipientBalanceIncrease).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"CloseFeePaid\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.paymentAmount).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, lib_1.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);",
                          "err": {},
                          "uuid": "2754cf47-b77b-40b5-a82a-e0570c45f134",
                          "parentUUID": "e4b7d64d-4185-47d0-8340-6ede5ffccff8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 250,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, krassets_1.mintKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: hardhat_1.default.toBig(mintAmount),\n});\nawait (0, collaterals_1.withdrawCollateral)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount,\n});\nconst event = await (0, protocol_ts_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount,\n}), hardhat_1.default.Diamond, \"CloseFeePaid\");\n(0, chai_1.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nconst priceAfter = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst burnAmountRebase = burnAmount * denominator;\nawait (0, collaterals_1.withdrawCollateral)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount,\n});\nconst eventAfterRebase = await (0, protocol_ts_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase,\n}), hardhat_1.default.Diamond, \"CloseFeePaid\");\n(0, chai_1.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, chai_1.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "f6b887c5-b3f4-4361-8c22-aa6ea87aa219",
                          "parentUUID": "e4b7d64d-4185-47d0-8340-6ede5ffccff8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 261,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, krassets_1.mintKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: hardhat_1.default.toBig(mintAmount),\n});\nawait (0, collaterals_1.withdrawCollateral)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount,\n});\nconst event = await (0, protocol_ts_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount,\n}), hardhat_1.default.Diamond, \"CloseFeePaid\");\n(0, chai_1.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst burnAmountRebase = burnAmount / denominator;\nawait (0, collaterals_1.withdrawCollateral)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount,\n});\nconst eventAfterRebase = await (0, protocol_ts_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase,\n}), hardhat_1.default.Diamond, \"CloseFeePaid\");\n(0, chai_1.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, chai_1.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "4266b427-8a6b-4c66-9dd5-2a8499750fad",
                          "parentUUID": "e4b7d64d-4185-47d0-8340-6ede5ffccff8",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "2754cf47-b77b-40b5-a82a-e0570c45f134",
                        "f6b887c5-b3f4-4361-8c22-aa6ea87aa219",
                        "4266b427-8a6b-4c66-9dd5-2a8499750fad"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 573,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [
                    "c1831d2b-3c15-4288-bbb1-c82c5d2609fb",
                    "13caac26-ed4f-43f7-b44f-f35eddc022d4",
                    "10a3e23f-6266-42ef-988a-324a3a7e0c63",
                    "a8fa40d7-a6d4-4fd1-aea9-20b23bc04de5",
                    "7311ae59-aeeb-413b-bfe6-b41530dc7605",
                    "86baf1ee-71b2-4b4e-9161-dba6bc6efeee",
                    "b7ce42d7-38c2-47d9-a95c-c08ef7c1479c",
                    "eaa926e9-ad70-4fe2-b8dc-2a85ec241b5d"
                  ],
                  "failures": [],
                  "pending": [
                    "1f8032fc-3d5f-4c1d-8f8a-287abbf8dd9b",
                    "cbc31d0a-07b9-4869-b7ff-542fb21a9f47"
                  ],
                  "skipped": [],
                  "duration": 433,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "d629a9da-09cf-4e1b-8cb8-18ba78a4eae0",
                  "title": "#burn - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase events\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase events \"before each\" hook in \"#burn - rebase events\"",
                      "timedOut": false,
                      "duration": 38,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmountInt,\n    user: hardhat_1.default.users.userOne,\n});",
                      "err": {},
                      "uuid": "41f1dc9c-5163-451f-8ce6-867e689ae030",
                      "parentUUID": "d629a9da-09cf-4e1b-8cb8-18ba78a4eae0",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "52940303-cd3a-4664-a05f-f9828f37be28",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 77,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(0);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = hardhat_1.default.fromBig(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address));\n(0, chai_1.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.closeTo(hardhat_1.default.toBig(expectedBalanceAfterBurn / denominator), 100000); // WEI",
                          "err": {},
                          "uuid": "26bbef80-c8e0-4bcc-b42b-e1feede57db8",
                          "parentUUID": "52940303-cd3a-4664-a05f-f9828f37be28",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 77,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "16c1efd4-c10d-4e2b-87ef-e22f6aecc42e",
                          "parentUUID": "52940303-cd3a-4664-a05f-f9828f37be28",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 81,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = hardhat_1.default.fromBig(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address));\n(0, chai_1.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(hardhat_1.default.toBig(expectedBalanceAfterBurn * denominator)); // WEI",
                          "err": {},
                          "uuid": "0e747c5f-477b-4fc0-b805-2be22219a3e0",
                          "parentUUID": "52940303-cd3a-4664-a05f-f9828f37be28",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 77,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "acf94885-6aca-45e2-b0d1-bcc49f249e49",
                          "parentUUID": "52940303-cd3a-4664-a05f-f9828f37be28",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "26bbef80-c8e0-4bcc-b42b-e1feede57db8",
                        "16c1efd4-c10d-4e2b-87ef-e22f6aecc42e",
                        "0e747c5f-477b-4fc0-b805-2be22219a3e0",
                        "acf94885-6aca-45e2-b0d1-bcc49f249e49"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 312,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "0a2bc3ae-2df7-40f0-9b03-306a47ad37b6",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 75,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n(0, chai_1.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "5bf62fb4-22ae-41be-91af-0d0ac521a07a",
                          "parentUUID": "0a2bc3ae-2df7-40f0-9b03-306a47ad37b6",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 94,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false))\n    .rawValue;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBeforeBurn).to.contain(this.krAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, chai_1.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "be5061f8-f8f9-4a79-ba77-3c8b9aa99c0b",
                          "parentUUID": "0a2bc3ae-2df7-40f0-9b03-306a47ad37b6",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 70,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n(0, chai_1.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "4d8cab53-dc9e-45e7-b7c6-4afbc6473fcf",
                          "parentUUID": "0a2bc3ae-2df7-40f0-9b03-306a47ad37b6",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 88,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false))\n    .rawValue;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, chai_1.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "b13eef1c-8621-43fc-80fc-568a1a26f06c",
                          "parentUUID": "0a2bc3ae-2df7-40f0-9b03-306a47ad37b6",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "5bf62fb4-22ae-41be-91af-0d0ac521a07a",
                        "be5061f8-f8f9-4a79-ba77-3c8b9aa99c0b",
                        "4d8cab53-dc9e-45e7-b7c6-4afbc6473fcf",
                        "b13eef1c-8621-43fc-80fc-568a1a26f06c"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 327,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "b211c00a-093f-43af-825a-d3e83b5626cc",
          "title": "Flux Pricefeed",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-pricefeed.ts",
          "file": "/src/test/oracle/00-pricefeed.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before each\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "d253215c-90b4-4277-b8a4-ba9ded47314d",
              "parentUUID": "b211c00a-093f-43af-825a-d3e83b5626cc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before each\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 74,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Deploy one price feed\nconst name = \"TEST\";\nconst decimals = 8;\nconst descriptionFeed = \"Test description\";\nconst feed = await hardhat_1.default.run(_tasks_1.TASK_DEPLOY_PRICE_FEED, {\n    name,\n    decimals,\n    description: descriptionFeed,\n    log: false,\n});\nthis.deployer = await hardhat_1.default.ethers.getNamedSigner(\"deployer\");\nthis.userOne = await hardhat_1.default.ethers.getNamedSigner(\"userOne\");\nthis.pricefeed = feed;",
              "err": {},
              "uuid": "3a793c61-7598-4854-b902-32d7836b60f5",
              "parentUUID": "b211c00a-093f-43af-825a-d3e83b5626cc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
              "title": "functionality",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-pricefeed.ts",
              "file": "/src/test/oracle/00-pricefeed.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize timestamp value once the initial answer is submitted",
                  "fullTitle": "Flux Pricefeed functionality should initialize timestamp value once the initial answer is submitted",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.latestTimestamp()).to.equal(0);\nawait this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\n(0, chai_1.expect)(Number(await this.pricefeed.latestTimestamp())).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "ef8d8167-e8fd-44b1-9b7d-84fe139b4af9",
                  "parentUUID": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestAnswer once it's changed",
                  "fullTitle": "Flux Pricefeed functionality should return latestAnswer once it's changed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c1dff1a8-3a73-4b4d-9642-02d9df2cfef8",
                  "parentUUID": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen once it's changed",
                  "fullTitle": "Flux Pricefeed functionality should return marketOpen once it's changed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "409bdbdf-6985-4a9e-a83b-f43aa9d30b6a",
                  "parentUUID": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-validator to change values",
                  "fullTitle": "Flux Pricefeed functionality should not allow non-validator to change values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9c15ab1c-fbe9-4bd2-af67-3d832d2f258c",
                  "parentUUID": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return description",
                  "fullTitle": "Flux Pricefeed functionality should return description",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.description()).to.equal(\"Test description\");",
                  "err": {},
                  "uuid": "8f770791-bd40-4431-a00d-ecc536b66287",
                  "parentUUID": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return decimals",
                  "fullTitle": "Flux Pricefeed functionality should return decimals",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.decimals()).to.equal(8);",
                  "err": {},
                  "uuid": "c43113db-f4d8-4dfd-af71-7951065ff778",
                  "parentUUID": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRoundData correctly",
                  "fullTitle": "Flux Pricefeed functionality should return latestRoundData correctly",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\nconst roundDataCall = await this.pricefeed.latestRoundData();\nconst roundData = {\n    roundId: roundDataCall[0].toNumber(),\n    answer: roundDataCall[1].toNumber(),\n    marketOpen: roundDataCall[2].valueOf(),\n    startedAt: roundDataCall[3].toNumber(),\n    updatedAt: roundDataCall[4].toNumber(),\n    answeredInRound: roundDataCall[5].toNumber(),\n};\n(0, chai_1.expect)(roundData.roundId).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.equal(roundData.updatedAt);\n(0, chai_1.expect)(roundData.answeredInRound).to.equal(roundData.roundId);\n(0, chai_1.expect)(roundData.answer).to.equal(TEST_VALUE);\n(0, chai_1.expect)(roundData.marketOpen).to.equal(true);",
                  "err": {},
                  "uuid": "d73f0f2f-f782-45f2-8695-33087f8d6274",
                  "parentUUID": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getRoundData correctly",
                  "fullTitle": "Flux Pricefeed functionality should return getRoundData correctly",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\nconst roundDataCall = await this.pricefeed.getRoundData(1);\nconst roundData = {\n    roundId: roundDataCall[0].toNumber(),\n    answer: roundDataCall[1].toNumber(),\n    marketOpen: roundDataCall[2].valueOf(),\n    startedAt: roundDataCall[3].toNumber(),\n    updatedAt: roundDataCall[4].toNumber(),\n    answeredInRound: roundDataCall[5].toNumber(),\n};\n(0, chai_1.expect)(roundData.roundId).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.equal(roundData.updatedAt);\n(0, chai_1.expect)(roundData.answeredInRound).to.equal(roundData.roundId);\n(0, chai_1.expect)(roundData.answer).to.equal(TEST_VALUE);\n(0, chai_1.expect)(roundData.marketOpen).to.equal(true);",
                  "err": {},
                  "uuid": "0c9738bf-47b3-4703-a5e6-8bc213bf385a",
                  "parentUUID": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getAnswer correctly",
                  "fullTitle": "Flux Pricefeed functionality should return getAnswer correctly",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\n(0, chai_1.expect)(await this.pricefeed.getAnswer(1)).to.equal(TEST_VALUE);",
                  "err": {},
                  "uuid": "55b58f90-12d6-4021-803b-a7f011433fc2",
                  "parentUUID": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen correctly",
                  "fullTitle": "Flux Pricefeed functionality should return marketOpen correctly",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\n(0, chai_1.expect)(await this.pricefeed.getMarketOpen(1)).to.equal(true);",
                  "err": {},
                  "uuid": "b8c0e703-6490-4362-9377-5697e73be6a6",
                  "parentUUID": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRound correctly",
                  "fullTitle": "Flux Pricefeed functionality should return latestRound correctly",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\n(0, chai_1.expect)(await this.pricefeed.latestRound()).to.equal(1);",
                  "err": {},
                  "uuid": "389ae9b0-3731-4849-9021-74ad533924d2",
                  "parentUUID": "9b40b744-98dd-4024-94f1-cb1ef492e3b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef8d8167-e8fd-44b1-9b7d-84fe139b4af9",
                "8f770791-bd40-4431-a00d-ecc536b66287",
                "c43113db-f4d8-4dfd-af71-7951065ff778",
                "d73f0f2f-f782-45f2-8695-33087f8d6274",
                "0c9738bf-47b3-4703-a5e6-8bc213bf385a",
                "55b58f90-12d6-4021-803b-a7f011433fc2",
                "b8c0e703-6490-4362-9377-5697e73be6a6",
                "389ae9b0-3731-4849-9021-74ad533924d2"
              ],
              "failures": [],
              "pending": [
                "c1dff1a8-3a73-4b4d-9642-02d9df2cfef8",
                "409bdbdf-6985-4a9e-a83b-f43aa9d30b6a",
                "9c15ab1c-fbe9-4bd2-af67-3d832d2f258c"
              ],
              "skipped": [],
              "duration": 119,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "edab3684-2010-4648-86df-b98172434f73",
          "title": "Safety Council",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "0dfcbef6-912a-4b1c-b5aa-43729dd93ba4",
              "parentUUID": "edab3684-2010-4648-86df-b98172434f73",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = hardhat_1.default.collaterals.find(asset => asset.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer, devTwo, extOne, extTwo, extThree } = await hardhat_1.default.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devTwo = devTwo;\nthis.extOne = extOne;\nthis.extTwo = extTwo;\nthis.extThree = extThree;",
              "err": {},
              "uuid": "dd88680b-2a0c-406c-9a19-0afb251a5206",
              "parentUUID": "edab3684-2010-4648-86df-b98172434f73",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f83f432f-6e2e-4457-bb7e-2bfa113265ec",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "da8efa28-8e1a-49e1-b853-5a090fabf93a",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "6a7c28be-70d8-470d-a219-0ff759f282ee",
                      "parentUUID": "da8efa28-8e1a-49e1-b853-5a090fabf93a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne, this.extTwo]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "463c1c67-9093-4d23-8506-557a370982d1",
                      "parentUUID": "da8efa28-8e1a-49e1-b853-5a090fabf93a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne, this.extTwo, this.extThree]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "b65ca6fc-14a2-40ce-b4ae-f2774cabad12",
                      "parentUUID": "da8efa28-8e1a-49e1-b853-5a090fabf93a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)((0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo])).to.be.revertedWith(\"\");\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "d2933e72-f24e-4872-958c-1b02f7a6c3b9",
                      "parentUUID": "da8efa28-8e1a-49e1-b853-5a090fabf93a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6a7c28be-70d8-470d-a219-0ff759f282ee",
                    "463c1c67-9093-4d23-8506-557a370982d1",
                    "b65ca6fc-14a2-40ce-b4ae-f2774cabad12",
                    "d2933e72-f24e-4872-958c-1b02f7a6c3b9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 113,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "9d03dfb9-4756-4581-b908-4bb53db411ba",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "50f8e4b9-593d-47ee-8dbf-0b6e78addb80",
                      "parentUUID": "9d03dfb9-4756-4581-b908-4bb53db411ba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.krAsset.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.krAsset.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "faf07c3b-d5b6-46a6-bda8-45a11187dba8",
                      "parentUUID": "9d03dfb9-4756-4581-b908-4bb53db411ba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = hardhat_1.default.ethers.utils.computeAddress(\"0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d\");\nawait (0, chai_1.expect)((0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[randomAddr], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne])).to.be.revertedWith(\"\");\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), randomAddr);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "74387e5d-376f-4fcc-bb3e-bbae2290796c",
                      "parentUUID": "9d03dfb9-4756-4581-b908-4bb53db411ba",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "50f8e4b9-593d-47ee-8dbf-0b6e78addb80",
                    "faf07c3b-d5b6-46a6-bda8-45a11187dba8",
                    "74387e5d-376f-4fcc-bb3e-bbae2290796c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 88,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "4e3c81fd-3c3b-459f-8ceb-3a1a3668ea1b",
                  "title": "duration based pausing",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, duration], [this.deployer, this.devTwo, this.extOne]);\nconst depositSafetyState = await hardhat_1.default.Diamond.safetyStateFor(this.collateral.address, _test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, chai_1.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "1f4e58da-18f4-4b20-b453-a9c4291b9175",
                      "parentUUID": "4e3c81fd-3c3b-459f-8ceb-3a1a3668ea1b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "timedOut": false,
                      "duration": 34,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000;\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, duration], [this.deployer, this.devTwo, this.extOne]);\nconst depositSafetyState = await hardhat_1.default.Diamond.safetyStateFor(this.collateral.address, _test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, chai_1.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);\n// Confirm that the current blocktime is within the pause action's duration\nconst blockNumBefore = await hardhat_1.default.ethers.provider.getBlockNumber();\nconst blockBefore = await hardhat_1.default.ethers.provider.getBlock(blockNumBefore);\nconst timestampBefore = blockBefore.timestamp;\n(0, chai_1.expect)(Number(depositSafetyState[0].timestamp1)).to.be.greaterThan(timestampBefore);\n// Increase time by seven days\nconst sevenDays = 7 * 24 * 60 * 60;\nawait hardhat_1.default.ethers.provider.send(\"evm_increaseTime\", [sevenDays]);\nawait hardhat_1.default.ethers.provider.send(\"evm_mine\", []);\n// Confirm that block time has increased as expected\nconst blockNumAfter = await hardhat_1.default.ethers.provider.getBlockNumber();\nconst blockAfter = await hardhat_1.default.ethers.provider.getBlock(blockNumAfter);\nconst timestampAfter = blockAfter.timestamp;\n(0, chai_1.expect)(blockNumAfter).to.be.equal(blockNumBefore + 1);\n(0, chai_1.expect)(timestampAfter).to.be.equal(timestampBefore + sevenDays);\n// Confirm that the current blocktime is after the pause action's duration\n(0, chai_1.expect)(timestampAfter).to.be.greaterThan(Number(depositSafetyState[0].timestamp1));\n// NOTE: now we can test any functionality that should have now expired",
                      "err": {},
                      "uuid": "49e8d8a9-256d-4eb3-b0e3-fd2e71b54d2f",
                      "parentUUID": "4e3c81fd-3c3b-459f-8ceb-3a1a3668ea1b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1f4e58da-18f4-4b20-b453-a9c4291b9175",
                    "49e8d8a9-256d-4eb3-b0e3-fd2e71b54d2f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 63,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "d1a2994b-1541-4a63-a69c-7e1d1d701338",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "e2a3d835-34b1-44df-961d-08dd6bfaba2d",
                      "parentUUID": "d1a2994b-1541-4a63-a69c-7e1d1d701338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 55,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.WITHDRAW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.WITHDRAW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.WITHDRAW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.WITHDRAW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "4d4feb9a-7e4a-4eed-bf75-03ab7824786b",
                      "parentUUID": "d1a2994b-1541-4a63-a69c-7e1d1d701338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "c933217f-f279-484c-8ef5-c378d9471a51",
                      "parentUUID": "d1a2994b-1541-4a63-a69c-7e1d1d701338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.BORROW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.BORROW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.BORROW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.BORROW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "eb11e553-af47-4628-8961-3cdac5865000",
                      "parentUUID": "d1a2994b-1541-4a63-a69c-7e1d1d701338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.LIQUIDATION, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.LIQUIDATION, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "6532ae21-a50a-4502-90e2-4b52f4131719",
                      "parentUUID": "d1a2994b-1541-4a63-a69c-7e1d1d701338",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e2a3d835-34b1-44df-961d-08dd6bfaba2d",
                    "4d4feb9a-7e4a-4eed-bf75-03ab7824786b",
                    "c933217f-f279-484c-8ef5-c378d9471a51",
                    "eb11e553-af47-4628-8961-3cdac5865000",
                    "6532ae21-a50a-4502-90e2-4b52f4131719"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 285,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "c152fabc-9d4b-46bb-833b-317a5b1871d8",
                  "title": "event emission",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"SafetyStateChange\");\n(0, chai_1.expect)(event.action).to.equal(_test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(event.asset).to.equal(this.collateral.address);\n// @ts-ignore\n(0, chai_1.expect)(event.description.hash).to.equal(hardhat_1.default.ethers.utils.keccak256(hardhat_1.default.ethers.utils.toUtf8Bytes(\"paused\")));",
                      "err": {},
                      "uuid": "fdd9abc5-26c3-4565-83ec-1995cfac3af8",
                      "parentUUID": "c152fabc-9d4b-46bb-833b-317a5b1871d8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fdd9abc5-26c3-4565-83ec-1995cfac3af8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 27,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "076314fb-641e-4fff-8068-c90e73d9d1ef",
          "title": "Interest Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/00-init.ts",
          "file": "/src/test/stability-rate/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "e91227ab-df4f-45dc-9825-edd81e7b3da7",
              "parentUUID": "076314fb-641e-4fff-8068-c90e73d9d1ef",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.krAsset = this.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);",
              "err": {},
              "uuid": "0541c785-1ebd-4b74-abfe-ddceb658b291",
              "parentUUID": "076314fb-641e-4fff-8068-c90e73d9d1ef",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e2664b82-8120-4ea8-9565-b376d9297f54",
              "title": "#init",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/00-init.ts",
              "file": "/src/test/stability-rate/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "initializes correct stability rates",
                  "fullTitle": "Interest Rates #init initializes correct stability rates",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = await hardhat_1.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, chai_1.expect)(config.debtIndex).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.stabilityRate).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, chai_1.expect)(config.rateSlope1).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.rateSlope1);\n(0, chai_1.expect)(config.rateSlope2).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.rateSlope2);\n(0, chai_1.expect)(config.stabilityRateBase).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.stabilityRateBase);\n(0, chai_1.expect)(config.optimalPriceRate).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.optimalPriceRate);\n(0, chai_1.expect)(config.priceRateDelta).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.priceRateDelta);",
                  "err": {},
                  "uuid": "7a62c862-facc-4087-9ac7-ba337879d536",
                  "parentUUID": "e2664b82-8120-4ea8-9565-b376d9297f54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures correct stability rates",
                  "fullTitle": "Interest Rates #init configures correct stability rates",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    stabilityRateBase: lib_1.oneRay,\n    rateSlope1: lib_1.oneRay.mul(10),\n    rateSlope2: lib_1.oneRay.mul(50),\n    optimalPriceRate: lib_1.oneRay.div(2),\n    priceRateDelta: lib_1.oneRay.div(100).mul(10),\n};\nawait hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, configuration);\nconst config = await hardhat_1.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, chai_1.expect)(config.debtIndex).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.stabilityRate).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, chai_1.expect)(config.rateSlope1).to.bignumber.equal(configuration.rateSlope1);\n(0, chai_1.expect)(config.rateSlope2).to.bignumber.equal(configuration.rateSlope2);\n(0, chai_1.expect)(config.stabilityRateBase).to.bignumber.equal(configuration.stabilityRateBase);\n(0, chai_1.expect)(config.optimalPriceRate).to.bignumber.equal(configuration.optimalPriceRate);\n(0, chai_1.expect)(config.priceRateDelta).to.bignumber.equal(configuration.priceRateDelta);",
                  "err": {},
                  "uuid": "bc649786-30ce-4a4b-af16-376dc3de52d2",
                  "parentUUID": "e2664b82-8120-4ea8-9565-b376d9297f54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant set incorrect values",
                  "fullTitle": "Interest Rates #init cant set incorrect values",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectOptimalRate = {\n    stabilityRateBase: lib_1.oneRay,\n    rateSlope1: lib_1.oneRay.mul(10),\n    rateSlope2: lib_1.oneRay.mul(50),\n    optimalPriceRate: lib_1.oneRay.add(1),\n    priceRateDelta: lib_1.oneRay.div(100).mul(10),\n};\nconst incorrectExcessRate = {\n    stabilityRateBase: lib_1.oneRay,\n    rateSlope1: lib_1.oneRay.mul(10),\n    rateSlope2: lib_1.oneRay.mul(50),\n    optimalPriceRate: lib_1.oneRay,\n    priceRateDelta: lib_1.oneRay.add(1),\n};\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.setupStabilityRateParams(this.krAsset.address, test_1.defaultKrAssetArgs.stabilityRates))\n    .to.be.reverted;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectOptimalRate)).to.be\n    .reverted;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectExcessRate)).to.be\n    .reverted;",
                  "err": {},
                  "uuid": "8c62a95f-7f19-4df4-84bd-23154b0a8893",
                  "parentUUID": "e2664b82-8120-4ea8-9565-b376d9297f54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a62c862-facc-4087-9ac7-ba337879d536",
                "bc649786-30ce-4a4b-af16-376dc3de52d2",
                "8c62a95f-7f19-4df4-84bd-23154b0a8893"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 38,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f5001865-d486-44dc-a388-abce70e5f6f0",
          "title": "Stability Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
          "file": "/src/test/stability-rate/01-rates.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "b0b5e61c-3205-40cf-b620-7cc2f35f4ecf",
              "parentUUID": "f5001865-d486-44dc-a388-abce70e5f6f0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 211,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userOne = hardhat_1.default.users.deployer;\nthis.krAsset = this.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\n[UniMath] = await hardhat_1.default.deploy(\"UniswapMath\", {\n    from: hardhat_1.default.users.deployer.address,\n    args: [hardhat_1.default.UniV2Factory.address, hardhat_1.default.UniV2Router.address],\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, lib_1.toBig)(1000);\nconst kLiq = (0, lib_1.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne,\n});\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: kLiq });\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: userOne,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "60380601-973a-4fbe-9188-b358e4c409de",
              "parentUUID": "f5001865-d486-44dc-a388-abce70e5f6f0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0d4b7289-44a7-4e87-aeb7-0846bab27d39",
              "title": "#no-amm-prices",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct rates and debt when there is no amm price",
                  "fullTitle": "Stability Rates #no-amm-prices calculates correct rates and debt when there is no amm price",
                  "timedOut": false,
                  "duration": 4962,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const krAssetAmount = (0, lib_1.toBig)(1);\nconst krAssetNoBaseRate = await (0, krassets_1.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: ethers_1.BigNumber.from(0),\n    price: 10,\n    supplyLimit: 2000,\n});\nconst krAssetWithBaseRate = await (0, krassets_1.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: test_1.BASIS_POINT.mul(20),\n    price: 10,\n    supplyLimit: 2000,\n});\n// Asset\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: krAssetNoBaseRate,\n    amount: krAssetAmount,\n});\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: krAssetWithBaseRate,\n    amount: krAssetAmount,\n});\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nawait hardhat_network_helpers_1.time.increase(+lib_2.ONE_YEAR);\n// asset with no base rate and no amm price\nconst debtIndexNoBaseRate = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetNoBaseRate.address);\nconst debtScaledNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebt(userOne.address, krAssetNoBaseRate.address);\nconst debtPrincipalNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetNoBaseRate.address);\nconst debtInterestNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetNoBaseRate.address);\n(0, chai_1.expect)(debtIndexNoBaseRate).to.equal(lib_2.oneRay);\n(0, chai_1.expect)(debtScaledNoBaseRate).to.equal(debtPrincipalNoBaseRate);\n(0, chai_1.expect)(debtInterestNoBaseRate.kissAmount).to.equal(0);\n(0, chai_1.expect)(debtInterestNoBaseRate.assetAmount).to.equal(0);\n// asset with base rate and no amm price\nconst debtIndexWithBaseRate = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nconst debtScaledWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebt(userOne.address, krAssetWithBaseRate.address);\nconst debtPrincipalWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetWithBaseRate.address);\nconst debtInterestWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetWithBaseRate.address);\nconst expectedScaledDebt = await (0, calculations_1.toScaledAmount)(debtPrincipalWithBaseRate, krAssetWithBaseRate);\nconst expectedDebtIndex = await (0, calculations_1.calcDebtIndex)(krAssetWithBaseRate, debtIndexBefore, lastUpdateTimestamp);\nconst expectedAssetInterest = debtScaledWithBaseRate.sub(debtPrincipalWithBaseRate);\nconst expectedKissInterestAmount = await (0, calculations_1.oraclePriceToWad)(hardhat_1.default.Diamond.getKrAssetValue(krAssetWithBaseRate.address, expectedAssetInterest, true));\n(0, chai_1.expect)(debtIndexWithBaseRate).to.equal(expectedDebtIndex);\n(0, chai_1.expect)(debtScaledWithBaseRate).to.equal(expectedScaledDebt);\n(0, chai_1.expect)(debtInterestWithBaseRate.assetAmount).to.equal(expectedAssetInterest);\n(0, chai_1.expect)(debtInterestWithBaseRate.kissAmount).to.equal(expectedKissInterestAmount);",
                  "err": {},
                  "uuid": "4a399dd7-b497-4b17-8570-a60e31cecf02",
                  "parentUUID": "0d4b7289-44a7-4e87-aeb7-0846bab27d39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a399dd7-b497-4b17-8570-a60e31cecf02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4962,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "f1faf9dc-b3e3-415f-9f98-3664d7874fa4",
              "title": "#price-rate",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct price rates when amm == oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm == oracle",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst ammPricesOptimal = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammPricesOptimal.price0).to.be.closeTo(10, 0.05);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.equal(lib_2.oneRay);",
                  "err": {},
                  "uuid": "1cd14570-e1e8-4c4f-844b-7ac0650bb159",
                  "parentUUID": "f1faf9dc-b3e3-415f-9f98-3664d7874fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm > oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm > oracle",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 105; // 105% eg. 5% premium\nconst expectedPriceRate = lib_2.oneRay.div(100).mul(premiumPercentage);\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nconst ammPricesUpPremium = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammPricesUpPremium.price0).to.be.closeTo(10.5, 0.05);\nawait updateTWAP();\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, lib_2.oneRay.div(100));",
                  "err": {},
                  "uuid": "661a788e-3026-4539-b2fd-8c9b3370a147",
                  "parentUUID": "f1faf9dc-b3e3-415f-9f98-3664d7874fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm < oracle ",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 181,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 95; // 95% eg. 5% below oracle price\nconst expectedPriceRate = lib_2.oneRay.div(100).mul(premiumPercentage);\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nconst ammRates = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammRates.price0).to.be.closeTo(9.5, 0.05);\nawait updateTWAP();\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, lib_2.oneRay.div(100));",
                  "err": {},
                  "uuid": "b692f4db-2465-4db6-909d-84cb6823de46",
                  "parentUUID": "f1faf9dc-b3e3-415f-9f98-3664d7874fa4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1cd14570-e1e8-4c4f-844b-7ac0650bb159",
                "661a788e-3026-4539-b2fd-8c9b3370a147",
                "b692f4db-2465-4db6-909d-84cb6823de46"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 310,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "eb119e24-aabd-49a4-948d-2e292de1dfe4",
              "title": "#stability-rate",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct stability rates when amm == oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm == oracle",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal((0, calculations_1.calcExpectedStabilityRateNoPremium)(priceRate, test_1.defaultKrAssetArgs));",
                  "err": {},
                  "uuid": "127fbf47-1401-4aad-9b90-53ff76e93ea3",
                  "parentUUID": "eb119e24-aabd-49a4-948d-2e292de1dfe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rates when amm > oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm > oracle",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal((0, calculations_1.calcExpectedStabilityRateHighPremium)(priceRate, test_1.defaultKrAssetArgs));",
                  "err": {},
                  "uuid": "9c732090-1660-4af7-a81d-a5312e2bdaed",
                  "parentUUID": "eb119e24-aabd-49a4-948d-2e292de1dfe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rates when amm < oracle ",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 183,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal((0, calculations_1.calcExpectedStabilityRateLowPremium)(priceRate, test_1.defaultKrAssetArgs));",
                  "err": {},
                  "uuid": "2101954c-c717-4a56-a9fb-67f3513cfff2",
                  "parentUUID": "eb119e24-aabd-49a4-948d-2e292de1dfe4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "127fbf47-1401-4aad-9b90-53ff76e93ea3",
                "9c732090-1660-4af7-a81d-a5312e2bdaed",
                "2101954c-c717-4a56-a9fb-67f3513cfff2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 337,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "203b2f29-4019-4d6b-966d-27454e99e0e4",
              "title": "#debt-index",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt index after a year when amm price > oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year when amm price > oracle",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+lib_2.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "588befd7-6220-4a3d-9056-a3f1a07d8f03",
                  "parentUUID": "203b2f29-4019-4d6b-966d-27454e99e0e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after year when amm price < oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after year when amm price < oracle",
                  "timedOut": false,
                  "duration": 180,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 90; // 90% eg. -10% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+lib_2.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "35ab825a-e0d9-4f18-a182-238390f06260",
                  "parentUUID": "203b2f29-4019-4d6b-966d-27454e99e0e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+lib_2.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "fac7a283-1067-464d-b6fd-b16819c6c2e6",
                  "parentUUID": "203b2f29-4019-4d6b-966d-27454e99e0e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "588befd7-6220-4a3d-9056-a3f1a07d8f03",
                "35ab825a-e0d9-4f18-a182-238390f06260",
                "fac7a283-1067-464d-b6fd-b16819c6c2e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 402,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "3389bfe6-05fc-4446-a62f-608b9749aa7b",
          "title": "Stability Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
          "file": "/src/test/stability-rate/02-debt.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "d6f27639-07e2-466a-9634-38f89d9062e6",
              "parentUUID": "3389bfe6-05fc-4446-a62f-608b9749aa7b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 293,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userOne = hardhat_1.default.users.deployer;\nuserTwo = hardhat_1.default.users.userTwo;\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\n[UniMath] = await hardhat_1.default.deploy(\"UniswapMath\", {\n    from: hardhat_1.default.users.deployer.address,\n    args: [hardhat_1.default.UniV2Factory.address, hardhat_1.default.UniV2Router.address],\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, lib_1.toBig)(1000);\nconst kLiq = (0, lib_1.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: userOne,\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: userOne,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "b1a2aaa9-a9a1-42ac-a6b0-a3aedb85fba8",
              "parentUUID": "3389bfe6-05fc-4446-a62f-608b9749aa7b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4490eaff-9639-427a-b4ee-3d1eebc63a88",
              "title": "#debt calculation - mint",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - mint\"",
                  "fullTitle": "Stability Rates #debt calculation - mint \"before each\" hook in \"#debt calculation - mint\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "49afa17a-9631-422a-870d-15de45f7f1b9",
                  "parentUUID": "4490eaff-9639-427a-b4ee-3d1eebc63a88",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 277,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.not.bignumber.equal(debt);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "85cca0af-9494-4897-9d8a-1b90ffc089c6",
                  "parentUUID": "4490eaff-9639-427a-b4ee-3d1eebc63a88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt amount when amm price < oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price < oracle",
                  "timedOut": false,
                  "duration": 290,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "6af471ee-5c8d-42c5-b09b-c212de88a9b7",
                  "parentUUID": "4490eaff-9639-427a-b4ee-3d1eebc63a88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 130,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(lib_2.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "255fa138-a7ae-47bb-b873-4930d91af870",
                  "parentUUID": "4490eaff-9639-427a-b4ee-3d1eebc63a88",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85cca0af-9494-4897-9d8a-1b90ffc089c6",
                "6af471ee-5c8d-42c5-b09b-c212de88a9b7",
                "255fa138-a7ae-47bb-b873-4930d91af870"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 697,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "8c85ca00-0a5e-46c4-853f-a28ed331398e",
              "title": "#debt calculation - repay",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay\"",
                  "fullTitle": "Stability Rates #debt calculation - repay \"before each\" hook in \"#debt calculation - repay\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "88455557-b43f-4d4c-bd55-ee082c99b890",
                  "parentUUID": "8c85ca00-0a5e-46c4-853f-a28ed331398e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 102; // 102% eg. 2% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\n// buy asset, increases price\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalBefore = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst burnAmount = mintAmount.div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: burnAmount,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(principalAfter).to.equal(principalBefore.sub(burnAmount));\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(burnAmount), hardhat_1.default.ethers.utils.parseUnits(\"10\", \"gwei\"));",
                  "err": {},
                  "uuid": "05c6a537-8ee7-4abf-a603-6371646d65c7",
                  "parentUUID": "8c85ca00-0a5e-46c4-853f-a28ed331398e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 307,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 98; // 101% eg. 1% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\n// dump asset, decreases price\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait hardhat_network_helpers_1.time.increase(year);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(lib_2.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), lib_2.oneRay.div(10000));",
                  "err": {},
                  "uuid": "b2ccae0b-4494-4a33-bc9e-65d2a2e3f6a3",
                  "parentUUID": "8c85ca00-0a5e-46c4-853f-a28ed331398e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 182,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait hardhat_network_helpers_1.time.increase(year);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(lib_2.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), lib_2.oneRay.div(10000));",
                  "err": {},
                  "uuid": "3702a82a-ba07-4554-b534-7a79e35aeaf8",
                  "parentUUID": "8c85ca00-0a5e-46c4-853f-a28ed331398e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05c6a537-8ee7-4abf-a603-6371646d65c7",
                "b2ccae0b-4494-4a33-bc9e-65d2a2e3f6a3",
                "3702a82a-ba07-4554-b534-7a79e35aeaf8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 708,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
              "title": "#debt calculation - repay interest",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay interest\"",
                  "fullTitle": "Stability Rates #debt calculation - repay interest \"before each\" hook in \"#debt calculation - repay interest\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "988828d1-4961-49af-b1d5-bc818d7c67f2",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can view account principal debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account principal debt for asset",
                  "timedOut": false,
                  "duration": 134,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst expectedPrincipalDebt = mintAmount.mul(2);\nconst principalDebtAfterOneYear = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(principalDebtAfterOneYear).to.bignumber.equal(expectedPrincipalDebt);",
                  "err": {},
                  "uuid": "0e5b9f07-e956-441b-8fee-b74c8c4ea5a5",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view account scaled debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account scaled debt for asset",
                  "timedOut": false,
                  "duration": 164,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst expectedScaledDebt = principalDebt.add(accruedInterest.assetAmount);\nconst scaledDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(scaledDebt).to.bignumber.equal(expectedScaledDebt);",
                  "err": {},
                  "uuid": "31bad906-aac1-42fb-be11-cd7dceffb3f8",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view accrued interest in KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view accrued interest in KISS",
                  "timedOut": false,
                  "duration": 177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst scaledDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst expectedValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, scaledDebt.sub(principalDebt), true)).rawValue;\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// 8 decimals\n(0, chai_1.expect)(accruedInterest.kissAmount).to.bignumber.equal(expectedValue.mul(10 ** 10));",
                  "err": {},
                  "uuid": "d0ea0fb4-3a8f-4aec-a148-17f2f9d0f375",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay full interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay full interest with KISS",
                  "timedOut": false,
                  "duration": 212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\n// get the principal before repayment\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// get values after repayment\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(accruedInterest.assetAmount).to.bignumber.eq(0);\n(0, chai_1.expect)(debt).to.bignumber.eq(principalDebt);",
                  "err": {},
                  "uuid": "41229eea-969a-4e4f-bcf4-c24dd1d5cabe",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay partial interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay partial interest with KISS",
                  "timedOut": false,
                  "duration": 212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nconst accruedInterestBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// get the principal before repayment\nconst debtBefore = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst repaymentAmount = accruedInterestBefore.kissAmount.div(5);\nconst repaymentAmountAsset = accruedInterestBefore.assetAmount.div(5);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayStabilityRateInterestPartial(userTwo.address, this.krAsset.address, repaymentAmount);\n// get values after repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterestAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// TODO: calc exact values instead of closeTo\n(0, chai_1.expect)(accruedInterestAfter.kissAmount).to.be.closeTo(accruedInterestBefore.kissAmount.sub(repaymentAmount), RATE_DELTA);\n(0, chai_1.expect)(debtAfter).to.be.closeTo(debtBefore.sub(repaymentAmountAsset), RATE_DELTA);",
                  "err": {},
                  "uuid": "fa0bca25-29b8-4067-b396-d7c93d4c5984",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest for multiple assets in batch",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest for multiple assets in batch",
                  "timedOut": false,
                  "duration": 6291,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo,\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nconst totalInterestInKISSBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map(asset => hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c) => a.add(c.kissAmount), ethers_1.BigNumber.from(0));\nconst totalInterestInKISSAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, chai_1.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nconst KISSMinAmount = (0, lib_1.toBig)(10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: KISSMinAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.connect(userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSAfterRepay).to.equal(0);",
                  "err": {},
                  "uuid": "0d519471-73fc-4a58-813a-815b99813c48",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest and principal for a single asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest and principal for a single asset",
                  "timedOut": false,
                  "duration": 336,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst accruedInterestBeforeBurn = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\nconst accruedInterestAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Ensure burning does not wipe interest accrued\n(0, chai_1.expect)(accruedInterestAfterBurn.assetAmount.gt(accruedInterestBeforeBurn.assetAmount)).to.be.true;\n(0, chai_1.expect)(accruedInterestAfterBurn.kissAmount.gt(accruedInterestBeforeBurn.kissAmount)).to.be.true;\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore.length).to.equal(2);\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter.length).to.equal(1);\nconst accruedInterestAfterRepayment = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n// Ensure debt actually gets wiped\n(0, chai_1.expect)(principalDebt).to.equal(0);\n(0, chai_1.expect)(accruedInterestAfterRepayment.assetAmount).to.equal(0);\n(0, chai_1.expect)(accruedInterestAfterRepayment.kissAmount).to.equal(0);\n(0, chai_1.expect)(debt).to.equal(0);\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst accruedInterestYearAfterRepayment = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Sanity check with another year of time that there is no interest accrual\n(0, chai_1.expect)(accruedInterestYearAfterRepayment.assetAmount).to.equal(0);\n(0, chai_1.expect)(accruedInterestYearAfterRepayment.kissAmount).to.equal(0);\n// Get kr asset value, should be only KISS minted that remains\nconst krAssetValue = (await hardhat_1.default.Diamond.getAccountKrAssetValue(userTwo.address)).rawValue;\n(0, chai_1.expect)(krAssetValue).to.equal((0, lib_1.toBig)(10, 8));",
                  "err": {},
                  "uuid": "e6ca8267-31df-4098-91bf-a531a875af45",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch repay interest and all debt",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can batch repay interest and all debt",
                  "timedOut": false,
                  "duration": 7045,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nconst totalInterestInKISSBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map(asset => hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c) => a.add(c.kissAmount), ethers_1.BigNumber.from(0));\nconst totalInterestInKISSAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, chai_1.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nawait Promise.all(krAssets.map(async (asset) => hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, asset.address, hardhat_1.default.ethers.constants.MaxUint256, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userTwo.address, asset.address))));\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore.length).to.equal(4);\nawait hardhat_1.default.Diamond.connect(userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSAfterRepay).to.equal(0);\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter.length).to.equal(1);",
                  "err": {},
                  "uuid": "fd243efc-be78-4d29-81b3-f5f2b740967e",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can open up a new debt positions after wiping all debt + interest",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can open up a new debt positions after wiping all debt + interest",
                  "timedOut": false,
                  "duration": 583,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst expectedDebtAfterOneYear = await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(expectedDebtAfterOneYear);\n// Wipe debt\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\nconst accruedInterest = (await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address))\n    .assetAmount;\n// Mint again, before interest repayment\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\n// Ensure debt is principal + interest\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.closeTo(mintAmount.add(accruedInterest), RATE_DELTA);\n// Burn all assets\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\n// Ensure debt is equal to interest\nconst accruedInterestAfterBurn = (await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address)).assetAmount;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(accruedInterestAfterBurn);\n// Repay all interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// Debt should be wiped\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n// Mint again\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\n// Scaled should be equal to principal\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(mintAmount);\n// Advance time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n// Ensure accrual is the same as the previous year with the same position\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.eq(expectedDebtAfterOneYear);",
                  "err": {},
                  "uuid": "e8499466-5234-471d-a784-80f36be4498f",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close a position in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close a position in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 357,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userOne,\n});\nawait KISS.connect(userOne).transfer(userTwo.address, minDebtAmount);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait hardhat_1.default.Diamond.connect(userTwo).closeKrAssetDebtPosition(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address)).to.eq(0);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(accruedInterest.assetAmount).to.eq(0);\n(0, chai_1.expect)(accruedInterest.kissAmount).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "2e929180-afad-4a03-adeb-5f678d5dedf2",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close all positions and interest in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close all positions and interest in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 7013,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst kissAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10).mul(2);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: kissAmount,\n    user: userOne,\n});\nawait KISS.connect(userOne).transfer(userTwo.address, kissAmount);\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n// ~1M gas with 8 krAssets\n// console.log(+(await tx.wait()).gasUsed);\nawait hardhat_1.default.Diamond.connect(userTwo).batchCloseKrAssetDebtPositions(userTwo.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(accruedInterest).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getAccountKrAssetValue(userTwo.address)).rawValue).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "3aff91dc-acde-4f94-8fc8-bab842b5cc62",
                  "parentUUID": "d6ec936b-ec1f-47fc-b3d7-de05bf203937",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e5b9f07-e956-441b-8fee-b74c8c4ea5a5",
                "31bad906-aac1-42fb-be11-cd7dceffb3f8",
                "d0ea0fb4-3a8f-4aec-a148-17f2f9d0f375",
                "41229eea-969a-4e4f-bcf4-c24dd1d5cabe",
                "fa0bca25-29b8-4067-b396-d7c93d4c5984",
                "0d519471-73fc-4a58-813a-815b99813c48",
                "e6ca8267-31df-4098-91bf-a531a875af45",
                "fd243efc-be78-4d29-81b3-f5f2b740967e",
                "e8499466-5234-471d-a784-80f36be4498f",
                "2e929180-afad-4a03-adeb-5f678d5dedf2",
                "3aff91dc-acde-4f94-8fc8-bab842b5cc62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22524,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "1219e549-92d7-4239-a113-aff61092046e",
          "title": "Stability Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
          "file": "/src/test/stability-rate/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "6d72df81-e008-4a31-b702-fafeee2fb70f",
              "parentUUID": "1219e549-92d7-4239-a113-aff61092046e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 248,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "liquidator = hardhat_1.default.users.deployer;\nuserTwo = hardhat_1.default.users.userTwo;\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, lib_1.toBig)(1000);\nconst kLiq = (0, lib_1.toBig)(100);\nawait this.collateral.setBalance(liquidator, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: liquidator,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: liquidator,\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: liquidator,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "4f8cc3f3-8de5-45fc-a58d-795a23024dac",
              "parentUUID": "1219e549-92d7-4239-a113-aff61092046e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "56fb66d8-3223-4ee7-aae6-98e496046234",
              "title": "#stability rate - liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
              "file": "/src/test/stability-rate/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#stability rate - liquidation\"",
                  "fullTitle": "Stability Rates #stability rate - liquidation \"before each\" hook in \"#stability rate - liquidation\"",
                  "timedOut": false,
                  "duration": 6779,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Create few krAssets\nkrAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1.1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));",
                  "err": {},
                  "uuid": "88cce00d-af9e-4949-a3f8-247c2c5baa03",
                  "parentUUID": "56fb66d8-3223-4ee7-aae6-98e496046234",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 395,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst krAsset = krAssets[0];\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "926f1ca2-37f1-47b4-af23-ec35c069708a",
                  "parentUUID": "56fb66d8-3223-4ee7-aae6-98e496046234",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot batch liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot batch liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 366,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "f438b5dd-4d4c-4754-a91e-f81373dcf20e",
                  "parentUUID": "56fb66d8-3223-4ee7-aae6-98e496046234",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 766,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(liquidator).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map(asset => asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR * 4);\n// should be liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\n// Asset to liquidate\nconst krAsset = krAssets[0];\nconst interestUSDTotal = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// Liquidator mints KISS\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: interestUSDTotal.add((0, lib_1.toBig)(1)),\n    user: liquidator,\n});\n// liquidatable value total before\nconst accruedKissInterest = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address)).kissAmount);\nconst accountCollateralBefore = await hardhat_1.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, lib_1.toBig)(0));\n// Liquidate\nconst tx = await hardhat_1.default.Diamond.connect(liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address);\n// Should all be wiped\nconst interestAccruedAfterLiq = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address);\n(0, chai_1.expect)(interestAccruedAfterLiq.kissAmount).to.eq(0);\n(0, chai_1.expect)(interestAccruedAfterLiq.assetAmount).to.eq(0);\nconst accountCollateralAfter = await hardhat_1.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"InterestLiquidationOccurred\");\n// validate interest accrual changes\n(0, chai_1.expect)(accountCollateralAfter).to.equal(accountCollateralBefore.sub(event.collateralSent));\nconst liquidationIncentive = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue);\nconst expectedCollateral = (accruedKissInterest / (0, hardhat_1.fromBig)(await this.collateral.getPrice(), 8)) * liquidationIncentive;\n// event validation\n(0, chai_1.expect)(event.account).to.equal(userTwo.address);\n(0, chai_1.expect)(event.liquidator).to.equal(liquidator.address);\n(0, chai_1.expect)(event.repayKreskoAsset).to.equal(krAsset.address);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.collateralSent).toFixed(6)).to.equal(expectedCollateral.toFixed(6));\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.repayUSD)).to.closeTo(accruedKissInterest, 0.0001);\n// liquidator received collateral\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "780a9520-c6ca-47e0-a208-b4b16826e6c3",
                  "parentUUID": "56fb66d8-3223-4ee7-aae6-98e496046234",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can batch liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 1250,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(liquidator).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map(asset => asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR * 4);\n// should be liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\nconst interestKissTotal = (0, hardhat_1.fromBig)(await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n// Liquidator mints KISS\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: interestKissTotal + 1,\n    user: liquidator,\n});\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, lib_1.toBig)(0));\n// Liquidate\nconst tx = await hardhat_1.default.Diamond.connect(liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address);\nconst interestKissTotalAfter = (0, hardhat_1.fromBig)(await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"BatchInterestLiquidationOccurred\");\nconst repayUSD = (0, hardhat_1.fromBig)(event.repayUSD);\n// interest accrued changes\n(0, chai_1.expect)(interestKissTotalAfter).to.closeTo(interestKissTotal - (0, hardhat_1.fromBig)(event.repayUSD), 0.0001);\nconst liquidationIncentive = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue);\nconst expectedCollateral = (repayUSD / (0, hardhat_1.fromBig)(await this.collateral.getPrice(), 8)) * liquidationIncentive;\n// event validation\n(0, chai_1.expect)(event.account).to.equal(userTwo.address);\n(0, chai_1.expect)(event.liquidator).to.equal(liquidator.address);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.collateralSent)).to.closeTo(expectedCollateral, 0.0001);\n(0, chai_1.expect)(repayUSD).to.closeTo(interestKissTotal - interestKissTotalAfter, 0.0001);\n// liquidator received collateral\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "d6193d52-7b8b-4215-9770-8ac71844e5ec",
                  "parentUUID": "56fb66d8-3223-4ee7-aae6-98e496046234",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "926f1ca2-37f1-47b4-af23-ec35c069708a",
                "f438b5dd-4d4c-4754-a91e-f81373dcf20e",
                "780a9520-c6ca-47e0-a208-b4b16826e6c3",
                "d6193d52-7b8b-4215-9770-8ac71844e5ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2777,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}