{
  "stats": {
    "suites": 77,
    "tests": 235,
    "passes": 232,
    "pending": 3,
    "failures": 0,
    "start": "2023-02-12T17:08:30.653Z",
    "end": "2023-02-12T17:11:34.082Z",
    "duration": 183429,
    "testsRegistered": 235,
    "passPercent": 100,
    "pendingPercent": 1.276595744680851,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3a3ae633-06ea-4c0e-a40c-10e71c0e010d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "47aba954-35b7-4d9b-a19c-d1918bcc828a",
          "title": "Diamond",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before all\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = await hardhat_1.default.getUsers();",
              "err": {},
              "uuid": "296e1d3b-c975-49cb-9296-80993158d832",
              "parentUUID": "47aba954-35b7-4d9b-a19c-d1918bcc828a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before all\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "000ebfc1-4f15-4ab4-a9b1-c0dadb2f5fe7",
              "parentUUID": "47aba954-35b7-4d9b-a19c-d1918bcc828a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "096fa719-09b2-457d-a1d8-eb4799adba2a",
              "parentUUID": "47aba954-35b7-4d9b-a19c-d1918bcc828a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "672c629f-f794-4bdf-8792-fee1ce01f46b",
              "title": "#initialization",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(users.deployer.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "853518ab-e155-48c5-9967-f94510636b0d",
                  "parentUUID": "672c629f-f794-4bdf-8792-fee1ce01f46b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await hardhat_1.default.Diamond.facets()).map(f => f.facetAddress);\nconst facetAddressesArtifact = this.facets.map(f => f.facetAddress);\n(0, chai_1.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, chai_1.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "0a2c2e12-991d-4f93-b2ad-1ac98051b9c8",
                  "parentUUID": "672c629f-f794-4bdf-8792-fee1ce01f46b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await hardhat_1.default.Diamond.facets()).flatMap(f => f.functionSelectors);\nconst facetSelectorsOnArtifact = this.facets.flatMap(f => f.functionSelectors);\n(0, chai_1.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, chai_1.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "af0b668c-e204-4ebb-957c-dc0c5d3b080d",
                  "parentUUID": "672c629f-f794-4bdf-8792-fee1ce01f46b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "853518ab-e155-48c5-9967-f94510636b0d",
                "0a2c2e12-991d-4f93-b2ad-1ac98051b9c8",
                "af0b668c-e204-4ebb-957c-dc0c5d3b080d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 41,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "d930afd1-3567-4451-9783-fa4731de0846",
          "title": "Diamond",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before all\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addr = await hardhat_1.default.getAddresses();\nusers = await hardhat_1.default.getUsers();",
              "err": {},
              "uuid": "253a566e-a7d1-42b1-ad37-6df8cf3b10d0",
              "parentUUID": "d930afd1-3567-4451-9783-fa4731de0846",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before all\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "55e62e66-25e1-4e4c-88a1-a647646af7b8",
              "parentUUID": "d930afd1-3567-4451-9783-fa4731de0846",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "80e81414-3b90-4e81-8777-41670c36b4c7",
              "parentUUID": "d930afd1-3567-4451-9783-fa4731de0846",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "60298785-7b67-4488-9f8a-c4d554394b8b",
              "title": "#ownership",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(addr.deployer);",
                  "err": {},
                  "uuid": "323edd74-a27a-4abe-b369-8b5387e61de2",
                  "parentUUID": "60298785-7b67-4488-9f8a-c4d554394b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.ADMIN, addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "033c711f-a7ee-462a-85a0-82e5ed15e976",
                  "parentUUID": "60298785-7b67-4488-9f8a-c4d554394b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = users.userOne;\nawait hardhat_1.default.Diamond.transferOwnership(pendingOwner.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "bef01f25-3f94-4391-8d5e-81946573c89e",
                  "parentUUID": "60298785-7b67-4488-9f8a-c4d554394b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = users.userOne;\nawait hardhat_1.default.Diamond.transferOwnership(pendingOwner.address);\nawait hardhat_1.default.Diamond.connect(pendingOwner).acceptOwnership();\n(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "34c21cc8-2b0e-4fda-b809-cb9c5cb70992",
                  "parentUUID": "60298785-7b67-4488-9f8a-c4d554394b8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "323edd74-a27a-4abe-b369-8b5387e61de2",
                "033c711f-a7ee-462a-85a0-82e5ed15e976",
                "bef01f25-3f94-4391-8d5e-81946573c89e",
                "34c21cc8-2b0e-4fda-b809-cb9c5cb70992"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 98,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "2fca00c4-70e3-4156-b235-140b762a4ebe",
          "title": "Diamond",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before all\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addr = await hardhat_1.default.getAddresses();\nusers = await hardhat_1.default.getUsers();",
              "err": {},
              "uuid": "12dc149f-afd0-43c3-a275-b10f717bfbc6",
              "parentUUID": "2fca00c4-70e3-4156-b235-140b762a4ebe",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before all\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "f01c6ec8-231b-4184-b367-9ec6805ffe05",
              "parentUUID": "2fca00c4-70e3-4156-b235-140b762a4ebe",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 24,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "10fd97f1-2d8b-4d1f-ade9-bcc8c7b6b813",
              "parentUUID": "2fca00c4-70e3-4156-b235-140b762a4ebe",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a948d678-1f28-468d-9d36-03f882cb1fbc",
              "title": "#upgrades",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 785,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await smock_1.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hardhat_1.default.deploy(\"SmockInit\");\nconst signatures = hardhat_1.default.getSignatures(types_2.SmockFacet__factory.abi);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: types_1.FacetCutAction.Add,\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(addr.userOne);\nawait hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = hardhat_1.default.ethers.utils.id(\"kresko.test.operator\");\nconst isTestOperator = await hardhat_1.default.Diamond.hasRole(TEST_OPERATOR_ROLE, addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, chai_1.expect)(isTestOperator).to.equal(true);\nconst Facet = await hardhat_1.default.ethers.getContractAt(types_2.SmockFacet__factory.abi, hardhat_1.default.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, chai_1.expect)(operatorFromNewStorage).to.equal(addr.userOne);",
                  "err": {},
                  "uuid": "f4208d7f-05a4-4229-86b0-2dd9347ee427",
                  "parentUUID": "a948d678-1f28-468d-9d36-03f882cb1fbc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 263,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, add_facet_1.addFacet)({\n    name: \"SmockFacet\",\n    initializerName: \"SmockInit\",\n    initializerArgs: addr.userOne,\n});\nconst facetsBefore = await hardhat_1.default.Diamond.facets();\n(0, chai_1.expect)(facetsBefore.filter(f => f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, remove_facet_1.removeFacet)({ name: \"SmockFacet\" });\nconst facetsAfter = await hardhat_1.default.Diamond.facets();\n(0, chai_1.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, chai_1.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "358497d5-04a0-421c-9242-df0c4e9fc62f",
                  "parentUUID": "a948d678-1f28-468d-9d36-03f882cb1fbc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(addr.ZERO);\n// Transfer to eg. wrong address\nconst wrongOwner = addr.nonadmin;\nawait hardhat_1.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hardhat_1.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hardhat_1.default.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await hardhat_1.default.Diamond.facetAddress(signature);\nconst functions = await hardhat_1.default.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: addr.ZERO,\n    action: types_1.FacetCutAction.Remove,\n    functionSelectors: [signature],\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = addr.userOne;\nconst initData = await hardhat_1.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nawait tx.wait();\n// Ensure rest of the functions remain\nconst functionsAfterCut = await hardhat_1.default.Diamond.facetFunctionSelectors(facetAddress);\n(0, chai_1.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst filter = hardhat_1.default.Diamond.filters[\"PendingOwnershipTransfer(address,address)\"](addr.deployer, correctOwner);\nconst [event] = await hardhat_1.default.Diamond.queryFilter(filter);\nconst { previousOwner, newOwner } = event.args;\n(0, chai_1.expect)(previousOwner).to.equal(addr.deployer);\n(0, chai_1.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.nonadmin).acceptOwnership()).to.be.revertedWith(test_1.Error.DIAMOND_INVALID_FUNCTION_SIGNATURE);",
                  "err": {},
                  "uuid": "0a0eca35-c3ea-49af-b049-cf3b6755e94d",
                  "parentUUID": "a948d678-1f28-468d-9d36-03f882cb1fbc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(addr.ZERO);\n// Transfer to eg. wrong address\nconst wrongOwner = addr.nonadmin;\nawait hardhat_1.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hardhat_1.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hardhat_1.default.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await hardhat_1.default.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await hardhat_1.default.deploy(\"DiamondOwnershipFacet2\", {\n    contract: \"DiamondOwnershipFacet\",\n    from: addr.deployer,\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: types_1.FacetCutAction.Replace,\n    functionSelectors: [signature],\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = addr.userOne;\nconst initData = await hardhat_1.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nawait tx.wait();\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.nonadmin).acceptOwnership()).to.be.revertedWith(test_1.Error.DIAMOND_INVALID_PENDING_OWNER);\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await hardhat_1.default.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, chai_1.expect)(functionsNewFacet.length).to.equal(1);\n(0, chai_1.expect)(functionsNewFacet).to.have.members([signature]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await hardhat_1.default.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, chai_1.expect)(functionsOldFacet).to.not.have.members([signature]);\n(0, chai_1.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).acceptOwnership());\nconst currentOwner = await hardhat_1.default.Diamond.owner();\n(0, chai_1.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "e8f9622f-3844-49be-96d4-ac8c75e2acf7",
                  "parentUUID": "a948d678-1f28-468d-9d36-03f882cb1fbc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 598,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);\nconst Factory = await smock_1.smock.mock(\"SmockInit\");\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait hardhat_1.default.Diamond.upgradeState(tx.to, tx.data);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "98d7578d-38a3-4868-bd31-cdd9c5c32852",
                  "parentUUID": "a948d678-1f28-468d-9d36-03f882cb1fbc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 1135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await smock_1.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hardhat_1.default.deploy(\"SmockInit\");\nconst signatures = hardhat_1.default.getSignatures(types_2.SmockFacet__factory.abi);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: types_1.FacetCutAction.Add,\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(addr.userOne);\nawait hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nconst Diamond = await hardhat_1.default.ethers.getContractAt(\"SmockFacet\", hardhat_1.default.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, chai_1.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await smock_1.smock.mock(\"SmockFacet2\");\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = hardhat_1.default.getSignatures(types_2.SmockFacet2__factory.abi);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: types_1.FacetCutAction.Add,\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait hardhat_1.default.Diamond.diamondCut([Cut2], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await hardhat_1.default.ethers.getContractAt(\"SmockFacet2\", hardhat_1.default.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, chai_1.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, chai_1.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "e473e775-f675-4b56-9df2-406f5467f2aa",
                  "parentUUID": "a948d678-1f28-468d-9d36-03f882cb1fbc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4208d7f-05a4-4229-86b0-2dd9347ee427",
                "358497d5-04a0-421c-9242-df0c4e9fc62f",
                "0a0eca35-c3ea-49af-b049-cf3b6755e94d",
                "e8f9622f-3844-49be-96d4-ac8c75e2acf7",
                "98d7578d-38a3-4868-bd31-cdd9c5c32852",
                "e473e775-f675-4b56-9df2-406f5467f2aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2908,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "bebf39b9-e9e0-419f-a2c9-c958202f5d03",
          "title": "KreskoAsset",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before all\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "0bf3ee81-1389-4cfa-8dbb-67a1235c1b24",
              "parentUUID": "bebf39b9-e9e0-419f-a2c9-c958202f5d03",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addr = await hardhat_1.default.getAddresses();",
              "err": {},
              "uuid": "4658f503-a8f4-4459-a7af-4cfe5d2a4093",
              "parentUUID": "bebf39b9-e9e0-419f-a2c9-c958202f5d03",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "fab07c33-7ed5-46a1-814c-eb69eafcd4cc",
              "parentUUID": "bebf39b9-e9e0-419f-a2c9-c958202f5d03",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "933fd0cd-f05c-499f-9d8e-7329da003dab",
              "title": "#initialization - anchor",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = this.krAssets.find(k => k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "162ba0ee-2723-4177-9ee6-c2f28bbcb017",
                  "parentUUID": "933fd0cd-f05c-499f-9d8e-7329da003dab",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(KreskoAsset.initialize(name, symbol, 18, addr.deployer, hardhat_1.default.Diamond.address)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "bdaebc28-d9d8-41f4-ba8c-ea86fca163d6",
                  "parentUUID": "933fd0cd-f05c-499f-9d8e-7329da003dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await hardhat_1.default.deployments.get(symbol);\nconst implementationAddress = deployment.implementation;\nconst KreskoAssetImpl = await hardhat_1.default.ethers.getContractAt(\"KreskoAsset\", implementationAddress);\nawait (0, chai_1.expect)(KreskoAssetImpl.initialize(name, symbol, 18, addr.deployer, hardhat_1.default.Diamond.address)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "cd1b5dfe-08ce-40b4-b9b5-690e6cdaa58f",
                  "parentUUID": "933fd0cd-f05c-499f-9d8e-7329da003dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await KreskoAsset.name()).to.equal(name);\n(0, chai_1.expect)(await KreskoAsset.symbol()).to.equal(symbol);\n(0, chai_1.expect)(await KreskoAsset.kresko()).to.equal(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(await KreskoAsset.hasRole(test_1.Role.ADMIN, addr.deployer)).to.equal(true);\n(0, chai_1.expect)(await KreskoAsset.hasRole(test_1.Role.OPERATOR, hardhat_1.default.Diamond.address)).to.equal(true);\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).to.equal(0);\n(0, chai_1.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "45510f14-3428-4c5a-a9ad-0e0527ad34dc",
                  "parentUUID": "933fd0cd-f05c-499f-9d8e-7329da003dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, chai_1.expect)(KreskoAsset.updateMetaData(newName, newSymbol, 2)).to.not.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);\n(0, chai_1.expect)(await KreskoAsset.name()).to.equal(newName);\n(0, chai_1.expect)(await KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "e2fea798-3a48-4d6b-b789-238ab7cfd95e",
                  "parentUUID": "933fd0cd-f05c-499f-9d8e-7329da003dab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bdaebc28-d9d8-41f4-ba8c-ea86fca163d6",
                "cd1b5dfe-08ce-40b4-b9b5-690e6cdaa58f",
                "45510f14-3428-4c5a-a9ad-0e0527ad34dc",
                "e2fea798-3a48-4d6b-b789-238ab7cfd95e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 74,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "02e5d027-3cf0-4568-a491-1b881587f22d",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - wrapped\"",
                  "fullTitle": "KreskoAsset #initialization - wrapped \"before each\" hook in \"#initialization - wrapped\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = hardhat_1.default.krAssets.find(k => k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "1770d39a-556c-40ff-b6b9-da86c8a57ea3",
                  "parentUUID": "02e5d027-3cf0-4568-a491-1b881587f22d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(KreskoAssetAnchor.initialize(KreskoAsset.address, name, symbol, addr.deployer)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "1d2ea766-36ac-4137-a0c0-a17a08e4f6a5",
                  "parentUUID": "02e5d027-3cf0-4568-a491-1b881587f22d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await hardhat_1.default.deployments.get(shared_1.anchorTokenPrefix + symbol);\nconst implementationAddress = deployment.implementation;\nconst KreskoAssetAnchorImpl = await hardhat_1.default.ethers.getContractAt(\"KreskoAssetAnchor\", implementationAddress);\nawait (0, chai_1.expect)(KreskoAssetAnchorImpl.initialize(KreskoAsset.address, name, symbol, addr.deployer)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "659017f7-f6bf-4c5d-89e7-c3386d8eb83f",
                  "parentUUID": "02e5d027-3cf0-4568-a491-1b881587f22d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, chai_1.expect)(KreskoAssetAnchor.updateMetaData(newName, newSymbol, 2)).to.not.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);\n(0, chai_1.expect)(await KreskoAssetAnchor.name()).to.equal(newName);\n(0, chai_1.expect)(await KreskoAssetAnchor.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "aa3b5642-6c5d-498e-9513-00d34f4af4b0",
                  "parentUUID": "02e5d027-3cf0-4568-a491-1b881587f22d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await KreskoAssetAnchor.name()).to.equal(name);\n(0, chai_1.expect)(await KreskoAssetAnchor.symbol()).to.equal(shared_1.anchorTokenPrefix + symbol);\n(0, chai_1.expect)(await KreskoAssetAnchor.asset()).to.equal(KreskoAsset.address);\n(0, chai_1.expect)(await KreskoAssetAnchor.hasRole(test_1.Role.ADMIN, addr.deployer)).to.equal(true);\n(0, chai_1.expect)(await KreskoAssetAnchor.hasRole(test_1.Role.OPERATOR, hardhat_1.default.Diamond.address)).to.equal(true);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(await KreskoAsset.totalSupply());\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).to.equal(0);\n(0, chai_1.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "80230f98-d3e0-4cba-b320-79b01a6a6d5d",
                  "parentUUID": "02e5d027-3cf0-4568-a491-1b881587f22d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d2ea766-36ac-4137-a0c0-a17a08e4f6a5",
                "659017f7-f6bf-4c5d-89e7-c3386d8eb83f",
                "aa3b5642-6c5d-498e-9513-00d34f4af4b0",
                "80230f98-d3e0-4cba-b320-79b01a6a6d5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 136,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f06277b9-deaf-4fdb-8e4f-faaa624b29ce",
          "title": "KreskoAsset",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before all\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "d503c46f-c7db-4fa1-8172-57f761711362",
              "parentUUID": "f06277b9-deaf-4fdb-8e4f-faaa624b29ce",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before all\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = await hardhat_1.default.getUsers();",
              "err": {},
              "uuid": "42f05ba0-4b7c-495f-9c90-388723fad41e",
              "parentUUID": "f06277b9-deaf-4fdb-8e4f-faaa624b29ce",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "a9847d8e-0ea5-4f05-9403-96d6e62c4afe",
              "parentUUID": "f06277b9-deaf-4fdb-8e4f-faaa624b29ce",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.owner = users.deployer;\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol);\nthis.mintAmount = 125;\nawait this.krAsset.contract.grantRole(test_1.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "3035fdc7-cde4-4999-8ed1-f0a6c9e33cab",
              "parentUUID": "f06277b9-deaf-4fdb-8e4f-faaa624b29ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "82fc7303-2d7a-4d04-8759-4aa072c2e590",
              "title": "#mint",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "1f070e9d-e11a-460a-9890-28b414d23182",
                  "parentUUID": "82fc7303-2d7a-4d04-8759-4aa072c2e590",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(users.userOne.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "b412ab83-1de1-4816-b744-da661be5055b",
                  "parentUUID": "82fc7303-2d7a-4d04-8759-4aa072c2e590",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait (0, chai_1.expect)(this.krAsset.contract.connect(users.userOne).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${users.userOne.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and all account balances unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "1f0f2170-0085-4d10-a4cb-52dd8701508f",
                  "parentUUID": "82fc7303-2d7a-4d04-8759-4aa072c2e590",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(this.krAsset.contract.connect(users.admin).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${users.admin.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);",
                  "err": {},
                  "uuid": "369525b6-f2b7-4a90-b047-ed4bf0e60b7f",
                  "parentUUID": "82fc7303-2d7a-4d04-8759-4aa072c2e590",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f070e9d-e11a-460a-9890-28b414d23182",
                "b412ab83-1de1-4816-b744-da661be5055b",
                "1f0f2170-0085-4d10-a4cb-52dd8701508f",
                "369525b6-f2b7-4a90-b047-ed4bf0e60b7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "a40e3946-e83d-4a9e-984d-16d735829877",
              "title": "#burn",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.mintAmount = 250;\nawait this.krAsset.contract.connect(this.owner).mint(users.userOne.address, this.mintAmount);",
                  "err": {},
                  "uuid": "3473fa41-03d7-485d-aaee-d0d368769c11",
                  "parentUUID": "a40e3946-e83d-4a9e-984d-16d735829877",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "5da3373d-4552-4e8c-9896-49e3af46e79b",
                  "parentUUID": "a40e3946-e83d-4a9e-984d-16d735829877",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.connect(this.owner).approve(users.userOne.address, this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.allowance(this.owner.address, users.userOne.address)).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, chai_1.expect)(await this.krAsset.contract.allowance(this.owner.address, users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "577efd78-2b87-451e-8963-316a72b85fc3",
                  "parentUUID": "a40e3946-e83d-4a9e-984d-16d735829877",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await this.krAsset.contract.balanceOf(users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\n// gh-actions fix\nif (process.env.TESTCI) {\n    await (0, chai_1.expect)(this.krAsset.contract.connect(this.owner).burn(users.userOne.address, overUserBalance)).to\n        .be.reverted;\n}\nelse {\n    await (0, chai_1.expect)(this.krAsset.contract.connect(this.owner).burn(users.userOne.address, overUserBalance)).to\n        .be.reverted;\n}\n// Check total supply and user's balances are unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "92acbfca-4530-476b-8667-6ac473c29c1b",
                  "parentUUID": "a40e3946-e83d-4a9e-984d-16d735829877",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(this.krAsset.contract.connect(users.userTwo).burn(users.userOne.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${users.userTwo.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and user's balances unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "d218c92c-f83e-4815-9b06-eaeaff425852",
                  "parentUUID": "a40e3946-e83d-4a9e-984d-16d735829877",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5da3373d-4552-4e8c-9896-49e3af46e79b",
                "577efd78-2b87-451e-8963-316a72b85fc3",
                "92acbfca-4530-476b-8667-6ac473c29c1b",
                "d218c92c-f83e-4815-9b06-eaeaff425852"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 137,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "3ff23bd9-ed5d-437c-bf31-0b2da8fd37f9",
          "title": "KreskoAsset",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before all\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addr = await hardhat_1.default.getAddresses();\nusers = await hardhat_1.default.getUsers();",
              "err": {},
              "uuid": "d0b4a46c-aed2-46c7-9389-66a203d8cf92",
              "parentUUID": "3ff23bd9-ed5d-437c-bf31-0b2da8fd37f9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before all\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "c2cc6e43-2179-4fde-9952-068320d0f3a3",
              "parentUUID": "3ff23bd9-ed5d-437c-bf31-0b2da8fd37f9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "1a29b0ff-fba0-40af-8e29-cf928532757c",
              "parentUUID": "3ff23bd9-ed5d-437c-bf31-0b2da8fd37f9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol).contract;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(test_1.Role.OPERATOR, addr.deployer);",
              "err": {},
              "uuid": "54a677ab-2f5c-43af-b800-ab8784e835ca",
              "parentUUID": "3ff23bd9-ed5d-437c-bf31-0b2da8fd37f9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "21c41027-6bc1-40aa-9960-f479c012ba7f",
              "title": "#rebase",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(\"1.525\");\nconst positive = true;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive)).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).equal(denominator);\n(0, chai_1.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "ee7e4a27-ec29-4969-987d-2fb634e5069c",
                  "parentUUID": "21c41027-6bc1-40aa-9960-f479c012ba7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(\"1.525\");\nconst positive = false;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive)).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).equal(denominator);\n(0, chai_1.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "a0924f40-6880-424b-98bd-7f4750e7deba",
                  "parentUUID": "21c41027-6bc1-40aa-9960-f479c012ba7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(1);\nconst positive = false;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive)).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "d9e4f93a-c20f-4e06-830b-acf9ade32255",
                  "parentUUID": "21c41027-6bc1-40aa-9960-f479c012ba7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "93131b2e-89a0-4798-94ae-98fc3a6c6f10",
                  "title": "#balance + supply",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 17,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);",
                      "err": {},
                      "uuid": "2b399b60-3193-499e-85e6-cea999103f90",
                      "parentUUID": "93131b2e-89a0-4798-94ae-98fc3a6c6f10",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "ecd544ae-85e8-4614-a295-925459e6725a",
                      "parentUUID": "93131b2e-89a0-4798-94ae-98fc3a6c6f10",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "3c70e811-9548-4ade-a88c-e4bc5a12775d",
                      "parentUUID": "93131b2e-89a0-4798-94ae-98fc3a6c6f10",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "6bfd362a-eb75-4d40-98df-9c8018d82ce8",
                      "parentUUID": "93131b2e-89a0-4798-94ae-98fc3a6c6f10",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "68479c4f-37fd-4438-a2cb-c07b461e40e7",
                      "parentUUID": "93131b2e-89a0-4798-94ae-98fc3a6c6f10",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "57d8305c-5a68-40e0-9781-38d336eed3ba",
                      "parentUUID": "93131b2e-89a0-4798-94ae-98fc3a6c6f10",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "a770f0f5-b99c-48cf-96bd-88a5e234b0cd",
                      "parentUUID": "93131b2e-89a0-4798-94ae-98fc3a6c6f10",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2b399b60-3193-499e-85e6-cea999103f90",
                    "ecd544ae-85e8-4614-a295-925459e6725a",
                    "3c70e811-9548-4ade-a88c-e4bc5a12775d",
                    "6bfd362a-eb75-4d40-98df-9c8018d82ce8",
                    "68479c4f-37fd-4438-a2cb-c07b461e40e7",
                    "57d8305c-5a68-40e0-9781-38d336eed3ba",
                    "a770f0f5-b99c-48cf-96bd-88a5e234b0cd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 185,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "9153b435-dd3f-4698-bd6f-ec6a74b66af6",
                  "title": "#transfer",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "d34d6f18-e969-4d71-bbd7-d18c2d78e49b",
                      "parentUUID": "9153b435-dd3f-4698-bd6f-ec6a74b66af6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "a5391cae-24d7-4baf-a47f-3dfb688c0e7b",
                      "parentUUID": "9153b435-dd3f-4698-bd6f-ec6a74b66af6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 131,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(users.userOne).transferFrom(addr.deployer, addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(users.userOne).transferFrom(addr.deployer, addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(addr.deployer, addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "30fe465f-7864-4a11-b3b9-50f66320638c",
                      "parentUUID": "9153b435-dd3f-4698-bd6f-ec6a74b66af6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 145,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(addr.userOne, test_1.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(users.userOne).transferFrom(addr.deployer, addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(users.userOne).transferFrom(addr.deployer, addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(addr.deployer, addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "886161e3-e792-45e7-a0c7-c877c8f34548",
                      "parentUUID": "9153b435-dd3f-4698-bd6f-ec6a74b66af6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 147,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(users.userOne).transferFrom(addr.deployer, addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(users.userOne).transferFrom(addr.deployer, addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(addr.deployer, addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "61983080-b984-483d-bf28-4e4848076b6a",
                      "parentUUID": "9153b435-dd3f-4698-bd6f-ec6a74b66af6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 139,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(addr.userOne, test_1.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(users.userOne).transferFrom(addr.deployer, addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(users.userOne).transferFrom(addr.deployer, addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(addr.deployer, addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "b33523e7-7b84-42af-ba80-b78d0ab9a746",
                      "parentUUID": "9153b435-dd3f-4698-bd6f-ec6a74b66af6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d34d6f18-e969-4d71-bbd7-d18c2d78e49b",
                    "a5391cae-24d7-4baf-a47f-3dfb688c0e7b",
                    "30fe465f-7864-4a11-b3b9-50f66320638c",
                    "886161e3-e792-45e7-a0c7-c877c8f34548",
                    "61983080-b984-483d-bf28-4e4848076b6a",
                    "b33523e7-7b84-42af-ba80-b78d0ab9a746"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 681,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "ee7e4a27-ec29-4969-987d-2fb634e5069c",
                "a0924f40-6880-424b-98bd-7f4750e7deba",
                "d9e4f93a-c20f-4e06-830b-acf9ade32255"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 77,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "8d450d36-1fc6-4f2f-a9c8-e445a1680415",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before all\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "1b83ae0b-baef-4eb8-a501-3c717f21fbbe",
              "parentUUID": "8d450d36-1fc6-4f2f-a9c8-e445a1680415",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "a638a4ab-c35e-4c34-8cd2-3386a1952471",
              "parentUUID": "8d450d36-1fc6-4f2f-a9c8-e445a1680415",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addr = await hardhat_1.default.getAddresses();\nconst asset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol);\nKreskoAsset = asset.contract;\nKreskoAssetAnchor = asset.anchor;\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(test_1.Role.OPERATOR, addr.deployer),\n    KreskoAssetAnchor.grantRole(test_1.Role.OPERATOR, addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hardhat_1.default.ethers.constants.MaxUint256),\n]);",
              "err": {},
              "uuid": "85b31d67-096d-4af4-8f08-cc1a9d67e42c",
              "parentUUID": "8d450d36-1fc6-4f2f-a9c8-e445a1680415",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c9d97b05-2685-4bd1-98b3-871fd2f514ff",
              "title": "#minting and burning",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(test_1.defaultMintAmount.add(test_1.defaultMintAmount));\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "74de686f-7c1b-4686-9a8a-46926fc49958",
                  "parentUUID": "c9d97b05-2685-4bd1-98b3-871fd2f514ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 92,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "baaa30fd-319d-4aa6-aa83-6733cb042c37",
                  "parentUUID": "c9d97b05-2685-4bd1-98b3-871fd2f514ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "ece75a8f-0565-4961-be94-4a8c17a22d04",
                  "parentUUID": "c9d97b05-2685-4bd1-98b3-871fd2f514ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 186,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, addr.deployer);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, addr.deployer, addr.deployer);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "f70110b4-e378-4780-9665-fad99236aa9c",
                  "parentUUID": "c9d97b05-2685-4bd1-98b3-871fd2f514ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, addr.deployer);\nawait KreskoAssetAnchor.withdraw(test_1.defaultMintAmount, addr.deployer, addr.deployer);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "90ba650c-856e-41b4-92dc-32ada8b0b7c5",
                  "parentUUID": "c9d97b05-2685-4bd1-98b3-871fd2f514ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "95e01ac6-1205-402b-9cf0-07d77dc206df",
                  "title": "#rebases",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "0e30ae3e-c438-4607-9573-b3ea344e006f",
                      "title": "#conversions",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 238,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, addr.deployer);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, addr.deployer, addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "52de7579-6409-4b39-baf9-d360aefb18a2",
                          "parentUUID": "0e30ae3e-c438-4607-9573-b3ea344e006f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 247,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, addr.deployer);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, addr.deployer, addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "619aa629-15cb-41c4-ba92-65c79bef0d2b",
                          "parentUUID": "0e30ae3e-c438-4607-9573-b3ea344e006f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 230,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, addr.deployer);\nconst denominator = 6;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, addr.deployer, addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "c2571e6e-08ff-401b-bf35-914cc4b261f2",
                          "parentUUID": "0e30ae3e-c438-4607-9573-b3ea344e006f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 237,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, addr.deployer);\nconst denominator = 6;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, addr.deployer, addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "f6a312ed-6f60-43f0-a90e-4d3ca813305f",
                          "parentUUID": "0e30ae3e-c438-4607-9573-b3ea344e006f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 217,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, addr.deployer);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, addr.deployer, addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "99322919-b21c-464d-a306-378c16095470",
                          "parentUUID": "0e30ae3e-c438-4607-9573-b3ea344e006f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 350,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, addr.deployer);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, addr.deployer, addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "a182fec0-a1ed-4c96-9c0a-a13d2720329b",
                          "parentUUID": "0e30ae3e-c438-4607-9573-b3ea344e006f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 262,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, addr.deployer);\nconst denominator = 6;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, addr.deployer, addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "d5b11aa2-ac58-4330-a79e-98670bbb9b63",
                          "parentUUID": "0e30ae3e-c438-4607-9573-b3ea344e006f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 230,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, addr.deployer);\nconst denominator = 6;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, addr.deployer, addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "e9e34804-c17a-4886-b15a-9b56034e3fe6",
                          "parentUUID": "0e30ae3e-c438-4607-9573-b3ea344e006f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "52de7579-6409-4b39-baf9-d360aefb18a2",
                        "619aa629-15cb-41c4-ba92-65c79bef0d2b",
                        "c2571e6e-08ff-401b-bf35-914cc4b261f2",
                        "f6a312ed-6f60-43f0-a90e-4d3ca813305f",
                        "99322919-b21c-464d-a306-378c16095470",
                        "a182fec0-a1ed-4c96-9c0a-a13d2720329b",
                        "d5b11aa2-ac58-4330-a79e-98670bbb9b63",
                        "e9e34804-c17a-4886-b15a-9b56034e3fe6"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2011,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "74de686f-7c1b-4686-9a8a-46926fc49958",
                "baaa30fd-319d-4aa6-aa83-6733cb042c37",
                "ece75a8f-0565-4961-be94-4a8c17a22d04",
                "f70110b4-e378-4780-9665-fad99236aa9c",
                "90ba650c-856e-41b4-92dc-32ada8b0b7c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 615,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "51e02020-1290-4380-a26c-90d1c6f4cc9b",
          "title": "Minter",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/00-init.ts",
          "file": "/src/test/minter/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Minter\"",
              "fullTitle": "Minter \"before all\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "5571d4a2-4cc4-4033-94b4-da4e7b580cfd",
              "parentUUID": "51e02020-1290-4380-a26c-90d1c6f4cc9b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "efad3aad-70f2-4e5b-b640-c722aaed7757",
              "parentUUID": "51e02020-1290-4380-a26c-90d1c6f4cc9b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9f1c5281-f5f4-4022-8163-215da90bc9d9",
              "title": "#initialization",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/00-init.ts",
              "file": "/src/test/minter/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct initial state",
                  "fullTitle": "Minter #initialization sets correct initial state",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.minterInitializations()).to.equal(1);\nconst { args } = await (0, shared_1.getMinterInitializer)(hardhat_1.default);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.OPERATOR, args.operator)).to.equal(true);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.SAFETY_COUNCIL, hardhat_1.default.Multisig.address)).to.equal(true);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.feeRecipient()).to.equal(args.feeRecipient);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue).to.equal(args.liquidationIncentiveMultiplier);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.minimumCollateralizationRatio()).rawValue).to.equal(args.minimumCollateralizationRatio);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.minimumDebtValue()).rawValue).to.equal(args.minimumDebtValue);",
                  "err": {},
                  "uuid": "769449fc-c316-40a0-9e44-1fb1fd52e923",
                  "parentUUID": "9f1c5281-f5f4-4022-8163-215da90bc9d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize twice",
                  "fullTitle": "Minter #initialization cant initialize twice",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const initializer = await (0, shared_1.getMinterInitializer)(hardhat_1.default);\nconst initializerContract = await hardhat_1.default.ethers.getContract(initializer.name);\nconst tx = await initializerContract.populateTransaction.initialize(initializer.args);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.upgradeState(tx.to, tx.data)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED);",
                  "err": {},
                  "uuid": "09245188-fe45-4396-8578-1e0f8dce9f63",
                  "parentUUID": "9f1c5281-f5f4-4022-8163-215da90bc9d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures all facets correctly",
                  "fullTitle": "Minter #initialization configures all facets correctly",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await hardhat_1.default.Diamond.facets()).map(([facetAddress, functionSelectors]) => ({\n    facetAddress,\n    functionSelectors,\n}));\n(0, chai_1.expect)(facetsOnChain).to.have.deep.members(hardhat_1.default.DiamondDeployment.facets.map(f => ({\n    facetAddress: f.facetAddress,\n    functionSelectors: f.functionSelectors,\n})));",
                  "err": {},
                  "uuid": "67204e32-ae04-49c2-8624-738d22a2d41a",
                  "parentUUID": "9f1c5281-f5f4-4022-8163-215da90bc9d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "769449fc-c316-40a0-9e44-1fb1fd52e923",
                "09245188-fe45-4396-8578-1e0f8dce9f63",
                "67204e32-ae04-49c2-8624-738d22a2d41a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "82be96bc-8b1f-458c-ba20-73145ba2b2f1",
          "title": "Minter",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Minter\"",
              "fullTitle": "Minter \"before all\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = await hardhat_1.default.getUsers();",
              "err": {},
              "uuid": "f8b3c7de-5d84-4519-b3a1-e071b5dc3060",
              "parentUUID": "82be96bc-8b1f-458c-ba20-73145ba2b2f1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Minter\"",
              "fullTitle": "Minter \"before all\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "66973137-b166-4e6d-a8ba-faed2b414555",
              "parentUUID": "82be96bc-8b1f-458c-ba20-73145ba2b2f1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 24,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "8a985156-6906-4b33-8785-55058accf80b",
              "parentUUID": "82be96bc-8b1f-458c-ba20-73145ba2b2f1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c6056038-3115-4790-9177-4a8f426330ac",
              "title": "#configuration",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Diamond = hardhat_1.default.Diamond.connect(users.operator);\nconst update = (0, test_1.getNewMinterParams)(users.operator.address);\nawait (0, chai_1.expect)(Diamond.updateLiquidationIncentiveMultiplier(update.liquidationIncentiveMultiplier)).to.not.be\n    .reverted;\nawait (0, chai_1.expect)(Diamond.updateMinimumCollateralizationRatio(update.minimumCollateralizationRatio)).to.not.be\n    .reverted;\nawait (0, chai_1.expect)(Diamond.updateMinimumDebtValue(update.minimumDebtValue)).to.not.be.reverted;\nawait (0, chai_1.expect)(Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, chai_1.expect)(Diamond.updateFeeRecipient(update.feeRecipient)).to.not.be.reverted;\nconst { liquidationIncentiveMultiplier, minimumCollateralizationRatio, minimumDebtValue, liquidationThreshold, feeRecipient, } = await hardhat_1.default.Diamond.getAllParams();\n(0, chai_1.expect)(update.liquidationIncentiveMultiplier.toBigInt()).to.equal(liquidationIncentiveMultiplier.rawValue);\n(0, chai_1.expect)(update.minimumCollateralizationRatio.toBigInt()).to.equal(minimumCollateralizationRatio.rawValue);\n(0, chai_1.expect)(update.minimumDebtValue.toBigInt()).to.equal(minimumDebtValue.rawValue);\n(0, chai_1.expect)(update.liquidationThreshold.toBigInt()).to.equal(liquidationThreshold.rawValue);\n(0, chai_1.expect)(update.feeRecipient).to.equal(feeRecipient);",
                  "err": {},
                  "uuid": "b498f903-ece5-431e-8b56-7cef512d5286",
                  "parentUUID": "c6056038-3115-4790-9177-4a8f426330ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 1879,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract } = await (0, collaterals_1.addMockCollateralAsset)(test_1.defaultCollateralArgs);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.collateralExists(contract.address)).to.equal(true);\nconst [, oraclePrice] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(contract.address, hardhat_1.default.toBig(1), true);\n(0, chai_1.expect)(Number(oraclePrice)).to.equal(hardhat_1.default.toBig(test_1.defaultCollateralArgs.price, 8));",
                  "err": {},
                  "uuid": "79465d5a-0c55-4000-aaf9-12e60cf392b8",
                  "parentUUID": "c6056038-3115-4790-9177-4a8f426330ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 2455,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, kresko } = await (0, krassets_1.addMockKreskoAsset)();\nconst values = await kresko();\nconst kreskoPriceAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.krAssetExists(contract.address)).to.equal(true);\n(0, chai_1.expect)(values.exists).to.equal(true);\n(0, chai_1.expect)(Number(values.kFactor)).to.equal(Number((0, lib_1.toFixedPoint)(test_1.defaultKrAssetArgs.factor)));\n(0, chai_1.expect)(kreskoPriceAnswer).to.equal(test_1.defaultKrAssetArgs.price);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.supplyLimit)).to.equal(test_1.defaultKrAssetArgs.supplyLimit);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.closeFee.rawValue)).to.equal(test_1.defaultKrAssetArgs.closeFee);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.openFee.rawValue)).to.equal(test_1.defaultKrAssetArgs.openFee);",
                  "err": {},
                  "uuid": "2692c253-f590-4cdc-8774-d3f7d45932b8",
                  "parentUUID": "c6056038-3115-4790-9177-4a8f426330ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update AMM oracle",
                  "fullTitle": "Minter #configuration can update AMM oracle",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ammOracle = await smock_1.smock.fake(\"UniswapV2Oracle\");\nawait hardhat_1.default.Diamond.updateAMMOracle(ammOracle.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.ammOracle()).to.equal(ammOracle.address);",
                  "err": {},
                  "uuid": "b4484894-7304-470d-8a48-b67c3f5d722f",
                  "parentUUID": "c6056038-3115-4790-9177-4a8f426330ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter #configuration can update external oracle decimals",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hardhat_1.default.Diamond.updateExtOracleDecimals(decimals);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.extOracleDecimals()).to.equal(decimals);",
                  "err": {},
                  "uuid": "2502eae5-8270-411b-b415-c3eb6bbf449e",
                  "parentUUID": "c6056038-3115-4790-9177-4a8f426330ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter #configuration can update values of a kresko asset",
                  "timedOut": false,
                  "duration": 2797,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, anchor, priceFeed } = await (0, krassets_1.addMockKreskoAsset)();\nconst oracleAnswer = hardhat_1.default.fromBig(await priceFeed.latestAnswer(), 8);\nconst kreskoAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(oracleAnswer).to.equal(kreskoAnswer);\n(0, chai_1.expect)(oracleAnswer).to.equal(test_1.defaultKrAssetArgs.price);\nconst update = {\n    factor: (0, lib_1.toFixedPoint)(1.2),\n    supplyLimit: 12000,\n    price: 20,\n    closeFee: (0, lib_1.toFixedPoint)(0.02),\n    openFee: (0, lib_1.toFixedPoint)(0.02),\n};\nconst [newPriceFeed] = await (0, test_1.getMockOracleFor)(await contract.name(), update.price);\nawait hardhat_1.default.Diamond.connect(users.operator).updateKreskoAsset(contract.address, anchor.address, update.factor, newPriceFeed.address, newPriceFeed.address, hardhat_1.default.toBig(update.supplyLimit), update.closeFee, update.openFee);\nconst newValues = await hardhat_1.default.Diamond.kreskoAsset(contract.address);\nconst updatedOracleAnswer = hardhat_1.default.fromBig(await newPriceFeed.latestAnswer(), 8);\nconst newKreskoAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(newValues.exists).to.equal(true);\n(0, chai_1.expect)(Number(newValues.kFactor)).to.equal(Number(update.factor));\n(0, chai_1.expect)(hardhat_1.default.fromBig(newValues.supplyLimit)).to.equal(update.supplyLimit);\n(0, chai_1.expect)(updatedOracleAnswer).to.equal(newKreskoAnswer);\n(0, chai_1.expect)(updatedOracleAnswer).to.equal(update.price);",
                  "err": {},
                  "uuid": "47de48d3-4c2a-4847-8ac3-0c6ce0c678f6",
                  "parentUUID": "c6056038-3115-4790-9177-4a8f426330ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b498f903-ece5-431e-8b56-7cef512d5286",
                "79465d5a-0c55-4000-aaf9-12e60cf392b8",
                "2692c253-f590-4cdc-8774-d3f7d45932b8",
                "b4484894-7304-470d-8a48-b67c3f5d722f",
                "2502eae5-8270-411b-b415-c3eb6bbf449e",
                "47de48d3-4c2a-4847-8ac3-0c6ce0c678f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7226,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "4e335e3b-5d08-46a3-a989-19371028948c",
          "title": "Minter",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Minter\"",
              "fullTitle": "Minter \"before all\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = await hardhat_1.default.getUsers();",
              "err": {},
              "uuid": "79c6c78a-5ee6-4391-83d3-49ac96b11698",
              "parentUUID": "4e335e3b-5d08-46a3-a989-19371028948c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Minter\"",
              "fullTitle": "Minter \"before all\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "f9ce3667-21b2-4dfc-aee5-54bb27ad04b2",
              "parentUUID": "4e335e3b-5d08-46a3-a989-19371028948c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 24,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "7ff8ef48-5965-4633-810e-879a2460cedc",
              "parentUUID": "4e335e3b-5d08-46a3-a989-19371028948c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.initialBalance = (0, lib_1.toBig)(100000);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [users.userOne.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(users.userOne.address)).to.equal(this.initialBalance);\nthis.depositArgs = {\n    user: users.userOne,\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(10000),\n};",
              "err": {},
              "uuid": "5517f1a6-2e2c-4901-b1ea-9a59da82f233",
              "parentUUID": "4e335e3b-5d08-46a3-a989-19371028948c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "72c73953-04ed-462f-a01b-f48126eaa3ba",
              "title": "#collateral",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "5e4bfd37-a6f7-4803-8417-9801060db5f2",
                  "title": "#deposit",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Account has no deposited assets\nconst depositedCollateralAssetsBefore = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Account now has deposited assets\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Account's collateral deposit balances have increased\n(0, chai_1.expect)(await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address)).to.equal(this.depositArgs.amount);\n// Kresko contract's collateral balance has increased\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address)).to.equal(this.depositArgs.amount);\n// Account's collateral balance has decreased\n(0, chai_1.expect)((0, lib_1.fromBig)(await this.collateral.contract.balanceOf(users.userOne.address))).to.equal((0, lib_1.fromBig)(this.initialBalance) - (0, lib_1.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "a5d6ba04-c4b9-4a29-a506-912ec778367e",
                      "parentUUID": "5e4bfd37-a6f7-4803-8417-9801060db5f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 41,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load arbitrary user with sufficient collateral for testing purposes\nconst arbitraryUser = users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userThree).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositArgs.amount);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositArgs.amount);\n// Confirm the depositor's (arbitraryUser) wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await this.collateral.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)((0, lib_1.fromBig)(depositorBalanceAfter)).to.equal((0, lib_1.fromBig)(this.initialBalance) - (0, lib_1.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "74ea6875-482a-4735-bb01-01db04d9bb21",
                      "parentUUID": "5e4bfd37-a6f7-4803-8417-9801060db5f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositArgs.amount.add(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "6cb0c1b3-229e-4928-96b3-9f1f7cf2f1d3",
                      "parentUUID": "5e4bfd37-a6f7-4803-8417-9801060db5f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 1502,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nconst collateralArgs = {\n    name: \"SecondCollateral\",\n    price: _test_utils_1.defaultOraclePrice,\n    factor: 1,\n    decimals: _test_utils_1.defaultDecimals,\n};\nconst { contract, mocks } = await (0, collaterals_1.addMockCollateralAsset)(collateralArgs);\nawait mocks.contract.setVariable(\"_balances\", {\n    [users.userOne.address]: this.initialBalance,\n});\nawait mocks.contract.setVariable(\"_allowances\", {\n    [users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n// Deposit batch of first collateral type\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, contract.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address, contract.address]);",
                      "err": {},
                      "uuid": "739da460-4f83-402f-aef7-bf4051fac6da",
                      "parentUUID": "5e4bfd37-a6f7-4803-8417-9801060db5f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 20,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount);\nconst event = await (0, lib_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, this.depositArgs.user), \"CollateralDeposited\");\n(0, chai_1.expect)(event.account).to.equal(this.depositArgs.user.address);\n(0, chai_1.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.amount).to.equal(this.depositArgs.amount);",
                      "err": {},
                      "uuid": "32c69205-d53f-46b3-a2fc-6738730da1b2",
                      "parentUUID": "5e4bfd37-a6f7-4803-8417-9801060db5f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 11,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, \"0x0000000000000000000000000000000000000001\", this.depositArgs.amount)).to.be.revertedWith(errors_1.Error.COLLATERAL_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "c8087264-2c78-48f8-9b9a-ded901dcd0f1",
                      "parentUUID": "5e4bfd37-a6f7-4803-8417-9801060db5f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, 0)).to.be.revertedWith(errors_1.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "a371273d-f1b0-4a86-9a7e-4467f8884872",
                      "parentUUID": "5e4bfd37-a6f7-4803-8417-9801060db5f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer, devTwo, extOne } = await hardhat_1.default.ethers.getNamedSigners();\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, 0], [deployer, devTwo, extOne]);\nconst isDepositPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isDepositPaused).to.equal(true);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, 0)).to.be.revertedWith(errors_1.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "9f669782-934a-4808-9c8d-471f2b54cc34",
                      "parentUUID": "5e4bfd37-a6f7-4803-8417-9801060db5f2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a5d6ba04-c4b9-4a29-a506-912ec778367e",
                    "74ea6875-482a-4735-bb01-01db04d9bb21",
                    "6cb0c1b3-229e-4928-96b3-9f1f7cf2f1d3",
                    "739da460-4f83-402f-aef7-bf4051fac6da",
                    "32c69205-d53f-46b3-a2fc-6738730da1b2",
                    "c8087264-2c78-48f8-9b9a-ded901dcd0f1",
                    "a371273d-f1b0-4a86-9a7e-4467f8884872",
                    "9f669782-934a-4808-9c8d-471f2b54cc34"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1723,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "7b993d2a-62f8-4473-b384-b863ff288a99",
                  "title": "#withdraw",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw\"",
                      "fullTitle": "Minter #collateral #withdraw \"before each\" hook in \"#withdraw\"",
                      "timedOut": false,
                      "duration": 19,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, this.depositArgs.amount)).not.to.be.reverted;\nthis.collateral = this.collaterals[0];\nthis.depositAmount = this.depositArgs.amount;",
                      "err": {},
                      "uuid": "51652246-038e-4fdf-8589-e9176ef7f9e0",
                      "parentUUID": "7b993d2a-62f8-4473-b384-b863ff288a99",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "ac5fc1e9-d5c1-4afd-bca9-3d06d0459307",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 56,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\nawait hardhat_1.default.Diamond.connect(users.userOne).withdrawCollateral(users.userOne.address, this.collateral.address, this.depositAmount, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await hardhat_1.default.Diamond.getDepositedCollateralAssets(users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await this.collateral.contract.balanceOf(users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance);",
                          "err": {},
                          "uuid": "3b984a55-fc3f-4699-b2c1-9af4156f3fda",
                          "parentUUID": "ac5fc1e9-d5c1-4afd-bca9-3d06d0459307",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 46,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = this.depositAmount.div(2);\nawait hardhat_1.default.Diamond.connect(users.userOne).withdrawCollateral(users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance.sub(amountDeposited));",
                          "err": {},
                          "uuid": "4449d695-97b7-4f3c-a4bd-cdb15cf0ff15",
                          "parentUUID": "ac5fc1e9-d5c1-4afd-bca9-3d06d0459307",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 61,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(users.deployer).grantRole(_test_utils_1.Role.MANAGER, users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, users.userThree.address)).to.equal(true);\nconst collateralBefore = await hardhat_1.default.Diamond.collateralDeposits(users.userOne.address, this.collateral.address);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userThree).withdrawCollateral(users.userOne.address, this.collateral.address, this.depositAmount, 0)).to.not.be.reverted;\nconst collateralAfter = await hardhat_1.default.Diamond.collateralDeposits(users.userOne.address, this.collateral.address);\n// Ensure that collateral was withdrawn\n(0, chai_1.expect)(collateralAfter).to.equal(collateralBefore.sub(this.depositAmount));",
                          "err": {},
                          "uuid": "6ecc73a8-2706-481c-879d-1a9428704e66",
                          "parentUUID": "ac5fc1e9-d5c1-4afd-bca9-3d06d0459307",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 27,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await hardhat_1.default.Diamond.connect(users.userOne).withdrawCollateral(users.userOne.address, this.collateral.address, this.depositAmount, 0);\nconst event = await (0, lib_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, users.userOne), \"CollateralWithdrawn\");\n(0, chai_1.expect)(event.account).to.equal(users.userOne.address);\n(0, chai_1.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.amount).to.equal(this.depositAmount);",
                          "err": {},
                          "uuid": "2c38665b-488e-4b95-b92d-c87756ec2c0c",
                          "parentUUID": "ac5fc1e9-d5c1-4afd-bca9-3d06d0459307",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 22,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userThree).withdrawCollateral(users.userOne.address, this.collateral.address, this.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "3e042618-b688-4790-a069-00f1dd2f2f7b",
                          "parentUUID": "ac5fc1e9-d5c1-4afd-bca9-3d06d0459307",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "4f6d9ead-50dd-4454-b006-661df1d884ff",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 73,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "this.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\n// userOne mints some kr assets\nthis.mintAmount = (0, lib_1.toBig)(100);\nawait hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(users.userOne.address, this.collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await hardhat_1.default.Diamond.minimumCollateralizationRatio();",
                              "err": {},
                              "uuid": "d1fa6c50-7d0d-41f7-8809-b864b6c74328",
                              "parentUUID": "4f6d9ead-50dd-4454-b006-661df1d884ff",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 106,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, lib_1.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(users.userOne.address, this.mcr);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(users.userOne.address);\nconst [withdrawnCollateralValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, chai_1.expect)(accountCollateralValue.rawValue\n    .sub(withdrawnCollateralValue.rawValue)\n    .gte(accountMinCollateralValue.rawValue)).to.be.true;\nawait hardhat_1.default.Diamond.connect(users.userOne).withdrawCollateral(users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance.sub(this.depositAmount.sub(withdrawAmount)));\n// Ensure the account's minimum collateral value is <= the account collateral value\n// These are FixedPoint.Unsigned, be sure to use `rawValue` when appropriate!\nconst accountMinCollateralValueAfter = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(users.userOne.address, this.mcr);\nconst accountCollateralValueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(users.userOne.address);\n(0, chai_1.expect)(accountMinCollateralValueAfter.rawValue.lte(accountCollateralValueAfter.rawValue)).to.be\n    .true;",
                              "err": {},
                              "uuid": "a3c8f0b5-4db9-400d-a2f4-e04591fdbd09",
                              "parentUUID": "4f6d9ead-50dd-4454-b006-661df1d884ff",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 110,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const user = users.userFour;\nawait this.collateral.setBalance(user, ethers_1.BigNumber.from(0));\nawait this.collateral.setBalance(user, (0, lib_1.toBig)(1000));\nawait this.collateral.contract\n    .connect(user)\n    .approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(1000),\n    user,\n});\nawait (0, collaterals_1.withdrawCollateral)({\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(1010),\n    user,\n});\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(user.address)).to.equal((0, lib_1.toBig)(1000));",
                              "err": {},
                              "uuid": "a6b64e2c-8f71-45a7-a61f-59654475f673",
                              "parentUUID": "4f6d9ead-50dd-4454-b006-661df1d884ff",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 9,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).withdrawCollateral(users.userOne.address, this.collateral.address, 0, withdrawAmount)).to.be.revertedWith(errors_1.Error.ZERO_WITHDRAW);",
                              "err": {},
                              "uuid": "4742511e-0e5e-4291-87c3-faa40858bab2",
                              "parentUUID": "4f6d9ead-50dd-4454-b006-661df1d884ff",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 61,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = this.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(users.userOne.address, this.mcr);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(users.userOne.address);\nconst [withdrawnCollateralValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, chai_1.expect)(accountCollateralValue.rawValue\n    .sub(withdrawnCollateralValue.rawValue)\n    .lt(accountMinCollateralValue.rawValue)).to.be.true;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).withdrawCollateral(users.userOne.address, this.collateral.address, withdrawAmount, 0)).to.be.revertedWith(errors_1.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                              "err": {},
                              "uuid": "8ea3474b-b92a-4951-8864-b689982fba85",
                              "parentUUID": "4f6d9ead-50dd-4454-b006-661df1d884ff",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 16,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).withdrawCollateral(users.userOne.address, this.collateral.address, withdrawAmount, 1)).to.be.revertedWith(errors_1.Error.ARRAY_OUT_OF_BOUNDS);",
                              "err": {},
                              "uuid": "860f8a16-2ec5-4280-af3d-4861c7b76ccc",
                              "parentUUID": "4f6d9ead-50dd-4454-b006-661df1d884ff",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "a3c8f0b5-4db9-400d-a2f4-e04591fdbd09",
                            "a6b64e2c-8f71-45a7-a61f-59654475f673",
                            "4742511e-0e5e-4291-87c3-faa40858bab2",
                            "8ea3474b-b92a-4951-8864-b689982fba85",
                            "860f8a16-2ec5-4280-af3d-4861c7b76ccc"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 302,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 15000
                        }
                      ],
                      "passes": [
                        "3b984a55-fc3f-4699-b2c1-9af4156f3fda",
                        "4449d695-97b7-4f3c-a4bd-cdb15cf0ff15",
                        "6ecc73a8-2706-481c-879d-1a9428704e66",
                        "2c38665b-488e-4b95-b92d-c87756ec2c0c",
                        "3e042618-b688-4790-a069-00f1dd2f2f7b"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 212,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "e2f5a5f7-67e3-44c0-9b07-b0ac4165d5ff",
                  "title": "#deposit - rebase events",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase events\"",
                      "fullTitle": "Minter #collateral #deposit - rebase events \"before each\" hook in \"#deposit - rebase events\"",
                      "timedOut": false,
                      "duration": 116,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = hardhat_1.default.users.userThree;\narbitraryUserDiamond = hardhat_1.default.Diamond.connect(arbitraryUser);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.krAsset = this.krAssets.find(k => k.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(users.operator).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// Allowance for Kresko\nawait this.krAsset.contract\n    .connect(arbitraryUser)\n    .approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait arbitraryUserDiamond.mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await arbitraryUserDiamond.kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "fcedc030-64a3-46c0-b383-31d54acf32ed",
                      "parentUUID": "e2f5a5f7-67e3-44c0-9b07-b0ac4165d5ff",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "9c3704cd-7462-4771-a4d1-54cb3b510a34",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 69,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(expectedDepositsAfter);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "20471470-1feb-4c99-a40b-2d696039a663",
                          "parentUUID": "9c3704cd-7462-4771-a4d1-54cb3b510a34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 130,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmountAfterRebase);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "78979bf1-b44d-4adb-8f83-4740fdd7a3e7",
                          "parentUUID": "9c3704cd-7462-4771-a4d1-54cb3b510a34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 69,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "f4f5b848-f083-4713-b268-3b48cb43368a",
                          "parentUUID": "9c3704cd-7462-4771-a4d1-54cb3b510a34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 67,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "b0e7c310-8d60-4750-9974-c72f18af1ff1",
                          "parentUUID": "9c3704cd-7462-4771-a4d1-54cb3b510a34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 81,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "261334e9-c95f-4b4f-be54-2b910185dca9",
                          "parentUUID": "9c3704cd-7462-4771-a4d1-54cb3b510a34",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 89,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get deposits after\nconst depositsAfterRebase = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfterRebase).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "e4bbf95a-1a0c-4dbc-bb7d-89a2067390bb",
                          "parentUUID": "9c3704cd-7462-4771-a4d1-54cb3b510a34",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "20471470-1feb-4c99-a40b-2d696039a663",
                        "78979bf1-b44d-4adb-8f83-4740fdd7a3e7",
                        "f4f5b848-f083-4713-b268-3b48cb43368a",
                        "b0e7c310-8d60-4750-9974-c72f18af1ff1",
                        "261334e9-c95f-4b4f-be54-2b910185dca9",
                        "e4bbf95a-1a0c-4dbc-bb7d-89a2067390bb"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 505,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "851826e5-7d15-4c02-8fb1-eec62be75e27",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 97,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get collateral value of account after\nconst valueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(valueBefore.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "b104bfdc-7585-4bbe-b6ca-d548303dcef9",
                          "parentUUID": "851826e5-7d15-4c02-8fb1-eec62be75e27",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 81,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get collateral value of account after\nconst valueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(valueBefore.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "993a15ac-6f14-48cb-afff-c5949807c76e",
                          "parentUUID": "851826e5-7d15-4c02-8fb1-eec62be75e27",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 74,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "60f2bd50-a77e-4dcc-8bb9-d475ca046808",
                          "parentUUID": "851826e5-7d15-4c02-8fb1-eec62be75e27",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 65,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "9f7ab90b-0261-4d2a-a9d3-8b850a3dea80",
                          "parentUUID": "851826e5-7d15-4c02-8fb1-eec62be75e27",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 107,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(finalValue.rawValue).to.bignumber.equal(expectedValueAfterSecondDeposit.rawValue);",
                          "err": {},
                          "uuid": "26ab5ba7-a5e9-4987-a851-27343613966c",
                          "parentUUID": "851826e5-7d15-4c02-8fb1-eec62be75e27",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 106,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(finalValue.rawValue).to.bignumber.equal(expectedValueAfterSecondDeposit.rawValue);",
                          "err": {},
                          "uuid": "47905838-8cea-4a5e-b5d5-4b775c8082b2",
                          "parentUUID": "851826e5-7d15-4c02-8fb1-eec62be75e27",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b104bfdc-7585-4bbe-b6ca-d548303dcef9",
                        "993a15ac-6f14-48cb-afff-c5949807c76e",
                        "60f2bd50-a77e-4dcc-8bb9-d475ca046808",
                        "9f7ab90b-0261-4d2a-a9d3-8b850a3dea80",
                        "26ab5ba7-a5e9-4987-a851-27343613966c",
                        "47905838-8cea-4a5e-b5d5-4b775c8082b2"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 530,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "55b89af4-2bd9-4271-8254-9b81b2bef6e9",
                  "title": "#withdraw - rebase events",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase events\"",
                      "fullTitle": "Minter #collateral #withdraw - rebase events \"before each\" hook in \"#withdraw - rebase events\"",
                      "timedOut": false,
                      "duration": 114,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = users.userThree;\narbitraryUserDiamond = hardhat_1.default.Diamond.connect(arbitraryUser);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.krAsset = this.krAssets.find(k => k.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(users.operator).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// Allowance for Kresko\nawait this.krAsset.contract\n    .connect(arbitraryUser)\n    .approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait arbitraryUserDiamond.mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await arbitraryUserDiamond.kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "fbb6f0df-09bc-4780-a449-0067ae21ad9d",
                      "parentUUID": "55b89af4-2bd9-4271-8254-9b81b2bef6e9",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "e73a0b5e-232b-48b6-9cbd-7ec6e9da1bd1",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positiveing rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before positiveing rebase",
                          "timedOut": false,
                          "duration": 118,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "1996090a-3ad8-4494-b72b-0ae9b841a943",
                          "parentUUID": "e73a0b5e-232b-48b6-9cbd-7ec6e9da1bd1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 107,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "5fe262c4-7caf-4897-a89c-f448bbdb5a1f",
                          "parentUUID": "e73a0b5e-232b-48b6-9cbd-7ec6e9da1bd1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 117,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "e4703bd4-0e9d-4926-8a64-b840782287c6",
                          "parentUUID": "e73a0b5e-232b-48b6-9cbd-7ec6e9da1bd1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 104,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "d58ee741-670e-4712-9c03-bac1f77dd9a6",
                          "parentUUID": "e73a0b5e-232b-48b6-9cbd-7ec6e9da1bd1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positiveing rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 185,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "11c9daec-d3c0-49d1-b671-f0b3cd2eef1a",
                          "parentUUID": "e73a0b5e-232b-48b6-9cbd-7ec6e9da1bd1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 159,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "d44c9195-04a7-45c4-8163-2e14108f5399",
                          "parentUUID": "e73a0b5e-232b-48b6-9cbd-7ec6e9da1bd1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 94,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, lib_1.toBig)(10);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await this.collateral.contract.balanceOf(arbitraryUser.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "4962fdaa-9d83-49c3-bd1b-32ec88be7eb2",
                          "parentUUID": "e73a0b5e-232b-48b6-9cbd-7ec6e9da1bd1",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "1996090a-3ad8-4494-b72b-0ae9b841a943",
                        "5fe262c4-7caf-4897-a89c-f448bbdb5a1f",
                        "e4703bd4-0e9d-4926-8a64-b840782287c6",
                        "d58ee741-670e-4712-9c03-bac1f77dd9a6",
                        "11c9daec-d3c0-49d1-b671-f0b3cd2eef1a",
                        "d44c9195-04a7-45c4-8163-2e14108f5399",
                        "4962fdaa-9d83-49c3-bd1b-32ec88be7eb2"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 884,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "b257eedd-9a11-4e20-af17-4a5d53a0b684",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positiveing rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before positiveing rebase",
                          "timedOut": false,
                          "duration": 101,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "a42b3e8e-0190-4027-b237-6c1d8e4fd8b0",
                          "parentUUID": "b257eedd-9a11-4e20-af17-4a5d53a0b684",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 123,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "2c237939-5550-4b1b-8663-909f1b872712",
                          "parentUUID": "b257eedd-9a11-4e20-af17-4a5d53a0b684",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 106,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "ee10267c-cdc4-4a9d-9b29-6f287f21fcac",
                          "parentUUID": "b257eedd-9a11-4e20-af17-4a5d53a0b684",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 110,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "dc013c43-670e-4640-9460-55e637a4c0e0",
                          "parentUUID": "b257eedd-9a11-4e20-af17-4a5d53a0b684",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positiveing rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 228,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "b3141a1c-e965-43c8-9f38-1c5f9e366849",
                          "parentUUID": "b257eedd-9a11-4e20-af17-4a5d53a0b684",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 157,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "118d7e8b-172c-40e6-9fff-b35082777496",
                          "parentUUID": "b257eedd-9a11-4e20-af17-4a5d53a0b684",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 271,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, lib_1.toBig)(10);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [nrcValueBefore] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.collateral.address);\nconst [withdrawValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\nconst expectedNrcValueAfter = nrcValueBefore.rawValue.sub(withdrawValue.rawValue);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\nconst finalAccountValue = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.collateral.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(expectedNrcValueAfter);\n(0, chai_1.expect)(finalAccountValue.rawValue).to.bignumber.equal(accountValueBefore.rawValue.sub(withdrawValue.rawValue));",
                          "err": {},
                          "uuid": "24398d9c-7941-413c-b6f1-b8287fa3829e",
                          "parentUUID": "b257eedd-9a11-4e20-af17-4a5d53a0b684",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a42b3e8e-0190-4027-b237-6c1d8e4fd8b0",
                        "2c237939-5550-4b1b-8663-909f1b872712",
                        "ee10267c-cdc4-4a9d-9b29-6f287f21fcac",
                        "dc013c43-670e-4640-9460-55e637a4c0e0",
                        "b3141a1c-e965-43c8-9f38-1c5f9e366849",
                        "118d7e8b-172c-40e6-9fff-b35082777496",
                        "24398d9c-7941-413c-b6f1-b8287fa3829e"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1096,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "02ce8387-c2ae-4cfd-9648-f257f93e2b8d",
          "title": "Minter",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Minter\"",
              "fullTitle": "Minter \"before all\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "a326aaba-78b0-4c40-96b7-cab1683372b8",
              "parentUUID": "02ce8387-c2ae-4cfd-9648-f257f93e2b8d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "66712822-0641-4a06-bc5c-dc635e5d083e",
              "parentUUID": "02ce8387-c2ae-4cfd-9648-f257f93e2b8d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 132,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = hardhat_1.default.users;\n// -------------------------------- Set up mock assets --------------------------------\nconst collateralArgs = {\n    name: \"CollateralAsset\",\n    price: 10,\n    factor: 1,\n    decimals: 18,\n};\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.collateral = await this.collateral.update(collateralArgs);\nthis.collateral.setPrice(collateralArgs.price);\n// Set up mock KreskoAsset\nconst krAssetArgs = {\n    name: \"KreskoAsset\",\n    price: 11,\n    factor: 1,\n    supplyLimit: 100000000,\n    closeFee: _test_utils_1.defaultCloseFee,\n    openFee: _test_utils_1.defaultOpenFee,\n};\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\nthis.krAsset.setPrice(krAssetArgs.price);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.operator).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// -------------------------------- Set up userOne deposit/debt --------------------------------\nawait this.collateral.setBalance(hardhat_1.default.users.liquidator, hardhat_1.default.toBig(100000000));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.liquidator.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(100000000),\n    },\n});\n// Deposit collateral\nthis.defaultDepositAmount = 20; // 20 * $10 = $200 in collateral asset value\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount),\n    },\n});\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount,\n    asset: this.collateral,\n});\n// // Mint KrAsset\nthis.defaultMintAmount = 10; // 10 * $11 = $110 in debt value\nawait (0, krassets_1.mintKrAsset)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultMintAmount,\n    asset: this.krAsset,\n});",
              "err": {},
              "uuid": "ad61d969-b7dd-4c19-815e-8756a13a5f07",
              "parentUUID": "02ce8387-c2ae-4cfd-9648-f257f93e2b8d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c5750d04-f2f1-447e-b066-e09d396a9089",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#maxLiquidatableValue\"",
                  "fullTitle": "Minter #maxLiquidatableValue \"before each\" hook in \"#maxLiquidatableValue\"",
                  "timedOut": false,
                  "duration": 1280,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "user = hardhat_1.default.users.userOne;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount * 100));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount * 100),\n    },\n});\nnewCollateral = await (0, collaterals_1.addMockCollateralAsset)({ name: \"Coll\", decimals: 8, price: 10, factor: 0.9 });\nawait newCollateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount * 100, 8));\nawait newCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount * 100, 8),\n    },\n});",
                  "err": {},
                  "uuid": "85d93664-d73d-4aca-88fa-9fce65854277",
                  "parentUUID": "c5750d04-f2f1-447e-b066-e09d396a9089",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct max liquidation with single market cdp",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct max liquidation with single market cdp",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral,\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, this.collateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, this.collateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValue).to.equal(maxLiquidatableValue.rawValue);",
                  "err": {},
                  "uuid": "01046edd-5234-4489-910c-6e6d37ef2176",
                  "parentUUID": "c5750d04-f2f1-447e-b066-e09d396a9089",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct max liquidation with multiple cdps",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct max liquidation with multiple cdps",
                  "timedOut": false,
                  "duration": 239,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral,\n});\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: (0, lib_1.toBig)(0.1, 8),\n    asset: newCollateral,\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, this.collateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, this.collateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValue).to.equal(maxLiquidatableValue.rawValue);\nconst expectedMaxLiquidatableValueNewCollateral = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, newCollateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValueNewCollateral.gt(0)).to.be.true;\nconst maxLiquidatableValueNewCollateral = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, newCollateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValueNewCollateral).to.equal(maxLiquidatableValueNewCollateral.rawValue);",
                  "err": {},
                  "uuid": "d4bf16b3-329e-42ac-ae34-6e3ca556f8ba",
                  "parentUUID": "c5750d04-f2f1-447e-b066-e09d396a9089",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01046edd-5234-4489-910c-6e6d37ef2176",
                "d4bf16b3-329e-42ac-ae34-6e3ca556f8ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 359,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "71dc28bc-ca3d-4028-b7b8-489e6d578989",
              "title": "#liquidation",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "ee38002b-5e75-4d69-b14c-da5c9c96644c",
                  "title": "#isAccountLiquidatable",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should identify accounts below their liquidation threshold",
                      "fullTitle": "Minter #liquidation #isAccountLiquidatable should identify accounts below their liquidation threshold",
                      "timedOut": false,
                      "duration": 71,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that current amount is under min collateral value\nconst liquidationThreshold = await hardhat_1.default.Diamond.liquidationThreshold();\nconst minCollateralUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(users.userOne.address, liquidationThreshold);\n(0, chai_1.expect)(this.defaultDepositAmount * this.collateral.deployArgs.price >\n    hardhat_1.default.fromBig(minCollateralUSD.rawValue, 8));\n// The account should be NOT liquidatable as collateral value ($200) >= min collateral value ($154)\nconst initialCanLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(users.userOne.address);\n(0, chai_1.expect)(initialCanLiquidate).to.equal(false);\n// Update collateral price to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);\nconst [, newCollateralOraclePrice] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, hardhat_1.default.toBig(1), true);\n(0, chai_1.expect)(hardhat_1.default.fromBig(newCollateralOraclePrice.rawValue, 8)).to.equal(newCollateralPrice);\n// The account should be liquidatable as collateral value ($140) < min collateral value ($154)\nconst secondaryCanLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(users.userOne.address);\n(0, chai_1.expect)(secondaryCanLiquidate).to.equal(true);",
                      "err": {},
                      "uuid": "f9821f72-b6dc-4595-b4b5-1f749f81b57c",
                      "parentUUID": "ee38002b-5e75-4d69-b14c-da5c9c96644c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f9821f72-b6dc-4595-b4b5-1f749f81b57c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 71,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                  "title": "#liquidate",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userTwo tokens to use for liquidation\nawait this.krAsset.mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userTwo.address]: hardhat_1.default.toBig(10000),\n});\n// Update collateral price from $10 to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);",
                      "err": {},
                      "uuid": "9c54fa23-ac8d-4181-b117-ef7adb97319b",
                      "parentUUID": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 169,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm we can liquidate this account\nconst canLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(users.userOne.address);\n(0, chai_1.expect)(canLiquidate).to.equal(true);\n// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(users.userOne.address, this.collateral.address);\nconst beforeUserOneDebtAmount = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\nconst beforeUserTwoCollateralBalance = await this.collateral.contract.balanceOf(users.userTwo.address);\nconst beforeUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(users.userTwo.address);\nconst beforeKreskoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n// Liquidate userOne\nconst maxLiq = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(users.userOne.address, this.krAsset.address, this.collateral.address);\nconst maxRepayAmount = hardhat_1.default.toBig(Number(maxLiq.rawValue.div(await this.krAsset.getPrice())));\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(users.userTwo).liquidate(users.userOne.address, this.krAsset.address, maxRepayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst afterUserOneDebtAmount = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(afterUserOneDebtAmount.eq(beforeUserOneDebtAmount.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst afterUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(afterUserOneCollateralAmount.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\nconst afterUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(users.userTwo.address);\n(0, chai_1.expect)(afterUserTwoKreskoAssetBalance.eq(beforeUserTwoKreskoAssetBalance.sub(maxRepayAmount)));\n// Confirm that userTwo has received some collateral from the contract\nconst afterUserTwoCollateralBalance = await this.collateral.contract.balanceOf(users.userTwo.address);\n(0, chai_1.expect)(afterUserTwoCollateralBalance).gt(beforeUserTwoCollateralBalance);\n// Confirm that Kresko contract's collateral balance has decreased.\nconst afterKreskoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(afterKreskoCollateralBalance).lt(beforeKreskoCollateralBalance);",
                      "err": {},
                      "uuid": "194d4488-b16d-4a6f-bdbd-5f63df067880",
                      "parentUUID": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 78,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt liquidation\nconst repayAmount = 10; // userTwo holds Kresko assets that can be used to repay userOne's loan\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(users.userTwo).liquidate(users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\nconst event = await (0, lib_1.getInternalEvent)(tx, typechain_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, users.userTwo), \"LiquidationOccurred\");\n(0, chai_1.expect)(event.account).to.equal(users.userOne.address);\n(0, chai_1.expect)(event.liquidator).to.equal(users.userTwo.address);\n(0, chai_1.expect)(event.repayKreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.repayAmount).to.equal(repayAmount);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);",
                      "err": {},
                      "uuid": "a7481768-1983-453c-ac6f-8217dbf662f6",
                      "parentUUID": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 61,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Update collateral price from $5 to $10\nconst newCollateralPrice = 10;\nthis.collateral.setPrice(newCollateralPrice);\n// Confirm that the account has sufficient collateral to not be liquidated\nconst liquidationThreshold = await hardhat_1.default.Diamond.liquidationThreshold();\nconst minimumCollateralUSDValueRequired = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(users.userOne.address, liquidationThreshold);\nconst currUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(hardhat_1.default.fromBig(currUserOneCollateralAmount) * newCollateralPrice >\n    hardhat_1.default.fromBig(minimumCollateralUSDValueRequired.rawValue, 8));\nconst canLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(users.userOne.address);\n(0, chai_1.expect)(canLiquidate).to.equal(false);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userTwo).liquidate(users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "3e0e5b3b-d7f4-4dac-9dbb-e2e35c1528c2",
                      "parentUUID": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userTwo).liquidate(users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.ZERO_REPAY);",
                      "err": {},
                      "uuid": "59a1e1e1-0da8-4beb-afa8-3db80a399ac9",
                      "parentUUID": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add(hardhat_1.default.toBig(1));\n// Liquidation should fail\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userTwo).liquidate(users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.KRASSET_BURN_AMOUNT_OVERFLOW);",
                      "err": {},
                      "uuid": "a55434ce-ba77-43e9-8d64-50cf2f80e42b",
                      "parentUUID": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "timedOut": false,
                      "duration": 66,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const maxLiquidation = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(users.userOne.address, this.krAsset.address, this.collateral.address)).rawValue, 8);\nconst repaymentAmount = hardhat_1.default.toBig((maxLiquidation + 1) / this.krAsset.deployArgs.price);\n// Ensure liquidation cannot happen\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userTwo).liquidate(users.userOne.address, this.krAsset.address, repaymentAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.LIQUIDATION_OVERFLOW);",
                      "err": {},
                      "uuid": "3f69b74c-b958-44dc-b92d-c84d5f297910",
                      "parentUUID": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 77,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.collateral.setPrice(this.collateral.deployArgs.price);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(users.userOne.address)).to.be.false;\nconst minCollateralUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(users.userOne.address, await hardhat_1.default.Diamond.minimumCollateralizationRatio());\nconst liquidationThresholdUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(users.userOne.address, await hardhat_1.default.Diamond.liquidationThreshold());\nthis.collateral.setPrice(this.collateral.deployArgs.price * 0.775);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(users.userOne.address);\n(0, chai_1.expect)(accountCollateralValue.rawValue.lt(minCollateralUSD.rawValue)).to.be.true;\n(0, chai_1.expect)(accountCollateralValue.rawValue.gt(liquidationThresholdUSD.rawValue)).to.be.true;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(users.userOne.address)).to.be.false;",
                      "err": {},
                      "uuid": "a9a84015-2909-4930-8a3d-0b4e1a1740d9",
                      "parentUUID": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "fullTitle": "Minter #liquidation #liquidate should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 102,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, chai_1.expect)(await this.krAsset.contract.allowance(users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(0);\n// Liquidation should succeed despite lack of token approval\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(users.userTwo).liquidate(users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\n// Confirm that liquidator's token approval is still 0\n(0, chai_1.expect)(await this.krAsset.contract.allowance(users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "a24642a2-487d-4d55-a7fe-d2a1c0a0cfb6",
                      "parentUUID": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 96,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidator increases contract's token approval\nconst repayAmount = 10;\nawait this.krAsset.contract.connect(users.userTwo).approve(hardhat_1.default.Diamond.address, repayAmount);\n(0, chai_1.expect)(await this.krAsset.contract.allowance(users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(repayAmount);\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userTwo).liquidate(users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, chai_1.expect)(await this.krAsset.contract.allowance(users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "792c354c-9ddd-4e20-b9ef-8faea3170076",
                      "parentUUID": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).liquidate(users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.SELF_LIQUIDATION);",
                      "err": {},
                      "uuid": "ff6821fe-5e16-4ffb-9a47-f04f9be65b9a",
                      "parentUUID": "bf0eb1c5-6f0c-4575-9ad5-f9453ef9118d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "194d4488-b16d-4a6f-bdbd-5f63df067880",
                    "a7481768-1983-453c-ac6f-8217dbf662f6",
                    "3e0e5b3b-d7f4-4dac-9dbb-e2e35c1528c2",
                    "59a1e1e1-0da8-4beb-afa8-3db80a399ac9",
                    "a55434ce-ba77-43e9-8d64-50cf2f80e42b",
                    "3f69b74c-b958-44dc-b92d-c84d5f297910",
                    "a9a84015-2909-4930-8a3d-0b4e1a1740d9",
                    "a24642a2-487d-4d55-a7fe-d2a1c0a0cfb6",
                    "792c354c-9ddd-4e20-b9ef-8faea3170076",
                    "ff6821fe-5e16-4ffb-9a47-f04f9be65b9a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 725,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "cd589c65-4877-4b0a-b98f-c0977903bf39",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 616,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "userToLiquidate = hardhat_1.default.users.userThree;\nuserToLiquidateTwo = hardhat_1.default.users.userFour;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\n// Deposit collateral for liquidator\nawait (0, collaterals_1.depositCollateral)({\n    user: users.liquidator,\n    asset: this.collateral,\n    amount: liquidatorAmounts.collateralDeposits,\n});\nawait (0, _test_utils_1.leverageKrAsset)(userToLiquidate, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nawait (0, _test_utils_1.leverageKrAsset)(userToLiquidateTwo, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\n// 1.5 = collateral value === debt value * MCR\n(0, chai_1.expect)(await (0, _test_utils_1.getHealthFactor)(userToLiquidate)).to.lessThanOrEqual(1.51);\n(0, chai_1.expect)(await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo)).to.lessThanOrEqual(1.51);\n// not liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.false;",
                      "err": {},
                      "uuid": "743655ab-2f4c-421a-a4c0-52636c9d1cd6",
                      "parentUUID": "cd589c65-4877-4b0a-b98f-c0977903bf39",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 87,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address))).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "6b60053e-f1ef-4458-86fd-137c3e0235d2",
                      "parentUUID": "cd589c65-4877-4b0a-b98f-c0977903bf39",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address))).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "a57645b0-1eef-4fae-b5dc-8404d907ca6c",
                      "parentUUID": "cd589c65-4877-4b0a-b98f-c0977903bf39",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 365,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.collateral.setPrice(5);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.collateral);",
                      "err": {},
                      "uuid": "6af20985-8e0c-402f-b861-ee680a4708f8",
                      "parentUUID": "cd589c65-4877-4b0a-b98f-c0977903bf39",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 486,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.krAsset.setPrice(rebasePrice * 2);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, chai_1.expect)((0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.collateral)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "92c6da43-38d2-411c-a8d8-b320ea85f59a",
                      "parentUUID": "cd589c65-4877-4b0a-b98f-c0977903bf39",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 1134,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0,\n};\n// Get values for a liquidation that happens before rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidate.address)).rawValue, 8);\nresults.userOneHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidate);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidateTwo.address)).rawValue, 8);\nresults.userTwoHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo);\n(0, chai_1.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.collateralSeized * denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.debtRepaid * denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "39a8c5c2-0f68-44c9-93a9-443dc2eecc2f",
                      "parentUUID": "cd589c65-4877-4b0a-b98f-c0977903bf39",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 872,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0,\n};\n// Get values for a liquidation that happens before rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidate.address)).rawValue, 8);\nresults.userOneHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidate);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidateTwo.address)).rawValue, 8);\nresults.userTwoHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo);\n(0, chai_1.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.collateralSeized / denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.debtRepaid / denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "d4112df6-2184-47ed-96c5-6011e20d3d17",
                      "parentUUID": "cd589c65-4877-4b0a-b98f-c0977903bf39",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6b60053e-f1ef-4458-86fd-137c3e0235d2",
                    "a57645b0-1eef-4fae-b5dc-8404d907ca6c",
                    "6af20985-8e0c-402f-b861-ee680a4708f8",
                    "92c6da43-38d2-411c-a8d8-b320ea85f59a",
                    "39a8c5c2-0f68-44c9-93a9-443dc2eecc2f",
                    "d4112df6-2184-47ed-96c5-6011e20d3d17"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3038,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "6ec84ed5-3fdf-4654-aecb-e5fb37f0165d",
          "title": "Minter",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Minter\"",
              "fullTitle": "Minter \"before all\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = await hardhat_1.default.getUsers();",
              "err": {},
              "uuid": "7647142d-d3dc-426e-8c78-bc3a31c9467d",
              "parentUUID": "6ec84ed5-3fdf-4654-aecb-e5fb37f0165d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Minter\"",
              "fullTitle": "Minter \"before all\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "77fa2aa3-2269-41a5-ae8f-20a042e6701b",
              "parentUUID": "6ec84ed5-3fdf-4654-aecb-e5fb37f0165d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "72a256ae-0e38-4982-a692-58612a04067a",
              "parentUUID": "6ec84ed5-3fdf-4654-aecb-e5fb37f0165d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 57,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.krAsset = this.krAssets.find(c => c.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, users.deployer.address);\nthis.krAsset.setPrice(this.krAsset.deployArgs.price);\nthis.krAsset.setMarketOpen(this.krAsset.deployArgs.marketOpen);\n// Load account with collateral\nthis.initialBalance = (0, lib_1.toBig)(100000);\nawait this.collateral.setBalance(users.userOne, this.initialBalance);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.collateral.setPrice(this.collateral.deployArgs.price);\n// User deposits 10,000 collateral\nawait (0, collaterals_1.depositCollateral)({ amount: 10000, user: users.userOne, asset: this.collateral });",
              "err": {},
              "uuid": "7a394435-fafc-411e-a75a-fcb72ff146e9",
              "parentUUID": "6ec84ed5-3fdf-4654-aecb-e5fb37f0165d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f89c2f84-41d1-4cb2-af82-f638f6bcbdd7",
              "title": "#mint+burn",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                  "title": "#mint",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 87,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await this.krAsset.mocks.contract.balanceOf(users.userOne.address);\n(0, chai_1.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "7cddfbdd-dcec-40e2-8287-d0aa77cdd337",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 158,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, lib_1.toBig)(5);\nawait hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(users.userOne.address);\n(0, chai_1.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, lib_1.toBig)(5);\nawait hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsFinal).to.deep.equal([this.krAsset.address]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await this.krAsset.contract.balanceOf(users.userOne.address);\n(0, chai_1.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "f0b7ea1f-2532-4eb0-8d60-45532e5de58d",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 2116,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(users.userOne.address);\n(0, chai_1.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Add second mock krAsset to protocol\nconst secondKrAssetArgs = {\n    name: \"SecondKreskoAsset\",\n    symbol: \"SecondKreskoAsset\",\n    price: 5,\n    marketOpen: true,\n    factor: 1,\n    supplyLimit: 100000,\n    closeFee: _test_utils_1.defaultCloseFee,\n    openFee: 0,\n};\nconst { contract: secondKreskoAsset } = await (0, krassets_1.addMockKreskoAsset)(secondKrAssetArgs);\n// Mint Kresko asset\nconst secondMintAmount = (0, lib_1.toBig)(2);\nawait hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, secondKreskoAsset.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsFinal).to.deep.equal([this.krAsset.address, secondKreskoAsset.address]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, secondKreskoAsset.address);\n(0, chai_1.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await secondKreskoAsset.balanceOf(users.userOne.address);\n(0, chai_1.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await secondKreskoAsset.totalSupply();\n(0, chai_1.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "2cf200e9-62b9-429b-96bb-27accc0ee455",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 81,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, lib_1.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await hardhat_1.default.Diamond.minimumDebtValue();\n(0, chai_1.expect)((0, lib_1.fromBig)(mintAmountUSDValue.rawValue, 8)).to.equal(Number(currMinimumDebtValue) / 10 ** 8);\nawait hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "056aa06b-640d-453c-aab9-cb657c7410ff",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(users.deployer).grantRole(_test_utils_1.Role.MANAGER, users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, users.userThree.address)).to.equal(true);\n// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(users.userThree).mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userOneDebtFromUserThreeMint = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userOneDebtFromUserThreeMint).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "46ed4b50-e5a9-425c-a58b-605297332fff",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mintAmount = (0, lib_1.toBig)(500);\nconst tx = await hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\nconst event = await (0, lib_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, users.userOne), \"KreskoAssetMinted\");\n(0, chai_1.expect)(event.account).to.equal(users.userOne.address);\n(0, chai_1.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.amount).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "a84df240-6a29-49b1-8f51-e9dc20dc59d6",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 34,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, lib_1.toBig)(1);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userTwo.address, this.krAsset.address, mintAmount)).to.be.revertedWith(`AccessControl: account ${users.userOne.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "6e335961-9f33-43c0-af94-de36b64f6215",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 54,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is below the contract's current minimum debt value\nconst minAmount = 100000000; // 8 decimals\nconst mintAmount = minAmount - 1;\nconst mintAmountUSDValue = await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await hardhat_1.default.Diamond.minimumDebtValue();\n(0, chai_1.expect)(Number(mintAmountUSDValue)).to.be.lessThan(Number(currMinimumDebtValue));\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(errors_1.Error.KRASSET_MINT_AMOUNT_LOW);",
                      "err": {},
                      "uuid": "eb6038f6-bcba-4746-b1dc-105edc4923dc",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, \"0x0000000000000000000000000000000000000002\", (0, lib_1.toBig)(1))).to.be.revertedWith(errors_1.Error.KRASSET_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "e41ab269-2bc6-4b77-bad4-5ce815428c8e",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// We can ignore price and collateral factor as both this.collateral and this.krAsset both\n// have the same price ($10) and same collateral factor (1)\nconst collateralAmountDeposited = await hardhat_1.default.Diamond.collateralDeposits(users.userOne.address, this.collateral.address);\n// Apply 150% MCR and increase deposit amount to be above the maximum allowed by MCR\nconst mcrAmount = (0, lib_1.fromBig)(collateralAmountDeposited) / 1.5;\nconst mintAmount = (0, lib_1.toBig)(mcrAmount + 1);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(errors_1.Error.KRASSET_COLLATERAL_LOW);",
                      "err": {},
                      "uuid": "022df738-4d72-46ca-851f-1fe7f7a0dc60",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).depositCollateral(users.userOne.address, this.collateral.address, (0, lib_1.toBig)(10000))).not.to.be.reverted;\nconst krAsset = await hardhat_1.default.Diamond.kreskoAsset(this.krAsset.address);\nconst overSupplyLimit = (0, lib_1.fromBig)(krAsset.supplyLimit) + 1;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(overSupplyLimit))).to.be.revertedWith(errors_1.Error.KRASSET_MAX_SUPPLY_REACHED);",
                      "err": {},
                      "uuid": "976a10c6-828a-47c3-b9b7-6e385cb37446",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.krAsset.setMarketOpen(false);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(1))).to.be.revertedWith(errors_1.Error.KRASSET_MARKET_CLOSED);\n// Confirm that the user has no minted krAssets\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Confirm that opening the market makes krAsset mintable again\nthis.krAsset.setMarketOpen(true);\nawait hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(1));\n// Confirm the array of the user's minted Kresko assets has been pushed to\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);",
                      "err": {},
                      "uuid": "fafbcb29-9c89-4908-9d09-7dff97b57d10",
                      "parentUUID": "017c201e-097a-4f48-b46d-6d2a4a0275b9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7cddfbdd-dcec-40e2-8287-d0aa77cdd337",
                    "f0b7ea1f-2532-4eb0-8d60-45532e5de58d",
                    "2cf200e9-62b9-429b-96bb-27accc0ee455",
                    "056aa06b-640d-453c-aab9-cb657c7410ff",
                    "46ed4b50-e5a9-425c-a58b-605297332fff",
                    "a84df240-6a29-49b1-8f51-e9dc20dc59d6",
                    "6e335961-9f33-43c0-af94-de36b64f6215",
                    "eb6038f6-bcba-4746-b1dc-105edc4923dc",
                    "e41ab269-2bc6-4b77-bad4-5ce815428c8e",
                    "022df738-4d72-46ca-851f-1fe7f7a0dc60",
                    "976a10c6-828a-47c3-b9b7-6e385cb37446",
                    "fafbcb29-9c89-4908-9d09-7dff97b57d10"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2807,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "6fe40af3-8a84-45be-9dbe-ace22e5a87c4",
                  "title": "#mint - rebase events",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "754c9ad0-8e27-482f-a3c2-f579cc0b6431",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 86,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "db5bc6ad-6685-4116-89d9-b82707299b34",
                          "parentUUID": "754c9ad0-8e27-482f-a3c2-f579cc0b6431",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 78,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "a03e35d0-f5f8-47b1-a3fd-14cfcfd77152",
                          "parentUUID": "754c9ad0-8e27-482f-a3c2-f579cc0b6431",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 77,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "022839cf-9e81-4b87-9ec3-64023378c240",
                          "parentUUID": "754c9ad0-8e27-482f-a3c2-f579cc0b6431",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 78,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "8ffffb1a-4b85-411f-b239-54ecb91cf557",
                          "parentUUID": "754c9ad0-8e27-482f-a3c2-f579cc0b6431",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "db5bc6ad-6685-4116-89d9-b82707299b34",
                        "a03e35d0-f5f8-47b1-a3fd-14cfcfd77152",
                        "022839cf-9e81-4b87-9ec3-64023378c240",
                        "8ffffb1a-4b85-411f-b239-54ecb91cf557"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 319,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "64d3f0ff-512d-4b92-a8b5-da4662d4ddcd",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 118,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "f2823a33-2cd6-479e-a13a-b0beda9ba4b1",
                          "parentUUID": "64d3f0ff-512d-4b92-a8b5-da4662d4ddcd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 103,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "803ce14d-743f-4c8f-b7ba-27a31ec03ca4",
                          "parentUUID": "64d3f0ff-512d-4b92-a8b5-da4662d4ddcd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 97,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice, 8) / denominator);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "21bfe7d4-847e-47a2-9b42-77ac29d67645",
                          "parentUUID": "64d3f0ff-512d-4b92-a8b5-da4662d4ddcd",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 113,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.mul(denominator), 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "397d61df-212e-472e-8983-87ff216c5045",
                          "parentUUID": "64d3f0ff-512d-4b92-a8b5-da4662d4ddcd",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f2823a33-2cd6-479e-a13a-b0beda9ba4b1",
                        "803ce14d-743f-4c8f-b7ba-27a31ec03ca4",
                        "21bfe7d4-847e-47a2-9b42-77ac29d67645",
                        "397d61df-212e-472e-8983-87ff216c5045"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 431,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "69d1f918-2961-4e17-a5b1-941e345a41ed",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 223,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(users.userOne.address);\n// Assert\n(0, chai_1.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, chai_1.expect)(valueBeforeRebase.rawValue).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n// Adjust price and rebase\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(users.userOne.address);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterFirstRebase.rawValue, this.krAsset)).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterFirstRebase.rawValue, this.krAsset)).to.bignumber.equal(valueBeforeRebase.rawValue);\n// Mint after rebase\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await this.krAsset.contract.balanceOf(users.userOne.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterSecondMint).to.bignumber.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(users.userOne.address);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterSecondMint.rawValue, this.krAsset)).to.bignumber.closeTo(debtValueAfterFirstMint.rawValue.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(valueBeforeRebase.rawValue.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "e24feb1b-3aa4-411f-9518-60635faa9b7c",
                          "parentUUID": "69d1f918-2961-4e17-a5b1-941e345a41ed",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 247,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(users.userOne.address);\n// Assert\n(0, chai_1.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, chai_1.expect)(valueBeforeRebase.rawValue).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n// Adjust price and rebase\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(users.userOne.address);\n(0, chai_1.expect)(debtValueAfterFirstRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(debtValueAfterFirstMint.rawValue, this.krAsset));\n(0, chai_1.expect)(debtValueAfterFirstRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));\n// Mint after rebase\nawait userOne.mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(users.userOne.address);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(await (0, calculations_1.toScaledAmount)(debtValueAfterFirstMint.rawValue.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "008b9a46-1877-488a-a0f3-cc4a80e9a202",
                          "parentUUID": "69d1f918-2961-4e17-a5b1-941e345a41ed",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "e24feb1b-3aa4-411f-9518-60635faa9b7c",
                        "008b9a46-1877-488a-a0f3-cc4a80e9a202"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 470,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                  "title": "#burn",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 135,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Create userOne debt position\nthis.mintAmount = (0, lib_1.toBig)(2);\nawait hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, this.mintAmount);\n// Load userThree with Kresko Assets\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [users.userThree.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [users.userThree.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(users.userThree.address)).to.equal(this.initialBalance);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userThree).depositCollateral(users.userThree.address, this.collateral.address, (0, lib_1.toBig)(10000))).not.to.be.reverted;\nawait hardhat_1.default.Diamond.connect(users.userThree).mintKreskoAsset(users.userThree.address, this.krAsset.address, this.mintAmount);",
                      "err": {},
                      "uuid": "c3fecde3-5203-4596-8ce0-002aaf1eefd9",
                      "parentUUID": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 85,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, lib_1.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(users.userOne).burnKreskoAsset(users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(users.userOne.address);\n(0, chai_1.expect)(userBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "2c32ca4f-6f4c-4e1e-a6f1-2adfa39e958e",
                      "parentUUID": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "beccaa4a-19f8-4248-97af-26ece9950688",
                      "parentUUID": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 128,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(users.deployer).grantRole(_test_utils_1.Role.MANAGER, users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, users.userThree.address)).to.equal(true);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, lib_1.toBig)(1);\nconst kreskoAssetIndex = 0;\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userThree).burnKreskoAsset(users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await this.krAsset.contract.balanceOf(users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.mintAmount);\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await this.krAsset.contract.balanceOf(users.userThree.address);\n(0, chai_1.expect)(userThreeBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userOneDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "4860832e-6b5a-4d0d-bddb-fb78e99a30f4",
                      "parentUUID": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "49d4d4af-329f-445c-ad4e-588542c312dc",
                      "parentUUID": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 96,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await this.krAsset.contract.balanceOf(users.userOne.address);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\nconst minDebtValue = (0, lib_1.fromBig)((await hardhat_1.default.Diamond.minimumDebtValue()).rawValue, 8);\nconst oraclePrice = this.krAsset.deployArgs.price;\nconst burnAmount = hardhat_1.default.toBig((0, lib_1.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(users.userOne).burnKreskoAsset(users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(users.userOne.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, chai_1.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "7b7d80d9-ca74-465f-b36d-69d899fcb19b",
                      "parentUUID": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 52,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(users.userOne).burnKreskoAsset(users.userOne.address, this.krAsset.address, this.mintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, lib_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, users.userOne), \"KreskoAssetBurned\");\n(0, chai_1.expect)(event.account).to.equal(users.userOne.address);\n(0, chai_1.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.amount).to.equal(this.mintAmount.div(5));",
                      "err": {},
                      "uuid": "d2213c50-4c58-495c-b3ab-bf0308a31f2d",
                      "parentUUID": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 122,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = this.mintAmount.add(secondMintAmount);\nawait hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, secondMintAmount);\nconst kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).burnKreskoAsset(users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.not.reverted;",
                      "err": {},
                      "uuid": "112edbbc-9937-4a5a-aee1-7a9b3ec1cf09",
                      "parentUUID": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).burnKreskoAsset(users.userOne.address, this.krAsset.address, 0, kreskoAssetIndex)).to.be.revertedWith(errors_1.Error.ZERO_BURN);",
                      "err": {},
                      "uuid": "434aa971-e7a3-4d51-9795-6704a05e5a2f",
                      "parentUUID": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userThree).burnKreskoAsset(users.userOne.address, this.krAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "612cfd03-ab2a-4d9d-9858-6b4afaba2a11",
                      "parentUUID": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(users.userOne.address, this.krAsset.address);\nconst burnAmount = debt.add(hardhat_1.default.toBig(1));\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(users.userOne).burnKreskoAsset(users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "8cba742a-ce88-4877-9a04-9bba01ecda3e",
                      "parentUUID": "18dd0074-c6e9-4a9e-9fdd-08bb0c668534",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "e0cfcb3a-4d9a-4664-84d6-fa092dc34e66",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 152,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01;\nconst openFeeBig = (0, lib_1.toBig)(openFee); // use toBig() to emulate closeFee's 18 decimals on contract\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\nawait this.krAsset.update({\n    ..._test_utils_1.defaultKrAssetArgs,\n    openFee,\n});\nconst mintAmount = (0, lib_1.toBig)(1);\nconst mintValue = mintAmount.mul(this.krAsset.deployArgs.price);\nconst expectedFeeValue = mintValue.mul(openFeeBig);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Mint Kresko asset\nconst tx = await hardhat_1.default.Diamond.connect(users.userOne).mintKreskoAsset(users.userOne.address, this.krAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, chai_1.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, lib_1.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, chai_1.expect)(feeRecipientBalanceIncrease).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, lib_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, users.userOne), \"OpenFeePaid\");\n(0, chai_1.expect)(event.account).to.equal(users.userOne.address);\n(0, chai_1.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.paymentAmount).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, lib_1.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst feeRes = await hardhat_1.default.Diamond.calcExpectedFee(users.userOne.address, this.krAsset.address, mintAmount, _test_utils_1.Fee.OPEN);\nconst output = feeRes.toString().split(\",\");\nconst openFeeAmount = Number(output[1]) / 10 ** 18;\n(0, chai_1.expect)(openFeeAmount).eq(normalizedExpectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "ffe0d33a-f997-4e76-9a73-8d2b66a9cd04",
                          "parentUUID": "e0cfcb3a-4d9a-4664-84d6-fa092dc34e66",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "ffe0d33a-f997-4e76-9a73-8d2b66a9cd04"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 152,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "1c820368-f674-428b-aeb6-c76a38081201",
                      "title": "Protocol close fee",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 87,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, lib_1.toBig)(1);\nconst burnValue = burnAmount.mul(this.krAsset.deployArgs.price);\nconst closeFee = (0, lib_1.toBig)(this.krAsset.deployArgs.closeFee); // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.mul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(users.userOne).burnKreskoAsset(users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, chai_1.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, lib_1.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, chai_1.expect)(feeRecipientBalanceIncrease).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, lib_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, users.userOne), \"CloseFeePaid\");\n(0, chai_1.expect)(event.account).to.equal(users.userOne.address);\n(0, chai_1.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.paymentAmount).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, lib_1.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);",
                          "err": {},
                          "uuid": "54814dde-34e4-4c8c-bda3-5429d1fe8587",
                          "parentUUID": "1c820368-f674-428b-aeb6-c76a38081201",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 382,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, krassets_1.mintKrAsset)({ user: users.userThree, asset: this.krAsset, amount: hardhat_1.default.toBig(mintAmount) });\nawait (0, collaterals_1.withdrawCollateral)({ user: users.userThree, asset: this.collateral, amount: wAmount });\nconst event = await (0, lib_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({ user: users.userThree, asset: this.krAsset, amount: burnAmount }), types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, users.userThree), \"CloseFeePaid\");\n(0, chai_1.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nconst priceAfter = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst burnAmountRebase = burnAmount * denominator;\nawait (0, collaterals_1.withdrawCollateral)({ user: users.userThree, asset: this.collateral, amount: wAmount });\nconst eventAfterRebase = await (0, lib_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({ user: users.userThree, asset: this.krAsset, amount: burnAmountRebase }), types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, users.userOne), \"CloseFeePaid\");\n(0, chai_1.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, chai_1.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "c90aa9e2-94cf-4bc2-a296-75ff782ef91b",
                          "parentUUID": "1c820368-f674-428b-aeb6-c76a38081201",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 305,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, krassets_1.mintKrAsset)({ user: users.userThree, asset: this.krAsset, amount: hardhat_1.default.toBig(mintAmount) });\nawait (0, collaterals_1.withdrawCollateral)({ user: users.userThree, asset: this.collateral, amount: wAmount });\nconst event = await (0, lib_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({ user: users.userThree, asset: this.krAsset, amount: burnAmount }), types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, users.userThree), \"CloseFeePaid\");\n(0, chai_1.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst burnAmountRebase = burnAmount / denominator;\nawait (0, collaterals_1.withdrawCollateral)({ user: users.userThree, asset: this.collateral, amount: wAmount });\nconst eventAfterRebase = await (0, lib_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({ user: users.userThree, asset: this.krAsset, amount: burnAmountRebase }), types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, users.userOne), \"CloseFeePaid\");\n(0, chai_1.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, chai_1.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "d03911f1-16b1-4fa1-a627-83dd7804df84",
                          "parentUUID": "1c820368-f674-428b-aeb6-c76a38081201",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "54814dde-34e4-4c8c-bda3-5429d1fe8587",
                        "c90aa9e2-94cf-4bc2-a296-75ff782ef91b",
                        "d03911f1-16b1-4fa1-a627-83dd7804df84"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 774,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [
                    "2c32ca4f-6f4c-4e1e-a6f1-2adfa39e958e",
                    "4860832e-6b5a-4d0d-bddb-fb78e99a30f4",
                    "7b7d80d9-ca74-465f-b36d-69d899fcb19b",
                    "d2213c50-4c58-495c-b3ab-bf0308a31f2d",
                    "112edbbc-9937-4a5a-aee1-7a9b3ec1cf09",
                    "434aa971-e7a3-4d51-9795-6704a05e5a2f",
                    "612cfd03-ab2a-4d9d-9858-6b4afaba2a11",
                    "8cba742a-ce88-4877-9a04-9bba01ecda3e"
                  ],
                  "failures": [],
                  "pending": [
                    "beccaa4a-19f8-4248-97af-26ece9950688",
                    "49d4d4af-329f-445c-ad4e-588542c312dc"
                  ],
                  "skipped": [],
                  "duration": 535,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "98be7337-d2db-4e1d-b498-31d2abe08ab2",
                  "title": "#burn - rebase events",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase events\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase events \"before each\" hook in \"#burn - rebase events\"",
                      "timedOut": false,
                      "duration": 55,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, krassets_1.mintKrAsset)({ asset: this.krAsset, amount: mintAmountInt, user: users.userOne });",
                      "err": {},
                      "uuid": "aa681921-e79f-4a57-822c-92d0d2871910",
                      "parentUUID": "98be7337-d2db-4e1d-b498-31d2abe08ab2",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "786a3432-66aa-4432-8836-f74cbeeee7d5",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 218,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(0);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = hardhat_1.default.fromBig(await this.krAsset.contract.balanceOf(users.userOne.address));\n(0, chai_1.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.closeTo(hardhat_1.default.toBig(expectedBalanceAfterBurn / denominator), 100000); // WEI",
                          "err": {},
                          "uuid": "560eac79-b6ff-4429-83d2-0e5f18e182a3",
                          "parentUUID": "786a3432-66aa-4432-8836-f74cbeeee7d5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 113,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(users.userOne.address);\n(0, chai_1.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "6e164539-5573-4bde-ac2e-57958557958e",
                          "parentUUID": "786a3432-66aa-4432-8836-f74cbeeee7d5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 355,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = hardhat_1.default.fromBig(await this.krAsset.contract.balanceOf(users.userOne.address));\n(0, chai_1.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(hardhat_1.default.toBig(expectedBalanceAfterBurn * denominator)); // WEI",
                          "err": {},
                          "uuid": "fe18030a-e980-46f9-bf0f-0dbf343ca6d2",
                          "parentUUID": "786a3432-66aa-4432-8836-f74cbeeee7d5",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 130,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(users.userOne.address);\n(0, chai_1.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "e2119df4-81be-489d-bf0e-7cfcbd3665c7",
                          "parentUUID": "786a3432-66aa-4432-8836-f74cbeeee7d5",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "560eac79-b6ff-4429-83d2-0e5f18e182a3",
                        "6e164539-5573-4bde-ac2e-57958557958e",
                        "fe18030a-e980-46f9-bf0f-0dbf343ca6d2",
                        "e2119df4-81be-489d-bf0e-7cfcbd3665c7"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 816,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "51f435f8-5fa6-4ed9-84e8-dbce6e8d04cc",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 118,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.burnKreskoAsset(users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n(0, chai_1.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "2102e966-314b-4d06-a1ea-087d62321f26",
                          "parentUUID": "51f435f8-5fa6-4ed9-84e8-dbce6e8d04cc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 290,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false))\n    .rawValue;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBeforeBurn).to.contain(this.krAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, chai_1.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "5e5fd37f-03b8-4480-b467-8238da9824d4",
                          "parentUUID": "51f435f8-5fa6-4ed9-84e8-dbce6e8d04cc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 107,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.burnKreskoAsset(users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n(0, chai_1.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "b35ee77b-c6f0-4ae9-8fc2-edc01f500525",
                          "parentUUID": "51f435f8-5fa6-4ed9-84e8-dbce6e8d04cc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 570,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false))\n    .rawValue;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, chai_1.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "040af600-6532-40fb-9075-641d6c42ec1c",
                          "parentUUID": "51f435f8-5fa6-4ed9-84e8-dbce6e8d04cc",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "2102e966-314b-4d06-a1ea-087d62321f26",
                        "5e5fd37f-03b8-4480-b467-8238da9824d4",
                        "b35ee77b-c6f0-4ae9-8fc2-edc01f500525",
                        "040af600-6532-40fb-9075-641d6c42ec1c"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1085,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "b78ddcd3-fb80-430c-a569-63eb30d8c619",
          "title": "Flux Pricefeed",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/oracle/00-pricefeed.ts",
          "file": "/src/test/oracle/00-pricefeed.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before all\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "addr = await hardhat_1.default.getAddresses();\nthis.pricefeed;",
              "err": {},
              "uuid": "f73f5f70-9fa7-435e-8b6b-4451866083ca",
              "parentUUID": "b78ddcd3-fb80-430c-a569-63eb30d8c619",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before all\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "db2dabed-77a9-4159-b7a5-727d61638a17",
              "parentUUID": "b78ddcd3-fb80-430c-a569-63eb30d8c619",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before each\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "42bb00e7-2f17-4d9c-a0cb-5bc929985c36",
              "parentUUID": "b78ddcd3-fb80-430c-a569-63eb30d8c619",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before each\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 91,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Deploy one price feed\nconst name = \"TEST\";\nconst decimals = 8;\nconst descriptionFeed = \"Test description\";\nconst feed = await hardhat_1.default.run(\"deployone:fluxpricefeed\", {\n    name,\n    decimals,\n    description: descriptionFeed,\n    log: false,\n});\nthis.pricefeed = feed;",
              "err": {},
              "uuid": "a4235cdf-e06d-4839-bbb5-0ec29d3ef17d",
              "parentUUID": "b78ddcd3-fb80-430c-a569-63eb30d8c619",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
              "title": "functionality",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/oracle/00-pricefeed.ts",
              "file": "/src/test/oracle/00-pricefeed.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize timestamp value once the initial answer is submitted",
                  "fullTitle": "Flux Pricefeed functionality should initialize timestamp value once the initial answer is submitted",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.latestTimestamp()).to.equal(0);\nawait this.pricefeed.transmit(TEST_VALUE, true, { from: addr.deployer });\n(0, chai_1.expect)(Number(await this.pricefeed.latestTimestamp())).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "a1f668e1-34be-45cc-82d1-a4a3748026a9",
                  "parentUUID": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestAnswer once it's changed",
                  "fullTitle": "Flux Pricefeed functionality should return latestAnswer once it's changed",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.latestAnswer()).to.equal(0);\nawait this.pricefeed.transmit(TEST_VALUE, true, { from: addr.deployer });\n(0, chai_1.expect)(await this.pricefeed.latestAnswer()).to.equal(TEST_VALUE);",
                  "err": {},
                  "uuid": "d15f6e7b-afe5-4318-84a9-01a7ed31bdfb",
                  "parentUUID": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen once it's changed",
                  "fullTitle": "Flux Pricefeed functionality should return marketOpen once it's changed",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.latestMarketOpen()).to.equal(false);\nawait this.pricefeed.transmit(0, true, { from: addr.deployer });\n(0, chai_1.expect)(await this.pricefeed.latestMarketOpen()).to.equal(true);",
                  "err": {},
                  "uuid": "75df1b80-3169-4128-8bcc-1f8ad8c85333",
                  "parentUUID": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-validator to change values",
                  "fullTitle": "Flux Pricefeed functionality should not allow non-validator to change values",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.latestAnswer()).to.equal(0);\ntry {\n    await this.pricefeed.transmit(TEST_VALUE, true, { from: addr.userOne });\n}\ncatch (e) {\n    if (!(e instanceof Error))\n        return;\n    (0, chai_1.expect)(e.message).to.equal('Contract with a Signer cannot override from (operation=\"overrides.from\", code=UNSUPPORTED_OPERATION, version=contracts/5.7.0)');\n    (0, chai_1.expect)(await this.pricefeed.latestAnswer()).to.equal(0);\n    (0, chai_1.expect)(await this.pricefeed.latestMarketOpen()).to.equal(false);\n}",
                  "err": {},
                  "uuid": "521f9cec-f7d1-45aa-989a-7985565188d5",
                  "parentUUID": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return description",
                  "fullTitle": "Flux Pricefeed functionality should return description",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.description()).to.equal(\"Test description\");",
                  "err": {},
                  "uuid": "0ddced5a-fa41-406b-b94c-1f1d6b2cf42c",
                  "parentUUID": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return decimals",
                  "fullTitle": "Flux Pricefeed functionality should return decimals",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.decimals()).to.equal(8);",
                  "err": {},
                  "uuid": "5223ff52-ce90-4eae-99d5-ad1b1a4d745a",
                  "parentUUID": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRoundData correctly",
                  "fullTitle": "Flux Pricefeed functionality should return latestRoundData correctly",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, { from: addr.deployer });\nconst roundDataCall = await this.pricefeed.latestRoundData();\nconst roundData = {\n    roundId: roundDataCall[0].toNumber(),\n    answer: roundDataCall[1].toNumber(),\n    marketOpen: roundDataCall[2].valueOf(),\n    startedAt: roundDataCall[3].toNumber(),\n    updatedAt: roundDataCall[4].toNumber(),\n    answeredInRound: roundDataCall[5].toNumber(),\n};\n(0, chai_1.expect)(roundData.roundId).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.equal(roundData.updatedAt);\n(0, chai_1.expect)(roundData.answeredInRound).to.equal(roundData.roundId);\n(0, chai_1.expect)(roundData.answer).to.equal(TEST_VALUE);\n(0, chai_1.expect)(roundData.marketOpen).to.equal(true);",
                  "err": {},
                  "uuid": "7f181a2c-0e28-49ca-80bd-f50cd518bdd7",
                  "parentUUID": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getRoundData correctly",
                  "fullTitle": "Flux Pricefeed functionality should return getRoundData correctly",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, { from: addr.deployer });\nconst roundDataCall = await this.pricefeed.getRoundData(1);\nconst roundData = {\n    roundId: roundDataCall[0].toNumber(),\n    answer: roundDataCall[1].toNumber(),\n    marketOpen: roundDataCall[2].valueOf(),\n    startedAt: roundDataCall[3].toNumber(),\n    updatedAt: roundDataCall[4].toNumber(),\n    answeredInRound: roundDataCall[5].toNumber(),\n};\n(0, chai_1.expect)(roundData.roundId).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.equal(roundData.updatedAt);\n(0, chai_1.expect)(roundData.answeredInRound).to.equal(roundData.roundId);\n(0, chai_1.expect)(roundData.answer).to.equal(TEST_VALUE);\n(0, chai_1.expect)(roundData.marketOpen).to.equal(true);",
                  "err": {},
                  "uuid": "d3007b9d-8c07-4964-a794-625e59bad9d8",
                  "parentUUID": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getAnswer correctly",
                  "fullTitle": "Flux Pricefeed functionality should return getAnswer correctly",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, { from: addr.deployer });\n(0, chai_1.expect)(await this.pricefeed.getAnswer(1)).to.equal(TEST_VALUE);",
                  "err": {},
                  "uuid": "b43bb8a9-3253-4872-a040-d2b21195c041",
                  "parentUUID": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen correctly",
                  "fullTitle": "Flux Pricefeed functionality should return marketOpen correctly",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, { from: addr.deployer });\n(0, chai_1.expect)(await this.pricefeed.getMarketOpen(1)).to.equal(true);",
                  "err": {},
                  "uuid": "4ec4792e-683c-43bd-bdcf-05ecf6e83e34",
                  "parentUUID": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRound correctly",
                  "fullTitle": "Flux Pricefeed functionality should return latestRound correctly",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, { from: addr.deployer });\n(0, chai_1.expect)(await this.pricefeed.latestRound()).to.equal(1);",
                  "err": {},
                  "uuid": "05839bea-ccf5-46a1-99a7-7dc729e81223",
                  "parentUUID": "61715293-59cb-4da9-b2ff-ba3cb12a9a85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1f668e1-34be-45cc-82d1-a4a3748026a9",
                "d15f6e7b-afe5-4318-84a9-01a7ed31bdfb",
                "75df1b80-3169-4128-8bcc-1f8ad8c85333",
                "521f9cec-f7d1-45aa-989a-7985565188d5",
                "0ddced5a-fa41-406b-b94c-1f1d6b2cf42c",
                "5223ff52-ce90-4eae-99d5-ad1b1a4d745a",
                "7f181a2c-0e28-49ca-80bd-f50cd518bdd7",
                "d3007b9d-8c07-4964-a794-625e59bad9d8",
                "b43bb8a9-3253-4872-a040-d2b21195c041",
                "4ec4792e-683c-43bd-bdcf-05ecf6e83e34",
                "05839bea-ccf5-46a1-99a7-7dc729e81223"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 129,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "11b0c368-c76d-4dcc-b2ef-6451498518f4",
          "title": "Safety Council",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before all\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "d8a576b4-f7e1-4b1f-8d98-3da8410b4c61",
              "parentUUID": "11b0c368-c76d-4dcc-b2ef-6451498518f4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "08d89143-ef0e-47d4-a034-03bd3deda2c5",
              "parentUUID": "11b0c368-c76d-4dcc-b2ef-6451498518f4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = hardhat_1.default.collaterals.find(asset => asset.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer, devTwo, extOne, extTwo, extThree } = await hardhat_1.default.ethers.getNamedSigners();\nusers = await hardhat_1.default.getUsers();\nthis.deployer = deployer;\nthis.devTwo = devTwo;\nthis.extOne = extOne;\nthis.extTwo = extTwo;\nthis.extThree = extThree;",
              "err": {},
              "uuid": "e3a2939d-1a5f-4891-9ecd-de9e2d52fc63",
              "parentUUID": "11b0c368-c76d-4dcc-b2ef-6451498518f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e0551b61-4288-4882-989a-32696320487a",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "d5c89a6d-1093-4e10-ba93-6eb4a86c6298",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 43,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "0b52f13c-0110-44f9-b169-27a5c8846224",
                      "parentUUID": "d5c89a6d-1093-4e10-ba93-6eb4a86c6298",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 41,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne, this.extTwo]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "6957d86a-e046-4cf7-a26e-b0a5091cafac",
                      "parentUUID": "d5c89a6d-1093-4e10-ba93-6eb4a86c6298",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 43,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne, this.extTwo, this.extThree]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "a613d354-fb30-43d3-84dc-0c96b7e5c3e2",
                      "parentUUID": "d5c89a6d-1093-4e10-ba93-6eb4a86c6298",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)((0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo])).to.be.revertedWith(\"\");\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "1b4cd239-81ac-4f43-bff4-b396398f0539",
                      "parentUUID": "d5c89a6d-1093-4e10-ba93-6eb4a86c6298",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0b52f13c-0110-44f9-b169-27a5c8846224",
                    "6957d86a-e046-4cf7-a26e-b0a5091cafac",
                    "a613d354-fb30-43d3-84dc-0c96b7e5c3e2",
                    "1b4cd239-81ac-4f43-bff4-b396398f0539"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 153,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "1aac6520-ed32-4fe5-8483-e84cbb4415ec",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 41,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "3589ab49-87b0-4835-811d-8a1e562cbd8f",
                      "parentUUID": "1aac6520-ed32-4fe5-8483-e84cbb4415ec",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 41,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.krAsset.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.krAsset.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "5efb6d72-f6df-4978-b054-45a48b758ef5",
                      "parentUUID": "1aac6520-ed32-4fe5-8483-e84cbb4415ec",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 39,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = hardhat_1.default.ethers.utils.computeAddress(\"0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d\");\nawait (0, chai_1.expect)((0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[randomAddr], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne])).to.be.revertedWith(\"\");\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), randomAddr);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "bc626680-d240-4fa9-a991-f5d572aaa1c3",
                      "parentUUID": "1aac6520-ed32-4fe5-8483-e84cbb4415ec",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3589ab49-87b0-4835-811d-8a1e562cbd8f",
                    "5efb6d72-f6df-4978-b054-45a48b758ef5",
                    "bc626680-d240-4fa9-a991-f5d572aaa1c3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 121,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "fba3a461-4bb1-4bbe-bf3f-57834e564f86",
                  "title": "duration based pausing",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 36,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, duration], [this.deployer, this.devTwo, this.extOne]);\nconst depositSafetyState = await hardhat_1.default.Diamond.safetyStateFor(this.collateral.address, _test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, chai_1.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "1b0e30db-9b55-4099-a904-7cfe4b2b370d",
                      "parentUUID": "fba3a461-4bb1-4bbe-bf3f-57834e564f86",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "timedOut": false,
                      "duration": 38,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000;\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, duration], [this.deployer, this.devTwo, this.extOne]);\nconst depositSafetyState = await hardhat_1.default.Diamond.safetyStateFor(this.collateral.address, _test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, chai_1.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);\n// Confirm that the current blocktime is within the pause action's duration\nconst blockNumBefore = await hardhat_1.default.ethers.provider.getBlockNumber();\nconst blockBefore = await hardhat_1.default.ethers.provider.getBlock(blockNumBefore);\nconst timestampBefore = blockBefore.timestamp;\n(0, chai_1.expect)(Number(depositSafetyState[0].timestamp1)).to.be.greaterThan(timestampBefore);\n// Increase time by seven days\nconst sevenDays = 7 * 24 * 60 * 60;\nawait hardhat_1.default.ethers.provider.send(\"evm_increaseTime\", [sevenDays]);\nawait hardhat_1.default.ethers.provider.send(\"evm_mine\", []);\n// Confirm that block time has increased as expected\nconst blockNumAfter = await hardhat_1.default.ethers.provider.getBlockNumber();\nconst blockAfter = await hardhat_1.default.ethers.provider.getBlock(blockNumAfter);\nconst timestampAfter = blockAfter.timestamp;\n(0, chai_1.expect)(blockNumAfter).to.be.equal(blockNumBefore + 1);\n(0, chai_1.expect)(timestampAfter).to.be.equal(timestampBefore + sevenDays);\n// Confirm that the current blocktime is after the pause action's duration\n(0, chai_1.expect)(timestampAfter).to.be.greaterThan(Number(depositSafetyState[0].timestamp1));\n// NOTE: now we can test any functionality that should have now expired",
                      "err": {},
                      "uuid": "84c1ca6a-074d-439e-b083-b9be21dc4c99",
                      "parentUUID": "fba3a461-4bb1-4bbe-bf3f-57834e564f86",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1b0e30db-9b55-4099-a904-7cfe4b2b370d",
                    "84c1ca6a-074d-439e-b083-b9be21dc4c99"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 74,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "97eeaf14-d0cb-4f57-99aa-f0293f057ced",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "8eb0882b-3159-4556-a9f4-1d4bede1d991",
                      "parentUUID": "97eeaf14-d0cb-4f57-99aa-f0293f057ced",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 90,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.WITHDRAW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.WITHDRAW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.WITHDRAW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.WITHDRAW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "f175aee1-5a3d-4369-ba69-3fa6cf1261ae",
                      "parentUUID": "97eeaf14-d0cb-4f57-99aa-f0293f057ced",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 81,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "59bbe34a-cd31-4bd3-876b-bb0778a89df1",
                      "parentUUID": "97eeaf14-d0cb-4f57-99aa-f0293f057ced",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 72,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.BORROW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.BORROW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.BORROW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.BORROW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "fbbfc4f8-14be-4974-a3b9-abd3cfd7c86b",
                      "parentUUID": "97eeaf14-d0cb-4f57-99aa-f0293f057ced",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 73,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.LIQUIDATION, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.LIQUIDATION, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "a20bba1b-c187-40f1-b6d1-8119a36a8582",
                      "parentUUID": "97eeaf14-d0cb-4f57-99aa-f0293f057ced",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8eb0882b-3159-4556-a9f4-1d4bede1d991",
                    "f175aee1-5a3d-4369-ba69-3fa6cf1261ae",
                    "59bbe34a-cd31-4bd3-876b-bb0778a89df1",
                    "fbbfc4f8-14be-4974-a3b9-abd3cfd7c86b",
                    "a20bba1b-c187-40f1-b6d1-8119a36a8582"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 385,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "6ade99d9-f6b9-480b-82c6-9fdbf4106ff5",
                  "title": "event emission",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 34,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst event = await (0, events_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, users.userOne), \"SafetyStateChange\");\n(0, chai_1.expect)(event.action).to.equal(_test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(event.asset).to.equal(this.collateral.address);\n// @ts-ignore\n(0, chai_1.expect)(event.description.hash).to.equal(hardhat_1.default.ethers.utils.keccak256(hardhat_1.default.ethers.utils.toUtf8Bytes(\"paused\")));",
                      "err": {},
                      "uuid": "d2721a6e-1904-4e1c-8c2b-e09058c3f0bd",
                      "parentUUID": "6ade99d9-f6b9-480b-82c6-9fdbf4106ff5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d2721a6e-1904-4e1c-8c2b-e09058c3f0bd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 34,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c1efaa6e-19c8-41ee-bd36-59d60d6a4ddc",
          "title": "Interest Rates",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/00-init.ts",
          "file": "/src/test/stability-rate/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before all\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "11affc5d-dab1-4e85-8293-5ee550a9d0c0",
              "parentUUID": "c1efaa6e-19c8-41ee-bd36-59d60d6a4ddc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "cd17d848-41f9-49ee-bb5d-8647f9638277",
              "parentUUID": "c1efaa6e-19c8-41ee-bd36-59d60d6a4ddc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.krAsset = this.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);",
              "err": {},
              "uuid": "20d10534-2ebb-4767-8f38-0bd5c92dc645",
              "parentUUID": "c1efaa6e-19c8-41ee-bd36-59d60d6a4ddc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9c567595-2ac3-405d-8b15-a913735513e2",
              "title": "#init",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/00-init.ts",
              "file": "/src/test/stability-rate/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "initializes correct stability rates",
                  "fullTitle": "Interest Rates #init initializes correct stability rates",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = await hardhat_1.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, chai_1.expect)(config.debtIndex).to.bignumber.equal(wadray_1.oneRay);\n(0, chai_1.expect)(config.stabilityRate).to.bignumber.equal(wadray_1.oneRay);\n(0, chai_1.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, chai_1.expect)(config.rateSlope1).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.rateSlope1);\n(0, chai_1.expect)(config.rateSlope2).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.rateSlope2);\n(0, chai_1.expect)(config.stabilityRateBase).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.stabilityRateBase);\n(0, chai_1.expect)(config.optimalPriceRate).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.optimalPriceRate);\n(0, chai_1.expect)(config.priceRateDelta).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.priceRateDelta);",
                  "err": {},
                  "uuid": "b4f1fabf-fe57-47b8-9b30-9deee6f6e419",
                  "parentUUID": "9c567595-2ac3-405d-8b15-a913735513e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures correct stability rates",
                  "fullTitle": "Interest Rates #init configures correct stability rates",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    stabilityRateBase: wadray_1.oneRay,\n    rateSlope1: wadray_1.oneRay.mul(10),\n    rateSlope2: wadray_1.oneRay.mul(50),\n    optimalPriceRate: wadray_1.oneRay.div(2),\n    priceRateDelta: wadray_1.oneRay.div(100).mul(10),\n};\nawait hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, configuration);\nconst config = await hardhat_1.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, chai_1.expect)(config.debtIndex).to.bignumber.equal(wadray_1.oneRay);\n(0, chai_1.expect)(config.stabilityRate).to.bignumber.equal(wadray_1.oneRay);\n(0, chai_1.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, chai_1.expect)(config.rateSlope1).to.bignumber.equal(configuration.rateSlope1);\n(0, chai_1.expect)(config.rateSlope2).to.bignumber.equal(configuration.rateSlope2);\n(0, chai_1.expect)(config.stabilityRateBase).to.bignumber.equal(configuration.stabilityRateBase);\n(0, chai_1.expect)(config.optimalPriceRate).to.bignumber.equal(configuration.optimalPriceRate);\n(0, chai_1.expect)(config.priceRateDelta).to.bignumber.equal(configuration.priceRateDelta);",
                  "err": {},
                  "uuid": "acb619d0-7c01-4351-95fa-76b70f8b60e8",
                  "parentUUID": "9c567595-2ac3-405d-8b15-a913735513e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant set incorrect values",
                  "fullTitle": "Interest Rates #init cant set incorrect values",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectOptimalRate = {\n    stabilityRateBase: wadray_1.oneRay,\n    rateSlope1: wadray_1.oneRay.mul(10),\n    rateSlope2: wadray_1.oneRay.mul(50),\n    optimalPriceRate: wadray_1.oneRay.add(1),\n    priceRateDelta: wadray_1.oneRay.div(100).mul(10),\n};\nconst incorrectExcessRate = {\n    stabilityRateBase: wadray_1.oneRay,\n    rateSlope1: wadray_1.oneRay.mul(10),\n    rateSlope2: wadray_1.oneRay.mul(50),\n    optimalPriceRate: wadray_1.oneRay,\n    priceRateDelta: wadray_1.oneRay.add(1),\n};\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.setupStabilityRateParams(this.krAsset.address, test_1.defaultKrAssetArgs.stabilityRates))\n    .to.be.reverted;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectOptimalRate)).to.be\n    .reverted;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectExcessRate)).to.be\n    .reverted;",
                  "err": {},
                  "uuid": "835d7209-bbc2-4d3c-916d-0e2674080fad",
                  "parentUUID": "9c567595-2ac3-405d-8b15-a913735513e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4f1fabf-fe57-47b8-9b30-9deee6f6e419",
                "acb619d0-7c01-4351-95fa-76b70f8b60e8",
                "835d7209-bbc2-4d3c-916d-0e2674080fad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 61,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c9542a45-3313-460c-8196-472595edc77f",
          "title": "Stability Rates",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
          "file": "/src/test/stability-rate/01-rates.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before all\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "5fc0a779-4752-4005-9937-7e2694e15c77",
              "parentUUID": "c9542a45-3313-460c-8196-472595edc77f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "7eea0334-9e9c-4602-800e-54cc59fe4922",
              "parentUUID": "c9542a45-3313-460c-8196-472595edc77f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 237,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = await hardhat_1.default.getUsers();\nuserOne = users.deployer;\nthis.krAsset = this.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\n[UniMath] = await hardhat_1.default.deploy(\"UniswapMath\", {\n    from: users.deployer.address,\n    args: [hardhat_1.default.UniV2Factory.address, hardhat_1.default.UniV2Router.address],\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, numbers_1.toBig)(1000);\nconst kLiq = (0, numbers_1.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne,\n});\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: kLiq });\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: userOne,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "3d19c2df-4060-4f8d-89ad-762ccb21cd0e",
              "parentUUID": "c9542a45-3313-460c-8196-472595edc77f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1ed77e24-a8b3-42d6-a859-a604fca173e0",
              "title": "#no-amm-prices",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct price rates when the amm liquidity does not qualify",
                  "fullTitle": "Stability Rates #no-amm-prices calculates correct price rates when the amm liquidity does not qualify",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "87c5e533-867e-4091-8799-d3558637176d",
                  "parentUUID": "1ed77e24-a8b3-42d6-a859-a604fca173e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rates and debt when there is no amm price",
                  "fullTitle": "Stability Rates #no-amm-prices calculates correct rates and debt when there is no amm price",
                  "timedOut": false,
                  "duration": 5486,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const krAssetAmount = (0, numbers_1.toBig)(1);\nconst krAssetNoBaseRate = await (0, krassets_1.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: ethers_1.BigNumber.from(0),\n    price: 10,\n    supplyLimit: 2000,\n});\nconst krAssetWithBaseRate = await (0, krassets_1.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: test_1.BASIS_POINT.mul(20),\n    price: 10,\n    supplyLimit: 2000,\n});\n// Asset\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: krAssetNoBaseRate, amount: krAssetAmount });\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: krAssetWithBaseRate, amount: krAssetAmount });\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nawait hardhat_network_helpers_1.time.increase(+wadray_1.ONE_YEAR);\n// asset with no base rate and no amm price\nconst debtIndexNoBaseRate = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetNoBaseRate.address);\nconst debtScaledNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebt(userOne.address, krAssetNoBaseRate.address);\nconst debtPrincipalNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetNoBaseRate.address);\nconst debtInterestNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetNoBaseRate.address);\n(0, chai_1.expect)(debtIndexNoBaseRate).to.equal(wadray_1.oneRay);\n(0, chai_1.expect)(debtScaledNoBaseRate).to.equal(debtPrincipalNoBaseRate);\n(0, chai_1.expect)(debtInterestNoBaseRate.kissAmount).to.equal(0);\n(0, chai_1.expect)(debtInterestNoBaseRate.assetAmount).to.equal(0);\n// asset with base rate and no amm price\nconst debtIndexWithBaseRate = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nconst debtScaledWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebt(userOne.address, krAssetWithBaseRate.address);\nconst debtPrincipalWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetWithBaseRate.address);\nconst debtInterestWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetWithBaseRate.address);\nconst expectedScaledDebt = await (0, calculations_1.toScaledAmount)(debtPrincipalWithBaseRate, krAssetWithBaseRate);\nconst expectedDebtIndex = await (0, calculations_1.calcDebtIndex)(krAssetWithBaseRate, debtIndexBefore, lastUpdateTimestamp);\nconst expectedAssetInterest = debtScaledWithBaseRate.sub(debtPrincipalWithBaseRate);\nconst expectedKissInterestAmount = await (0, calculations_1.oraclePriceToWad)(hardhat_1.default.Diamond.getKrAssetValue(krAssetWithBaseRate.address, expectedAssetInterest, true));\n(0, chai_1.expect)(debtIndexWithBaseRate).to.equal(expectedDebtIndex);\n(0, chai_1.expect)(debtScaledWithBaseRate).to.equal(expectedScaledDebt);\n(0, chai_1.expect)(debtInterestWithBaseRate.assetAmount).to.equal(expectedAssetInterest);\n(0, chai_1.expect)(debtInterestWithBaseRate.kissAmount).to.equal(expectedKissInterestAmount);",
                  "err": {},
                  "uuid": "baf965f2-872a-4126-9ab7-05ee4f060f0d",
                  "parentUUID": "1ed77e24-a8b3-42d6-a859-a604fca173e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "baf965f2-872a-4126-9ab7-05ee4f060f0d"
              ],
              "failures": [],
              "pending": [
                "87c5e533-867e-4091-8799-d3558637176d"
              ],
              "skipped": [],
              "duration": 5486,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "7f805446-ad4f-45c4-a118-ad58fa7fd6c3",
              "title": "#price-rate",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct price rates when amm == oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm == oracle",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst ammPricesOptimal = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammPricesOptimal.price0).to.be.closeTo(10, 0.05);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.equal(wadray_1.oneRay);",
                  "err": {},
                  "uuid": "004e5847-e24b-4f6c-a83f-65299a931b74",
                  "parentUUID": "7f805446-ad4f-45c4-a118-ad58fa7fd6c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm > oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm > oracle",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 105; // 105% eg. 5% premium\nconst expectedPriceRate = wadray_1.oneRay.div(100).mul(premiumPercentage);\nconst krAssetAmount = (0, numbers_1.toBig)(1);\nconst collateralAmount = (0, numbers_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nconst ammPricesUpPremium = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammPricesUpPremium.price0).to.be.closeTo(10.5, 0.05);\nawait updateTWAP();\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, wadray_1.oneRay.div(100));",
                  "err": {},
                  "uuid": "3e969ae9-6844-49fa-a28e-cdd4afa4658a",
                  "parentUUID": "7f805446-ad4f-45c4-a118-ad58fa7fd6c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm < oracle ",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 179,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 95; // 95% eg. 5% below oracle price\nconst expectedPriceRate = wadray_1.oneRay.div(100).mul(premiumPercentage);\nconst krAssetAmount = (0, numbers_1.toBig)(1);\nconst collateralAmount = (0, numbers_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nconst ammRates = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammRates.price0).to.be.closeTo(9.5, 0.05);\nawait updateTWAP();\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, wadray_1.oneRay.div(100));",
                  "err": {},
                  "uuid": "85bc238e-d643-47fc-8fdc-7991a41a9894",
                  "parentUUID": "7f805446-ad4f-45c4-a118-ad58fa7fd6c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "004e5847-e24b-4f6c-a83f-65299a931b74",
                "3e969ae9-6844-49fa-a28e-cdd4afa4658a",
                "85bc238e-d643-47fc-8fdc-7991a41a9894"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 395,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "dab3fab7-122a-4fdc-89a5-3945fd8aba06",
              "title": "#stability-rate",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct stability rates when amm == oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm == oracle",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal((0, calculations_1.calcExpectedStabilityRateNoPremium)(priceRate, test_1.defaultKrAssetArgs));",
                  "err": {},
                  "uuid": "274bd9b8-b199-4b2a-a151-90b801d3b384",
                  "parentUUID": "dab3fab7-122a-4fdc-89a5-3945fd8aba06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rates when amm > oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm > oracle",
                  "timedOut": false,
                  "duration": 130,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, numbers_1.toBig)(1);\nconst collateralAmount = (0, numbers_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal((0, calculations_1.calcExpectedStabilityRateHighPremium)(priceRate, test_1.defaultKrAssetArgs));",
                  "err": {},
                  "uuid": "58af4b3e-b6b0-42e7-b682-d877cc0e69f1",
                  "parentUUID": "dab3fab7-122a-4fdc-89a5-3945fd8aba06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rates when amm < oracle ",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 279,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, numbers_1.toBig)(1);\nconst collateralAmount = (0, numbers_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal((0, calculations_1.calcExpectedStabilityRateLowPremium)(priceRate, test_1.defaultKrAssetArgs));",
                  "err": {},
                  "uuid": "71f860e0-2bf1-4636-baaf-21cf77688936",
                  "parentUUID": "dab3fab7-122a-4fdc-89a5-3945fd8aba06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "274bd9b8-b199-4b2a-a151-90b801d3b384",
                "58af4b3e-b6b0-42e7-b682-d877cc0e69f1",
                "71f860e0-2bf1-4636-baaf-21cf77688936"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 491,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "8fed8c0e-c426-4103-a8ae-7391ec9579fd",
              "title": "#debt-index",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt index after a year when amm price > oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year when amm price > oracle",
                  "timedOut": false,
                  "duration": 226,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, numbers_1.toBig)(1);\nconst collateralAmount = (0, numbers_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+wadray_1.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "76cdcc10-f325-47a7-90dc-853889de17d4",
                  "parentUUID": "8fed8c0e-c426-4103-a8ae-7391ec9579fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after year when amm price < oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after year when amm price < oracle",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 90; // 90% eg. -10% premium\nconst krAssetAmount = (0, numbers_1.toBig)(1);\nconst collateralAmount = (0, numbers_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+wadray_1.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "96a734b3-a4ed-4767-b92c-1e81e854d9e2",
                  "parentUUID": "8fed8c0e-c426-4103-a8ae-7391ec9579fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+wadray_1.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "07a66b93-69d0-44fe-82f3-95e4d0c5de9b",
                  "parentUUID": "8fed8c0e-c426-4103-a8ae-7391ec9579fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76cdcc10-f325-47a7-90dc-853889de17d4",
                "96a734b3-a4ed-4767-b92c-1e81e854d9e2",
                "07a66b93-69d0-44fe-82f3-95e4d0c5de9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 501,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "8cb6b656-348c-43f1-abec-3cf3f4c7d11e",
          "title": "Stability Rates",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
          "file": "/src/test/stability-rate/02-debt.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before all\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "c774dd91-46c9-4398-997e-6f62e0dc9bc6",
              "parentUUID": "8cb6b656-348c-43f1-abec-3cf3f4c7d11e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "33471777-85a2-407d-b3ad-ec145f319e9c",
              "parentUUID": "8cb6b656-348c-43f1-abec-3cf3f4c7d11e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 311,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = await hardhat_1.default.getUsers();\nuserOne = users.deployer;\nuserTwo = users.userTwo;\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\n[UniMath] = await hardhat_1.default.deploy(\"UniswapMath\", {\n    from: users.deployer.address,\n    args: [hardhat_1.default.UniV2Factory.address, hardhat_1.default.UniV2Router.address],\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, numbers_1.toBig)(1000);\nconst kLiq = (0, numbers_1.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: userOne,\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: userOne,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "3110f140-849f-493d-b431-9b54c6396f5d",
              "parentUUID": "8cb6b656-348c-43f1-abec-3cf3f4c7d11e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d4ea22fd-0542-4881-833a-780f113ddc73",
              "title": "#debt calculation - mint",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - mint\"",
                  "fullTitle": "Stability Rates #debt calculation - mint \"before each\" hook in \"#debt calculation - mint\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "ef33c30c-f215-48c1-8730-1ad777858772",
                  "parentUUID": "d4ea22fd-0542-4881-833a-780f113ddc73",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 785,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, numbers_1.toBig)(1);\nconst collateralAmount = (0, numbers_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.not.bignumber.equal(debt);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "fd4f5677-3a97-4978-a0e0-4b8161c0b5ea",
                  "parentUUID": "d4ea22fd-0542-4881-833a-780f113ddc73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt amount when amm price < oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price < oracle",
                  "timedOut": false,
                  "duration": 701,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, numbers_1.toBig)(1);\nconst collateralAmount = (0, numbers_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "bd0f7c5d-a6ff-4be5-909d-3dbb2b731155",
                  "parentUUID": "d4ea22fd-0542-4881-833a-780f113ddc73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 379,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(wadray_1.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "5d45879b-c5ab-4ead-9be2-5a80bb12bbf6",
                  "parentUUID": "d4ea22fd-0542-4881-833a-780f113ddc73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd4f5677-3a97-4978-a0e0-4b8161c0b5ea",
                "bd0f7c5d-a6ff-4be5-909d-3dbb2b731155",
                "5d45879b-c5ab-4ead-9be2-5a80bb12bbf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1865,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "48c0e819-b3ec-46e3-8bef-92ed47cdecf3",
              "title": "#debt calculation - repay",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay\"",
                  "fullTitle": "Stability Rates #debt calculation - repay \"before each\" hook in \"#debt calculation - repay\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "61689f0c-cd3a-466e-afe7-84b133f16c74",
                  "parentUUID": "48c0e819-b3ec-46e3-8bef-92ed47cdecf3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 573,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 102; // 102% eg. 2% premium\nconst krAssetAmount = (0, numbers_1.toBig)(1);\nconst collateralAmount = (0, numbers_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\n// buy asset, increases price\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalBefore = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst burnAmount = mintAmount.div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: burnAmount,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(principalAfter).to.equal(principalBefore.sub(burnAmount));\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(burnAmount), hardhat_1.default.ethers.utils.parseUnits(\"10\", \"gwei\"));",
                  "err": {},
                  "uuid": "027ded70-7e61-4b13-b29e-fbcc40ab6117",
                  "parentUUID": "48c0e819-b3ec-46e3-8bef-92ed47cdecf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 565,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 98; // 101% eg. 1% premium\nconst krAssetAmount = (0, numbers_1.toBig)(1);\nconst collateralAmount = (0, numbers_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\n// dump asset, decreases price\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait hardhat_network_helpers_1.time.increase(year);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(wadray_1.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), wadray_1.oneRay.div(10000));",
                  "err": {},
                  "uuid": "be85842d-d630-4dc7-8955-01bec37a7f5c",
                  "parentUUID": "48c0e819-b3ec-46e3-8bef-92ed47cdecf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 261,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait hardhat_network_helpers_1.time.increase(year);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(wadray_1.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), wadray_1.oneRay.div(10000));",
                  "err": {},
                  "uuid": "fc302b07-8d8a-4060-a26d-227a630b1567",
                  "parentUUID": "48c0e819-b3ec-46e3-8bef-92ed47cdecf3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "027ded70-7e61-4b13-b29e-fbcc40ab6117",
                "be85842d-d630-4dc7-8955-01bec37a7f5c",
                "fc302b07-8d8a-4060-a26d-227a630b1567"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1399,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "24db404a-50a2-49fb-b76c-f86a7badeafc",
              "title": "#debt calculation - repay interest",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay interest\"",
                  "fullTitle": "Stability Rates #debt calculation - repay interest \"before each\" hook in \"#debt calculation - repay interest\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "f23bb1a4-d9b2-4153-9cac-ea053b47d433",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can view account principal debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account principal debt for asset",
                  "timedOut": false,
                  "duration": 207,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst expectedPrincipalDebt = mintAmount.mul(2);\nconst principalDebtAfterOneYear = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(principalDebtAfterOneYear).to.bignumber.equal(expectedPrincipalDebt);",
                  "err": {},
                  "uuid": "41320a23-a89c-4ebb-8d95-2c460cb9daac",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view account scaled debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account scaled debt for asset",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst expectedScaledDebt = principalDebt.add(accruedInterest.assetAmount);\nconst scaledDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(scaledDebt).to.bignumber.equal(expectedScaledDebt);",
                  "err": {},
                  "uuid": "6e30ac41-41e2-4680-98a6-30beda9f22cf",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view accrued interest in KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view accrued interest in KISS",
                  "timedOut": false,
                  "duration": 313,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst scaledDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst expectedValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, scaledDebt.sub(principalDebt), true)).rawValue;\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// 8 decimals\n(0, chai_1.expect)(accruedInterest.kissAmount).to.bignumber.equal(expectedValue.mul(10 ** 10));",
                  "err": {},
                  "uuid": "8f200e30-91c0-444b-970b-a34a23e2bf37",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay full interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay full interest with KISS",
                  "timedOut": false,
                  "duration": 865,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\n// get the principal before repayment\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// get values after repayment\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(accruedInterest.assetAmount).to.bignumber.eq(0);\n(0, chai_1.expect)(debt).to.bignumber.eq(principalDebt);",
                  "err": {},
                  "uuid": "ceb624fe-73db-4408-8cf8-a9c439689257",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay partial interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay partial interest with KISS",
                  "timedOut": false,
                  "duration": 327,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nconst accruedInterestBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// get the principal before repayment\nconst debtBefore = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst repaymentAmount = accruedInterestBefore.kissAmount.div(5);\nconst repaymentAmountAsset = accruedInterestBefore.assetAmount.div(5);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayStabilityRateInterestPartial(userTwo.address, this.krAsset.address, repaymentAmount);\n// get values after repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterestAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// TODO: calc exact values instead of closeTo\n(0, chai_1.expect)(accruedInterestAfter.kissAmount).to.be.closeTo(accruedInterestBefore.kissAmount.sub(repaymentAmount), RATE_DELTA);\n(0, chai_1.expect)(debtAfter).to.be.closeTo(debtBefore.sub(repaymentAmountAsset), RATE_DELTA);",
                  "err": {},
                  "uuid": "4128a5e8-9fe2-49a3-9490-951f864ff4c0",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest for multiple assets in batch",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest for multiple assets in batch",
                  "timedOut": false,
                  "duration": 6547,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo,\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nconst totalInterestInKISSBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map(asset => hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c) => a.add(c.kissAmount), ethers_1.BigNumber.from(0));\nconst totalInterestInKISSAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, chai_1.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nconst KISSMinAmount = (0, numbers_1.toBig)(10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: KISSMinAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.connect(userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSAfterRepay).to.equal(0);",
                  "err": {},
                  "uuid": "482ce8ec-586c-4b7e-ba42-624b55908bdd",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest and principal for a single asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest and principal for a single asset",
                  "timedOut": false,
                  "duration": 509,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst accruedInterestBeforeBurn = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\nconst accruedInterestAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Ensure burning does not wipe interest accrued\n(0, chai_1.expect)(accruedInterestAfterBurn.assetAmount.gt(accruedInterestBeforeBurn.assetAmount)).to.be.true;\n(0, chai_1.expect)(accruedInterestAfterBurn.kissAmount.gt(accruedInterestBeforeBurn.kissAmount)).to.be.true;\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore.length).to.equal(2);\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter.length).to.equal(1);\nconst accruedInterestAfterRepayment = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n// Ensure debt actually gets wiped\n(0, chai_1.expect)(principalDebt).to.equal(0);\n(0, chai_1.expect)(accruedInterestAfterRepayment.assetAmount).to.equal(0);\n(0, chai_1.expect)(accruedInterestAfterRepayment.kissAmount).to.equal(0);\n(0, chai_1.expect)(debt).to.equal(0);\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst accruedInterestYearAfterRepayment = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Sanity check with another year of time that there is no interest accrual\n(0, chai_1.expect)(accruedInterestYearAfterRepayment.assetAmount).to.equal(0);\n(0, chai_1.expect)(accruedInterestYearAfterRepayment.kissAmount).to.equal(0);\n// Get kr asset value, should be only KISS minted that remains\nconst krAssetValue = (await hardhat_1.default.Diamond.getAccountKrAssetValue(userTwo.address)).rawValue;\n(0, chai_1.expect)(krAssetValue).to.equal((0, numbers_1.toBig)(10, 8));",
                  "err": {},
                  "uuid": "9c1ad5ad-8d0f-4264-afe2-4c8016bf20e3",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch repay interest and all debt",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can batch repay interest and all debt",
                  "timedOut": false,
                  "duration": 6655,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nconst totalInterestInKISSBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map(asset => hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c) => a.add(c.kissAmount), ethers_1.BigNumber.from(0));\nconst totalInterestInKISSAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, chai_1.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nawait Promise.all(krAssets.map(async (asset) => hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, asset.address, hardhat_1.default.ethers.constants.MaxUint256, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userTwo.address, asset.address))));\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore.length).to.equal(4);\nawait hardhat_1.default.Diamond.connect(userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSAfterRepay).to.equal(0);\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter.length).to.equal(1);",
                  "err": {},
                  "uuid": "f29a57a4-55f6-462b-b04c-ff509acb485d",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can open up a new debt positions after wiping all debt + interest",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can open up a new debt positions after wiping all debt + interest",
                  "timedOut": false,
                  "duration": 835,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst expectedDebtAfterOneYear = await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(expectedDebtAfterOneYear);\n// Wipe debt\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\nconst accruedInterest = (await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address))\n    .assetAmount;\n// Mint again, before interest repayment\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\n// Ensure debt is principal + interest\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.closeTo(mintAmount.add(accruedInterest), RATE_DELTA);\n// Burn all assets\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\n// Ensure debt is equal to interest\nconst accruedInterestAfterBurn = (await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address)).assetAmount;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(accruedInterestAfterBurn);\n// Repay all interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// Debt should be wiped\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n// Mint again\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\n// Scaled should be equal to principal\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(mintAmount);\n// Advance time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n// Ensure accrual is the same as the previous year with the same position\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.eq(expectedDebtAfterOneYear);",
                  "err": {},
                  "uuid": "49ecfb23-ea51-43de-be9b-d9908f8efa7a",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close a position in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close a position in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 437,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userOne,\n});\nawait KISS.connect(userOne).transfer(userTwo.address, minDebtAmount);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait hardhat_1.default.Diamond.connect(userTwo).closeKrAssetDebtPosition(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address)).to.eq(0);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(accruedInterest.assetAmount).to.eq(0);\n(0, chai_1.expect)(accruedInterest.kissAmount).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "dfdb34c9-3107-44e7-8deb-3cc4adbab294",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close all positions and interest in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close all positions and interest in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 6291,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst kissAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10).mul(2);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: kissAmount,\n    user: userOne,\n});\nawait KISS.connect(userOne).transfer(userTwo.address, kissAmount);\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n// ~1M gas with 8 krAssets\n// console.log(+(await tx.wait()).gasUsed);\nawait hardhat_1.default.Diamond.connect(userTwo).batchCloseKrAssetDebtPositions(userTwo.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(accruedInterest).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getAccountKrAssetValue(userTwo.address)).rawValue).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "3dc94f52-8d82-4bc7-886a-0ae1a93a1bf4",
                  "parentUUID": "24db404a-50a2-49fb-b76c-f86a7badeafc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41320a23-a89c-4ebb-8d95-2c460cb9daac",
                "6e30ac41-41e2-4680-98a6-30beda9f22cf",
                "8f200e30-91c0-444b-970b-a34a23e2bf37",
                "ceb624fe-73db-4408-8cf8-a9c439689257",
                "4128a5e8-9fe2-49a3-9490-951f864ff4c0",
                "482ce8ec-586c-4b7e-ba42-624b55908bdd",
                "9c1ad5ad-8d0f-4264-afe2-4c8016bf20e3",
                "f29a57a4-55f6-462b-b04c-ff509acb485d",
                "49ecfb23-ea51-43de-be9b-d9908f8efa7a",
                "dfdb34c9-3107-44e7-8deb-3cc4adbab294",
                "3dc94f52-8d82-4bc7-886a-0ae1a93a1bf4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23202,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "25fc0d61-60d1-4861-9d4f-77a6e138891b",
          "title": "Stability Rates",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
          "file": "/src/test/stability-rate/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before all\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (currentFixtureName && fixtureName.join(\"\") !== currentFixtureName.join(\"\")) {\n    hardhat_1.default.collaterals = [];\n    hardhat_1.default.krAssets = [];\n    hardhat_1.default.allAssets = [];\n    hardhat_1.default.Diamond = undefined;\n}\ncurrentFixtureName = fixtureName;",
              "err": {},
              "uuid": "5b5b0e0e-709d-44c8-9f7c-4b63a2cc0099",
              "parentUUID": "25fc0d61-60d1-4861-9d4f-77a6e138891b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 24,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.deployments.createFixture(async (hre) => {\n    const result = await hardhat_1.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hardhat_1.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets;\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "4e693f1b-203c-4d7e-a13c-bb8a0ae7252d",
              "parentUUID": "25fc0d61-60d1-4861-9d4f-77a6e138891b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 443,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users = await hardhat_1.default.getUsers();\nliquidator = users.deployer;\nuserTwo = users.userTwo;\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, numbers_1.toBig)(1000);\nconst kLiq = (0, numbers_1.toBig)(100);\nawait this.collateral.setBalance(liquidator, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: liquidator,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: liquidator,\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: liquidator,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "a528d2dd-7af3-4119-82f2-8e7ca9e0704d",
              "parentUUID": "25fc0d61-60d1-4861-9d4f-77a6e138891b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2ab46190-cc21-455e-acd8-e410af4c25b7",
              "title": "#stability rate - liquidation",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
              "file": "/src/test/stability-rate/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#stability rate - liquidation\"",
                  "fullTitle": "Stability Rates #stability rate - liquidation \"before each\" hook in \"#stability rate - liquidation\"",
                  "timedOut": false,
                  "duration": 5691,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Create few krAssets\nkrAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1.1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));",
                  "err": {},
                  "uuid": "b9916854-da64-4df2-b8db-a51295178d03",
                  "parentUUID": "2ab46190-cc21-455e-acd8-e410af4c25b7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 566,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst krAsset = krAssets[0];\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "04b1f6ec-bf28-47ef-94da-979ad7a41c48",
                  "parentUUID": "2ab46190-cc21-455e-acd8-e410af4c25b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot batch liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot batch liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 618,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "4f8fade6-8ad5-440b-a6ec-bcf1bd120936",
                  "parentUUID": "2ab46190-cc21-455e-acd8-e410af4c25b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 1306,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(liquidator).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map(asset => asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR * 4);\n// should be liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\n// Asset to liquidate\nconst krAsset = krAssets[0];\nconst interestUSDTotal = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// Liquidator mints KISS\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: interestUSDTotal.add((0, numbers_1.toBig)(1)),\n    user: liquidator,\n});\n// liquidatable value total before\nconst accruedKissInterest = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address)).kissAmount);\nconst accountCollateralBefore = await hardhat_1.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, numbers_1.toBig)(0));\n// Liquidate\nconst tx = await hardhat_1.default.Diamond.connect(liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address);\n// Should all be wiped\nconst interestAccruedAfterLiq = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address);\n(0, chai_1.expect)(interestAccruedAfterLiq.kissAmount).to.eq(0);\n(0, chai_1.expect)(interestAccruedAfterLiq.assetAmount).to.eq(0);\nconst accountCollateralAfter = await hardhat_1.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\nconst event = await (0, lib_1.getInternalEvent)(tx, (0, events_1.EventContract)(), \"InterestLiquidationOccurred\");\n// validate interest accrual changes\n(0, chai_1.expect)(accountCollateralAfter).to.equal(accountCollateralBefore.sub(event.collateralSent));\nconst liquidationIncentive = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue);\nconst expectedCollateral = (accruedKissInterest / (0, hardhat_1.fromBig)(await this.collateral.getPrice(), 8)) * liquidationIncentive;\n// event validation\n(0, chai_1.expect)(event.account).to.equal(userTwo.address);\n(0, chai_1.expect)(event.liquidator).to.equal(liquidator.address);\n(0, chai_1.expect)(event.repayKreskoAsset).to.equal(krAsset.address);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.collateralSent).toFixed(6)).to.equal(expectedCollateral.toFixed(6));\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.repayUSD)).to.closeTo(accruedKissInterest, 0.0001);\n// liquidator received collateral\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "0bfe82fe-f146-4952-9697-7ccbfcd4dcf0",
                  "parentUUID": "2ab46190-cc21-455e-acd8-e410af4c25b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can batch liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 1615,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(liquidator).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map(asset => asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR * 4);\n// should be liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\nconst interestKissTotal = (0, hardhat_1.fromBig)(await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n// Liquidator mints KISS\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: interestKissTotal + 1,\n    user: liquidator,\n});\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, numbers_1.toBig)(0));\n// Liquidate\nconst tx = await hardhat_1.default.Diamond.connect(liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address);\nconst interestKissTotalAfter = (0, hardhat_1.fromBig)(await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nconst event = await (0, lib_1.getInternalEvent)(tx, (0, events_1.EventContract)(), \"BatchInterestLiquidationOccurred\");\nconst repayUSD = (0, hardhat_1.fromBig)(event.repayUSD);\n// interest accrued changes\n(0, chai_1.expect)(interestKissTotalAfter).to.closeTo(interestKissTotal - (0, hardhat_1.fromBig)(event.repayUSD), 0.0001);\nconst liquidationIncentive = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue);\nconst expectedCollateral = (repayUSD / (0, hardhat_1.fromBig)(await this.collateral.getPrice(), 8)) * liquidationIncentive;\n// event validation\n(0, chai_1.expect)(event.account).to.equal(userTwo.address);\n(0, chai_1.expect)(event.liquidator).to.equal(liquidator.address);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.collateralSent)).to.closeTo(expectedCollateral, 0.0001);\n(0, chai_1.expect)(repayUSD).to.closeTo(interestKissTotal - interestKissTotalAfter, 0.0001);\n// liquidator received collateral\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "78fcd614-3423-441b-9f5d-9aa0152097aa",
                  "parentUUID": "2ab46190-cc21-455e-acd8-e410af4c25b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04b1f6ec-bf28-47ef-94da-979ad7a41c48",
                "4f8fade6-8ad5-440b-a6ec-bcf1bd120936",
                "0bfe82fe-f146-4952-9697-7ccbfcd4dcf0",
                "78fcd614-3423-441b-9f5d-9aa0152097aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}