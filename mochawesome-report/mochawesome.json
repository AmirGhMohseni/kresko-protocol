{
  "stats": {
    "suites": 81,
    "tests": 238,
    "passes": 231,
    "pending": 7,
    "failures": 0,
    "start": "2023-04-26T11:57:24.255Z",
    "end": "2023-04-26T11:58:37.149Z",
    "duration": 72894,
    "testsRegistered": 238,
    "passPercent": 100,
    "pendingPercent": 2.941176470588235,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8fb9cc59-f9bb-4e17-8faa-843165143a71",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f29e8817-97dd-4e38-8d8f-183f654cb7b7",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "e558ab85-8a35-4039-8800-ee488b47544b",
              "parentUUID": "f29e8817-97dd-4e38-8d8f-183f654cb7b7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3f573239-ba17-47f2-aeb1-d7252cf891bc",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(hardhat_1.default.users.deployer.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "53f926c9-cbb2-43ac-8c5c-440005404d53",
                  "parentUUID": "3f573239-ba17-47f2-aeb1-d7252cf891bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await hardhat_1.default.Diamond.facets()).map(f => f.facetAddress);\nconst facetAddressesArtifact = this.facets.map(f => f.facetAddress);\n(0, chai_1.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, chai_1.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "6203a5d3-c76d-4794-8c99-7bdc1ab419f9",
                  "parentUUID": "3f573239-ba17-47f2-aeb1-d7252cf891bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await hardhat_1.default.Diamond.facets()).flatMap(f => f.functionSelectors);\nconst facetSelectorsOnArtifact = this.facets.flatMap(f => f.functionSelectors);\n(0, chai_1.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, chai_1.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "46b9ed06-48f9-44d9-8002-1c71a961c342",
                  "parentUUID": "3f573239-ba17-47f2-aeb1-d7252cf891bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53f926c9-cbb2-43ac-8c5c-440005404d53",
                "6203a5d3-c76d-4794-8c99-7bdc1ab419f9",
                "46b9ed06-48f9-44d9-8002-1c71a961c342"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 56,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f87d2d3a-940c-4151-b24f-6cb2a04810ac",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "67dcb7f4-551f-43ca-bfc1-a3bb29743084",
              "parentUUID": "f87d2d3a-940c-4151-b24f-6cb2a04810ac",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b50b6253-bd93-4240-ac45-e3c5995e8440",
              "title": "#ownership",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(hardhat_1.default.addr.deployer);",
                  "err": {},
                  "uuid": "16b25234-a1a0-46c4-bf53-1a9fa1e7d4cf",
                  "parentUUID": "b50b6253-bd93-4240-ac45-e3c5995e8440",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.ADMIN, hardhat_1.default.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "b02b471c-eb8c-4b83-89bf-05187786b378",
                  "parentUUID": "b50b6253-bd93-4240-ac45-e3c5995e8440",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hardhat_1.default.users.userOne;\nawait hardhat_1.default.Diamond.transferOwnership(pendingOwner.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "5bdbcbef-bf1a-4b25-8f39-24145bf7caf7",
                  "parentUUID": "b50b6253-bd93-4240-ac45-e3c5995e8440",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hardhat_1.default.users.userOne;\nawait hardhat_1.default.Diamond.transferOwnership(pendingOwner.address);\nawait hardhat_1.default.Diamond.connect(pendingOwner).acceptOwnership();\n(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "644375f7-3bab-4735-9484-657d91d529e2",
                  "parentUUID": "b50b6253-bd93-4240-ac45-e3c5995e8440",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16b25234-a1a0-46c4-bf53-1a9fa1e7d4cf",
                "b02b471c-eb8c-4b83-89bf-05187786b378",
                "5bdbcbef-bf1a-4b25-8f39-24145bf7caf7",
                "644375f7-3bab-4735-9484-657d91d529e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "90b5e73d-f341-452e-80be-a38067c3b648",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "49472d96-a34a-4e61-a8d2-9dd40076eaa4",
              "parentUUID": "90b5e73d-f341-452e-80be-a38067c3b648",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0c941e64-a46e-4690-a510-e0f543a32d98",
              "title": "#upgrades",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 696,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await smock_1.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hardhat_1.default.deploy(\"SmockInit\");\nconst signatures = hardhat_1.default.getSignatures([...typechain_1.SmockFacet__factory.abi]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: types_1.FacetCutAction.Add,\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hardhat_1.default.addr.userOne);\nawait hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = hardhat_1.default.ethers.utils.id(\"kresko.test.operator\");\nconst isTestOperator = await hardhat_1.default.Diamond.hasRole(TEST_OPERATOR_ROLE, hardhat_1.default.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, chai_1.expect)(isTestOperator).to.equal(true);\nconst Facet = await hardhat_1.default.ethers.getContractAt([...typechain_1.SmockFacet__factory.abi], hardhat_1.default.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, chai_1.expect)(operatorFromNewStorage).to.equal(hardhat_1.default.addr.userOne);",
                  "err": {},
                  "uuid": "e9d0c397-2924-462a-85ec-dfcb0a82116d",
                  "parentUUID": "0c941e64-a46e-4690-a510-e0f543a32d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 347,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, add_facet_1.addFacet)({\n    name: \"SmockFacet\",\n    initializerName: \"SmockInit\",\n    initializerArgs: hardhat_1.default.addr.userOne,\n});\nconst facetsBefore = await hardhat_1.default.Diamond.facets();\n(0, chai_1.expect)(facetsBefore.filter(f => f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, remove_facet_1.removeFacet)({ name: \"SmockFacet\" });\nconst facetsAfter = await hardhat_1.default.Diamond.facets();\n(0, chai_1.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, chai_1.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "6ccf3202-88b5-4ec7-ab00-0ca93c186d6a",
                  "parentUUID": "0c941e64-a46e-4690-a510-e0f543a32d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(hardhat_1.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hardhat_1.default.addr.nonadmin;\nawait hardhat_1.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hardhat_1.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hardhat_1.default.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await hardhat_1.default.Diamond.facetAddress(signature);\nconst functions = await hardhat_1.default.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: hardhat_1.default.ethers.constants.AddressZero,\n    action: types_1.FacetCutAction.Remove,\n    functionSelectors: [signature],\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hardhat_1.default.addr.userOne;\nconst initData = await hardhat_1.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nawait tx.wait();\n// Ensure rest of the functions remain\nconst functionsAfterCut = await hardhat_1.default.Diamond.facetFunctionSelectors(facetAddress);\n(0, chai_1.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst filter = hardhat_1.default.Diamond.filters[\"PendingOwnershipTransfer(address,address)\"](hardhat_1.default.addr.deployer, correctOwner);\nconst [event] = await hardhat_1.default.Diamond.queryFilter(filter);\nconst { previousOwner, newOwner } = event.args;\n(0, chai_1.expect)(previousOwner).to.equal(hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(test_1.Error.DIAMOND_INVALID_FUNCTION_SIGNATURE);",
                  "err": {},
                  "uuid": "dcae3615-af39-4541-a9c8-1d4ac28d4db5",
                  "parentUUID": "0c941e64-a46e-4690-a510-e0f543a32d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(hardhat_1.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hardhat_1.default.addr.nonadmin;\nawait hardhat_1.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hardhat_1.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hardhat_1.default.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await hardhat_1.default.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await hardhat_1.default.deploy(\"DiamondOwnershipFacet\", {\n    deploymentName: \"DiamondOwnershipFacet2\",\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: types_1.FacetCutAction.Replace,\n    functionSelectors: [signature],\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hardhat_1.default.addr.userOne;\nconst initData = await hardhat_1.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nawait tx.wait();\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(test_1.Error.DIAMOND_INVALID_PENDING_OWNER);\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await hardhat_1.default.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, chai_1.expect)(functionsNewFacet.length).to.equal(1);\n(0, chai_1.expect)(functionsNewFacet).to.have.members([signature]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await hardhat_1.default.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, chai_1.expect)(functionsOldFacet).to.not.have.members([signature]);\n(0, chai_1.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).acceptOwnership());\nconst currentOwner = await hardhat_1.default.Diamond.owner();\n(0, chai_1.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "8b84ebc4-7966-4b8a-a8c0-328740ba9a50",
                  "parentUUID": "0c941e64-a46e-4690-a510-e0f543a32d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 510,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);\nconst Factory = await smock_1.smock.mock(\"SmockInit\");\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait hardhat_1.default.Diamond.upgradeState(tx.to, tx.data);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "0e8e2f97-e9e4-40d1-b64b-1643faf39d36",
                  "parentUUID": "0c941e64-a46e-4690-a510-e0f543a32d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 864,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await smock_1.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hardhat_1.default.deploy(\"SmockInit\");\nconst signatures = hardhat_1.default.getSignatures([...typechain_1.SmockFacet__factory.abi]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: types_1.FacetCutAction.Add,\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hardhat_1.default.addr.userOne);\nawait hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nconst Diamond = await hardhat_1.default.ethers.getContractAt(\"SmockFacet\", hardhat_1.default.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, chai_1.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await smock_1.smock.mock(\"SmockFacet2\");\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = hardhat_1.default.getSignatures([...typechain_1.SmockFacet2__factory.abi]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: types_1.FacetCutAction.Add,\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait hardhat_1.default.Diamond.diamondCut([Cut2], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await hardhat_1.default.ethers.getContractAt(\"SmockFacet2\", hardhat_1.default.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, chai_1.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, chai_1.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "ba00167d-a2ee-4fbf-b655-a91a597a1ddf",
                  "parentUUID": "0c941e64-a46e-4690-a510-e0f543a32d98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e9d0c397-2924-462a-85ec-dfcb0a82116d",
                "6ccf3202-88b5-4ec7-ab00-0ca93c186d6a",
                "dcae3615-af39-4541-a9c8-1d4ac28d4db5",
                "8b84ebc4-7966-4b8a-a8c0-328740ba9a50",
                "0e8e2f97-e9e4-40d1-b64b-1643faf39d36",
                "ba00167d-a2ee-4fbf-b655-a91a597a1ddf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2563,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "05a30e02-f400-47f7-bfa3-b73a1fcf0b88",
          "title": "Forking",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
          "file": "/src/test/forking/00-setup.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fb0391f0-c502-4353-99d9-0553088b8efc",
              "title": "#setup",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get Kresko from the companion network locally",
                  "fullTitle": "Forking #setup should get Kresko from the companion network locally",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "da07a67b-f992-4739-9929-867a0c6bf17b",
                  "parentUUID": "fb0391f0-c502-4353-99d9-0553088b8efc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "da07a67b-f992-4739-9929-867a0c6bf17b"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "4940d4f4-deb6-42c2-ab5b-0a0af9f316bf",
              "title": "#rate-upgrade-11-04-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deploy facets",
                  "fullTitle": "Forking #rate-upgrade-11-04-2023 should be able to deploy facets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "675fee22-329d-478b-a0a4-ab46fe58119e",
                  "parentUUID": "4940d4f4-deb6-42c2-ab5b-0a0af9f316bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "675fee22-329d-478b-a0a4-ab46fe58119e"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "30e642da-3271-488f-87bd-4cbb241611f4",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "36339ac9-e996-4741-a6a4-7d411e2aa0da",
              "parentUUID": "30e642da-3271-488f-87bd-4cbb241611f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fe2ab96e-1f84-4e40-9769-d7aa246f3a16",
              "title": "#initialization - anchor",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = this.krAssets.find(k => k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "9bb871c9-8c8a-4eca-810e-39e15be91274",
                  "parentUUID": "fe2ab96e-1f84-4e40-9769-d7aa246f3a16",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(KreskoAsset.initialize(name, symbol, 18, hardhat_1.default.addr.deployer, hardhat_1.default.Diamond.address)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "09099957-ea63-4789-a85d-f3f3a7ad2549",
                  "parentUUID": "fe2ab96e-1f84-4e40-9769-d7aa246f3a16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await hardhat_1.default.deployments.get(symbol);\nconst implementationAddress = deployment.implementation;\n(0, chai_1.expect)(implementationAddress).to.not.equal(hardhat_1.default.ethers.constants.AddressZero);\nconst KreskoAssetImpl = await hardhat_1.default.ethers.getContractAt(\"KreskoAsset\", implementationAddress);\nawait (0, chai_1.expect)(KreskoAssetImpl.initialize(name, symbol, 18, hardhat_1.default.addr.deployer, hardhat_1.default.Diamond.address)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "4e05153b-773b-4371-8f52-f62e8b71d772",
                  "parentUUID": "fe2ab96e-1f84-4e40-9769-d7aa246f3a16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await KreskoAsset.name()).to.equal(name);\n(0, chai_1.expect)(await KreskoAsset.symbol()).to.equal(symbol);\n(0, chai_1.expect)(await KreskoAsset.kresko()).to.equal(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(await KreskoAsset.hasRole(test_1.Role.ADMIN, hardhat_1.default.addr.deployer)).to.equal(true);\n(0, chai_1.expect)(await KreskoAsset.hasRole(test_1.Role.OPERATOR, hardhat_1.default.Diamond.address)).to.equal(true);\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(\"200000000000000000000\");\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).to.equal(0);\n(0, chai_1.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "c3b9d07b-70d5-481c-8b07-9c565505d149",
                  "parentUUID": "fe2ab96e-1f84-4e40-9769-d7aa246f3a16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, chai_1.expect)(KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);\n(0, chai_1.expect)(await KreskoAsset.name()).to.equal(newName);\n(0, chai_1.expect)(await KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "dc234728-31c8-4758-8d24-cc761c9fff9c",
                  "parentUUID": "fe2ab96e-1f84-4e40-9769-d7aa246f3a16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09099957-ea63-4789-a85d-f3f3a7ad2549",
                "4e05153b-773b-4371-8f52-f62e8b71d772",
                "c3b9d07b-70d5-481c-8b07-9c565505d149",
                "dc234728-31c8-4758-8d24-cc761c9fff9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 101,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "52582803-c36d-47f4-b7d9-4062534bd322",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - wrapped\"",
                  "fullTitle": "KreskoAsset #initialization - wrapped \"before each\" hook in \"#initialization - wrapped\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = hardhat_1.default.krAssets.find(k => k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "11e3c7fd-46b7-409e-9828-fd7b0ef7b3dc",
                  "parentUUID": "52582803-c36d-47f4-b7d9-4062534bd322",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(KreskoAssetAnchor.initialize(KreskoAsset.address, name, symbol, hardhat_1.default.addr.deployer)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "c726488f-ecdc-4a33-81c4-5367b927eee4",
                  "parentUUID": "52582803-c36d-47f4-b7d9-4062534bd322",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await hardhat_1.default.deployments.get(shared_1.anchorTokenPrefix + symbol);\nconst implementationAddress = deployment.implementation;\n(0, chai_1.expect)(implementationAddress).to.not.equal(hardhat_1.default.ethers.constants.AddressZero);\nconst KreskoAssetAnchorImpl = await hardhat_1.default.ethers.getContractAt(\"KreskoAssetAnchor\", implementationAddress);\nawait (0, chai_1.expect)(KreskoAssetAnchorImpl.initialize(KreskoAsset.address, name, symbol, hardhat_1.default.addr.deployer)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "47e66ae4-a90a-4338-8ffb-f234ab51d900",
                  "parentUUID": "52582803-c36d-47f4-b7d9-4062534bd322",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, chai_1.expect)(KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);\n(0, chai_1.expect)(await KreskoAssetAnchor.name()).to.equal(newName);\n(0, chai_1.expect)(await KreskoAssetAnchor.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "26976026-d38f-4e7c-88b6-251188ede92e",
                  "parentUUID": "52582803-c36d-47f4-b7d9-4062534bd322",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await KreskoAssetAnchor.name()).to.equal(name);\n(0, chai_1.expect)(await KreskoAssetAnchor.symbol()).to.equal(shared_1.anchorTokenPrefix + symbol);\n(0, chai_1.expect)(await KreskoAssetAnchor.asset()).to.equal(KreskoAsset.address);\n(0, chai_1.expect)(await KreskoAssetAnchor.hasRole(test_1.Role.ADMIN, hardhat_1.default.addr.deployer)).to.equal(true);\n(0, chai_1.expect)(await KreskoAssetAnchor.hasRole(test_1.Role.OPERATOR, hardhat_1.default.Diamond.address)).to.equal(true);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(\"200000000000000000000\");\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(await KreskoAsset.totalSupply());\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).to.equal(0);\n(0, chai_1.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "a526734a-7be7-4e00-904e-59a356fa0904",
                  "parentUUID": "52582803-c36d-47f4-b7d9-4062534bd322",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c726488f-ecdc-4a33-81c4-5367b927eee4",
                "47e66ae4-a90a-4338-8ffb-f234ab51d900",
                "26976026-d38f-4e7c-88b6-251188ede92e",
                "a526734a-7be7-4e00-904e-59a356fa0904"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 124,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "b7256ba6-7001-4830-a3a8-048a300ca291",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "0ec002bd-9d80-4d16-b5c0-2885c6c834ed",
              "parentUUID": "b7256ba6-7001-4830-a3a8-048a300ca291",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.owner = hardhat_1.default.users.deployer;\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol);\nthis.mintAmount = 125;\nawait this.krAsset.contract.grantRole(test_1.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "a0a04bc5-2ff0-4fa7-849c-188f05f5b891",
              "parentUUID": "b7256ba6-7001-4830-a3a8-048a300ca291",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "346166fa-0c33-4db8-a4b4-8cd18e46b26c",
              "title": "#mint",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "1b56a293-b8bc-46bc-9f2e-b56306bf5f37",
                  "parentUUID": "346166fa-0c33-4db8-a4b4-8cd18e46b26c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(hardhat_1.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "0d0ff3ae-5f3c-4ae8-9fa9-c5f9a90d5a73",
                  "parentUUID": "346166fa-0c33-4db8-a4b4-8cd18e46b26c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait (0, chai_1.expect)(this.krAsset.contract.connect(hardhat_1.default.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userOne.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and all account balances unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "808cc07e-f75c-4e41-a090-394707ac5620",
                  "parentUUID": "346166fa-0c33-4db8-a4b4-8cd18e46b26c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.renounceRole(test_1.Role.OPERATOR, this.owner.address);\nawait (0, chai_1.expect)(this.krAsset.contract.connect(hardhat_1.default.users.admin).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.admin.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);",
                  "err": {},
                  "uuid": "952d5bfa-79bf-470d-a98b-53751aecfedf",
                  "parentUUID": "346166fa-0c33-4db8-a4b4-8cd18e46b26c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b56a293-b8bc-46bc-9f2e-b56306bf5f37",
                "0d0ff3ae-5f3c-4ae8-9fa9-c5f9a90d5a73",
                "808cc07e-f75c-4e41-a090-394707ac5620",
                "952d5bfa-79bf-470d-a98b-53751aecfedf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 118,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "8bd13d56-8b61-4307-ae32-edfe787ec32e",
              "title": "#burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 11,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.mintAmount = 250;\nawait this.krAsset.contract.connect(this.owner).mint(hardhat_1.default.users.userOne.address, this.mintAmount);",
                  "err": {},
                  "uuid": "4a68998e-f356-45d8-8b7b-efc53f1b9bf5",
                  "parentUUID": "8bd13d56-8b61-4307-ae32-edfe787ec32e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(hardhat_1.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "bb7e6398-1478-4bb3-9942-9ea02da601aa",
                  "parentUUID": "8bd13d56-8b61-4307-ae32-edfe787ec32e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.connect(this.owner).approve(hardhat_1.default.users.userOne.address, this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.allowance(this.owner.address, hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(hardhat_1.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, chai_1.expect)(await this.krAsset.contract.allowance(this.owner.address, hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "8344bcaf-ebb1-4fab-b17d-e992e0626b79",
                  "parentUUID": "8bd13d56-8b61-4307-ae32-edfe787ec32e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\nawait (0, chai_1.expect)(this.krAsset.contract.connect(this.owner).burn(hardhat_1.default.users.userOne.address, overUserBalance)).to\n    .be.reverted;\n// Check total supply and user's balances are unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "48b008ff-74b5-48a5-a5f2-3cf8d92d7159",
                  "parentUUID": "8bd13d56-8b61-4307-ae32-edfe787ec32e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(this.krAsset.contract.connect(hardhat_1.default.users.userTwo).burn(hardhat_1.default.users.userOne.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userTwo.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and user's balances unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "e74f0915-cb79-487c-af9c-b7df3a64768b",
                  "parentUUID": "8bd13d56-8b61-4307-ae32-edfe787ec32e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb7e6398-1478-4bb3-9942-9ea02da601aa",
                "8344bcaf-ebb1-4fab-b17d-e992e0626b79",
                "48b008ff-74b5-48a5-a5f2-3cf8d92d7159",
                "e74f0915-cb79-487c-af9c-b7df3a64768b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "5b4a2876-139e-43a6-b0fe-1187c409d09e",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "00bfe368-8164-4054-8321-8266c7ab80e7",
              "parentUUID": "5b4a2876-139e-43a6-b0fe-1187c409d09e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol).contract;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(test_1.Role.OPERATOR, hardhat_1.default.addr.deployer);",
              "err": {},
              "uuid": "32018459-4265-4cd3-8de5-7542b137b6c4",
              "parentUUID": "5b4a2876-139e-43a6-b0fe-1187c409d09e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d0485468-03da-422c-921a-19aa5dd3bd91",
              "title": "#rebase",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(\"1.525\");\nconst positive = true;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).equal(denominator);\n(0, chai_1.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "0f386309-12e4-4b85-b620-b8375a6c3ddd",
                  "parentUUID": "d0485468-03da-422c-921a-19aa5dd3bd91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(\"1.525\");\nconst positive = false;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).equal(denominator);\n(0, chai_1.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "d48e82f8-a7b1-410c-a184-a83cae865875",
                  "parentUUID": "d0485468-03da-422c-921a-19aa5dd3bd91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(1);\nconst positive = false;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "928cb13d-c35f-4bf9-aeb3-7cc033409bb0",
                  "parentUUID": "d0485468-03da-422c-921a-19aa5dd3bd91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "994e528f-65bb-4baa-b3ab-e90ac0c3e6be",
                  "title": "#balance + supply",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                      "err": {},
                      "uuid": "3534613d-c5b6-45cc-a0e5-d11b4a40fb74",
                      "parentUUID": "994e528f-65bb-4baa-b3ab-e90ac0c3e6be",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "9b0da6a5-7d6f-4df5-a795-dfa56293b1a2",
                      "parentUUID": "994e528f-65bb-4baa-b3ab-e90ac0c3e6be",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "67a36dde-8658-4eea-938b-98a71c57d092",
                      "parentUUID": "994e528f-65bb-4baa-b3ab-e90ac0c3e6be",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "be921f32-df04-4010-a194-48a8cc0f6db3",
                      "parentUUID": "994e528f-65bb-4baa-b3ab-e90ac0c3e6be",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 20,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "c2d79c87-438f-4b1c-87c6-0332dffa567b",
                      "parentUUID": "994e528f-65bb-4baa-b3ab-e90ac0c3e6be",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 25,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "7fa9900e-53c7-4d87-8d1e-317fdd3b0709",
                      "parentUUID": "994e528f-65bb-4baa-b3ab-e90ac0c3e6be",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 20,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "cb25ac3c-7ccd-4420-89b1-8d556ecabf10",
                      "parentUUID": "994e528f-65bb-4baa-b3ab-e90ac0c3e6be",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3534613d-c5b6-45cc-a0e5-d11b4a40fb74",
                    "9b0da6a5-7d6f-4df5-a795-dfa56293b1a2",
                    "67a36dde-8658-4eea-938b-98a71c57d092",
                    "be921f32-df04-4010-a194-48a8cc0f6db3",
                    "c2d79c87-438f-4b1c-87c6-0332dffa567b",
                    "7fa9900e-53c7-4d87-8d1e-317fdd3b0709",
                    "cb25ac3c-7ccd-4420-89b1-8d556ecabf10"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 142,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "2ed867d4-ae32-4e54-be6c-74ce5a6e3916",
                  "title": "#transfer",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 39,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "6ec2ef19-d1c1-405f-9cac-14fd4f122c70",
                      "parentUUID": "2ed867d4-ae32-4e54-be6c-74ce5a6e3916",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 39,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "a2825a72-955f-41cb-963f-1b3db908216f",
                      "parentUUID": "2ed867d4-ae32-4e54-be6c-74ce5a6e3916",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 85,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "0edc8274-3432-43e2-8c8f-7d74f4aac297",
                      "parentUUID": "2ed867d4-ae32-4e54-be6c-74ce5a6e3916",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "1e735619-e9c3-4a04-873f-bb0d179eac6e",
                      "parentUUID": "2ed867d4-ae32-4e54-be6c-74ce5a6e3916",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 80,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "4aef129f-b1b8-473f-a63b-d118a2549bd8",
                      "parentUUID": "2ed867d4-ae32-4e54-be6c-74ce5a6e3916",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "e68790a0-7980-4e0f-917e-abe9ad8738ac",
                      "parentUUID": "2ed867d4-ae32-4e54-be6c-74ce5a6e3916",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6ec2ef19-d1c1-405f-9cac-14fd4f122c70",
                    "a2825a72-955f-41cb-963f-1b3db908216f",
                    "0edc8274-3432-43e2-8c8f-7d74f4aac297",
                    "1e735619-e9c3-4a04-873f-bb0d179eac6e",
                    "4aef129f-b1b8-473f-a63b-d118a2549bd8",
                    "e68790a0-7980-4e0f-917e-abe9ad8738ac"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 401,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "0f386309-12e4-4b85-b620-b8375a6c3ddd",
                "d48e82f8-a7b1-410c-a184-a83cae865875",
                "928cb13d-c35f-4bf9-aeb3-7cc033409bb0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 56,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "8cd65d29-b003-4a32-9b32-6eda6edc12e7",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "79578c11-84de-47fc-aa3d-6f3a8f660d16",
              "parentUUID": "8cd65d29-b003-4a32-9b32-6eda6edc12e7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const asset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol);\nKreskoAsset = asset.contract;\nKreskoAssetAnchor = asset.anchor;\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(test_1.Role.OPERATOR, hardhat_1.default.addr.deployer),\n    KreskoAssetAnchor.grantRole(test_1.Role.OPERATOR, hardhat_1.default.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hardhat_1.default.ethers.constants.MaxUint256),\n]);",
              "err": {},
              "uuid": "96d4f3da-2df5-4a9e-af5d-848a18b85796",
              "parentUUID": "8cd65d29-b003-4a32-9b32-6eda6edc12e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d55ca65a-a359-4313-ae4c-d5eb1de1eb97",
              "title": "#minting and burning",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(test_1.defaultMintAmount.add(test_1.defaultMintAmount));\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "f693c2fe-d2d6-4137-97ff-fe6e8de2e5cf",
                  "parentUUID": "d55ca65a-a359-4313-ae4c-d5eb1de1eb97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "95d99291-ca59-4c4c-bbac-0d6ace6c25c6",
                  "parentUUID": "d55ca65a-a359-4313-ae4c-d5eb1de1eb97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "ffc99921-0336-4837-853f-e2143854e216",
                  "parentUUID": "d55ca65a-a359-4313-ae4c-d5eb1de1eb97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 127,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "48da3ef7-0ab2-449e-ba19-4462cb2a8e6f",
                  "parentUUID": "d55ca65a-a359-4313-ae4c-d5eb1de1eb97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nawait KreskoAssetAnchor.withdraw(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "f8e69cb7-8c96-4fe9-8d41-dabb4f510cfd",
                  "parentUUID": "d55ca65a-a359-4313-ae4c-d5eb1de1eb97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "d631ef5c-1fd7-4174-b896-259ee4ad348f",
                  "title": "#rebases",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "c7fe861e-1c23-4d99-ad3b-fc7946a114c1",
                      "title": "#conversions",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 151,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "a1378f80-dc18-4254-9a25-56a05a348123",
                          "parentUUID": "c7fe861e-1c23-4d99-ad3b-fc7946a114c1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 149,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "38114c66-6af6-4b3b-a2ed-029c71c3f1d6",
                          "parentUUID": "c7fe861e-1c23-4d99-ad3b-fc7946a114c1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 151,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "6d59f13e-53f6-449f-9f2d-e2f670adaed5",
                          "parentUUID": "c7fe861e-1c23-4d99-ad3b-fc7946a114c1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 147,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "fa61efe7-b3a6-4b58-8309-dbef7b772975",
                          "parentUUID": "c7fe861e-1c23-4d99-ad3b-fc7946a114c1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 148,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "7d113b8d-ffdc-4a2f-a611-f00c4e718ea9",
                          "parentUUID": "c7fe861e-1c23-4d99-ad3b-fc7946a114c1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 149,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "d8df3352-1d02-465b-bb22-4724eb0763f8",
                          "parentUUID": "c7fe861e-1c23-4d99-ad3b-fc7946a114c1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 154,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "d916499f-699f-4f50-9150-a9dd18f4b0a5",
                          "parentUUID": "c7fe861e-1c23-4d99-ad3b-fc7946a114c1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 156,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "354c0321-5ce0-485c-8142-19ed782fccd5",
                          "parentUUID": "c7fe861e-1c23-4d99-ad3b-fc7946a114c1",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a1378f80-dc18-4254-9a25-56a05a348123",
                        "38114c66-6af6-4b3b-a2ed-029c71c3f1d6",
                        "6d59f13e-53f6-449f-9f2d-e2f670adaed5",
                        "fa61efe7-b3a6-4b58-8309-dbef7b772975",
                        "7d113b8d-ffdc-4a2f-a611-f00c4e718ea9",
                        "d8df3352-1d02-465b-bb22-4724eb0763f8",
                        "d916499f-699f-4f50-9150-a9dd18f4b0a5",
                        "354c0321-5ce0-485c-8142-19ed782fccd5"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1205,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "f693c2fe-d2d6-4137-97ff-fe6e8de2e5cf",
                "95d99291-ca59-4c4c-bbac-0d6ace6c25c6",
                "ffc99921-0336-4837-853f-e2143854e216",
                "48da3ef7-0ab2-449e-ba19-4462cb2a8e6f",
                "f8e69cb7-8c96-4fe9-8d41-dabb4f510cfd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 404,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "a0029074-25b5-467b-a601-2bc2d6fa4680",
          "title": "Test KreskoAsset with Rebase and sync",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/04-krasset-sync-rebase.ts",
          "file": "/src/test/krasset/04-krasset-sync-rebase.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "fullTitle": "Test KreskoAsset with Rebase and sync \"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "391f180b-4174-4292-9de8-92069cb5db34",
              "parentUUID": "a0029074-25b5-467b-a601-2bc2d6fa4680",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "fullTitle": "Test KreskoAsset with Rebase and sync \"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "timedOut": false,
              "duration": 48,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === \"krETH\").contract;\nconst KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nconst Pair = await (await hardhat_1.default.getContractOrFork(\"UniswapV2Factory\")).getPair(KreskoAsset.address, KISS.address);\n// address of KISS-krETH pool\nthis.pool = await hardhat_1.ethers.getContractAt(\"UniswapV2Pair\", Pair);\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(test_1.Role.OPERATOR, hardhat_1.default.addr.deployer);",
              "err": {},
              "uuid": "abfc47fe-a4e0-4d1b-b2aa-17bdeaf2f979",
              "parentUUID": "a0029074-25b5-467b-a601-2bc2d6fa4680",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const denominator = 2;\nconst positive = true;\nconst beforeTotalSupply = await KreskoAsset.totalSupply();\nconst [beforeReserve0, beforeReserve1, beforeTimestamp] = await this.pool.getReserves();\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst [afterReserve0, afterReserve1, afterTimestamp] = await this.pool.getReserves();\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(beforeTotalSupply.add(test_1.defaultMintAmount).mul(denominator));\n(0, chai_1.expect)(afterReserve0).to.equal(beforeReserve0);\n(0, chai_1.expect)(afterReserve1).to.equal(beforeReserve1);\n(0, chai_1.expect)(beforeTimestamp).to.equal(afterTimestamp);",
              "err": {},
              "uuid": "a39f0702-eae9-4019-ab08-9e36af90421b",
              "parentUUID": "a0029074-25b5-467b-a601-2bc2d6fa4680",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const denominator = 2;\nconst positive = true;\nconst [beforeReserve0, beforeReserve1, beforeTimestamp] = await this.pool.getReserves();\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive, [this.pool.address]);\nconst [afterReserve0, afterReserve1, afterTimestamp] = await this.pool.getReserves();\n(0, chai_1.expect)(afterReserve0).to.equal(beforeReserve0.mul(denominator));\n(0, chai_1.expect)(afterReserve1).to.equal(beforeReserve1);\n(0, chai_1.expect)(afterTimestamp).to.gt(beforeTimestamp);",
              "err": {},
              "uuid": "a831cd74-9d9d-4b2b-95c9-dbaf4cd07b42",
              "parentUUID": "a0029074-25b5-467b-a601-2bc2d6fa4680",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a39f0702-eae9-4019-ab08-9e36af90421b",
            "a831cd74-9d9d-4b2b-95c9-dbaf4cd07b42"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "3f1e93bf-6027-4279-91bf-62d26097352e",
          "title": "Minter - Init",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
          "file": "/src/test/minter/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Init\"",
              "fullTitle": "Minter - Init \"before each\" hook in \"Minter - Init\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "994e7ceb-a3ab-4cdb-a563-701c60fff26f",
              "parentUUID": "3f1e93bf-6027-4279-91bf-62d26097352e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "db95195c-c29d-4d1b-84d1-3e88efc5842d",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
              "file": "/src/test/minter/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct initial state",
                  "fullTitle": "Minter - Init #initialization sets correct initial state",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.minterInitializations()).to.equal(1);\nconst { args } = await (0, shared_1.getMinterInitializer)(hardhat_1.default);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.ADMIN, args.admin)).to.equal(true);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.SAFETY_COUNCIL, hardhat_1.default.Multisig.address)).to.equal(true);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.feeRecipient()).to.equal(args.treasury);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue).to.equal(args.liquidationIncentiveMultiplier);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.minimumCollateralizationRatio()).rawValue).to.equal(args.minimumCollateralizationRatio);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.minimumDebtValue()).rawValue).to.equal(args.minimumDebtValue);",
                  "err": {},
                  "uuid": "fdff2f0a-87ae-4f76-a96c-a75a3332b8e1",
                  "parentUUID": "db95195c-c29d-4d1b-84d1-3e88efc5842d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize twice",
                  "fullTitle": "Minter - Init #initialization cant initialize twice",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.minterInitializations()).to.equal(1);\nconst initializer = await (0, shared_1.getMinterInitializer)(hardhat_1.default);\nconst initializerContract = await hardhat_1.default.getContractOrFork(initializer.name);\nconst tx = await initializerContract.populateTransaction.initialize(initializer.args);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.upgradeState(tx.to, tx.data)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED);",
                  "err": {},
                  "uuid": "0a6e3dc2-839e-4762-b8a3-b8215a2006c5",
                  "parentUUID": "db95195c-c29d-4d1b-84d1-3e88efc5842d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures all facets correctly",
                  "fullTitle": "Minter - Init #initialization configures all facets correctly",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await hardhat_1.default.Diamond.facets()).map(([facetAddress, functionSelectors]) => ({\n    facetAddress,\n    functionSelectors,\n}));\nconst expectedFacets = await Promise.all([...shared_1.minterFacets, ...shared_1.diamondFacets].map(async (name) => {\n    const deployment = await hardhat_1.default.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find(f => f.facetAddress === deployment.address)\n            .functionSelectors,\n    };\n}));\n(0, chai_1.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "250d6b98-5a61-4b34-bc6f-b828041a577c",
                  "parentUUID": "db95195c-c29d-4d1b-84d1-3e88efc5842d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fdff2f0a-87ae-4f76-a96c-a75a3332b8e1",
                "0a6e3dc2-839e-4762-b8a3-b8215a2006c5",
                "250d6b98-5a61-4b34-bc6f-b828041a577c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "83ff9a45-9ddc-4ac9-843c-46627d902329",
          "title": "Minter - Configuration",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "5e497d57-4416-4774-a33b-5e03b3c6dbf3",
              "parentUUID": "83ff9a45-9ddc-4ac9-843c-46627d902329",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd8baacc-b2d7-4f41-8567-428063605919",
              "title": "#configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Diamond = hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer);\nconst update = (0, test_1.getNewMinterParams)(hardhat_1.default.users.treasury.address);\nawait (0, chai_1.expect)(Diamond.updateLiquidationIncentiveMultiplier(update.liquidationIncentiveMultiplier)).to.not.be\n    .reverted;\nawait (0, chai_1.expect)(Diamond.updateMinimumCollateralizationRatio(update.minimumCollateralizationRatio)).to.not.be\n    .reverted;\nawait (0, chai_1.expect)(Diamond.updateMinimumDebtValue(update.minimumDebtValue)).to.not.be.reverted;\nawait (0, chai_1.expect)(Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, chai_1.expect)(Diamond.updateFeeRecipient(update.feeRecipient)).to.not.be.reverted;\nconst { liquidationIncentiveMultiplier, minimumCollateralizationRatio, minimumDebtValue, liquidationThreshold, feeRecipient, } = await hardhat_1.default.Diamond.getAllParams();\n(0, chai_1.expect)(update.liquidationIncentiveMultiplier.toBigInt()).to.equal(liquidationIncentiveMultiplier.rawValue);\n(0, chai_1.expect)(update.minimumCollateralizationRatio.toBigInt()).to.equal(minimumCollateralizationRatio.rawValue);\n(0, chai_1.expect)(update.minimumDebtValue.toBigInt()).to.equal(minimumDebtValue.rawValue);\n(0, chai_1.expect)(update.liquidationThreshold.toBigInt()).to.equal(liquidationThreshold.rawValue);\n(0, chai_1.expect)(update.feeRecipient).to.equal(feeRecipient);",
                  "err": {},
                  "uuid": "7caf450e-c6a4-4597-828f-febf3c162eb5",
                  "parentUUID": "bd8baacc-b2d7-4f41-8567-428063605919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 905,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract } = await (0, collaterals_1.addMockCollateralAsset)(test_1.defaultCollateralArgs);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.collateralExists(contract.address)).to.equal(true);\nconst [, oraclePrice] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(contract.address, hardhat_1.default.toBig(1), true);\n(0, chai_1.expect)(Number(oraclePrice)).to.equal(hardhat_1.default.toBig(test_1.defaultCollateralArgs.price, 8));",
                  "err": {},
                  "uuid": "87b1a00b-b6fe-43dc-86aa-96b904a602dc",
                  "parentUUID": "bd8baacc-b2d7-4f41-8567-428063605919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 872,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, kresko } = await (0, krassets_1.addMockKreskoAsset)();\nconst values = await kresko();\nconst kreskoPriceAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.krAssetExists(contract.address)).to.equal(true);\n(0, chai_1.expect)(values.exists).to.equal(true);\n(0, chai_1.expect)(Number(values.kFactor)).to.equal(Number((0, lib_1.toFixedPoint)(test_1.defaultKrAssetArgs.factor)));\n(0, chai_1.expect)(kreskoPriceAnswer).to.equal(test_1.defaultKrAssetArgs.price);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.supplyLimit)).to.equal(test_1.defaultKrAssetArgs.supplyLimit);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.closeFee.rawValue)).to.equal(test_1.defaultKrAssetArgs.closeFee);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.openFee.rawValue)).to.equal(test_1.defaultKrAssetArgs.openFee);",
                  "err": {},
                  "uuid": "b9e0bff8-14f0-4bbd-b591-447e5bb2a64b",
                  "parentUUID": "bd8baacc-b2d7-4f41-8567-428063605919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update AMM oracle",
                  "fullTitle": "Minter - Configuration #configuration can update AMM oracle",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ammOracle = await smock_1.smock.fake(\"UniswapV2Oracle\");\nawait hardhat_1.default.Diamond.updateAMMOracle(ammOracle.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.ammOracle()).to.equal(ammOracle.address);",
                  "err": {},
                  "uuid": "2e4ab49b-be49-49c0-b1c8-b9a9c7fa4bf6",
                  "parentUUID": "bd8baacc-b2d7-4f41-8567-428063605919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter - Configuration #configuration can update external oracle decimals",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hardhat_1.default.Diamond.updateExtOracleDecimals(decimals);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.extOracleDecimals()).to.equal(decimals);",
                  "err": {},
                  "uuid": "adb95e1d-cebe-4d02-8db2-41e75c3e7fa9",
                  "parentUUID": "bd8baacc-b2d7-4f41-8567-428063605919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update values of a kresko asset",
                  "timedOut": false,
                  "duration": 1399,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, anchor, priceFeed } = await (0, krassets_1.addMockKreskoAsset)();\nconst oracleAnswer = hardhat_1.default.fromBig(await priceFeed.latestAnswer(), 8);\nconst kreskoAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(oracleAnswer).to.equal(kreskoAnswer);\n(0, chai_1.expect)(oracleAnswer).to.equal(test_1.defaultKrAssetArgs.price);\nconst update = {\n    factor: (0, lib_1.toFixedPoint)(1.2),\n    supplyLimit: 12000,\n    price: 20,\n    closeFee: (0, lib_1.toFixedPoint)(0.02),\n    openFee: (0, lib_1.toFixedPoint)(0.02),\n};\nconst [newPriceFeed] = await (0, test_1.getMockOracleFor)(await contract.name(), update.price);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).updateKreskoAsset(contract.address, anchor.address, update.factor, newPriceFeed.address, newPriceFeed.address, hardhat_1.default.toBig(update.supplyLimit), update.closeFee, update.openFee);\nconst newValues = await hardhat_1.default.Diamond.kreskoAsset(contract.address);\nconst updatedOracleAnswer = hardhat_1.default.fromBig(await newPriceFeed.latestAnswer(), 8);\nconst newKreskoAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(newValues.exists).to.equal(true);\n(0, chai_1.expect)(Number(newValues.kFactor)).to.equal(Number(update.factor));\n(0, chai_1.expect)(hardhat_1.default.fromBig(newValues.supplyLimit)).to.equal(update.supplyLimit);\n(0, chai_1.expect)(updatedOracleAnswer).to.equal(newKreskoAnswer);\n(0, chai_1.expect)(updatedOracleAnswer).to.equal(update.price);",
                  "err": {},
                  "uuid": "370c9980-7461-45a4-bfba-999340585e14",
                  "parentUUID": "bd8baacc-b2d7-4f41-8567-428063605919",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7caf450e-c6a4-4597-828f-febf3c162eb5",
                "87b1a00b-b6fe-43dc-86aa-96b904a602dc",
                "b9e0bff8-14f0-4bbd-b591-447e5bb2a64b",
                "2e4ab49b-be49-49c0-b1c8-b9a9c7fa4bf6",
                "adb95e1d-cebe-4d02-8db2-41e75c3e7fa9",
                "370c9980-7461-45a4-bfba-999340585e14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3234,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "d10ef97a-54a8-4090-8d43-aed243d862b2",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "4e6966f5-818a-491c-b6ec-e42cb9a824c9",
              "parentUUID": "d10ef97a-54a8-4090-8d43-aed243d862b2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.initialBalance = (0, lib_1.toBig)(100000);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userOne.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n// expect(await this.collateral.contract.balanceOf(hre.users.userOne.address)).to.equal(this.initialBalance);\nthis.depositArgs = {\n    user: hardhat_1.default.users.userOne,\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(10000),\n};",
              "err": {},
              "uuid": "7893e2ac-1950-4b98-a7c5-88f7ffc37164",
              "parentUUID": "d10ef97a-54a8-4090-8d43-aed243d862b2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7252772b-f80f-40ff-95ba-8ccdf071c669",
              "title": "#collateral",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a58ffe90-d57d-47b8-9ea0-e5c5dbc064e3",
                  "title": "#deposit",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Account has no deposited assets\nconst depositedCollateralAssetsBefore = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Account now has deposited assets\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Account's collateral deposit balances have increased\n(0, chai_1.expect)(await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address)).to.equal(this.depositArgs.amount);\n// Kresko contract's collateral balance has increased\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address)).to.equal(this.depositArgs.amount);\n// Account's collateral balance has decreased\n(0, chai_1.expect)((0, lib_1.fromBig)(await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address))).to.equal((0, lib_1.fromBig)(this.initialBalance) - (0, lib_1.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "c1c7f030-cca3-4151-9a26-c1c0dc55b78e",
                      "parentUUID": "a58ffe90-d57d-47b8-9ea0-e5c5dbc064e3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load arbitrary user with sufficient collateral for testing purposes\nconst arbitraryUser = hardhat_1.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositArgs.amount);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositArgs.amount);\n// Confirm the depositor's (arbitraryUser) wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await this.collateral.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)((0, lib_1.fromBig)(depositorBalanceAfter)).to.equal((0, lib_1.fromBig)(this.initialBalance) - (0, lib_1.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "33d521cb-95c6-4d42-8d98-5cbc899e2a30",
                      "parentUUID": "a58ffe90-d57d-47b8-9ea0-e5c5dbc064e3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositArgs.amount.add(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "f0a01482-99e3-44e8-9c7a-1745abfeb4bc",
                      "parentUUID": "a58ffe90-d57d-47b8-9ea0-e5c5dbc064e3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 854,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nconst collateralArgs = {\n    name: \"SecondCollateral\",\n    price: _test_utils_1.defaultOraclePrice,\n    factor: 1,\n    decimals: _test_utils_1.defaultDecimals,\n};\nconst { contract, mocks } = await (0, collaterals_1.addMockCollateralAsset)(collateralArgs);\nawait mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userOne.address]: this.initialBalance,\n});\nawait mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n// Deposit batch of first collateral type\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, contract.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address, contract.address]);",
                      "err": {},
                      "uuid": "550eb9cb-833a-4487-bef7-abb52e0d380a",
                      "parentUUID": "a58ffe90-d57d-47b8-9ea0-e5c5dbc064e3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount);\nconst event = await (0, lib_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"CollateralDeposited\");\n(0, chai_1.expect)(event.account).to.equal(this.depositArgs.user.address);\n(0, chai_1.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.amount).to.equal(this.depositArgs.amount);",
                      "err": {},
                      "uuid": "9bd607c6-cb6b-4d70-8c76-b463644e6748",
                      "parentUUID": "a58ffe90-d57d-47b8-9ea0-e5c5dbc064e3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, \"0x0000000000000000000000000000000000000001\", this.depositArgs.amount)).to.be.revertedWith(errors_1.Error.COLLATERAL_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "e2a0f1c1-4976-4909-96d6-0ab2fd1219c3",
                      "parentUUID": "a58ffe90-d57d-47b8-9ea0-e5c5dbc064e3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, 0)).to.be.revertedWith(errors_1.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "23b74a8b-6f19-41d1-a3ee-0c27972892b5",
                      "parentUUID": "a58ffe90-d57d-47b8-9ea0-e5c5dbc064e3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 42,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer, devTwo, extOne } = await hardhat_1.default.ethers.getNamedSigners();\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, 0], [deployer, devTwo, extOne]);\nconst isDepositPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isDepositPaused).to.equal(true);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, 0)).to.be.revertedWith(errors_1.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "abff111d-ae31-4010-858e-96bd97d63ed2",
                      "parentUUID": "a58ffe90-d57d-47b8-9ea0-e5c5dbc064e3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c1c7f030-cca3-4151-9a26-c1c0dc55b78e",
                    "33d521cb-95c6-4d42-8d98-5cbc899e2a30",
                    "f0a01482-99e3-44e8-9c7a-1745abfeb4bc",
                    "550eb9cb-833a-4487-bef7-abb52e0d380a",
                    "9bd607c6-cb6b-4d70-8c76-b463644e6748",
                    "e2a0f1c1-4976-4909-96d6-0ab2fd1219c3",
                    "23b74a8b-6f19-41d1-a3ee-0c27972892b5",
                    "abff111d-ae31-4010-858e-96bd97d63ed2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1000,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "3aeb72c0-b702-42ab-990d-8a5a4897653e",
                  "title": "#withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw \"before each\" hook in \"#withdraw\"",
                      "timedOut": false,
                      "duration": 12,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, this.depositArgs.amount)).not.to.be.reverted;\nthis.collateral = this.collaterals[0];\nthis.depositAmount = this.depositArgs.amount;",
                      "err": {},
                      "uuid": "794a5dfc-ee4c-4209-b1be-46eb7a48a8de",
                      "parentUUID": "3aeb72c0-b702-42ab-990d-8a5a4897653e",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "d7f9b3ae-b347-4ef6-9b2a-a9c0cbf1c6d2",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 29,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance);",
                          "err": {},
                          "uuid": "fbcb8ff5-66f0-4a60-a08d-3b71e7462099",
                          "parentUUID": "d7f9b3ae-b347-4ef6-9b2a-a9c0cbf1c6d2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 25,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = this.depositAmount.div(2);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance.sub(amountDeposited));",
                          "err": {},
                          "uuid": "7cf566cb-b257-4d7f-85c8-7244496be391",
                          "parentUUID": "d7f9b3ae-b347-4ef6-9b2a-a9c0cbf1c6d2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 33,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).grantRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address)).to.equal(true);\nconst collateralBefore = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.depositAmount, 0)).to.not.be.reverted;\nconst collateralAfter = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n// Ensure that collateral was withdrawn\n(0, chai_1.expect)(collateralAfter).to.equal(collateralBefore.sub(this.depositAmount));",
                          "err": {},
                          "uuid": "7b33c4fb-765b-4f43-aba2-138544eaec94",
                          "parentUUID": "d7f9b3ae-b347-4ef6-9b2a-a9c0cbf1c6d2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 16,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\nconst event = await (0, lib_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"CollateralWithdrawn\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.amount).to.equal(this.depositAmount);",
                          "err": {},
                          "uuid": "4c02194b-8d9f-4c1e-b51c-3572344af3a3",
                          "parentUUID": "d7f9b3ae-b347-4ef6-9b2a-a9c0cbf1c6d2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 18,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "3d4f1297-50a4-43bf-9d05-415f17398e9f",
                          "parentUUID": "d7f9b3ae-b347-4ef6-9b2a-a9c0cbf1c6d2",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "afe892bb-8c3b-4aaf-aa67-d84e50b32140",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 39,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "this.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\n// userOne mints some kr assets\nthis.mintAmount = (0, lib_1.toBig)(100);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await hardhat_1.default.Diamond.minimumCollateralizationRatio();",
                              "err": {},
                              "uuid": "37df8193-62d3-4119-a745-ab68397a2ff6",
                              "parentUUID": "afe892bb-8c3b-4aaf-aa67-d84e50b32140",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 64,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, lib_1.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, chai_1.expect)(accountCollateralValue.rawValue\n    .sub(withdrawnCollateralValue.rawValue)\n    .gte(accountMinCollateralValue.rawValue)).to.be.true;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance.sub(this.depositAmount.sub(withdrawAmount)));\n// Ensure the account's minimum collateral value is <= the account collateral value\n// These are FixedPoint.Unsigned, be sure to use `rawValue` when appropriate!\nconst accountMinCollateralValueAfter = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, this.mcr);\nconst accountCollateralValueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(accountMinCollateralValueAfter.rawValue.lte(accountCollateralValueAfter.rawValue)).to.be\n    .true;",
                              "err": {},
                              "uuid": "1ee35b6f-5ff2-4d63-b88e-2add78418af7",
                              "parentUUID": "afe892bb-8c3b-4aaf-aa67-d84e50b32140",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 57,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const user = hardhat_1.default.users.userFour;\nawait this.collateral.setBalance(user, ethers_1.BigNumber.from(0));\nawait this.collateral.setBalance(user, (0, lib_1.toBig)(1000));\nawait this.collateral.contract\n    .connect(user)\n    .approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(1000),\n    user,\n});\nawait (0, collaterals_1.withdrawCollateral)({\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(1010),\n    user,\n});\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(user.address)).to.equal((0, lib_1.toBig)(1000));",
                              "err": {},
                              "uuid": "92efcc14-ed7c-490e-8a55-112da6385a08",
                              "parentUUID": "afe892bb-8c3b-4aaf-aa67-d84e50b32140",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 9,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, 0, withdrawAmount)).to.be.revertedWith(errors_1.Error.ZERO_WITHDRAW);",
                              "err": {},
                              "uuid": "dafb57ea-20be-4e86-95cf-f6d0649d2d41",
                              "parentUUID": "afe892bb-8c3b-4aaf-aa67-d84e50b32140",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 39,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = this.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, chai_1.expect)(accountCollateralValue.rawValue\n    .sub(withdrawnCollateralValue.rawValue)\n    .lt(accountMinCollateralValue.rawValue)).to.be.true;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 0)).to.be.revertedWith(errors_1.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                              "err": {},
                              "uuid": "f999dba2-b81d-4789-b994-b0cdba190785",
                              "parentUUID": "afe892bb-8c3b-4aaf-aa67-d84e50b32140",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 6,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 1)).to.be.revertedWith(errors_1.Error.ARRAY_OUT_OF_BOUNDS);",
                              "err": {},
                              "uuid": "50c28586-e9de-42cf-b80c-29bdba02fdee",
                              "parentUUID": "afe892bb-8c3b-4aaf-aa67-d84e50b32140",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "1ee35b6f-5ff2-4d63-b88e-2add78418af7",
                            "92efcc14-ed7c-490e-8a55-112da6385a08",
                            "dafb57ea-20be-4e86-95cf-f6d0649d2d41",
                            "f999dba2-b81d-4789-b994-b0cdba190785",
                            "50c28586-e9de-42cf-b80c-29bdba02fdee"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 175,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 15000
                        }
                      ],
                      "passes": [
                        "fbcb8ff5-66f0-4a60-a08d-3b71e7462099",
                        "7cf566cb-b257-4d7f-85c8-7244496be391",
                        "7b33c4fb-765b-4f43-aba2-138544eaec94",
                        "4c02194b-8d9f-4c1e-b51c-3572344af3a3",
                        "3d4f1297-50a4-43bf-9d05-415f17398e9f"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 121,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "1ac170a7-baae-4772-b166-3620f6324cc1",
                  "title": "#deposit - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events \"before each\" hook in \"#deposit - rebase events\"",
                      "timedOut": false,
                      "duration": 78,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = hardhat_1.default.users.userThree;\narbitraryUserDiamond = hardhat_1.default.Diamond.connect(arbitraryUser);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.krAsset = this.krAssets.find(k => k.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait arbitraryUserDiamond.mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await arbitraryUserDiamond.kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "b5ffc7e8-73e0-4176-bf9b-fd55d45289af",
                      "parentUUID": "1ac170a7-baae-4772-b166-3620f6324cc1",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "fa2570c7-bd9f-44b1-9074-da4967dc8df7",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 38,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(expectedDepositsAfter);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "5712f855-a43f-40a1-8eb4-a6a12bb3749b",
                          "parentUUID": "fa2570c7-bd9f-44b1-9074-da4967dc8df7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 38,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmountAfterRebase);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "04a55959-fb2e-45a4-97cb-7764ce9b3291",
                          "parentUUID": "fa2570c7-bd9f-44b1-9074-da4967dc8df7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 40,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "f318c315-a5b3-4448-989d-4a89015ce3b9",
                          "parentUUID": "fa2570c7-bd9f-44b1-9074-da4967dc8df7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 41,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "a6e16bd7-9aa9-4803-89af-13e56624ccac",
                          "parentUUID": "fa2570c7-bd9f-44b1-9074-da4967dc8df7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 51,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "31286bf0-93e2-45dc-aa9f-7c8eb8c232a3",
                          "parentUUID": "fa2570c7-bd9f-44b1-9074-da4967dc8df7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 51,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfterRebase).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "fde3b3c3-7b1d-47ce-8b04-b12260f12600",
                          "parentUUID": "fa2570c7-bd9f-44b1-9074-da4967dc8df7",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "5712f855-a43f-40a1-8eb4-a6a12bb3749b",
                        "04a55959-fb2e-45a4-97cb-7764ce9b3291",
                        "f318c315-a5b3-4448-989d-4a89015ce3b9",
                        "a6e16bd7-9aa9-4803-89af-13e56624ccac",
                        "31286bf0-93e2-45dc-aa9f-7c8eb8c232a3",
                        "fde3b3c3-7b1d-47ce-8b04-b12260f12600"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 259,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "b164f1d5-45bf-44de-8774-8432e7ce0acf",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 50,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(valueBefore.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "857cf135-9996-4132-be26-85c1cefc0fb9",
                          "parentUUID": "b164f1d5-45bf-44de-8774-8432e7ce0acf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 49,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(valueBefore.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "aa8943e0-ecf0-40d6-878d-764e21907ae9",
                          "parentUUID": "b164f1d5-45bf-44de-8774-8432e7ce0acf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 36,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "85dfa79d-444a-4a06-879b-a1fa99e5af6d",
                          "parentUUID": "b164f1d5-45bf-44de-8774-8432e7ce0acf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 38,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "40dc55a5-82ba-4179-8b32-a11095c5021e",
                          "parentUUID": "b164f1d5-45bf-44de-8774-8432e7ce0acf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 64,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(finalValue.rawValue).to.bignumber.equal(expectedValueAfterSecondDeposit.rawValue);",
                          "err": {},
                          "uuid": "ee9267d2-9a66-431b-b12c-34e21a73bf52",
                          "parentUUID": "b164f1d5-45bf-44de-8774-8432e7ce0acf",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 61,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(finalValue.rawValue).to.bignumber.equal(expectedValueAfterSecondDeposit.rawValue);",
                          "err": {},
                          "uuid": "6e21b803-4cf8-4e34-849b-58122cfa1ecb",
                          "parentUUID": "b164f1d5-45bf-44de-8774-8432e7ce0acf",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "857cf135-9996-4132-be26-85c1cefc0fb9",
                        "aa8943e0-ecf0-40d6-878d-764e21907ae9",
                        "85dfa79d-444a-4a06-879b-a1fa99e5af6d",
                        "40dc55a5-82ba-4179-8b32-a11095c5021e",
                        "ee9267d2-9a66-431b-b12c-34e21a73bf52",
                        "6e21b803-4cf8-4e34-849b-58122cfa1ecb"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 298,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "6683972f-e3c2-4d57-a31e-3fe5273f9d21",
                  "title": "#withdraw - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events \"before each\" hook in \"#withdraw - rebase events\"",
                      "timedOut": false,
                      "duration": 76,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = hardhat_1.default.users.userThree;\narbitraryUserDiamond = hardhat_1.default.Diamond.connect(arbitraryUser);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.krAsset = this.krAssets.find(k => k.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait arbitraryUserDiamond.mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await arbitraryUserDiamond.kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "7d60f4af-aa7b-4162-843a-b819c3d3aea7",
                      "parentUUID": "6683972f-e3c2-4d57-a31e-3fe5273f9d21",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "f20fb3c9-88bb-4f3b-8d93-0709bc565257",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 76,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "a24df3dc-877e-4696-a427-2ca50e909761",
                          "parentUUID": "f20fb3c9-88bb-4f3b-8d93-0709bc565257",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 73,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "5ca08c90-4cbd-4116-adf3-2d70c1617998",
                          "parentUUID": "f20fb3c9-88bb-4f3b-8d93-0709bc565257",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 74,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "6cd14f19-c43a-44a4-9454-ffe6b518db98",
                          "parentUUID": "f20fb3c9-88bb-4f3b-8d93-0709bc565257",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 72,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "396ad8e1-4178-45e3-aa69-b5b8cb46e169",
                          "parentUUID": "f20fb3c9-88bb-4f3b-8d93-0709bc565257",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 91,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "619c03bb-3afb-4acb-b681-be56ed448cb3",
                          "parentUUID": "f20fb3c9-88bb-4f3b-8d93-0709bc565257",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 91,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "be58e17f-aa47-4fba-9544-6e1c9ee3fe9e",
                          "parentUUID": "f20fb3c9-88bb-4f3b-8d93-0709bc565257",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 54,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, lib_1.toBig)(10);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await this.collateral.contract.balanceOf(arbitraryUser.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "69e9a367-44ae-424e-ab6d-6f1d56ac8625",
                          "parentUUID": "f20fb3c9-88bb-4f3b-8d93-0709bc565257",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a24df3dc-877e-4696-a427-2ca50e909761",
                        "5ca08c90-4cbd-4116-adf3-2d70c1617998",
                        "6cd14f19-c43a-44a4-9454-ffe6b518db98",
                        "396ad8e1-4178-45e3-aa69-b5b8cb46e169",
                        "619c03bb-3afb-4acb-b681-be56ed448cb3",
                        "be58e17f-aa47-4fba-9544-6e1c9ee3fe9e",
                        "69e9a367-44ae-424e-ab6d-6f1d56ac8625"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 531,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "87f6087f-ad3e-479d-9506-674981491fd0",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 69,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "de8c72e2-2e04-461c-a5e8-b4f1845ff613",
                          "parentUUID": "87f6087f-ad3e-479d-9506-674981491fd0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 68,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "2bd65d20-e38b-4dd1-be65-c1f48079fb42",
                          "parentUUID": "87f6087f-ad3e-479d-9506-674981491fd0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 77,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "c3c6dccd-f9b7-4bb5-92ed-6806ca9c877e",
                          "parentUUID": "87f6087f-ad3e-479d-9506-674981491fd0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 69,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "c2dea5e0-f8c0-4335-8ead-dbcfb3d22fc4",
                          "parentUUID": "87f6087f-ad3e-479d-9506-674981491fd0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 101,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "32a676fd-908f-45a6-87bc-9489da76da27",
                          "parentUUID": "87f6087f-ad3e-479d-9506-674981491fd0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 97,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "e849089f-8dcb-4450-b2f2-b08e84fb314a",
                          "parentUUID": "87f6087f-ad3e-479d-9506-674981491fd0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 131,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, lib_1.toBig)(10);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [nrcValueBefore] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.collateral.address);\nconst [withdrawValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\nconst expectedNrcValueAfter = nrcValueBefore.rawValue.sub(withdrawValue.rawValue);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\nconst finalAccountValue = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.collateral.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(expectedNrcValueAfter);\n(0, chai_1.expect)(finalAccountValue.rawValue).to.bignumber.equal(accountValueBefore.rawValue.sub(withdrawValue.rawValue));",
                          "err": {},
                          "uuid": "25ff9500-0035-4938-96f9-4f9706a29e3b",
                          "parentUUID": "87f6087f-ad3e-479d-9506-674981491fd0",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "de8c72e2-2e04-461c-a5e8-b4f1845ff613",
                        "2bd65d20-e38b-4dd1-be65-c1f48079fb42",
                        "c3c6dccd-f9b7-4bb5-92ed-6806ca9c877e",
                        "c2dea5e0-f8c0-4335-8ead-dbcfb3d22fc4",
                        "32a676fd-908f-45a6-87bc-9489da76da27",
                        "e849089f-8dcb-4450-b2f2-b08e84fb314a",
                        "25ff9500-0035-4938-96f9-4f9706a29e3b"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 612,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "d2129664-6673-4ad9-8435-7cc6ea4ce8b7",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "11299565-4a0b-4f56-a662-d95c03767f7d",
              "parentUUID": "d2129664-6673-4ad9-8435-7cc6ea4ce8b7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 93,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// -------------------------------- Set up mock assets --------------------------------\nconst collateralArgs = {\n    name: \"CollateralAsset\",\n    price: 10,\n    factor: 1,\n    decimals: 18,\n};\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.collateral = await this.collateral.update(collateralArgs);\nthis.collateral.setPrice(collateralArgs.price);\n// Set up mock KreskoAsset\nconst krAssetArgs = {\n    name: \"KreskoAsset\",\n    price: 11,\n    factor: 1,\n    supplyLimit: 100000000,\n    closeFee: _test_utils_1.defaultCloseFee,\n    openFee: _test_utils_1.defaultOpenFee,\n};\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\nthis.krAsset.setPrice(krAssetArgs.price);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// -------------------------------- Set up userOne deposit/debt --------------------------------\nawait this.collateral.setBalance(hardhat_1.default.users.liquidator, hardhat_1.default.toBig(100000000));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.liquidator.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(100000000),\n    },\n});\n// Deposit collateral\nthis.defaultDepositAmount = 20; // 20 * $10 = $200 in collateral asset value\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount),\n    },\n});\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount,\n    asset: this.collateral,\n});\n// // Mint KrAsset\nthis.defaultMintAmount = 10; // 10 * $11 = $110 in debt value\nawait (0, krassets_1.mintKrAsset)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultMintAmount,\n    asset: this.krAsset,\n});",
              "err": {},
              "uuid": "dd86e15e-b4f3-4238-ac7e-28c51309eada",
              "parentUUID": "d2129664-6673-4ad9-8435-7cc6ea4ce8b7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c23d1a7b-9ac9-42a2-b6c3-c065a63298ea",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#maxLiquidatableValue\"",
                  "fullTitle": "Minter #maxLiquidatableValue \"before each\" hook in \"#maxLiquidatableValue\"",
                  "timedOut": false,
                  "duration": 844,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "user = hardhat_1.default.users.userOne;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount * 100));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount * 100),\n    },\n});\nnewCollateral = await (0, collaterals_1.addMockCollateralAsset)({\n    name: \"Coll\",\n    decimals: 8,\n    price: 10,\n    factor: 0.9,\n});\nawait newCollateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount * 100, 8));\nawait newCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount * 100, 8),\n    },\n});",
                  "err": {},
                  "uuid": "4d0aaff7-aee7-4f3a-af3b-42543fc10448",
                  "parentUUID": "c23d1a7b-9ac9-42a2-b6c3-c065a63298ea",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct max liquidation with single market cdp",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct max liquidation with single market cdp",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral,\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, this.collateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, this.collateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValue).to.equal(maxLiquidatableValue.rawValue);",
                  "err": {},
                  "uuid": "07258e48-2964-4582-bd10-5a771fc1c9c6",
                  "parentUUID": "c23d1a7b-9ac9-42a2-b6c3-c065a63298ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct max liquidation with multiple cdps",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct max liquidation with multiple cdps",
                  "timedOut": false,
                  "duration": 411,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral,\n});\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: (0, lib_1.toBig)(0.1, 8),\n    asset: newCollateral,\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, this.collateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, this.collateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValue).to.equal(maxLiquidatableValue.rawValue);\nconst expectedMaxLiquidatableValueNewCollateral = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, newCollateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValueNewCollateral.gt(0)).to.be.true;\nconst maxLiquidatableValueNewCollateral = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, newCollateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValueNewCollateral).to.equal(maxLiquidatableValueNewCollateral.rawValue);",
                  "err": {},
                  "uuid": "9dc59ccc-69b1-41ec-bbdf-53b0e7620198",
                  "parentUUID": "c23d1a7b-9ac9-42a2-b6c3-c065a63298ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07258e48-2964-4582-bd10-5a771fc1c9c6",
                "9dc59ccc-69b1-41ec-bbdf-53b0e7620198"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 484,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "78baa702-cb83-4dc3-9b92-444fd951e1d2",
              "title": "#liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "343b2eba-9369-48f8-86fb-0e3cfebfe870",
                  "title": "#isAccountLiquidatable",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should identify accounts below their liquidation threshold",
                      "fullTitle": "Minter #liquidation #isAccountLiquidatable should identify accounts below their liquidation threshold",
                      "timedOut": false,
                      "duration": 38,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that current amount is under min collateral value\nconst liquidationThreshold = await hardhat_1.default.Diamond.liquidationThreshold();\nconst minCollateralUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, liquidationThreshold);\n(0, chai_1.expect)(this.defaultDepositAmount * this.collateral.deployArgs.price >\n    hardhat_1.default.fromBig(minCollateralUSD.rawValue, 8));\n// The account should be NOT liquidatable as collateral value ($200) >= min collateral value ($154)\nconst initialCanLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(initialCanLiquidate).to.equal(false);\n// Update collateral price to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);\nconst [, newCollateralOraclePrice] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, hardhat_1.default.toBig(1), true);\n(0, chai_1.expect)(hardhat_1.default.fromBig(newCollateralOraclePrice.rawValue, 8)).to.equal(newCollateralPrice);\n// The account should be liquidatable as collateral value ($140) < min collateral value ($154)\nconst secondaryCanLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(secondaryCanLiquidate).to.equal(true);",
                      "err": {},
                      "uuid": "aeb60f3b-4cc8-4b15-9e81-47d8b0f92c5e",
                      "parentUUID": "343b2eba-9369-48f8-86fb-0e3cfebfe870",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "aeb60f3b-4cc8-4b15-9e81-47d8b0f92c5e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 38,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "66f4094c-d011-4429-b042-18fcb9792742",
                  "title": "#liquidate",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userTwo tokens to use for liquidation\nawait this.krAsset.mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userTwo.address]: hardhat_1.default.toBig(10000),\n});\n// Update collateral price from $10 to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);",
                      "err": {},
                      "uuid": "5f65a59d-f82d-4cc0-990c-5dc4c92cad95",
                      "parentUUID": "66f4094c-d011-4429-b042-18fcb9792742",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 118,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm we can liquidate this account\nconst canLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(canLiquidate).to.equal(true);\n// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\nconst beforeUserOneDebtAmount = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst beforeUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userTwo.address);\nconst beforeUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userTwo.address);\nconst beforeKreskoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n// Liquidate userOne\nconst maxLiq = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(hardhat_1.default.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst maxRepayAmount = hardhat_1.default.toBig(Number(maxLiq.rawValue.div(await this.krAsset.getPrice())));\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, maxRepayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst afterUserOneDebtAmount = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(afterUserOneDebtAmount.eq(beforeUserOneDebtAmount.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst afterUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(afterUserOneCollateralAmount.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\nconst afterUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userTwo.address);\n(0, chai_1.expect)(afterUserTwoKreskoAssetBalance.eq(beforeUserTwoKreskoAssetBalance.sub(maxRepayAmount)));\n// Confirm that userTwo has received some collateral from the contract\nconst afterUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userTwo.address);\n(0, chai_1.expect)(afterUserTwoCollateralBalance).gt(beforeUserTwoCollateralBalance);\n// Confirm that Kresko contract's collateral balance has decreased.\nconst afterKreskoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(afterKreskoCollateralBalance).lt(beforeKreskoCollateralBalance);",
                      "err": {},
                      "uuid": "a6d70afd-7cf5-4c3c-83bc-6cbb5e2c32d5",
                      "parentUUID": "66f4094c-d011-4429-b042-18fcb9792742",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt liquidation\nconst repayAmount = 10; // userTwo holds Kresko assets that can be used to repay userOne's loan\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\nconst event = await (0, lib_1.getInternalEvent)(tx, typechain_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userTwo), \"LiquidationOccurred\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.liquidator).to.equal(hardhat_1.default.users.userTwo.address);\n(0, chai_1.expect)(event.repayKreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.repayAmount).to.equal(repayAmount);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);",
                      "err": {},
                      "uuid": "4382c1e7-4967-4819-967f-4037e16ea327",
                      "parentUUID": "66f4094c-d011-4429-b042-18fcb9792742",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 54,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Update collateral price from $5 to $10\nconst newCollateralPrice = 10;\nthis.collateral.setPrice(newCollateralPrice);\n// Confirm that the account has sufficient collateral to not be liquidated\nconst liquidationThreshold = await hardhat_1.default.Diamond.liquidationThreshold();\nconst minimumCollateralUSDValueRequired = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, liquidationThreshold);\nconst currUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(hardhat_1.default.fromBig(currUserOneCollateralAmount) * newCollateralPrice >\n    hardhat_1.default.fromBig(minimumCollateralUSDValueRequired.rawValue, 8));\nconst canLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(canLiquidate).to.equal(false);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "8893016f-2da6-448b-909e-0f71b4d1057a",
                      "parentUUID": "66f4094c-d011-4429-b042-18fcb9792742",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.ZERO_REPAY);",
                      "err": {},
                      "uuid": "aa8ad116-4ce0-422b-90df-5291e5ad61eb",
                      "parentUUID": "66f4094c-d011-4429-b042-18fcb9792742",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "timedOut": false,
                      "duration": 39,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add(hardhat_1.default.toBig(1));\n// Liquidation should fail\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.KRASSET_BURN_AMOUNT_OVERFLOW);",
                      "err": {},
                      "uuid": "03778a33-4de2-4180-85f1-eb473f82d9a7",
                      "parentUUID": "66f4094c-d011-4429-b042-18fcb9792742",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "timedOut": false,
                      "duration": 50,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const maxLiquidation = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(hardhat_1.default.users.userOne.address, this.krAsset.address, this.collateral.address)).rawValue, 8);\nconst repaymentAmount = hardhat_1.default.toBig((maxLiquidation + 1) / this.krAsset.deployArgs.price);\n// Ensure liquidation cannot happen\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repaymentAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.LIQUIDATION_OVERFLOW);",
                      "err": {},
                      "uuid": "fc266f3c-ce03-4644-8c75-06c9722bac79",
                      "parentUUID": "66f4094c-d011-4429-b042-18fcb9792742",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 53,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.collateral.setPrice(this.collateral.deployArgs.price);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address)).to.be.false;\nconst minCollateralUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, await hardhat_1.default.Diamond.minimumCollateralizationRatio());\nconst liquidationThresholdUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, await hardhat_1.default.Diamond.liquidationThreshold());\nthis.collateral.setPrice(this.collateral.deployArgs.price * 0.775);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(accountCollateralValue.rawValue.lt(minCollateralUSD.rawValue)).to.be.true;\n(0, chai_1.expect)(accountCollateralValue.rawValue.gt(liquidationThresholdUSD.rawValue)).to.be.true;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address)).to.be.false;",
                      "err": {},
                      "uuid": "9f660e17-cf41-4e9a-85a4-62760f86835a",
                      "parentUUID": "66f4094c-d011-4429-b042-18fcb9792742",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "fullTitle": "Minter #liquidation #liquidate should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 56,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(0);\n// Liquidation should succeed despite lack of token approval\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\n// Confirm that liquidator's token approval is still 0\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "8e16cac6-7ac6-4a6c-b4a0-55c0d15dacb7",
                      "parentUUID": "66f4094c-d011-4429-b042-18fcb9792742",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 65,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidator increases contract's token approval\nconst repayAmount = 10;\nawait this.krAsset.contract.connect(hardhat_1.default.users.userTwo).approve(hardhat_1.default.Diamond.address, repayAmount);\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(repayAmount);\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "a958fc44-bce5-4926-97bb-85e275d5f902",
                      "parentUUID": "66f4094c-d011-4429-b042-18fcb9792742",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.SELF_LIQUIDATION);",
                      "err": {},
                      "uuid": "d6a992fd-2a29-4c98-8ac3-a267db9378f5",
                      "parentUUID": "66f4094c-d011-4429-b042-18fcb9792742",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a6d70afd-7cf5-4c3c-83bc-6cbb5e2c32d5",
                    "4382c1e7-4967-4819-967f-4037e16ea327",
                    "8893016f-2da6-448b-909e-0f71b4d1057a",
                    "aa8ad116-4ce0-422b-90df-5291e5ad61eb",
                    "03778a33-4de2-4180-85f1-eb473f82d9a7",
                    "fc266f3c-ce03-4644-8c75-06c9722bac79",
                    "9f660e17-cf41-4e9a-85a4-62760f86835a",
                    "8e16cac6-7ac6-4a6c-b4a0-55c0d15dacb7",
                    "a958fc44-bce5-4926-97bb-85e275d5f902",
                    "d6a992fd-2a29-4c98-8ac3-a267db9378f5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 505,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "85ddd4b0-1816-451d-ba4d-61d1c7e73f12",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 425,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "userToLiquidate = hardhat_1.default.users.userThree;\nuserToLiquidateTwo = hardhat_1.default.users.userFour;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\n// Deposit collateral for liquidator\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.liquidator,\n    asset: this.collateral,\n    amount: liquidatorAmounts.collateralDeposits,\n});\nawait (0, _test_utils_1.leverageKrAsset)(userToLiquidate, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nawait (0, _test_utils_1.leverageKrAsset)(userToLiquidateTwo, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\n// 1.5 = collateral value === debt value * MCR\n(0, chai_1.expect)(await (0, _test_utils_1.getHealthFactor)(userToLiquidate)).to.lessThanOrEqual(1.51);\n(0, chai_1.expect)(await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo)).to.lessThanOrEqual(1.51);\n// not liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.false;",
                      "err": {},
                      "uuid": "041afd32-9c97-4304-a1e7-2e58d1d2f60b",
                      "parentUUID": "85ddd4b0-1816-451d-ba4d-61d1c7e73f12",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 55,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address))).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "cb03f4a8-a6d7-49fc-86fe-f0ef2d1e7b82",
                      "parentUUID": "85ddd4b0-1816-451d-ba4d-61d1c7e73f12",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 56,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address))).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "7b761fc0-2b5a-41fa-b864-09727806780b",
                      "parentUUID": "85ddd4b0-1816-451d-ba4d-61d1c7e73f12",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 257,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.collateral.setPrice(5);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.collateral);",
                      "err": {},
                      "uuid": "887a9471-8872-4ac2-b512-e0b782e42e7e",
                      "parentUUID": "85ddd4b0-1816-451d-ba4d-61d1c7e73f12",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 520,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.krAsset.setPrice(rebasePrice * 2);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, chai_1.expect)((0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.collateral)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "fc28d934-561e-4675-8237-66bb957b0245",
                      "parentUUID": "85ddd4b0-1816-451d-ba4d-61d1c7e73f12",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 582,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0,\n};\n// Get values for a liquidation that happens before rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidate.address)).rawValue, 8);\nresults.userOneHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidate);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidateTwo.address)).rawValue, 8);\nresults.userTwoHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo);\n(0, chai_1.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.collateralSeized * denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.debtRepaid * denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "3f70b0ec-5e69-4388-907c-d4a57a92fd41",
                      "parentUUID": "85ddd4b0-1816-451d-ba4d-61d1c7e73f12",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 562,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0,\n};\n// Get values for a liquidation that happens before rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidate.address)).rawValue, 8);\nresults.userOneHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidate);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidateTwo.address)).rawValue, 8);\nresults.userTwoHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo);\n(0, chai_1.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.collateralSeized / denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.debtRepaid / denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "1a371ab0-7513-4083-b405-713357bf4a9f",
                      "parentUUID": "85ddd4b0-1816-451d-ba4d-61d1c7e73f12",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cb03f4a8-a6d7-49fc-86fe-f0ef2d1e7b82",
                    "7b761fc0-2b5a-41fa-b864-09727806780b",
                    "887a9471-8872-4ac2-b512-e0b782e42e7e",
                    "fc28d934-561e-4675-8237-66bb957b0245",
                    "3f70b0ec-5e69-4388-907c-d4a57a92fd41",
                    "1a371ab0-7513-4083-b405-713357bf4a9f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2032,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "2c44e58c-21b9-4787-bc74-e802d197da73",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "b6b14d6d-0ec1-482e-b64a-573dc5f3e6d8",
              "parentUUID": "2c44e58c-21b9-4787-bc74-e802d197da73",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.krAsset = this.krAssets.find(c => c.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nthis.krAsset.setPrice(this.krAsset.deployArgs.price);\nthis.krAsset.setMarketOpen(this.krAsset.deployArgs.marketOpen);\n// Load account with collateral\nthis.initialBalance = (0, lib_1.toBig)(100000);\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, this.initialBalance);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.collateral.setPrice(this.collateral.deployArgs.price);\n// User deposits 10,000 collateral\nawait (0, collaterals_1.depositCollateral)({\n    amount: 10000,\n    user: hardhat_1.default.users.userOne,\n    asset: this.collateral,\n});",
              "err": {},
              "uuid": "debe02ee-9986-4dad-8465-41f294c8d08e",
              "parentUUID": "2c44e58c-21b9-4787-bc74-e802d197da73",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "91b73288-598b-4b19-a957-2291eaa34a7b",
              "title": "#mint+burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                  "title": "#mint",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 52,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await this.krAsset.mocks.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "289a56d2-5a9c-43ff-a746-fb0232651f1e",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 102,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, lib_1.toBig)(5);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, lib_1.toBig)(5);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsFinal).to.deep.equal([this.krAsset.address]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "b653a2c6-262d-4438-8308-99287c69d123",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 1019,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Add second mock krAsset to protocol\nconst secondKrAssetArgs = {\n    name: \"SecondKreskoAsset\",\n    symbol: \"SecondKreskoAsset\",\n    price: 5,\n    marketOpen: true,\n    factor: 1,\n    supplyLimit: 100000,\n    closeFee: _test_utils_1.defaultCloseFee,\n    openFee: 0,\n};\nconst { contract: secondKreskoAsset } = await (0, krassets_1.addMockKreskoAsset)(secondKrAssetArgs);\n// Mint Kresko asset\nconst secondMintAmount = (0, lib_1.toBig)(2);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, secondKreskoAsset.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsFinal).to.deep.equal([this.krAsset.address, secondKreskoAsset.address]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, secondKreskoAsset.address);\n(0, chai_1.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await secondKreskoAsset.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await secondKreskoAsset.totalSupply();\n(0, chai_1.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "e5359ebf-4abf-47c6-badb-4542d450a852",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 51,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, lib_1.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await hardhat_1.default.Diamond.minimumDebtValue();\n(0, chai_1.expect)((0, lib_1.fromBig)(mintAmountUSDValue.rawValue, 8)).to.equal(Number(currMinimumDebtValue) / 10 ** 8);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "e2685db1-994a-425e-a855-860ef56fecdb",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 56,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).grantRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address)).to.equal(true);\n// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userOneDebtFromUserThreeMint = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userOneDebtFromUserThreeMint).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "2912db57-51f8-4d9e-ada6-d6fb53018356",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mintAmount = (0, lib_1.toBig)(500);\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst event = await (0, lib_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"KreskoAssetMinted\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.amount).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "8489dfe9-ad16-4d7f-8d93-b36ab9284af2",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, lib_1.toBig)(1);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userTwo.address, this.krAsset.address, mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userOne.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "219d40d3-f986-41a5-a0c3-fd78d3f61128",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is below the contract's current minimum debt value\nconst minAmount = 100000000; // 8 decimals\nconst mintAmount = minAmount - 1;\nconst mintAmountUSDValue = await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await hardhat_1.default.Diamond.minimumDebtValue();\n(0, chai_1.expect)(Number(mintAmountUSDValue)).to.be.lessThan(Number(currMinimumDebtValue));\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(errors_1.Error.KRASSET_MINT_AMOUNT_LOW);",
                      "err": {},
                      "uuid": "8dafacf1-2bf5-4ce5-83dd-4a74d8a9a43f",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, \"0x0000000000000000000000000000000000000002\", (0, lib_1.toBig)(1))).to.be.revertedWith(errors_1.Error.KRASSET_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "e15def5c-278c-48bb-bdc0-359e7aaaa2da",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 18,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// We can ignore price and collateral factor as both this.collateral and this.krAsset both\n// have the same price ($10) and same collateral factor (1)\nconst collateralAmountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n// Apply 150% MCR and increase deposit amount to be above the maximum allowed by MCR\nconst mcrAmount = (0, lib_1.fromBig)(collateralAmountDeposited) / 1.5;\nconst mintAmount = (0, lib_1.toBig)(mcrAmount + 1);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(errors_1.Error.KRASSET_COLLATERAL_LOW);",
                      "err": {},
                      "uuid": "2dadc504-5777-4522-a3b8-48b2cbb9ffb8",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).depositCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, (0, lib_1.toBig)(10000))).not.to.be.reverted;\nconst krAsset = await hardhat_1.default.Diamond.kreskoAsset(this.krAsset.address);\nconst overSupplyLimit = (0, lib_1.fromBig)(krAsset.supplyLimit) + 1;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(overSupplyLimit))).to.be.revertedWith(errors_1.Error.KRASSET_MAX_SUPPLY_REACHED);",
                      "err": {},
                      "uuid": "97182b15-ef2f-44e7-b58c-cb7019691680",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 48,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.krAsset.setMarketOpen(false);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(1))).to.be.revertedWith(errors_1.Error.KRASSET_MARKET_CLOSED);\n// Confirm that the user has no minted krAssets\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Confirm that opening the market makes krAsset mintable again\nthis.krAsset.setMarketOpen(true);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(1));\n// Confirm the array of the user's minted Kresko assets has been pushed to\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);",
                      "err": {},
                      "uuid": "f8ca4a6b-2bbd-4e85-9bf0-798ebd074558",
                      "parentUUID": "a6c3d097-7aab-41da-9da4-d52e711b58e7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "289a56d2-5a9c-43ff-a746-fb0232651f1e",
                    "b653a2c6-262d-4438-8308-99287c69d123",
                    "e5359ebf-4abf-47c6-badb-4542d450a852",
                    "e2685db1-994a-425e-a855-860ef56fecdb",
                    "2912db57-51f8-4d9e-ada6-d6fb53018356",
                    "8489dfe9-ad16-4d7f-8d93-b36ab9284af2",
                    "219d40d3-f986-41a5-a0c3-fd78d3f61128",
                    "8dafacf1-2bf5-4ce5-83dd-4a74d8a9a43f",
                    "e15def5c-278c-48bb-bdc0-359e7aaaa2da",
                    "2dadc504-5777-4522-a3b8-48b2cbb9ffb8",
                    "97182b15-ef2f-44e7-b58c-cb7019691680",
                    "f8ca4a6b-2bbd-4e85-9bf0-798ebd074558"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1461,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "69a14b9c-920a-47fe-a56d-60b66e7a9add",
                  "title": "#mint - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "2b05c512-3599-492a-ae40-9b206883e247",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 55,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "0c5d204f-7c5f-4baf-8112-b1917ae1ccc2",
                          "parentUUID": "2b05c512-3599-492a-ae40-9b206883e247",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 58,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "b3f3322c-79a9-430c-81f4-636b56c794da",
                          "parentUUID": "2b05c512-3599-492a-ae40-9b206883e247",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 56,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "d959ff77-4373-4ff6-9443-296f42040cba",
                          "parentUUID": "2b05c512-3599-492a-ae40-9b206883e247",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 56,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "aa6091b1-5391-4d49-b27d-6b0d6bb4d926",
                          "parentUUID": "2b05c512-3599-492a-ae40-9b206883e247",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0c5d204f-7c5f-4baf-8112-b1917ae1ccc2",
                        "b3f3322c-79a9-430c-81f4-636b56c794da",
                        "d959ff77-4373-4ff6-9443-296f42040cba",
                        "aa6091b1-5391-4d49-b27d-6b0d6bb4d926"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 225,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "ea9bdb5e-2568-46e6-b751-3cc3bc338934",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 66,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "b8080e42-9897-4735-bc83-fdea087cb169",
                          "parentUUID": "ea9bdb5e-2568-46e6-b751-3cc3bc338934",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 65,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "c4cc6fd9-a7d3-4654-b548-0e2aa8c09d5d",
                          "parentUUID": "ea9bdb5e-2568-46e6-b751-3cc3bc338934",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 63,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice, 8) / denominator);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "e9b2f1f1-f5bb-47f4-95aa-510f0a4c09e2",
                          "parentUUID": "ea9bdb5e-2568-46e6-b751-3cc3bc338934",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 63,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.mul(denominator), 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "0b4f314c-6ed8-43cd-965a-5718d229bab0",
                          "parentUUID": "ea9bdb5e-2568-46e6-b751-3cc3bc338934",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b8080e42-9897-4735-bc83-fdea087cb169",
                        "c4cc6fd9-a7d3-4654-b548-0e2aa8c09d5d",
                        "e9b2f1f1-f5bb-47f4-95aa-510f0a4c09e2",
                        "0b4f314c-6ed8-43cd-965a-5718d229bab0"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 257,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "2bad8212-bcb7-4ead-b206-9f5ca143b112",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 146,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Assert\n(0, chai_1.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, chai_1.expect)(valueBeforeRebase.rawValue).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n// Adjust price and rebase\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterFirstRebase.rawValue, this.krAsset)).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterFirstRebase.rawValue, this.krAsset)).to.bignumber.equal(valueBeforeRebase.rawValue);\n// Mint after rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterSecondMint).to.bignumber.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterSecondMint.rawValue, this.krAsset)).to.bignumber.closeTo(debtValueAfterFirstMint.rawValue.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(valueBeforeRebase.rawValue.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "f272c55a-3919-4fb9-aa62-6a72f1466876",
                          "parentUUID": "2bad8212-bcb7-4ead-b206-9f5ca143b112",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 146,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Assert\n(0, chai_1.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, chai_1.expect)(valueBeforeRebase.rawValue).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n// Adjust price and rebase\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(debtValueAfterFirstRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(debtValueAfterFirstMint.rawValue, this.krAsset));\n(0, chai_1.expect)(debtValueAfterFirstRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));\n// Mint after rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(await (0, calculations_1.toScaledAmount)(debtValueAfterFirstMint.rawValue.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "1fc11253-27a3-4723-a2ef-574f33636900",
                          "parentUUID": "2bad8212-bcb7-4ead-b206-9f5ca143b112",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f272c55a-3919-4fb9-aa62-6a72f1466876",
                        "1fc11253-27a3-4723-a2ef-574f33636900"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 292,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                  "title": "#burn",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 77,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Create userOne debt position\nthis.mintAmount = (0, lib_1.toBig)(2);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Load userThree with Kresko Assets\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userThree.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userThree.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(hardhat_1.default.users.userThree.address)).to.equal(this.initialBalance);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).depositCollateral(hardhat_1.default.users.userThree.address, this.collateral.address, (0, lib_1.toBig)(10000))).not.to.be.reverted;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).mintKreskoAsset(hardhat_1.default.users.userThree.address, this.krAsset.address, this.mintAmount);",
                      "err": {},
                      "uuid": "9739d26c-7aac-4210-9765-87a336a553f9",
                      "parentUUID": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 48,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, lib_1.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "70f1a33c-ade4-4948-a96a-2f22c5e2f9e6",
                      "parentUUID": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "ed1b3119-5975-4c55-87a1-76bb81354939",
                      "parentUUID": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).grantRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address)).to.equal(true);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, lib_1.toBig)(1);\nconst kreskoAssetIndex = 0;\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.mintAmount);\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(userThreeBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userOneDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "5594d747-3eb8-4634-bce8-a24545f7796a",
                      "parentUUID": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "e7dc5a11-a1f7-473e-9d5a-8cfd59a4612e",
                      "parentUUID": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst minDebtValue = (0, lib_1.fromBig)((await hardhat_1.default.Diamond.minimumDebtValue()).rawValue, 8);\nconst oraclePrice = this.krAsset.deployArgs.price;\nconst burnAmount = hardhat_1.default.toBig((0, lib_1.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, chai_1.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "2ddd1b85-6e19-4384-95e7-cf3b7e16c3cb",
                      "parentUUID": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, this.mintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, lib_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"KreskoAssetBurned\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.amount).to.equal(this.mintAmount.div(5));",
                      "err": {},
                      "uuid": "02b66130-7ec3-4088-a7f8-78cd30799162",
                      "parentUUID": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = this.mintAmount.add(secondMintAmount);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, secondMintAmount);\nconst kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.not.reverted;",
                      "err": {},
                      "uuid": "584f71d9-3d57-47fc-a14f-be81c900d3ba",
                      "parentUUID": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, 0, kreskoAssetIndex)).to.be.revertedWith(errors_1.Error.ZERO_BURN);",
                      "err": {},
                      "uuid": "7e80050e-9790-4e7e-bf22-a88bcd783ed9",
                      "parentUUID": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "f205fff1-ff2e-489a-865f-96ae018ca13a",
                      "parentUUID": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst burnAmount = debt.add(hardhat_1.default.toBig(1));\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "1b70b0bf-6acc-4ace-bae8-6675e2d71ced",
                      "parentUUID": "1e3de873-dabf-4c03-bb89-eeea3c4fd3a0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "ec93ff84-219c-485f-9274-11b8e61d29d6",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 99,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01;\nconst openFeeBig = (0, lib_1.toBig)(openFee); // use toBig() to emulate closeFee's 18 decimals on contract\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\nawait this.krAsset.update({\n    ..._test_utils_1.defaultKrAssetArgs,\n    openFee,\n});\nconst mintAmount = (0, lib_1.toBig)(1);\nconst mintValue = mintAmount.mul(this.krAsset.deployArgs.price);\nconst expectedFeeValue = mintValue.mul(openFeeBig);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Mint Kresko asset\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, chai_1.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, lib_1.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, chai_1.expect)(feeRecipientBalanceIncrease).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, lib_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"OpenFeePaid\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.paymentAmount).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, lib_1.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst feeRes = await hardhat_1.default.Diamond.calcExpectedFee(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount, _test_utils_1.Fee.OPEN);\nconst output = feeRes.toString().split(\",\");\nconst openFeeAmount = Number(output[1]) / 10 ** 18;\n(0, chai_1.expect)(openFeeAmount).eq(normalizedExpectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "6a60b204-3a17-4ef0-92c6-1415363a9a79",
                          "parentUUID": "ec93ff84-219c-485f-9274-11b8e61d29d6",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "6a60b204-3a17-4ef0-92c6-1415363a9a79"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 99,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "86cdf34e-6040-4c14-acd3-54c5e7c58f58",
                      "title": "Protocol close fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 55,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, lib_1.toBig)(1);\nconst burnValue = burnAmount.mul(this.krAsset.deployArgs.price);\nconst closeFee = (0, lib_1.toBig)(this.krAsset.deployArgs.closeFee); // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.mul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, chai_1.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, lib_1.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, chai_1.expect)(feeRecipientBalanceIncrease).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, lib_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"CloseFeePaid\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.paymentAmount).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, lib_1.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);",
                          "err": {},
                          "uuid": "d137db1a-20ba-4687-9131-02953b6674ac",
                          "parentUUID": "86cdf34e-6040-4c14-acd3-54c5e7c58f58",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 520,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, krassets_1.mintKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: hardhat_1.default.toBig(mintAmount),\n});\nawait (0, collaterals_1.withdrawCollateral)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount,\n});\nconst event = await (0, lib_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount,\n}), hardhat_1.default.Diamond, \"CloseFeePaid\");\n(0, chai_1.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nconst priceAfter = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst burnAmountRebase = burnAmount * denominator;\nawait (0, collaterals_1.withdrawCollateral)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount,\n});\nconst eventAfterRebase = await (0, lib_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase,\n}), hardhat_1.default.Diamond, \"CloseFeePaid\");\n(0, chai_1.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, chai_1.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "7cc2bb4b-3247-4e49-9459-7eef9fd66dfe",
                          "parentUUID": "86cdf34e-6040-4c14-acd3-54c5e7c58f58",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 196,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, krassets_1.mintKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: hardhat_1.default.toBig(mintAmount),\n});\nawait (0, collaterals_1.withdrawCollateral)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount,\n});\nconst event = await (0, lib_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount,\n}), hardhat_1.default.Diamond, \"CloseFeePaid\");\n(0, chai_1.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nconst burnAmountRebase = burnAmount / denominator;\nawait (0, collaterals_1.withdrawCollateral)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount,\n});\nconst eventAfterRebase = await (0, lib_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase,\n}), hardhat_1.default.Diamond, \"CloseFeePaid\");\n(0, chai_1.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, chai_1.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "20df7951-67eb-41b5-b986-153cfa0a4683",
                          "parentUUID": "86cdf34e-6040-4c14-acd3-54c5e7c58f58",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "d137db1a-20ba-4687-9131-02953b6674ac",
                        "7cc2bb4b-3247-4e49-9459-7eef9fd66dfe",
                        "20df7951-67eb-41b5-b986-153cfa0a4683"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 771,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [
                    "70f1a33c-ade4-4948-a96a-2f22c5e2f9e6",
                    "5594d747-3eb8-4634-bce8-a24545f7796a",
                    "2ddd1b85-6e19-4384-95e7-cf3b7e16c3cb",
                    "02b66130-7ec3-4088-a7f8-78cd30799162",
                    "584f71d9-3d57-47fc-a14f-be81c900d3ba",
                    "7e80050e-9790-4e7e-bf22-a88bcd783ed9",
                    "f205fff1-ff2e-489a-865f-96ae018ca13a",
                    "1b70b0bf-6acc-4ace-bae8-6675e2d71ced"
                  ],
                  "failures": [],
                  "pending": [
                    "ed1b3119-5975-4c55-87a1-76bb81354939",
                    "e7dc5a11-a1f7-473e-9d5a-8cfd59a4612e"
                  ],
                  "skipped": [],
                  "duration": 328,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "6f9c5a6a-072f-4f83-b5cb-2f00065b173d",
                  "title": "#burn - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase events\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase events \"before each\" hook in \"#burn - rebase events\"",
                      "timedOut": false,
                      "duration": 32,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmountInt,\n    user: hardhat_1.default.users.userOne,\n});",
                      "err": {},
                      "uuid": "ca8e66ec-58f5-48e0-952f-0018198cd5c1",
                      "parentUUID": "6f9c5a6a-072f-4f83-b5cb-2f00065b173d",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "432f3c66-3e2f-4796-9017-e2e1e60fac97",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 63,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(0);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = hardhat_1.default.fromBig(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address));\n(0, chai_1.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.closeTo(hardhat_1.default.toBig(expectedBalanceAfterBurn / denominator), 100000); // WEI",
                          "err": {},
                          "uuid": "45dac52d-2461-4500-af8e-925546f14aa8",
                          "parentUUID": "432f3c66-3e2f-4796-9017-e2e1e60fac97",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 65,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "9d1e01e5-4ea5-422c-8062-f1899214107a",
                          "parentUUID": "432f3c66-3e2f-4796-9017-e2e1e60fac97",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 63,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = hardhat_1.default.fromBig(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address));\n(0, chai_1.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(hardhat_1.default.toBig(expectedBalanceAfterBurn * denominator)); // WEI",
                          "err": {},
                          "uuid": "75a16ea1-0b69-4b20-80db-97b470ef1fd3",
                          "parentUUID": "432f3c66-3e2f-4796-9017-e2e1e60fac97",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 65,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "da64f288-268f-4de3-b183-669886e9b6b6",
                          "parentUUID": "432f3c66-3e2f-4796-9017-e2e1e60fac97",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "45dac52d-2461-4500-af8e-925546f14aa8",
                        "9d1e01e5-4ea5-422c-8062-f1899214107a",
                        "75a16ea1-0b69-4b20-80db-97b470ef1fd3",
                        "da64f288-268f-4de3-b183-669886e9b6b6"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 256,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "7913df9f-604b-4036-bd3f-f5756699ca13",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 56,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n(0, chai_1.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "f3a6156b-742b-4fa0-a79e-a929924d7915",
                          "parentUUID": "7913df9f-604b-4036-bd3f-f5756699ca13",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 79,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false))\n    .rawValue;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBeforeBurn).to.contain(this.krAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, chai_1.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "cbe387cb-ae40-4d32-9abc-2b8e0b570a5b",
                          "parentUUID": "7913df9f-604b-4036-bd3f-f5756699ca13",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 58,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n(0, chai_1.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "44fc2be6-f450-4480-9543-2bc3170c6167",
                          "parentUUID": "7913df9f-604b-4036-bd3f-f5756699ca13",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 72,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false))\n    .rawValue;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive, []);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, chai_1.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "ec061aa9-4156-4b84-a14d-06d86646462f",
                          "parentUUID": "7913df9f-604b-4036-bd3f-f5756699ca13",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f3a6156b-742b-4fa0-a79e-a929924d7915",
                        "cbe387cb-ae40-4d32-9abc-2b8e0b570a5b",
                        "44fc2be6-f450-4480-9543-2bc3170c6167",
                        "ec061aa9-4156-4b84-a14d-06d86646462f"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 265,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "4457ed6a-4e19-4bca-8b4f-a6eb35eaa089",
          "title": "Flux Pricefeed",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-pricefeed.ts",
          "file": "/src/test/oracle/00-pricefeed.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before each\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "172fc16d-4c54-47fc-9bae-a8437435ba32",
              "parentUUID": "4457ed6a-4e19-4bca-8b4f-a6eb35eaa089",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before each\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 68,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Deploy one price feed\nconst name = \"TEST\";\nconst decimals = 8;\nconst descriptionFeed = \"Test description\";\nconst feed = await hardhat_1.default.run(_tasks_1.TASK_DEPLOY_PRICE_FEED, {\n    name,\n    decimals,\n    description: descriptionFeed,\n    log: false,\n});\nthis.deployer = await hardhat_1.default.ethers.getNamedSigner(\"deployer\");\nthis.userOne = await hardhat_1.default.ethers.getNamedSigner(\"userOne\");\nthis.pricefeed = feed;",
              "err": {},
              "uuid": "7e022303-ecd8-4644-8eda-0ce44a75b506",
              "parentUUID": "4457ed6a-4e19-4bca-8b4f-a6eb35eaa089",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "357e0587-881f-4993-88af-cb2807f49a92",
              "title": "functionality",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-pricefeed.ts",
              "file": "/src/test/oracle/00-pricefeed.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize timestamp value once the initial answer is submitted",
                  "fullTitle": "Flux Pricefeed functionality should initialize timestamp value once the initial answer is submitted",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.latestTimestamp()).to.equal(0);\nawait this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\n(0, chai_1.expect)(Number(await this.pricefeed.latestTimestamp())).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "7d811f90-aec9-4037-9637-71f1976383dd",
                  "parentUUID": "357e0587-881f-4993-88af-cb2807f49a92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestAnswer once it's changed",
                  "fullTitle": "Flux Pricefeed functionality should return latestAnswer once it's changed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5b12a49c-4b8f-4622-add6-919682e1f409",
                  "parentUUID": "357e0587-881f-4993-88af-cb2807f49a92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen once it's changed",
                  "fullTitle": "Flux Pricefeed functionality should return marketOpen once it's changed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "758b27ed-6eba-4085-aba1-561df558a9e6",
                  "parentUUID": "357e0587-881f-4993-88af-cb2807f49a92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-validator to change values",
                  "fullTitle": "Flux Pricefeed functionality should not allow non-validator to change values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "41aaca0e-1e04-410e-ad38-7bb07e5374e9",
                  "parentUUID": "357e0587-881f-4993-88af-cb2807f49a92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return description",
                  "fullTitle": "Flux Pricefeed functionality should return description",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.description()).to.equal(\"Test description\");",
                  "err": {},
                  "uuid": "44d01db7-c668-44e4-b0c1-122524ad45c8",
                  "parentUUID": "357e0587-881f-4993-88af-cb2807f49a92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return decimals",
                  "fullTitle": "Flux Pricefeed functionality should return decimals",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.decimals()).to.equal(8);",
                  "err": {},
                  "uuid": "278b9cab-494d-42be-ab3a-4e7246dd850c",
                  "parentUUID": "357e0587-881f-4993-88af-cb2807f49a92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRoundData correctly",
                  "fullTitle": "Flux Pricefeed functionality should return latestRoundData correctly",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\nconst roundDataCall = await this.pricefeed.latestRoundData();\nconst roundData = {\n    roundId: roundDataCall[0].toNumber(),\n    answer: roundDataCall[1].toNumber(),\n    marketOpen: roundDataCall[2].valueOf(),\n    startedAt: roundDataCall[3].toNumber(),\n    updatedAt: roundDataCall[4].toNumber(),\n    answeredInRound: roundDataCall[5].toNumber(),\n};\n(0, chai_1.expect)(roundData.roundId).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.equal(roundData.updatedAt);\n(0, chai_1.expect)(roundData.answeredInRound).to.equal(roundData.roundId);\n(0, chai_1.expect)(roundData.answer).to.equal(TEST_VALUE);\n(0, chai_1.expect)(roundData.marketOpen).to.equal(true);",
                  "err": {},
                  "uuid": "6bdda0ec-48c6-4e76-b8c1-3a4309c1b5e3",
                  "parentUUID": "357e0587-881f-4993-88af-cb2807f49a92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getRoundData correctly",
                  "fullTitle": "Flux Pricefeed functionality should return getRoundData correctly",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\nconst roundDataCall = await this.pricefeed.getRoundData(1);\nconst roundData = {\n    roundId: roundDataCall[0].toNumber(),\n    answer: roundDataCall[1].toNumber(),\n    marketOpen: roundDataCall[2].valueOf(),\n    startedAt: roundDataCall[3].toNumber(),\n    updatedAt: roundDataCall[4].toNumber(),\n    answeredInRound: roundDataCall[5].toNumber(),\n};\n(0, chai_1.expect)(roundData.roundId).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.equal(roundData.updatedAt);\n(0, chai_1.expect)(roundData.answeredInRound).to.equal(roundData.roundId);\n(0, chai_1.expect)(roundData.answer).to.equal(TEST_VALUE);\n(0, chai_1.expect)(roundData.marketOpen).to.equal(true);",
                  "err": {},
                  "uuid": "d243c972-8c76-43df-bdef-7884fa597e8f",
                  "parentUUID": "357e0587-881f-4993-88af-cb2807f49a92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getAnswer correctly",
                  "fullTitle": "Flux Pricefeed functionality should return getAnswer correctly",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\n(0, chai_1.expect)(await this.pricefeed.getAnswer(1)).to.equal(TEST_VALUE);",
                  "err": {},
                  "uuid": "ecd64947-c974-481c-9509-de36e8cad9b5",
                  "parentUUID": "357e0587-881f-4993-88af-cb2807f49a92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen correctly",
                  "fullTitle": "Flux Pricefeed functionality should return marketOpen correctly",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\n(0, chai_1.expect)(await this.pricefeed.getMarketOpen(1)).to.equal(true);",
                  "err": {},
                  "uuid": "1310a0fa-d8d5-443c-bc1a-7950280df768",
                  "parentUUID": "357e0587-881f-4993-88af-cb2807f49a92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRound correctly",
                  "fullTitle": "Flux Pricefeed functionality should return latestRound correctly",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address,\n});\n(0, chai_1.expect)(await this.pricefeed.latestRound()).to.equal(1);",
                  "err": {},
                  "uuid": "569d9d9d-b68c-491f-b74a-25befe7d0815",
                  "parentUUID": "357e0587-881f-4993-88af-cb2807f49a92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d811f90-aec9-4037-9637-71f1976383dd",
                "44d01db7-c668-44e4-b0c1-122524ad45c8",
                "278b9cab-494d-42be-ab3a-4e7246dd850c",
                "6bdda0ec-48c6-4e76-b8c1-3a4309c1b5e3",
                "d243c972-8c76-43df-bdef-7884fa597e8f",
                "ecd64947-c974-481c-9509-de36e8cad9b5",
                "1310a0fa-d8d5-443c-bc1a-7950280df768",
                "569d9d9d-b68c-491f-b74a-25befe7d0815"
              ],
              "failures": [],
              "pending": [
                "5b12a49c-4b8f-4622-add6-919682e1f409",
                "758b27ed-6eba-4085-aba1-561df558a9e6",
                "41aaca0e-1e04-410e-ad38-7bb07e5374e9"
              ],
              "skipped": [],
              "duration": 53,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "12829d0d-c8b0-4f53-81bc-efdfdd3b8a45",
          "title": "Safety Council",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "289ab54e-e267-4515-b53e-3959a73ec7c7",
              "parentUUID": "12829d0d-c8b0-4f53-81bc-efdfdd3b8a45",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = hardhat_1.default.collaterals.find(asset => asset.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer, devTwo, extOne, extTwo, extThree } = await hardhat_1.default.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devTwo = devTwo;\nthis.extOne = extOne;\nthis.extTwo = extTwo;\nthis.extThree = extThree;",
              "err": {},
              "uuid": "0e604c97-b122-474b-ac09-952f5c357bb1",
              "parentUUID": "12829d0d-c8b0-4f53-81bc-efdfdd3b8a45",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4d13a944-e469-41c2-b9d8-9810f6e1ab05",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "043f1c82-1e34-47cb-bd98-f72c2540320c",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "5a797add-8de2-468f-a0a7-1538e6b22746",
                      "parentUUID": "043f1c82-1e34-47cb-bd98-f72c2540320c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 25,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne, this.extTwo]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "d2ceace7-6d55-425e-a069-9415f82a61da",
                      "parentUUID": "043f1c82-1e34-47cb-bd98-f72c2540320c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne, this.extTwo, this.extThree]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "ba8fda83-3001-4f87-9a6b-4be56023fd39",
                      "parentUUID": "043f1c82-1e34-47cb-bd98-f72c2540320c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 18,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)((0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo])).to.be.revertedWith(\"\");\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "3860738b-8975-4c9e-97dc-6ed881fb8277",
                      "parentUUID": "043f1c82-1e34-47cb-bd98-f72c2540320c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5a797add-8de2-468f-a0a7-1538e6b22746",
                    "d2ceace7-6d55-425e-a069-9415f82a61da",
                    "ba8fda83-3001-4f87-9a6b-4be56023fd39",
                    "3860738b-8975-4c9e-97dc-6ed881fb8277"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 99,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "3078aa23-5f39-4988-b4d3-0e624770c341",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "7f65d536-69ec-468e-8db2-fbae15064cf3",
                      "parentUUID": "3078aa23-5f39-4988-b4d3-0e624770c341",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 25,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.krAsset.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.krAsset.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "0cb35f8e-3fc7-432c-8efb-7310d0989a8b",
                      "parentUUID": "3078aa23-5f39-4988-b4d3-0e624770c341",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = hardhat_1.default.ethers.utils.computeAddress(\"0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d\");\nawait (0, chai_1.expect)((0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[randomAddr], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne])).to.be.revertedWith(\"\");\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), randomAddr);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "b44d2f94-5c84-4661-a38a-1f5d856b3809",
                      "parentUUID": "3078aa23-5f39-4988-b4d3-0e624770c341",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7f65d536-69ec-468e-8db2-fbae15064cf3",
                    "0cb35f8e-3fc7-432c-8efb-7310d0989a8b",
                    "b44d2f94-5c84-4661-a38a-1f5d856b3809"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 77,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "d1e079b8-4741-48b9-b84a-153023db463c",
                  "title": "duration based pausing",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 26,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, duration], [this.deployer, this.devTwo, this.extOne]);\nconst depositSafetyState = await hardhat_1.default.Diamond.safetyStateFor(this.collateral.address, _test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, chai_1.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "2ca6332e-f3a9-408b-be0e-0c2169fce624",
                      "parentUUID": "d1e079b8-4741-48b9-b84a-153023db463c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000;\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, duration], [this.deployer, this.devTwo, this.extOne]);\nconst depositSafetyState = await hardhat_1.default.Diamond.safetyStateFor(this.collateral.address, _test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, chai_1.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);\n// Confirm that the current blocktime is within the pause action's duration\nconst blockNumBefore = await hardhat_1.default.ethers.provider.getBlockNumber();\nconst blockBefore = await hardhat_1.default.ethers.provider.getBlock(blockNumBefore);\nconst timestampBefore = blockBefore.timestamp;\n(0, chai_1.expect)(Number(depositSafetyState[0].timestamp1)).to.be.greaterThan(timestampBefore);\n// Increase time by seven days\nconst sevenDays = 7 * 24 * 60 * 60;\nawait hardhat_1.default.ethers.provider.send(\"evm_increaseTime\", [sevenDays]);\nawait hardhat_1.default.ethers.provider.send(\"evm_mine\", []);\n// Confirm that block time has increased as expected\nconst blockNumAfter = await hardhat_1.default.ethers.provider.getBlockNumber();\nconst blockAfter = await hardhat_1.default.ethers.provider.getBlock(blockNumAfter);\nconst timestampAfter = blockAfter.timestamp;\n(0, chai_1.expect)(blockNumAfter).to.be.equal(blockNumBefore + 1);\n(0, chai_1.expect)(timestampAfter).to.be.equal(timestampBefore + sevenDays);\n// Confirm that the current blocktime is after the pause action's duration\n(0, chai_1.expect)(timestampAfter).to.be.greaterThan(Number(depositSafetyState[0].timestamp1));\n// NOTE: now we can test any functionality that should have now expired",
                      "err": {},
                      "uuid": "f2421aa2-5386-4846-aa28-bf6d94d13212",
                      "parentUUID": "d1e079b8-4741-48b9-b84a-153023db463c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2ca6332e-f3a9-408b-be0e-0c2169fce624",
                    "f2421aa2-5386-4846-aa28-bf6d94d13212"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 54,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "118a6efc-5fa8-45df-bd5c-63456ec13372",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 49,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "920ac9a9-5bcf-4b68-be6c-9996c5ceb5fd",
                      "parentUUID": "118a6efc-5fa8-45df-bd5c-63456ec13372",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 47,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.WITHDRAW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.WITHDRAW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.WITHDRAW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.WITHDRAW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "4266b70c-456b-4477-9a2c-6ef20e5f8fb7",
                      "parentUUID": "118a6efc-5fa8-45df-bd5c-63456ec13372",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 46,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "330e1b58-7437-4486-993b-1eb49243d037",
                      "parentUUID": "118a6efc-5fa8-45df-bd5c-63456ec13372",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 48,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.BORROW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.BORROW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.BORROW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.BORROW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "450a2cb5-b111-418d-b2e5-d328d8f16e05",
                      "parentUUID": "118a6efc-5fa8-45df-bd5c-63456ec13372",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 47,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.LIQUIDATION, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.LIQUIDATION, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "51ce4597-15a7-4785-a368-6d26160b7194",
                      "parentUUID": "118a6efc-5fa8-45df-bd5c-63456ec13372",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "920ac9a9-5bcf-4b68-be6c-9996c5ceb5fd",
                    "4266b70c-456b-4477-9a2c-6ef20e5f8fb7",
                    "330e1b58-7437-4486-993b-1eb49243d037",
                    "450a2cb5-b111-418d-b2e5-d328d8f16e05",
                    "51ce4597-15a7-4785-a368-6d26160b7194"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 237,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "d9043184-f22a-4a89-a19f-3ffaff974dcb",
                  "title": "event emission",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst event = await (0, lib_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"SafetyStateChange\");\n(0, chai_1.expect)(event.action).to.equal(_test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(event.asset).to.equal(this.collateral.address);\n// @ts-ignore\n(0, chai_1.expect)(event.description.hash).to.equal(hardhat_1.default.ethers.utils.keccak256(hardhat_1.default.ethers.utils.toUtf8Bytes(\"paused\")));",
                      "err": {},
                      "uuid": "8c57dda3-9eb0-4698-b5d0-19d6560e8cc9",
                      "parentUUID": "d9043184-f22a-4a89-a19f-3ffaff974dcb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8c57dda3-9eb0-4698-b5d0-19d6560e8cc9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 23,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "9956b1cf-ac8d-447e-b913-a1669938258e",
          "title": "Interest Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/00-init.ts",
          "file": "/src/test/stability-rate/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "95f41566-c6e4-46a3-baf8-07f7378920a2",
              "parentUUID": "9956b1cf-ac8d-447e-b913-a1669938258e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.krAsset = this.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);",
              "err": {},
              "uuid": "00687bd6-fb9c-4817-8105-a27442eebcdc",
              "parentUUID": "9956b1cf-ac8d-447e-b913-a1669938258e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "42fc2a38-b4bb-407a-8198-609963d9e68f",
              "title": "#init",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/00-init.ts",
              "file": "/src/test/stability-rate/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "initializes correct stability rates",
                  "fullTitle": "Interest Rates #init initializes correct stability rates",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = await hardhat_1.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, chai_1.expect)(config.debtIndex).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.stabilityRate).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, chai_1.expect)(config.rateSlope1).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.rateSlope1);\n(0, chai_1.expect)(config.rateSlope2).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.rateSlope2);\n(0, chai_1.expect)(config.stabilityRateBase).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.stabilityRateBase);\n(0, chai_1.expect)(config.optimalPriceRate).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.optimalPriceRate);\n(0, chai_1.expect)(config.priceRateDelta).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.priceRateDelta);",
                  "err": {},
                  "uuid": "d0dc7569-dba6-4e88-a39b-1904cb63a9ae",
                  "parentUUID": "42fc2a38-b4bb-407a-8198-609963d9e68f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures correct stability rates",
                  "fullTitle": "Interest Rates #init configures correct stability rates",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    stabilityRateBase: lib_1.oneRay,\n    rateSlope1: lib_1.oneRay.mul(10),\n    rateSlope2: lib_1.oneRay.mul(50),\n    optimalPriceRate: lib_1.oneRay.div(2),\n    priceRateDelta: lib_1.oneRay.div(100).mul(10),\n};\nawait hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, configuration);\nconst config = await hardhat_1.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, chai_1.expect)(config.debtIndex).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.stabilityRate).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, chai_1.expect)(config.rateSlope1).to.bignumber.equal(configuration.rateSlope1);\n(0, chai_1.expect)(config.rateSlope2).to.bignumber.equal(configuration.rateSlope2);\n(0, chai_1.expect)(config.stabilityRateBase).to.bignumber.equal(configuration.stabilityRateBase);\n(0, chai_1.expect)(config.optimalPriceRate).to.bignumber.equal(configuration.optimalPriceRate);\n(0, chai_1.expect)(config.priceRateDelta).to.bignumber.equal(configuration.priceRateDelta);",
                  "err": {},
                  "uuid": "78c1ff14-4646-422a-a65d-15ed1f338713",
                  "parentUUID": "42fc2a38-b4bb-407a-8198-609963d9e68f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant set incorrect values",
                  "fullTitle": "Interest Rates #init cant set incorrect values",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectOptimalRate = {\n    stabilityRateBase: lib_1.oneRay,\n    rateSlope1: lib_1.oneRay.mul(10),\n    rateSlope2: lib_1.oneRay.mul(50),\n    optimalPriceRate: lib_1.oneRay.add(1),\n    priceRateDelta: lib_1.oneRay.div(100).mul(10),\n};\nconst incorrectExcessRate = {\n    stabilityRateBase: lib_1.oneRay,\n    rateSlope1: lib_1.oneRay.mul(10),\n    rateSlope2: lib_1.oneRay.mul(50),\n    optimalPriceRate: lib_1.oneRay,\n    priceRateDelta: lib_1.oneRay.add(1),\n};\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.setupStabilityRateParams(this.krAsset.address, test_1.defaultKrAssetArgs.stabilityRates))\n    .to.be.reverted;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectOptimalRate)).to.be\n    .reverted;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectExcessRate)).to.be\n    .reverted;",
                  "err": {},
                  "uuid": "9f0d1619-1534-48ab-8616-be7d7338a764",
                  "parentUUID": "42fc2a38-b4bb-407a-8198-609963d9e68f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0dc7569-dba6-4e88-a39b-1904cb63a9ae",
                "78c1ff14-4646-422a-a65d-15ed1f338713",
                "9f0d1619-1534-48ab-8616-be7d7338a764"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 31,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "3b47c5f6-33c6-438d-8730-6115fb48f63d",
          "title": "Stability Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
          "file": "/src/test/stability-rate/01-rates.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "8e06c01d-ccc0-42e5-8ba3-bcf8364bdc4a",
              "parentUUID": "3b47c5f6-33c6-438d-8730-6115fb48f63d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 206,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userOne = hardhat_1.default.users.deployer;\nthis.krAsset = this.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\n[UniMath] = await hardhat_1.default.deploy(\"UniswapMath\", {\n    from: hardhat_1.default.users.deployer.address,\n    args: [hardhat_1.default.UniV2Factory.address, hardhat_1.default.UniV2Router.address],\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, lib_1.toBig)(1000);\nconst kLiq = (0, lib_1.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne,\n});\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: kLiq });\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: userOne,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "6c784b11-d7e6-40ec-b25a-5ef73d93d904",
              "parentUUID": "3b47c5f6-33c6-438d-8730-6115fb48f63d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ec525bef-0eb2-4a60-9216-19b4f8b91bad",
              "title": "#no-amm-prices",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct rates and debt when there is no amm price",
                  "fullTitle": "Stability Rates #no-amm-prices calculates correct rates and debt when there is no amm price",
                  "timedOut": false,
                  "duration": 2015,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const krAssetAmount = (0, lib_1.toBig)(1);\nconst krAssetNoBaseRate = await (0, krassets_1.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: ethers_1.BigNumber.from(0),\n    price: 10,\n    supplyLimit: 2000,\n});\nconst krAssetWithBaseRate = await (0, krassets_1.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: test_1.BASIS_POINT.mul(20),\n    price: 10,\n    supplyLimit: 2000,\n});\n// Asset\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: krAssetNoBaseRate,\n    amount: krAssetAmount,\n});\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: krAssetWithBaseRate,\n    amount: krAssetAmount,\n});\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nawait hardhat_network_helpers_1.time.increase(+lib_1.ONE_YEAR);\n// asset with no base rate and no amm price\nconst debtIndexNoBaseRate = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetNoBaseRate.address);\nconst debtScaledNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebt(userOne.address, krAssetNoBaseRate.address);\nconst debtPrincipalNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetNoBaseRate.address);\nconst debtInterestNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetNoBaseRate.address);\n(0, chai_1.expect)(debtIndexNoBaseRate).to.equal(lib_1.oneRay);\n(0, chai_1.expect)(debtScaledNoBaseRate).to.equal(debtPrincipalNoBaseRate);\n(0, chai_1.expect)(debtInterestNoBaseRate.kissAmount).to.equal(0);\n(0, chai_1.expect)(debtInterestNoBaseRate.assetAmount).to.equal(0);\n// asset with base rate and no amm price\nconst debtIndexWithBaseRate = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nconst debtScaledWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebt(userOne.address, krAssetWithBaseRate.address);\nconst debtPrincipalWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetWithBaseRate.address);\nconst debtInterestWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetWithBaseRate.address);\nconst expectedScaledDebt = await (0, calculations_1.toScaledAmount)(debtPrincipalWithBaseRate, krAssetWithBaseRate);\nconst expectedDebtIndex = await (0, calculations_1.calcDebtIndex)(krAssetWithBaseRate, debtIndexBefore, lastUpdateTimestamp);\nconst expectedAssetInterest = debtScaledWithBaseRate.sub(debtPrincipalWithBaseRate);\nconst expectedKissInterestAmount = await (0, calculations_1.oraclePriceToWad)(hardhat_1.default.Diamond.getKrAssetValue(krAssetWithBaseRate.address, expectedAssetInterest, true));\n(0, chai_1.expect)(debtIndexWithBaseRate).to.equal(expectedDebtIndex);\n(0, chai_1.expect)(debtScaledWithBaseRate).to.equal(expectedScaledDebt);\n(0, chai_1.expect)(debtInterestWithBaseRate.assetAmount).to.equal(expectedAssetInterest);\n(0, chai_1.expect)(debtInterestWithBaseRate.kissAmount).to.equal(expectedKissInterestAmount);",
                  "err": {},
                  "uuid": "1e05928b-548d-4d00-84d0-c563dd5530d4",
                  "parentUUID": "ec525bef-0eb2-4a60-9216-19b4f8b91bad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e05928b-548d-4d00-84d0-c563dd5530d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2015,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "d6ed6e53-2ad6-4a8c-b079-480bc1a15e62",
              "title": "#price-rate",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct price rates when amm == oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm == oracle",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst ammPricesOptimal = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammPricesOptimal.price0).to.be.closeTo(this.krAsset.deployArgs.price, 0.05);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.equal(lib_1.oneRay);",
                  "err": {},
                  "uuid": "6e17b7d5-6f64-4562-a45c-a82eb5ca407e",
                  "parentUUID": "d6ed6e53-2ad6-4a8c-b079-480bc1a15e62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm > oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm > oracle",
                  "timedOut": false,
                  "duration": 71,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 105; // 105% eg. 5% premium\nconst expectedPriceRate = test_1.ONE_PERCENT.mul(premiumPercentage).mul(997).div(1000);\nconst expectedPrice = this.krAsset.deployArgs.price * (premiumPercentage / 100);\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nconst ammPricesUpPremium = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammPricesUpPremium.price0).to.be.closeTo(expectedPrice, 0.05);\nawait updateTWAP();\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, test_1.BASIS_POINT);",
                  "err": {},
                  "uuid": "45b0d765-3615-4856-a293-2a241fd9f304",
                  "parentUUID": "d6ed6e53-2ad6-4a8c-b079-480bc1a15e62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm < oracle ",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 146,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 95; // 95% eg. 5% below oracle price\nconst expectedPriceRate = test_1.ONE_PERCENT.mul(premiumPercentage).mul(1003).div(1000);\nconst expectedPrice = this.krAsset.deployArgs.price * (premiumPercentage / 100);\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nconst ammRates = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammRates.price0).to.be.closeTo(expectedPrice, 0.05);\nawait updateTWAP();\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, test_1.BASIS_POINT);",
                  "err": {},
                  "uuid": "9964f935-ec2c-4c4d-a83a-f300324cc71a",
                  "parentUUID": "d6ed6e53-2ad6-4a8c-b079-480bc1a15e62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e17b7d5-6f64-4562-a45c-a82eb5ca407e",
                "45b0d765-3615-4856-a293-2a241fd9f304",
                "9964f935-ec2c-4c4d-a83a-f300324cc71a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 261,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "2337fa22-0631-40ac-afba-58b948054dad",
              "title": "#stability-rate",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct stability rate when amm == oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rate when amm == oracle",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal((0, calculations_1.getExpectedStabilityRate)(priceRate, test_1.defaultKrAssetArgs.stabilityRates));",
                  "err": {},
                  "uuid": "120ae2b4-464b-46a1-83d3-2b306702b049",
                  "parentUUID": "2337fa22-0631-40ac-afba-58b948054dad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rate when amm > oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rate when amm > oracle",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nconst priceRateActual = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\nconst priceRateDecimal = (0, lib_1.fromBig)(priceRateActual, 27);\nconst expectedPriceRateDecimal = (0, lib_1.fromBig)(test_1.ONE_PERCENT.mul(premiumPercentage).mul(997).div(1000), 27);\n(0, chai_1.expect)(priceRateDecimal).to.closeTo(expectedPriceRateDecimal, BPS);\nconst expectedStabilityRate = (0, calculations_1.getExpectedStabilityRate)(priceRateActual, test_1.defaultKrAssetArgs.stabilityRates);\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal(expectedStabilityRate);",
                  "err": {},
                  "uuid": "ed130518-2237-4b13-8b3b-2fb04269ebdc",
                  "parentUUID": "2337fa22-0631-40ac-afba-58b948054dad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rates when amm < oracle ",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nconst priceRateActual = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\nconst priceRateDecimal = (0, lib_1.fromBig)(priceRateActual, 27);\nconst expectedPriceRateDecimal = (0, lib_1.fromBig)(test_1.ONE_PERCENT.mul(premiumPercentage).mul(1003).div(1000), 27);\n(0, chai_1.expect)(priceRateDecimal).to.closeTo(expectedPriceRateDecimal, BPS);\nconst expectedStabilityRate = (0, calculations_1.getExpectedStabilityRate)(priceRateActual, test_1.defaultKrAssetArgs.stabilityRates);\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal(expectedStabilityRate);",
                  "err": {},
                  "uuid": "ee699234-3c6f-4d6c-a366-a484f7c0f9f1",
                  "parentUUID": "2337fa22-0631-40ac-afba-58b948054dad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "120ae2b4-464b-46a1-83d3-2b306702b049",
                "ed130518-2237-4b13-8b3b-2fb04269ebdc",
                "ee699234-3c6f-4d6c-a366-a484f7c0f9f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 217,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "710a993f-86d1-4c22-8c11-76aec08b9810",
              "title": "#debt-index",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt index after a year when amm price > oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year when amm price > oracle",
                  "timedOut": false,
                  "duration": 160,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+lib_1.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "86e9c26f-48b3-4e8d-ae9d-15c5de09a172",
                  "parentUUID": "710a993f-86d1-4c22-8c11-76aec08b9810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after year when amm price < oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after year when amm price < oracle",
                  "timedOut": false,
                  "duration": 163,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 90; // 90% eg. -10% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+lib_1.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "4137dcce-d68e-489a-b1a3-145edbe6b2b9",
                  "parentUUID": "710a993f-86d1-4c22-8c11-76aec08b9810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+lib_1.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "2f17584c-bc61-4892-97b7-40fad623dd31",
                  "parentUUID": "710a993f-86d1-4c22-8c11-76aec08b9810",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86e9c26f-48b3-4e8d-ae9d-15c5de09a172",
                "4137dcce-d68e-489a-b1a3-145edbe6b2b9",
                "2f17584c-bc61-4892-97b7-40fad623dd31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 368,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "69daea98-d030-4f35-93a1-34acfd0005ef",
          "title": "Stability Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
          "file": "/src/test/stability-rate/02-debt.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "54b0f636-cd5d-45c3-9f97-775ebc909a88",
              "parentUUID": "69daea98-d030-4f35-93a1-34acfd0005ef",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 226,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userOne = hardhat_1.default.users.deployer;\nuserTwo = hardhat_1.default.users.userTwo;\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\n[UniMath] = await hardhat_1.default.deploy(\"UniswapMath\", {\n    from: hardhat_1.default.users.deployer.address,\n    args: [hardhat_1.default.UniV2Factory.address, hardhat_1.default.UniV2Router.address],\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, lib_1.toBig)(1000);\nconst kLiq = (0, lib_1.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: userOne,\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: userOne,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "13b1803a-4713-4da5-ac02-7de0f555212d",
              "parentUUID": "69daea98-d030-4f35-93a1-34acfd0005ef",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "245f414b-6ca3-44cb-b7c7-ce06b81d2dcb",
              "title": "#debt calculation - mint",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - mint\"",
                  "fullTitle": "Stability Rates #debt calculation - mint \"before each\" hook in \"#debt calculation - mint\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "7a2d03c6-f986-429e-a9b5-d90d9dfceda8",
                  "parentUUID": "245f414b-6ca3-44cb-b7c7-ce06b81d2dcb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 235,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.not.bignumber.equal(debt);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "bc352e46-b734-4401-9428-e63f60cfd7b9",
                  "parentUUID": "245f414b-6ca3-44cb-b7c7-ce06b81d2dcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt amount when amm price < oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price < oracle",
                  "timedOut": false,
                  "duration": 239,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "9e0681e1-8b09-4a44-bacb-ac419fd4e120",
                  "parentUUID": "245f414b-6ca3-44cb-b7c7-ce06b81d2dcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(lib_2.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "af239b3a-b349-4d4b-9e66-7763f5af8deb",
                  "parentUUID": "245f414b-6ca3-44cb-b7c7-ce06b81d2dcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc352e46-b734-4401-9428-e63f60cfd7b9",
                "9e0681e1-8b09-4a44-bacb-ac419fd4e120",
                "af239b3a-b349-4d4b-9e66-7763f5af8deb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 586,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "3d987d4c-6635-46b0-98bf-e8ee93194bf9",
              "title": "#debt calculation - repay",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay\"",
                  "fullTitle": "Stability Rates #debt calculation - repay \"before each\" hook in \"#debt calculation - repay\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "ecf601b4-6b0e-4aef-a8f0-a64575c6bdf8",
                  "parentUUID": "3d987d4c-6635-46b0-98bf-e8ee93194bf9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 201,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 102; // 102% eg. 2% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\n// buy asset, increases price\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalBefore = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst burnAmount = mintAmount.div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: burnAmount,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(principalAfter).to.equal(principalBefore.sub(burnAmount));\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(burnAmount), hardhat_1.default.ethers.utils.parseUnits(\"10\", \"gwei\"));",
                  "err": {},
                  "uuid": "b72c7bac-f52f-4e11-a506-654eba7751f9",
                  "parentUUID": "3d987d4c-6635-46b0-98bf-e8ee93194bf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 266,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 98; // 101% eg. 1% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn,\n});\n// dump asset, decreases price\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait hardhat_network_helpers_1.time.increase(year);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(lib_2.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), lib_2.oneRay.div(10000));",
                  "err": {},
                  "uuid": "eb78e257-93d9-4dd4-98f5-b3e569b97383",
                  "parentUUID": "3d987d4c-6635-46b0-98bf-e8ee93194bf9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 153,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait hardhat_network_helpers_1.time.increase(year);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(lib_2.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), lib_2.oneRay.div(10000));",
                  "err": {},
                  "uuid": "e805a5cc-4b69-40c8-8d2a-1eddd98036d4",
                  "parentUUID": "3d987d4c-6635-46b0-98bf-e8ee93194bf9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b72c7bac-f52f-4e11-a506-654eba7751f9",
                "eb78e257-93d9-4dd4-98f5-b3e569b97383",
                "e805a5cc-4b69-40c8-8d2a-1eddd98036d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 620,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "84f3fde7-14f4-4839-bc23-33c658aca88c",
              "title": "#debt calculation - repay interest",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay interest\"",
                  "fullTitle": "Stability Rates #debt calculation - repay interest \"before each\" hook in \"#debt calculation - repay interest\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "4ee90e3d-85cf-468d-8a0e-4d4d9db79701",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can view account principal debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account principal debt for asset",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst expectedPrincipalDebt = mintAmount.mul(2);\nconst principalDebtAfterOneYear = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(principalDebtAfterOneYear).to.bignumber.equal(expectedPrincipalDebt);",
                  "err": {},
                  "uuid": "3b714611-d159-4b86-88b6-98cbaa5cb763",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view account scaled debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account scaled debt for asset",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst expectedScaledDebt = principalDebt.add(accruedInterest.assetAmount);\nconst scaledDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(scaledDebt).to.bignumber.equal(expectedScaledDebt);",
                  "err": {},
                  "uuid": "40c09e1f-4cd2-49cc-9262-fc1cf975c680",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view accrued interest in KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view accrued interest in KISS",
                  "timedOut": false,
                  "duration": 142,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst scaledDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst expectedValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, scaledDebt.sub(principalDebt), true)).rawValue;\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// 8 decimals\n(0, chai_1.expect)(accruedInterest.kissAmount).to.bignumber.equal(expectedValue.mul(10 ** 10));",
                  "err": {},
                  "uuid": "3ec74e63-a935-49b2-9f44-f64f72a955fa",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay full interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay full interest with KISS",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\n// get the principal before repayment\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// get values after repayment\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(accruedInterest.assetAmount).to.bignumber.eq(0);\n(0, chai_1.expect)(debt).to.bignumber.eq(principalDebt);",
                  "err": {},
                  "uuid": "e5cd16e6-199b-4b25-984b-23bb02d7c810",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay partial interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay partial interest with KISS",
                  "timedOut": false,
                  "duration": 186,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nconst accruedInterestBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// get the principal before repayment\nconst debtBefore = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst repaymentAmount = accruedInterestBefore.kissAmount.div(5);\nconst repaymentAmountAsset = accruedInterestBefore.assetAmount.div(5);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayStabilityRateInterestPartial(userTwo.address, this.krAsset.address, repaymentAmount);\n// get values after repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterestAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// TODO: calc exact values instead of closeTo\n(0, chai_1.expect)(accruedInterestAfter.kissAmount).to.be.closeTo(accruedInterestBefore.kissAmount.sub(repaymentAmount), RATE_DELTA);\n(0, chai_1.expect)(debtAfter).to.be.closeTo(debtBefore.sub(repaymentAmountAsset), RATE_DELTA);",
                  "err": {},
                  "uuid": "25a3c733-54b7-4cb4-9833-2b0cd56836db",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest for multiple assets in batch",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest for multiple assets in batch",
                  "timedOut": false,
                  "duration": 3166,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo,\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nconst totalInterestInKISSBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map(asset => hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c) => a.add(c.kissAmount), ethers_1.BigNumber.from(0));\nconst totalInterestInKISSAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, chai_1.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nconst KISSMinAmount = (0, lib_1.toBig)(10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: KISSMinAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.connect(userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSAfterRepay).to.equal(0);",
                  "err": {},
                  "uuid": "9300c179-aa67-4e86-9936-9394d0a313c6",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest and principal for a single asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest and principal for a single asset",
                  "timedOut": false,
                  "duration": 282,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst accruedInterestBeforeBurn = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\nconst accruedInterestAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Ensure burning does not wipe interest accrued\n(0, chai_1.expect)(accruedInterestAfterBurn.assetAmount.gt(accruedInterestBeforeBurn.assetAmount)).to.be.true;\n(0, chai_1.expect)(accruedInterestAfterBurn.kissAmount.gt(accruedInterestBeforeBurn.kissAmount)).to.be.true;\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore.length).to.equal(2);\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter.length).to.equal(1);\nconst accruedInterestAfterRepayment = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n// Ensure debt actually gets wiped\n(0, chai_1.expect)(principalDebt).to.equal(0);\n(0, chai_1.expect)(accruedInterestAfterRepayment.assetAmount).to.equal(0);\n(0, chai_1.expect)(accruedInterestAfterRepayment.kissAmount).to.equal(0);\n(0, chai_1.expect)(debt).to.equal(0);\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst accruedInterestYearAfterRepayment = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Sanity check with another year of time that there is no interest accrual\n(0, chai_1.expect)(accruedInterestYearAfterRepayment.assetAmount).to.equal(0);\n(0, chai_1.expect)(accruedInterestYearAfterRepayment.kissAmount).to.equal(0);\n// Get kr asset value, should be only KISS minted that remains\nconst krAssetValue = (await hardhat_1.default.Diamond.getAccountKrAssetValue(userTwo.address)).rawValue;\n(0, chai_1.expect)(krAssetValue).to.equal((0, lib_1.toBig)(10, 8));",
                  "err": {},
                  "uuid": "92055c21-682e-4fe8-bddd-fc76606f603a",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch repay interest and all debt",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can batch repay interest and all debt",
                  "timedOut": false,
                  "duration": 3585,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nconst totalInterestInKISSBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map(asset => hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c) => a.add(c.kissAmount), ethers_1.BigNumber.from(0));\nconst totalInterestInKISSAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, chai_1.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nawait Promise.all(krAssets.map(async (asset) => hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, asset.address, hardhat_1.default.ethers.constants.MaxUint256, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userTwo.address, asset.address))));\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore.length).to.equal(4);\nawait hardhat_1.default.Diamond.connect(userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSAfterRepay).to.equal(0);\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter.length).to.equal(1);",
                  "err": {},
                  "uuid": "bef39c2b-8181-40f6-adb1-bc51641baf1e",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can open up a new debt positions after wiping all debt + interest",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can open up a new debt positions after wiping all debt + interest",
                  "timedOut": false,
                  "duration": 457,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst expectedDebtAfterOneYear = await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(expectedDebtAfterOneYear);\n// Wipe debt\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\nconst accruedInterest = (await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address))\n    .assetAmount;\n// Mint again, before interest repayment\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\n// Ensure debt is principal + interest\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.closeTo(mintAmount.add(accruedInterest), RATE_DELTA);\n// Burn all assets\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\n// Ensure debt is equal to interest\nconst accruedInterestAfterBurn = (await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address)).assetAmount;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(accruedInterestAfterBurn);\n// Repay all interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// Debt should be wiped\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n// Mint again\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\n// Scaled should be equal to principal\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(mintAmount);\n// Advance time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n// Ensure accrual is the same as the previous year with the same position\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.eq(expectedDebtAfterOneYear);",
                  "err": {},
                  "uuid": "64a61f36-08df-4fb8-a232-90ad8d8cb970",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close a position in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close a position in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 271,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userOne,\n});\nawait KISS.connect(userOne).transfer(userTwo.address, minDebtAmount);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait hardhat_1.default.Diamond.connect(userTwo).closeKrAssetDebtPosition(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address)).to.eq(0);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(accruedInterest.assetAmount).to.eq(0);\n(0, chai_1.expect)(accruedInterest.kissAmount).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "b362ed69-4886-4c98-8de1-e09ff95058de",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close all positions and interest in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close all positions and interest in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 3493,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst kissAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10).mul(2);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: kissAmount,\n    user: userOne,\n});\nawait KISS.connect(userOne).transfer(userTwo.address, kissAmount);\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n// ~1M gas with 8 krAssets\n// console.log(+(await tx.wait()).gasUsed);\nawait hardhat_1.default.Diamond.connect(userTwo).batchCloseKrAssetDebtPositions(userTwo.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(accruedInterest).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getAccountKrAssetValue(userTwo.address)).rawValue).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "04ced8fc-8819-4ccb-9028-de40f599f7f7",
                  "parentUUID": "84f3fde7-14f4-4839-bc23-33c658aca88c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b714611-d159-4b86-88b6-98cbaa5cb763",
                "40c09e1f-4cd2-49cc-9262-fc1cf975c680",
                "3ec74e63-a935-49b2-9f44-f64f72a955fa",
                "e5cd16e6-199b-4b25-984b-23bb02d7c810",
                "25a3c733-54b7-4cb4-9833-2b0cd56836db",
                "9300c179-aa67-4e86-9936-9394d0a313c6",
                "92055c21-682e-4fe8-bddd-fc76606f603a",
                "bef39c2b-8181-40f6-adb1-bc51641baf1e",
                "64a61f36-08df-4fb8-a232-90ad8d8cb970",
                "b362ed69-4886-4c98-8de1-e09ff95058de",
                "04ced8fc-8819-4ccb-9028-de40f599f7f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12003,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "7d2f265c-91b9-4ad3-aa27-f3bc1d54a9f8",
          "title": "Stability Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
          "file": "/src/test/stability-rate/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hardhat_1.default.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "fdf3f33a-c630-4823-9d13-2df3beac8787",
              "parentUUID": "7d2f265c-91b9-4ad3-aa27-f3bc1d54a9f8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 242,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "liquidator = hardhat_1.default.users.deployer;\nuserTwo = hardhat_1.default.users.userTwo;\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, lib_1.toBig)(1000);\nconst kLiq = (0, lib_1.toBig)(100);\nawait this.collateral.setBalance(liquidator, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: liquidator,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: liquidator,\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: liquidator,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "d27d2724-d35f-4711-b323-597b76ada0c9",
              "parentUUID": "7d2f265c-91b9-4ad3-aa27-f3bc1d54a9f8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6bdb7d69-e3b4-4cb4-a9ad-0cb8a5428b40",
              "title": "#stability rate - liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
              "file": "/src/test/stability-rate/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#stability rate - liquidation\"",
                  "fullTitle": "Stability Rates #stability rate - liquidation \"before each\" hook in \"#stability rate - liquidation\"",
                  "timedOut": false,
                  "duration": 2800,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Create few krAssets\nkrAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1.1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));",
                  "err": {},
                  "uuid": "f45a5842-10c4-4823-bc36-4ba4fb478eed",
                  "parentUUID": "6bdb7d69-e3b4-4cb4-a9ad-0cb8a5428b40",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 300,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst krAsset = krAssets[0];\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "d92b8e14-b11b-435a-84c9-cabb9de7935a",
                  "parentUUID": "6bdb7d69-e3b4-4cb4-a9ad-0cb8a5428b40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot batch liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot batch liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 313,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "07febaea-a435-4092-a5fe-cbd610d77017",
                  "parentUUID": "6bdb7d69-e3b4-4cb4-a9ad-0cb8a5428b40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 704,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(liquidator).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map(asset => asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR * 4);\n// should be liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\n// Asset to liquidate\nconst krAsset = krAssets[0];\nconst interestUSDTotal = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// Liquidator mints KISS\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: interestUSDTotal.add((0, lib_1.toBig)(1)),\n    user: liquidator,\n});\n// liquidatable value total before\nconst accruedKissInterest = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address)).kissAmount);\nconst accountCollateralBefore = await hardhat_1.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, lib_1.toBig)(0));\n// Liquidate\nconst tx = await hardhat_1.default.Diamond.connect(liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address);\n// Should all be wiped\nconst interestAccruedAfterLiq = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address);\n(0, chai_1.expect)(interestAccruedAfterLiq.kissAmount).to.eq(0);\n(0, chai_1.expect)(interestAccruedAfterLiq.assetAmount).to.eq(0);\nconst accountCollateralAfter = await hardhat_1.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\nconst event = await (0, lib_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"InterestLiquidationOccurred\");\n// validate interest accrual changes\n(0, chai_1.expect)(accountCollateralAfter).to.equal(accountCollateralBefore.sub(event.collateralSent));\nconst liquidationIncentive = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue);\nconst expectedCollateral = (accruedKissInterest / (0, hardhat_1.fromBig)(await this.collateral.getPrice(), 8)) * liquidationIncentive;\n// event validation\n(0, chai_1.expect)(event.account).to.equal(userTwo.address);\n(0, chai_1.expect)(event.liquidator).to.equal(liquidator.address);\n(0, chai_1.expect)(event.repayKreskoAsset).to.equal(krAsset.address);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.collateralSent).toFixed(6)).to.equal(expectedCollateral.toFixed(6));\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.repayUSD)).to.closeTo(accruedKissInterest, 0.0001);\n// liquidator received collateral\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "25c059df-bc37-4f5c-9394-7207b3262416",
                  "parentUUID": "6bdb7d69-e3b4-4cb4-a9ad-0cb8a5428b40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can batch liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 832,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.getContractOrFork(\"KISS\");\nawait KISS.connect(liquidator).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map(asset => asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR * 4);\n// should be liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\nconst interestKissTotal = (0, hardhat_1.fromBig)(await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n// Liquidator mints KISS\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: interestKissTotal + 1,\n    user: liquidator,\n});\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, lib_1.toBig)(0));\n// Liquidate\nconst tx = await hardhat_1.default.Diamond.connect(liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address);\nconst interestKissTotalAfter = (0, hardhat_1.fromBig)(await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nconst event = await (0, lib_1.getInternalEvent)(tx, hardhat_1.default.Diamond, \"BatchInterestLiquidationOccurred\");\nconst repayUSD = (0, hardhat_1.fromBig)(event.repayUSD);\n// interest accrued changes\n(0, chai_1.expect)(interestKissTotalAfter).to.closeTo(interestKissTotal - (0, hardhat_1.fromBig)(event.repayUSD), 0.0001);\nconst liquidationIncentive = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue);\nconst expectedCollateral = (repayUSD / (0, hardhat_1.fromBig)(await this.collateral.getPrice(), 8)) * liquidationIncentive;\n// event validation\n(0, chai_1.expect)(event.account).to.equal(userTwo.address);\n(0, chai_1.expect)(event.liquidator).to.equal(liquidator.address);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.collateralSent)).to.closeTo(expectedCollateral, 0.0001);\n(0, chai_1.expect)(repayUSD).to.closeTo(interestKissTotal - interestKissTotalAfter, 0.0001);\n// liquidator received collateral\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "bc80494a-2020-495f-8940-b0638aa9069f",
                  "parentUUID": "6bdb7d69-e3b4-4cb4-a9ad-0cb8a5428b40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d92b8e14-b11b-435a-84c9-cabb9de7935a",
                "07febaea-a435-4092-a5fe-cbd610d77017",
                "25c059df-bc37-4f5c-9394-7207b3262416",
                "bc80494a-2020-495f-8940-b0638aa9069f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2149,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}