{
  "stats": {
    "suites": 77,
    "tests": 234,
    "passes": 232,
    "pending": 2,
    "failures": 0,
    "start": "2023-02-23T01:31:55.705Z",
    "end": "2023-02-23T01:33:36.931Z",
    "duration": 101226,
    "testsRegistered": 234,
    "passPercent": 100,
    "pendingPercent": 0.8547008547008548,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8cc9d51c-d635-41f6-a0a7-13c0782a881c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e094df4e-9796-4d3d-953f-2fc9a6520c93",
          "title": "Diamond",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 38,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "58dfc9e8-6542-427e-be15-298b6b01664d",
              "parentUUID": "e094df4e-9796-4d3d-953f-2fc9a6520c93",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "19862a86-e4fe-40fc-adba-2017677eb2c2",
              "title": "#initialization",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(hardhat_1.default.users.deployer.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "0144fe36-b676-40f3-85be-a25fa71ad197",
                  "parentUUID": "19862a86-e4fe-40fc-adba-2017677eb2c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await hardhat_1.default.Diamond.facets()).map(f => f.facetAddress);\nconst facetAddressesArtifact = this.facets.map(f => f.facetAddress);\n(0, chai_1.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, chai_1.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "88bd6e50-5e88-4d02-910f-5673b1203817",
                  "parentUUID": "19862a86-e4fe-40fc-adba-2017677eb2c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await hardhat_1.default.Diamond.facets()).flatMap(f => f.functionSelectors);\nconst facetSelectorsOnArtifact = this.facets.flatMap(f => f.functionSelectors);\n(0, chai_1.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, chai_1.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "df39c9cf-3bf5-4b95-aa0b-f03a8e3ab7dc",
                  "parentUUID": "19862a86-e4fe-40fc-adba-2017677eb2c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0144fe36-b676-40f3-85be-a25fa71ad197",
                "88bd6e50-5e88-4d02-910f-5673b1203817",
                "df39c9cf-3bf5-4b95-aa0b-f03a8e3ab7dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 131,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "b82424dc-b0a7-4d0d-abe5-32c9f523350b",
          "title": "Diamond",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 30,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "6cefa26e-885c-4025-8f58-a73aadef52c1",
              "parentUUID": "b82424dc-b0a7-4d0d-abe5-32c9f523350b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0795b497-7017-4bb4-9f56-9943a4c4361e",
              "title": "#ownership",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(hardhat_1.default.addr.deployer);",
                  "err": {},
                  "uuid": "53944f61-c816-4f23-bc9b-7b20a7e7344a",
                  "parentUUID": "0795b497-7017-4bb4-9f56-9943a4c4361e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.ADMIN, hardhat_1.default.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "bb143dc0-9446-4c6f-a419-c31809aadfcb",
                  "parentUUID": "0795b497-7017-4bb4-9f56-9943a4c4361e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hardhat_1.default.users.userOne;\nawait hardhat_1.default.Diamond.transferOwnership(pendingOwner.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "8bc4995d-8f7a-455f-9cc7-6c67311610d2",
                  "parentUUID": "0795b497-7017-4bb4-9f56-9943a4c4361e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = hardhat_1.default.users.userOne;\nawait hardhat_1.default.Diamond.transferOwnership(pendingOwner.address);\nawait hardhat_1.default.Diamond.connect(pendingOwner).acceptOwnership();\n(0, chai_1.expect)(await hardhat_1.default.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "ae033c4b-e57d-4929-9aaa-286d794fdf00",
                  "parentUUID": "0795b497-7017-4bb4-9f56-9943a4c4361e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53944f61-c816-4f23-bc9b-7b20a7e7344a",
                "bb143dc0-9446-4c6f-a419-c31809aadfcb",
                "8bc4995d-8f7a-455f-9cc7-6c67311610d2",
                "ae033c4b-e57d-4929-9aaa-286d794fdf00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "abcf624f-8877-4d7f-823c-ea642fb2b6ce",
          "title": "Diamond",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "b4414044-6ee3-4965-8fc4-b704ef78f63c",
              "parentUUID": "abcf624f-8877-4d7f-823c-ea642fb2b6ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ef670328-b99f-4f9a-a38d-01a9c443ece7",
              "title": "#upgrades",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 470,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await smock_1.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hardhat_1.default.deploy(\"SmockInit\");\nconst signatures = hardhat_1.default.getSignatures([...types_2.SmockFacet__factory.abi]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: types_1.FacetCutAction.Add,\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hardhat_1.default.addr.userOne);\nawait hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = hardhat_1.default.ethers.utils.id(\"kresko.test.operator\");\nconst isTestOperator = await hardhat_1.default.Diamond.hasRole(TEST_OPERATOR_ROLE, hardhat_1.default.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, chai_1.expect)(isTestOperator).to.equal(true);\nconst Facet = await hardhat_1.default.ethers.getContractAt([...types_2.SmockFacet__factory.abi], hardhat_1.default.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, chai_1.expect)(operatorFromNewStorage).to.equal(hardhat_1.default.addr.userOne);",
                  "err": {},
                  "uuid": "2c9c7d50-ac08-41b4-a068-1cb4ff754bcc",
                  "parentUUID": "ef670328-b99f-4f9a-a38d-01a9c443ece7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 824,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, add_facet_1.addFacet)({\n    name: \"SmockFacet\",\n    initializerName: \"SmockInit\",\n    initializerArgs: hardhat_1.default.addr.userOne,\n});\nconst facetsBefore = await hardhat_1.default.Diamond.facets();\n(0, chai_1.expect)(facetsBefore.filter(f => f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, remove_facet_1.removeFacet)({ name: \"SmockFacet\" });\nconst facetsAfter = await hardhat_1.default.Diamond.facets();\n(0, chai_1.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, chai_1.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "7651eb24-1c81-4b59-9b64-f9304e9891bf",
                  "parentUUID": "ef670328-b99f-4f9a-a38d-01a9c443ece7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(hardhat_1.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hardhat_1.default.addr.nonadmin;\nawait hardhat_1.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hardhat_1.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hardhat_1.default.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await hardhat_1.default.Diamond.facetAddress(signature);\nconst functions = await hardhat_1.default.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: hardhat_1.default.ethers.constants.AddressZero,\n    action: types_1.FacetCutAction.Remove,\n    functionSelectors: [signature],\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hardhat_1.default.addr.userOne;\nconst initData = await hardhat_1.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nawait tx.wait();\n// Ensure rest of the functions remain\nconst functionsAfterCut = await hardhat_1.default.Diamond.facetFunctionSelectors(facetAddress);\n(0, chai_1.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst filter = hardhat_1.default.Diamond.filters[\"PendingOwnershipTransfer(address,address)\"](hardhat_1.default.addr.deployer, correctOwner);\nconst [event] = await hardhat_1.default.Diamond.queryFilter(filter);\nconst { previousOwner, newOwner } = event.args;\n(0, chai_1.expect)(previousOwner).to.equal(hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(test_1.Error.DIAMOND_INVALID_FUNCTION_SIGNATURE);",
                  "err": {},
                  "uuid": "ecea4e1e-ab21-4c55-a6b2-71bce7424414",
                  "parentUUID": "ef670328-b99f-4f9a-a38d-01a9c443ece7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(hardhat_1.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = hardhat_1.default.addr.nonadmin;\nawait hardhat_1.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await hardhat_1.default.Diamond.pendingOwner();\n(0, chai_1.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = hardhat_1.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = hardhat_1.default.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await hardhat_1.default.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await hardhat_1.default.deploy(\"DiamondOwnershipFacet2\", {\n    contract: \"DiamondOwnershipFacet\",\n    from: hardhat_1.default.addr.deployer,\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: types_1.FacetCutAction.Replace,\n    functionSelectors: [signature],\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = hardhat_1.default.addr.userOne;\nconst initData = await hardhat_1.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nawait tx.wait();\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(test_1.Error.DIAMOND_INVALID_PENDING_OWNER);\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await hardhat_1.default.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, chai_1.expect)(functionsNewFacet.length).to.equal(1);\n(0, chai_1.expect)(functionsNewFacet).to.have.members([signature]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await hardhat_1.default.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, chai_1.expect)(functionsOldFacet).to.not.have.members([signature]);\n(0, chai_1.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).acceptOwnership());\nconst currentOwner = await hardhat_1.default.Diamond.owner();\n(0, chai_1.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "99deb279-8388-41f5-bc5d-187c53a8c243",
                  "parentUUID": "ef670328-b99f-4f9a-a38d-01a9c443ece7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 297,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);\nconst Factory = await smock_1.smock.mock(\"SmockInit\");\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait hardhat_1.default.Diamond.upgradeState(tx.to, tx.data);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "45d8188a-270d-44b4-9245-1fd26be9dbf1",
                  "parentUUID": "ef670328-b99f-4f9a-a38d-01a9c443ece7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 901,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await smock_1.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await hardhat_1.default.deploy(\"SmockInit\");\nconst signatures = hardhat_1.default.getSignatures([...types_2.SmockFacet__factory.abi]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: types_1.FacetCutAction.Add,\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(hardhat_1.default.addr.userOne);\nawait hardhat_1.default.Diamond.diamondCut([Cut], initData.to, initData.data);\nconst Diamond = await hardhat_1.default.ethers.getContractAt(\"SmockFacet\", hardhat_1.default.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, chai_1.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await smock_1.smock.mock(\"SmockFacet2\");\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = hardhat_1.default.getSignatures([...types_2.SmockFacet2__factory.abi]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: types_1.FacetCutAction.Add,\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait hardhat_1.default.Diamond.diamondCut([Cut2], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await hardhat_1.default.ethers.getContractAt(\"SmockFacet2\", hardhat_1.default.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, chai_1.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, chai_1.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "6330b9ee-c9b9-4c4f-b6ca-ff317c1f3c50",
                  "parentUUID": "ef670328-b99f-4f9a-a38d-01a9c443ece7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c9c7d50-ac08-41b4-a068-1cb4ff754bcc",
                "7651eb24-1c81-4b59-9b64-f9304e9891bf",
                "ecea4e1e-ab21-4c55-a6b2-71bce7424414",
                "99deb279-8388-41f5-bc5d-187c53a8c243",
                "45d8188a-270d-44b4-9245-1fd26be9dbf1",
                "6330b9ee-c9b9-4c4f-b6ca-ff317c1f3c50"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2628,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c6dbf707-e1fd-4322-822f-acd740541f3e",
          "title": "KreskoAsset",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "d782c6b0-00a8-4af9-b8dd-ba6399cf5216",
              "parentUUID": "c6dbf707-e1fd-4322-822f-acd740541f3e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4f9a49ff-fd2e-4a05-92ab-7331efc52ab8",
              "title": "#initialization - anchor",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = this.krAssets.find(k => k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "78687f5b-d8ec-45ce-99c3-cdc21d7f9f42",
                  "parentUUID": "4f9a49ff-fd2e-4a05-92ab-7331efc52ab8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(KreskoAsset.initialize(name, symbol, 18, hardhat_1.default.addr.deployer, hardhat_1.default.Diamond.address)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "62df3c44-ccab-49a6-8760-0294b710c7b2",
                  "parentUUID": "4f9a49ff-fd2e-4a05-92ab-7331efc52ab8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await hardhat_1.default.deployments.get(symbol);\nconst implementationAddress = deployment.implementation;\n(0, chai_1.expect)(implementationAddress).to.not.equal(hardhat_1.default.ethers.constants.AddressZero);\nconst KreskoAssetImpl = await hardhat_1.default.ethers.getContractAt(\"KreskoAsset\", implementationAddress);\nawait (0, chai_1.expect)(KreskoAssetImpl.initialize(name, symbol, 18, hardhat_1.default.addr.deployer, hardhat_1.default.Diamond.address)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "175a6f6d-8da2-4bc3-9775-b544bc61e89b",
                  "parentUUID": "4f9a49ff-fd2e-4a05-92ab-7331efc52ab8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await KreskoAsset.name()).to.equal(name);\n(0, chai_1.expect)(await KreskoAsset.symbol()).to.equal(symbol);\n(0, chai_1.expect)(await KreskoAsset.kresko()).to.equal(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(await KreskoAsset.hasRole(test_1.Role.ADMIN, hardhat_1.default.addr.deployer)).to.equal(true);\n(0, chai_1.expect)(await KreskoAsset.hasRole(test_1.Role.OPERATOR, hardhat_1.default.Diamond.address)).to.equal(true);\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(\"200000000000000000000\");\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).to.equal(0);\n(0, chai_1.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "11b4bd72-9d80-4b9c-aa24-2558bee72d33",
                  "parentUUID": "4f9a49ff-fd2e-4a05-92ab-7331efc52ab8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, chai_1.expect)(KreskoAsset.updateMetaData(newName, newSymbol, 2)).to.not.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);\n(0, chai_1.expect)(await KreskoAsset.name()).to.equal(newName);\n(0, chai_1.expect)(await KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "e87a0421-4b0c-42d5-8df1-1e7aa65a0d8c",
                  "parentUUID": "4f9a49ff-fd2e-4a05-92ab-7331efc52ab8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62df3c44-ccab-49a6-8760-0294b710c7b2",
                "175a6f6d-8da2-4bc3-9775-b544bc61e89b",
                "11b4bd72-9d80-4b9c-aa24-2558bee72d33",
                "e87a0421-4b0c-42d5-8df1-1e7aa65a0d8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 72,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "5882ff3c-5310-4525-8b72-650dea4ca0e5",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - wrapped\"",
                  "fullTitle": "KreskoAsset #initialization - wrapped \"before each\" hook in \"#initialization - wrapped\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = hardhat_1.default.krAssets.find(k => k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "9cb362c7-be35-4b09-809b-02a7de8ca861",
                  "parentUUID": "5882ff3c-5310-4525-8b72-650dea4ca0e5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(KreskoAssetAnchor.initialize(KreskoAsset.address, name, symbol, hardhat_1.default.addr.deployer)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "db9b08d3-fefe-4515-8002-0c09d8e7f1ef",
                  "parentUUID": "5882ff3c-5310-4525-8b72-650dea4ca0e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await hardhat_1.default.deployments.get(shared_1.anchorTokenPrefix + symbol);\nconst implementationAddress = deployment.implementation;\n(0, chai_1.expect)(implementationAddress).to.not.equal(hardhat_1.default.ethers.constants.AddressZero);\nconst KreskoAssetAnchorImpl = await hardhat_1.default.ethers.getContractAt(\"KreskoAssetAnchor\", implementationAddress);\nawait (0, chai_1.expect)(KreskoAssetAnchorImpl.initialize(KreskoAsset.address, name, symbol, hardhat_1.default.addr.deployer)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "dfae0a11-c77e-4745-b99e-48182ff9ef1b",
                  "parentUUID": "5882ff3c-5310-4525-8b72-650dea4ca0e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, chai_1.expect)(KreskoAssetAnchor.updateMetaData(newName, newSymbol, 2)).to.not.be.revertedWith(test_1.Error.ALREADY_INITIALIZED_OZ);\n(0, chai_1.expect)(await KreskoAssetAnchor.name()).to.equal(newName);\n(0, chai_1.expect)(await KreskoAssetAnchor.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "45635610-15aa-4603-ad5d-7eee47f0b3a7",
                  "parentUUID": "5882ff3c-5310-4525-8b72-650dea4ca0e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await KreskoAssetAnchor.name()).to.equal(name);\n(0, chai_1.expect)(await KreskoAssetAnchor.symbol()).to.equal(shared_1.anchorTokenPrefix + symbol);\n(0, chai_1.expect)(await KreskoAssetAnchor.asset()).to.equal(KreskoAsset.address);\n(0, chai_1.expect)(await KreskoAssetAnchor.hasRole(test_1.Role.ADMIN, hardhat_1.default.addr.deployer)).to.equal(true);\n(0, chai_1.expect)(await KreskoAssetAnchor.hasRole(test_1.Role.OPERATOR, hardhat_1.default.Diamond.address)).to.equal(true);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(\"200000000000000000000\");\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(await KreskoAsset.totalSupply());\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).to.equal(0);\n(0, chai_1.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "8cd45165-5280-4c52-870f-8c79d821b511",
                  "parentUUID": "5882ff3c-5310-4525-8b72-650dea4ca0e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db9b08d3-fefe-4515-8002-0c09d8e7f1ef",
                "dfae0a11-c77e-4745-b99e-48182ff9ef1b",
                "45635610-15aa-4603-ad5d-7eee47f0b3a7",
                "8cd45165-5280-4c52-870f-8c79d821b511"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 71,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "aeccfd05-d1c4-40b0-8550-bc986f11ed15",
          "title": "KreskoAsset",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "1af67d5d-5385-41e8-aef3-3980a37c0a09",
              "parentUUID": "aeccfd05-d1c4-40b0-8550-bc986f11ed15",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.owner = hardhat_1.default.users.deployer;\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol);\nthis.mintAmount = 125;\nawait this.krAsset.contract.grantRole(test_1.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "061a8b04-23ae-441d-9c7e-2a20a6d92c56",
              "parentUUID": "aeccfd05-d1c4-40b0-8550-bc986f11ed15",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8f71dcc5-6c0f-4c8c-b6fd-97e75fbf0a1c",
              "title": "#mint",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "90882412-e655-419e-896e-752ead6b8771",
                  "parentUUID": "8f71dcc5-6c0f-4c8c-b6fd-97e75fbf0a1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(hardhat_1.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "1d744f6a-e981-410b-b526-add24e46baf9",
                  "parentUUID": "8f71dcc5-6c0f-4c8c-b6fd-97e75fbf0a1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait (0, chai_1.expect)(this.krAsset.contract.connect(hardhat_1.default.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userOne.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and all account balances unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "16371522-0f1e-4d0c-b4be-499471694d35",
                  "parentUUID": "8f71dcc5-6c0f-4c8c-b6fd-97e75fbf0a1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(this.krAsset.contract.connect(hardhat_1.default.users.admin).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.admin.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);",
                  "err": {},
                  "uuid": "a066d50f-a28a-4df3-aba8-727a4d8c13a9",
                  "parentUUID": "8f71dcc5-6c0f-4c8c-b6fd-97e75fbf0a1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90882412-e655-419e-896e-752ead6b8771",
                "1d744f6a-e981-410b-b526-add24e46baf9",
                "16371522-0f1e-4d0c-b4be-499471694d35",
                "a066d50f-a28a-4df3-aba8-727a4d8c13a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "385394cd-3d02-4bc2-8d0e-5fe6889a5fff",
              "title": "#burn",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 13,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.mintAmount = 250;\nawait this.krAsset.contract.connect(this.owner).mint(hardhat_1.default.users.userOne.address, this.mintAmount);",
                  "err": {},
                  "uuid": "1019a082-1c6a-434b-bce9-47dc28690479",
                  "parentUUID": "385394cd-3d02-4bc2-8d0e-5fe6889a5fff",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(hardhat_1.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "0635fd6f-d58f-4f82-9926-69f3b21e0526",
                  "parentUUID": "385394cd-3d02-4bc2-8d0e-5fe6889a5fff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 262,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.connect(this.owner).approve(hardhat_1.default.users.userOne.address, this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.allowance(this.owner.address, hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(hardhat_1.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, chai_1.expect)(await this.krAsset.contract.allowance(this.owner.address, hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "46dd6852-81d8-4ed2-8aaa-b6bb236de63a",
                  "parentUUID": "385394cd-3d02-4bc2-8d0e-5fe6889a5fff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\n// gh-actions fix\nif (process.env.TESTCI) {\n    await (0, chai_1.expect)(this.krAsset.contract.connect(this.owner).burn(hardhat_1.default.users.userOne.address, overUserBalance)).to.be.reverted;\n}\nelse {\n    await (0, chai_1.expect)(this.krAsset.contract.connect(this.owner).burn(hardhat_1.default.users.userOne.address, overUserBalance)).to.be.reverted;\n}\n// Check total supply and user's balances are unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "5b3307a3-8d06-403b-8779-45f2f08c55ff",
                  "parentUUID": "385394cd-3d02-4bc2-8d0e-5fe6889a5fff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(this.krAsset.contract.connect(hardhat_1.default.users.userTwo).burn(hardhat_1.default.users.userOne.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userTwo.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and user's balances unchanged\n(0, chai_1.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "2d116dfc-dca4-4245-aac0-c77b780c936e",
                  "parentUUID": "385394cd-3d02-4bc2-8d0e-5fe6889a5fff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0635fd6f-d58f-4f82-9926-69f3b21e0526",
                "46dd6852-81d8-4ed2-8aaa-b6bb236de63a",
                "5b3307a3-8d06-403b-8779-45f2f08c55ff",
                "2d116dfc-dca4-4245-aac0-c77b780c936e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 341,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c1a1d9e9-d643-4fc9-bf36-870a4eecb2b4",
          "title": "KreskoAsset",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "9282266e-6db4-4d22-b3bc-5a78ef0fde4f",
              "parentUUID": "c1a1d9e9-d643-4fc9-bf36-870a4eecb2b4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol).contract;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(test_1.Role.OPERATOR, hardhat_1.default.addr.deployer);",
              "err": {},
              "uuid": "db7b17c8-4ede-4632-85fa-b91188ffe1ce",
              "parentUUID": "c1a1d9e9-d643-4fc9-bf36-870a4eecb2b4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7f52abc5-c2ee-42a7-afda-f1f2f0e244e6",
              "title": "#rebase",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(\"1.525\");\nconst positive = true;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive)).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).equal(denominator);\n(0, chai_1.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "1564d58f-0208-41f0-8037-cd3821b1b5dc",
                  "parentUUID": "7f52abc5-c2ee-42a7-afda-f1f2f0e244e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(\"1.525\");\nconst positive = false;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive)).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, chai_1.expect)(rebaseInfo.denominator).equal(denominator);\n(0, chai_1.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "d444fdea-0127-42ed-b220-d73a05330bc9",
                  "parentUUID": "7f52abc5-c2ee-42a7-afda-f1f2f0e244e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = hardhat_1.default.toBig(1);\nconst positive = false;\nawait (0, chai_1.expect)(KreskoAsset.rebase(denominator, positive)).to.not.be.reverted;\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "aa998c4d-f55e-4682-9543-0e9a76d7a068",
                  "parentUUID": "7f52abc5-c2ee-42a7-afda-f1f2f0e244e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "61fbbb40-807e-493c-9aa9-6bfb56594eaa",
                  "title": "#balance + supply",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                      "err": {},
                      "uuid": "8fc431ea-5d2d-4a10-b663-70d936b7463c",
                      "parentUUID": "61fbbb40-807e-493c-9aa9-6bfb56594eaa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "e3fc2998-7451-4b83-b459-af8a18152787",
                      "parentUUID": "61fbbb40-807e-493c-9aa9-6bfb56594eaa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 27,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "bcfe6dcd-d9c0-4656-9956-4f8b67937c8a",
                      "parentUUID": "61fbbb40-807e-493c-9aa9-6bfb56594eaa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.mul(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "7c51c351-9b31-4222-9d83-21ab4417ee5e",
                      "parentUUID": "61fbbb40-807e-493c-9aa9-6bfb56594eaa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 31,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "02d746cb-ae7c-41e0-8102-f2b48650c106",
                      "parentUUID": "61fbbb40-807e-493c-9aa9-6bfb56594eaa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "47e789d4-66e9-470a-8645-93a5b9866ef9",
                      "parentUUID": "61fbbb40-807e-493c-9aa9-6bfb56594eaa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount.div(denominator));\n(0, chai_1.expect)(await KreskoAsset.totalSupply()).to.equal(test_1.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "3300bad2-1a31-4af9-ac93-2e5d8f6156f1",
                      "parentUUID": "61fbbb40-807e-493c-9aa9-6bfb56594eaa",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8fc431ea-5d2d-4a10-b663-70d936b7463c",
                    "e3fc2998-7451-4b83-b459-af8a18152787",
                    "bcfe6dcd-d9c0-4656-9956-4f8b67937c8a",
                    "7c51c351-9b31-4222-9d83-21ab4417ee5e",
                    "02d746cb-ae7c-41e0-8102-f2b48650c106",
                    "47e789d4-66e9-470a-8645-93a5b9866ef9",
                    "3300bad2-1a31-4af9-ac93-2e5d8f6156f1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 194,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "29c6c46c-8e5f-4ba9-b287-5ec819d1cf93",
                  "title": "#transfer",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 48,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "79f58b7e-640a-428f-805a-e5226c68d795",
                      "parentUUID": "29c6c46c-8e5f-4ba9-b287-5ec819d1cf93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 49,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "920d4888-4376-4d8e-82db-624c13c3d6d4",
                      "parentUUID": "29c6c46c-8e5f-4ba9-b287-5ec819d1cf93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 118,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "b295d6db-723c-490d-ac65-6e39e6240be0",
                      "parentUUID": "29c6c46c-8e5f-4ba9-b287-5ec819d1cf93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 111,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "c0e4ae34-cc45-4786-b778-5ade9f4e056f",
                      "parentUUID": "29c6c46c-8e5f-4ba9-b287-5ec819d1cf93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 104,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "c3985188-7900-4060-9f6f-587f46abb9ab",
                      "parentUUID": "29c6c46c-8e5f-4ba9-b287-5ec819d1cf93",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = hardhat_1.default.toBig(1);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAsset.mint(hardhat_1.default.addr.userOne, test_1.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nawait KreskoAsset.approve(hardhat_1.default.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = test_1.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, chai_1.expect)(KreskoAsset.connect(hardhat_1.default.users.userOne).transferFrom(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne, transferAmount)).to.be.revertedWith(test_1.Error.NOT_ENOUGH_ALLOWANCE);\n(0, chai_1.expect)(await KreskoAsset.allowance(hardhat_1.default.addr.deployer, hardhat_1.default.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "fee05b6e-45eb-4de6-b49c-bd201f17670b",
                      "parentUUID": "29c6c46c-8e5f-4ba9-b287-5ec819d1cf93",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "79f58b7e-640a-428f-805a-e5226c68d795",
                    "920d4888-4376-4d8e-82db-624c13c3d6d4",
                    "b295d6db-723c-490d-ac65-6e39e6240be0",
                    "c0e4ae34-cc45-4786-b778-5ade9f4e056f",
                    "c3985188-7900-4060-9f6f-587f46abb9ab",
                    "fee05b6e-45eb-4de6-b49c-bd201f17670b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 537,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "1564d58f-0208-41f0-8037-cd3821b1b5dc",
                "d444fdea-0127-42ed-b220-d73a05330bc9",
                "aa998c4d-f55e-4682-9543-0e9a76d7a068"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "b0984c05-9119-437c-b5d4-5240009a05ad",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "63f34cec-ae9e-43bb-a0f0-6f5d0288bc84",
              "parentUUID": "b0984c05-9119-437c-b5d4-5240009a05ad",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const asset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === test_1.defaultKrAssetArgs.symbol);\nKreskoAsset = asset.contract;\nKreskoAssetAnchor = asset.anchor;\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(test_1.Role.OPERATOR, hardhat_1.default.addr.deployer),\n    KreskoAssetAnchor.grantRole(test_1.Role.OPERATOR, hardhat_1.default.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hardhat_1.default.ethers.constants.MaxUint256),\n]);",
              "err": {},
              "uuid": "12d07b21-578b-4839-93d7-034cc33aa016",
              "parentUUID": "b0984c05-9119-437c-b5d4-5240009a05ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "49931e40-d24d-43eb-afdf-d1eb0220b33e",
              "title": "#minting and burning",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(test_1.defaultMintAmount.add(test_1.defaultMintAmount));\n(0, chai_1.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "804293b9-14e1-49f3-99f7-42e30f0ec14c",
                  "parentUUID": "49931e40-d24d-43eb-afdf-d1eb0220b33e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "4da075ad-0537-4fca-9831-0e5090dc773d",
                  "parentUUID": "49931e40-d24d-43eb-afdf-d1eb0220b33e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "b1590995-6069-4c1f-b66d-58c19df7bc04",
                  "parentUUID": "49931e40-d24d-43eb-afdf-d1eb0220b33e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 161,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "6271575e-3543-4dac-b310-fc9c1dea1882",
                  "parentUUID": "49931e40-d24d-43eb-afdf-d1eb0220b33e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 159,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nawait KreskoAssetAnchor.withdraw(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(0);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);",
                  "err": {},
                  "uuid": "6d786000-2973-47eb-82aa-aed4767a2276",
                  "parentUUID": "49931e40-d24d-43eb-afdf-d1eb0220b33e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "0a812bf5-a6af-4372-9141-840e0afc79ea",
                  "title": "#rebases",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "1f05b195-8c75-45be-ad79-a778eb4ddb32",
                      "title": "#conversions",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 199,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "404700f1-9e23-45e9-9471-57b2de6d9007",
                          "parentUUID": "1f05b195-8c75-45be-ad79-a778eb4ddb32",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 206,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "b6cbed69-318d-42ed-9f3a-a5c8fe9bb2a2",
                          "parentUUID": "1f05b195-8c75-45be-ad79-a778eb4ddb32",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 206,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "37a3c2c2-0f11-4893-b57c-6d0266af6a65",
                          "parentUUID": "1f05b195-8c75-45be-ad79-a778eb4ddb32",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 200,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = true;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.mul(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "b934f1c2-85e7-4e29-ac1c-a1589f71b3ce",
                          "parentUUID": "1f05b195-8c75-45be-ad79-a778eb4ddb32",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 462,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "b3df2a28-dbf2-4311-b70a-9c673ec2e4e5",
                          "parentUUID": "1f05b195-8c75-45be-ad79-a778eb4ddb32",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 196,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "7b2fbe84-4bdb-4568-875a-67a076584a44",
                          "parentUUID": "1f05b195-8c75-45be-ad79-a778eb4ddb32",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 193,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.mint(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(test_1.defaultMintAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "dfec12e7-282f-48c6-8c6b-6a3ab46305ab",
                          "parentUUID": "1f05b195-8c75-45be-ad79-a778eb4ddb32",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 197,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hardhat_1.default.addr.deployer, test_1.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(test_1.defaultMintAmount, hardhat_1.default.addr.deployer);\nconst denominator = 6;\nconst positive = false;\nawait KreskoAsset.rebase(hardhat_1.default.toBig(denominator), positive);\nconst rebasedAmount = test_1.defaultMintAmount.div(denominator);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(test_1.defaultMintAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hardhat_1.default.addr.deployer, hardhat_1.default.addr.deployer);\n(0, chai_1.expect)(await KreskoAsset.balanceOf(hardhat_1.default.addr.deployer)).to.equal(rebasedAmount);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(hardhat_1.default.addr.deployer)).to.equal(0);\n(0, chai_1.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "a6fcacaa-8c25-4a21-a9a0-18e7e3fef934",
                          "parentUUID": "1f05b195-8c75-45be-ad79-a778eb4ddb32",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "404700f1-9e23-45e9-9471-57b2de6d9007",
                        "b6cbed69-318d-42ed-9f3a-a5c8fe9bb2a2",
                        "37a3c2c2-0f11-4893-b57c-6d0266af6a65",
                        "b934f1c2-85e7-4e29-ac1c-a1589f71b3ce",
                        "b3df2a28-dbf2-4311-b70a-9c673ec2e4e5",
                        "7b2fbe84-4bdb-4568-875a-67a076584a44",
                        "dfec12e7-282f-48c6-8c6b-6a3ab46305ab",
                        "a6fcacaa-8c25-4a21-a9a0-18e7e3fef934"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1859,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "804293b9-14e1-49f3-99f7-42e30f0ec14c",
                "4da075ad-0537-4fca-9831-0e5090dc773d",
                "b1590995-6069-4c1f-b66d-58c19df7bc04",
                "6271575e-3543-4dac-b310-fc9c1dea1882",
                "6d786000-2973-47eb-82aa-aed4767a2276"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 518,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "4a04fb8d-6d87-4e9e-aab4-eaffc0b7506c",
          "title": "Minter - Init",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/00-init.ts",
          "file": "/src/test/minter/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Init\"",
              "fullTitle": "Minter - Init \"before each\" hook in \"Minter - Init\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "f3011b02-30d0-4aea-9c77-20b32cf7f202",
              "parentUUID": "4a04fb8d-6d87-4e9e-aab4-eaffc0b7506c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1ba9404b-5069-4ce4-a4a1-762ef4185e75",
              "title": "#initialization",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/00-init.ts",
              "file": "/src/test/minter/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct initial state",
                  "fullTitle": "Minter - Init #initialization sets correct initial state",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await hardhat_1.default.Diamond.minterInitializations()).to.equal(1);\nconst { args } = await (0, shared_1.getMinterInitializer)(hardhat_1.default);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.OPERATOR, args.operator)).to.equal(true);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(test_1.Role.SAFETY_COUNCIL, hardhat_1.default.Multisig.address)).to.equal(true);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.feeRecipient()).to.equal(args.feeRecipient);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue).to.equal(args.liquidationIncentiveMultiplier);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.minimumCollateralizationRatio()).rawValue).to.equal(args.minimumCollateralizationRatio);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.minimumDebtValue()).rawValue).to.equal(args.minimumDebtValue);",
                  "err": {},
                  "uuid": "3a9effda-ef70-47c7-8d7c-aebebbc0b80a",
                  "parentUUID": "1ba9404b-5069-4ce4-a4a1-762ef4185e75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize twice",
                  "fullTitle": "Minter - Init #initialization cant initialize twice",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const initializer = await (0, shared_1.getMinterInitializer)(hardhat_1.default);\nconst initializerContract = await hardhat_1.default.ethers.getContract(initializer.name);\nconst tx = await initializerContract.populateTransaction.initialize(initializer.args);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.upgradeState(tx.to, tx.data)).to.be.revertedWith(test_1.Error.ALREADY_INITIALIZED);",
                  "err": {},
                  "uuid": "f91b8cce-9cf3-465c-9d70-36acc57262ec",
                  "parentUUID": "1ba9404b-5069-4ce4-a4a1-762ef4185e75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures all facets correctly",
                  "fullTitle": "Minter - Init #initialization configures all facets correctly",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await hardhat_1.default.Diamond.facets()).map(([facetAddress, functionSelectors]) => ({\n    facetAddress,\n    functionSelectors,\n}));\nconst expectedFacets = await Promise.all(shared_1.minterFacets.concat(shared_1.diamondFacets).map(async (name) => {\n    const deployment = await hardhat_1.default.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find(f => f.facetAddress === deployment.address)\n            .functionSelectors,\n    };\n}));\n(0, chai_1.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "7eb99b99-516d-4fd9-86b9-ba609e54735a",
                  "parentUUID": "1ba9404b-5069-4ce4-a4a1-762ef4185e75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a9effda-ef70-47c7-8d7c-aebebbc0b80a",
                "f91b8cce-9cf3-465c-9d70-36acc57262ec",
                "7eb99b99-516d-4fd9-86b9-ba609e54735a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 67,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "85d529fa-08fc-47a1-add1-e92149f1aed3",
          "title": "Minter - Configuration",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "d87df3cd-020c-46d4-92e3-06c9b1639da0",
              "parentUUID": "85d529fa-08fc-47a1-add1-e92149f1aed3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "90b19a4b-e811-43d4-a98f-785f3a4a2553",
              "title": "#configuration",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Diamond = hardhat_1.default.Diamond.connect(hardhat_1.default.users.operator);\nconst update = (0, test_1.getNewMinterParams)(hardhat_1.default.users.operator.address);\nawait (0, chai_1.expect)(Diamond.updateLiquidationIncentiveMultiplier(update.liquidationIncentiveMultiplier)).to.not.be\n    .reverted;\nawait (0, chai_1.expect)(Diamond.updateMinimumCollateralizationRatio(update.minimumCollateralizationRatio)).to.not.be\n    .reverted;\nawait (0, chai_1.expect)(Diamond.updateMinimumDebtValue(update.minimumDebtValue)).to.not.be.reverted;\nawait (0, chai_1.expect)(Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, chai_1.expect)(Diamond.updateFeeRecipient(update.feeRecipient)).to.not.be.reverted;\nconst { liquidationIncentiveMultiplier, minimumCollateralizationRatio, minimumDebtValue, liquidationThreshold, feeRecipient, } = await hardhat_1.default.Diamond.getAllParams();\n(0, chai_1.expect)(update.liquidationIncentiveMultiplier.toBigInt()).to.equal(liquidationIncentiveMultiplier.rawValue);\n(0, chai_1.expect)(update.minimumCollateralizationRatio.toBigInt()).to.equal(minimumCollateralizationRatio.rawValue);\n(0, chai_1.expect)(update.minimumDebtValue.toBigInt()).to.equal(minimumDebtValue.rawValue);\n(0, chai_1.expect)(update.liquidationThreshold.toBigInt()).to.equal(liquidationThreshold.rawValue);\n(0, chai_1.expect)(update.feeRecipient).to.equal(feeRecipient);",
                  "err": {},
                  "uuid": "3514e89c-0e76-4027-8971-40b400a802d4",
                  "parentUUID": "90b19a4b-e811-43d4-a98f-785f3a4a2553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 863,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract } = await (0, collaterals_1.addMockCollateralAsset)(test_1.defaultCollateralArgs);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.collateralExists(contract.address)).to.equal(true);\nconst [, oraclePrice] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(contract.address, hardhat_1.default.toBig(1), true);\n(0, chai_1.expect)(Number(oraclePrice)).to.equal(hardhat_1.default.toBig(test_1.defaultCollateralArgs.price, 8));",
                  "err": {},
                  "uuid": "1edd97cf-f6a3-479a-a987-8a2e2bfb3ca3",
                  "parentUUID": "90b19a4b-e811-43d4-a98f-785f3a4a2553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 1427,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, kresko } = await (0, krassets_1.addMockKreskoAsset)();\nconst values = await kresko();\nconst kreskoPriceAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.krAssetExists(contract.address)).to.equal(true);\n(0, chai_1.expect)(values.exists).to.equal(true);\n(0, chai_1.expect)(Number(values.kFactor)).to.equal(Number((0, lib_1.toFixedPoint)(test_1.defaultKrAssetArgs.factor)));\n(0, chai_1.expect)(kreskoPriceAnswer).to.equal(test_1.defaultKrAssetArgs.price);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.supplyLimit)).to.equal(test_1.defaultKrAssetArgs.supplyLimit);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.closeFee.rawValue)).to.equal(test_1.defaultKrAssetArgs.closeFee);\n(0, chai_1.expect)(hardhat_1.default.fromBig(values.openFee.rawValue)).to.equal(test_1.defaultKrAssetArgs.openFee);",
                  "err": {},
                  "uuid": "e90e56da-f8e9-47c8-97ba-f52d486645f6",
                  "parentUUID": "90b19a4b-e811-43d4-a98f-785f3a4a2553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update AMM oracle",
                  "fullTitle": "Minter - Configuration #configuration can update AMM oracle",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ammOracle = await smock_1.smock.fake(\"UniswapV2Oracle\");\nawait hardhat_1.default.Diamond.updateAMMOracle(ammOracle.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.ammOracle()).to.equal(ammOracle.address);",
                  "err": {},
                  "uuid": "76777b4c-6f1c-4b1e-8364-4b38e6597147",
                  "parentUUID": "90b19a4b-e811-43d4-a98f-785f3a4a2553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter - Configuration #configuration can update external oracle decimals",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hardhat_1.default.Diamond.updateExtOracleDecimals(decimals);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.extOracleDecimals()).to.equal(decimals);",
                  "err": {},
                  "uuid": "6fa2c529-ad00-4937-901d-2902c3b8c087",
                  "parentUUID": "90b19a4b-e811-43d4-a98f-785f3a4a2553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update values of a kresko asset",
                  "timedOut": false,
                  "duration": 1775,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract, anchor, priceFeed } = await (0, krassets_1.addMockKreskoAsset)();\nconst oracleAnswer = hardhat_1.default.fromBig(await priceFeed.latestAnswer(), 8);\nconst kreskoAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(oracleAnswer).to.equal(kreskoAnswer);\n(0, chai_1.expect)(oracleAnswer).to.equal(test_1.defaultKrAssetArgs.price);\nconst update = {\n    factor: (0, lib_1.toFixedPoint)(1.2),\n    supplyLimit: 12000,\n    price: 20,\n    closeFee: (0, lib_1.toFixedPoint)(0.02),\n    openFee: (0, lib_1.toFixedPoint)(0.02),\n};\nconst [newPriceFeed] = await (0, test_1.getMockOracleFor)(await contract.name(), update.price);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.operator).updateKreskoAsset(contract.address, anchor.address, update.factor, newPriceFeed.address, newPriceFeed.address, hardhat_1.default.toBig(update.supplyLimit), update.closeFee, update.openFee);\nconst newValues = await hardhat_1.default.Diamond.kreskoAsset(contract.address);\nconst updatedOracleAnswer = hardhat_1.default.fromBig(await newPriceFeed.latestAnswer(), 8);\nconst newKreskoAnswer = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getKrAssetValue(contract.address, hardhat_1.default.toBig(1), true)).rawValue, 8);\n(0, chai_1.expect)(newValues.exists).to.equal(true);\n(0, chai_1.expect)(Number(newValues.kFactor)).to.equal(Number(update.factor));\n(0, chai_1.expect)(hardhat_1.default.fromBig(newValues.supplyLimit)).to.equal(update.supplyLimit);\n(0, chai_1.expect)(updatedOracleAnswer).to.equal(newKreskoAnswer);\n(0, chai_1.expect)(updatedOracleAnswer).to.equal(update.price);",
                  "err": {},
                  "uuid": "56f6eb1a-ce68-4f64-b6dc-abc2a6c8cb3f",
                  "parentUUID": "90b19a4b-e811-43d4-a98f-785f3a4a2553",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3514e89c-0e76-4027-8971-40b400a802d4",
                "1edd97cf-f6a3-479a-a987-8a2e2bfb3ca3",
                "e90e56da-f8e9-47c8-97ba-f52d486645f6",
                "76777b4c-6f1c-4b1e-8364-4b38e6597147",
                "6fa2c529-ad00-4937-901d-2902c3b8c087",
                "56f6eb1a-ce68-4f64-b6dc-abc2a6c8cb3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4134,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "dd662ad4-3290-4a44-b01c-57f8047c492d",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "870be859-627c-47a6-bbfd-6cdba13f0bb5",
              "parentUUID": "dd662ad4-3290-4a44-b01c-57f8047c492d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.initialBalance = (0, lib_1.toBig)(100000);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userOne.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n// expect(await this.collateral!.contract.balanceOf(hre.users.userOne.address)).to.equal(this.initialBalance);\nthis.depositArgs = {\n    user: hardhat_1.default.users.userOne,\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(10000),\n};",
              "err": {},
              "uuid": "83767dbf-c727-41d6-8d2f-404f9a1978d5",
              "parentUUID": "dd662ad4-3290-4a44-b01c-57f8047c492d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5d72f128-baae-4435-b4a9-e67ba2a6684a",
              "title": "#collateral",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "85b752d4-de0c-40d8-9d51-d499e333a8b1",
                  "title": "#deposit",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Account has no deposited assets\nconst depositedCollateralAssetsBefore = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Account now has deposited assets\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Account's collateral deposit balances have increased\n(0, chai_1.expect)(await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address)).to.equal(this.depositArgs.amount);\n// Kresko contract's collateral balance has increased\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address)).to.equal(this.depositArgs.amount);\n// Account's collateral balance has decreased\n(0, chai_1.expect)((0, lib_1.fromBig)(await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address))).to.equal((0, lib_1.fromBig)(this.initialBalance) - (0, lib_1.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "672e617a-de38-4778-a6d0-ebce7556584a",
                      "parentUUID": "85b752d4-de0c-40d8-9d51-d499e333a8b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 29,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load arbitrary user with sufficient collateral for testing purposes\nconst arbitraryUser = hardhat_1.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositArgs.amount);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositArgs.amount);\n// Confirm the depositor's (arbitraryUser) wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await this.collateral.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)((0, lib_1.fromBig)(depositorBalanceAfter)).to.equal((0, lib_1.fromBig)(this.initialBalance) - (0, lib_1.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "29a9b1b5-6859-42cf-a631-c7b1768ca352",
                      "parentUUID": "85b752d4-de0c-40d8-9d51-d499e333a8b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositArgs.amount.add(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "d0dea0a0-e899-4ae3-b39e-3e3e8aac5270",
                      "parentUUID": "85b752d4-de0c-40d8-9d51-d499e333a8b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 877,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nconst collateralArgs = {\n    name: \"SecondCollateral\",\n    price: _test_utils_1.defaultOraclePrice,\n    factor: 1,\n    decimals: _test_utils_1.defaultDecimals,\n};\nconst { contract, mocks } = await (0, collaterals_1.addMockCollateralAsset)(collateralArgs);\nawait mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userOne.address]: this.initialBalance,\n});\nawait mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n// Deposit batch of first collateral type\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, contract.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await hardhat_1.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, chai_1.expect)(depositedCollateralAssetsAfter).to.deep.equal([this.collateral.address, contract.address]);",
                      "err": {},
                      "uuid": "033f64e0-16db-47b5-aff4-498953b01aab",
                      "parentUUID": "85b752d4-de0c-40d8-9d51-d499e333a8b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, this.depositArgs.user), \"CollateralDeposited\");\n(0, chai_1.expect)(event.account).to.equal(this.depositArgs.user.address);\n(0, chai_1.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.amount).to.equal(this.depositArgs.amount);",
                      "err": {},
                      "uuid": "71a28a2a-2ee1-4c24-b7b3-caf090f82d25",
                      "parentUUID": "85b752d4-de0c-40d8-9d51-d499e333a8b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, \"0x0000000000000000000000000000000000000001\", this.depositArgs.amount)).to.be.revertedWith(errors_1.Error.COLLATERAL_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "1d79cdb6-b130-46a0-83e5-4a1580553181",
                      "parentUUID": "85b752d4-de0c-40d8-9d51-d499e333a8b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, 0)).to.be.revertedWith(errors_1.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "6de4a89d-ec7f-4718-846c-9a623c08af84",
                      "parentUUID": "85b752d4-de0c-40d8-9d51-d499e333a8b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 47,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer, devTwo, extOne } = await hardhat_1.default.ethers.getNamedSigners();\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, 0], [deployer, devTwo, extOne]);\nconst isDepositPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isDepositPaused).to.equal(true);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, 0)).to.be.revertedWith(errors_1.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "c6f3c3fe-3356-407f-b50e-ef019156184a",
                      "parentUUID": "85b752d4-de0c-40d8-9d51-d499e333a8b1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "672e617a-de38-4778-a6d0-ebce7556584a",
                    "29a9b1b5-6859-42cf-a631-c7b1768ca352",
                    "d0dea0a0-e899-4ae3-b39e-3e3e8aac5270",
                    "033f64e0-16db-47b5-aff4-498953b01aab",
                    "71a28a2a-2ee1-4c24-b7b3-caf090f82d25",
                    "1d79cdb6-b130-46a0-83e5-4a1580553181",
                    "6de4a89d-ec7f-4718-846c-9a623c08af84",
                    "c6f3c3fe-3356-407f-b50e-ef019156184a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1052,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "d5a59508-0b3c-48ae-8e6d-490736867389",
                  "title": "#withdraw",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw \"before each\" hook in \"#withdraw\"",
                      "timedOut": false,
                      "duration": 17,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit collateral\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, this.depositArgs.amount)).not.to.be.reverted;\nthis.collateral = this.collaterals[0];\nthis.depositAmount = this.depositArgs.amount;",
                      "err": {},
                      "uuid": "f13f5507-e3fc-47e4-ab1d-7aee7482ea0f",
                      "parentUUID": "d5a59508-0b3c-48ae-8e6d-490736867389",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "a0867bb8-7527-417d-bb5e-1c9ad65ca5bc",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 38,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance);",
                          "err": {},
                          "uuid": "1838216b-475b-40ea-a660-5cf8e4d9983d",
                          "parentUUID": "a0867bb8-7527-417d-bb5e-1c9ad65ca5bc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 34,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = this.depositAmount.div(2);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance.sub(amountDeposited));",
                          "err": {},
                          "uuid": "ce30bd86-c013-444e-a398-c0fbc757bb90",
                          "parentUUID": "a0867bb8-7527-417d-bb5e-1c9ad65ca5bc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 43,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).grantRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address)).to.equal(true);\nconst collateralBefore = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.depositAmount, 0)).to.not.be.reverted;\nconst collateralAfter = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n// Ensure that collateral was withdrawn\n(0, chai_1.expect)(collateralAfter).to.equal(collateralBefore.sub(this.depositAmount));",
                          "err": {},
                          "uuid": "2c933870-3d9d-4eb9-aebd-db0dec4bae36",
                          "parentUUID": "a0867bb8-7527-417d-bb5e-1c9ad65ca5bc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 22,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userOne), \"CollateralWithdrawn\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.amount).to.equal(this.depositAmount);",
                          "err": {},
                          "uuid": "1dec5ea0-698e-4ee1-a09c-ae1a5fb83996",
                          "parentUUID": "a0867bb8-7527-417d-bb5e-1c9ad65ca5bc",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 22,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, this.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "089d54b0-37be-498e-920b-af93b552af83",
                          "parentUUID": "a0867bb8-7527-417d-bb5e-1c9ad65ca5bc",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "009a7418-dba0-42f6-8513-7fefe2fc7aa0",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 47,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "this.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\n// userOne mints some kr assets\nthis.mintAmount = (0, lib_1.toBig)(100);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await hardhat_1.default.Diamond.minimumCollateralizationRatio();",
                              "err": {},
                              "uuid": "2abddd2f-82e2-4927-9bbc-629de050c08b",
                              "parentUUID": "009a7418-dba0-42f6-8513-7fefe2fc7aa0",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 95,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, lib_1.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, chai_1.expect)(accountCollateralValue.rawValue\n    .sub(withdrawnCollateralValue.rawValue)\n    .gte(accountMinCollateralValue.rawValue)).to.be.true;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await hardhat_1.default.Diamond.getDepositedCollateralAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(depositedCollateralAssets).to.deep.equal([this.collateral.address]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.initialBalance.sub(this.depositAmount.sub(withdrawAmount)));\n// Ensure the account's minimum collateral value is <= the account collateral value\n// These are FixedPoint.Unsigned, be sure to use `rawValue` when appropriate!\nconst accountMinCollateralValueAfter = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, this.mcr);\nconst accountCollateralValueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(accountMinCollateralValueAfter.rawValue.lte(accountCollateralValueAfter.rawValue)).to.be\n    .true;",
                              "err": {},
                              "uuid": "2511da20-cbc3-4acc-a4a1-bed6c51992e6",
                              "parentUUID": "009a7418-dba0-42f6-8513-7fefe2fc7aa0",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 78,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const user = hardhat_1.default.users.userFour;\nawait this.collateral.setBalance(user, ethers_1.BigNumber.from(0));\nawait this.collateral.setBalance(user, (0, lib_1.toBig)(1000));\nawait this.collateral.contract.connect(user).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(1000),\n    user,\n});\nawait (0, collaterals_1.withdrawCollateral)({\n    asset: this.collateral,\n    amount: (0, lib_1.toBig)(1010),\n    user,\n});\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(user.address)).to.equal((0, lib_1.toBig)(1000));",
                              "err": {},
                              "uuid": "1d37e361-42ee-4866-8928-4ed9b552129b",
                              "parentUUID": "009a7418-dba0-42f6-8513-7fefe2fc7aa0",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 13,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, 0, withdrawAmount)).to.be.revertedWith(errors_1.Error.ZERO_WITHDRAW);",
                              "err": {},
                              "uuid": "ec94d0b6-e84e-4da2-93ae-91d15243994b",
                              "parentUUID": "009a7418-dba0-42f6-8513-7fefe2fc7aa0",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 50,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = this.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, chai_1.expect)(accountCollateralValue.rawValue\n    .sub(withdrawnCollateralValue.rawValue)\n    .lt(accountMinCollateralValue.rawValue)).to.be.true;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 0)).to.be.revertedWith(errors_1.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                              "err": {},
                              "uuid": "e987758f-c90b-4d1f-b4b2-f6d26c3ab01c",
                              "parentUUID": "009a7418-dba0-42f6-8513-7fefe2fc7aa0",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 7,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).withdrawCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, withdrawAmount, 1)).to.be.revertedWith(errors_1.Error.ARRAY_OUT_OF_BOUNDS);",
                              "err": {},
                              "uuid": "d0e2a019-3dae-4023-b927-43c7835b4863",
                              "parentUUID": "009a7418-dba0-42f6-8513-7fefe2fc7aa0",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "2511da20-cbc3-4acc-a4a1-bed6c51992e6",
                            "1d37e361-42ee-4866-8928-4ed9b552129b",
                            "ec94d0b6-e84e-4da2-93ae-91d15243994b",
                            "e987758f-c90b-4d1f-b4b2-f6d26c3ab01c",
                            "d0e2a019-3dae-4023-b927-43c7835b4863"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 243,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 15000
                        }
                      ],
                      "passes": [
                        "1838216b-475b-40ea-a660-5cf8e4d9983d",
                        "ce30bd86-c013-444e-a398-c0fbc757bb90",
                        "2c933870-3d9d-4eb9-aebd-db0dec4bae36",
                        "1dec5ea0-698e-4ee1-a09c-ae1a5fb83996",
                        "089d54b0-37be-498e-920b-af93b552af83"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 159,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "e708d364-3d64-4ec5-95c7-50f73753e75b",
                  "title": "#deposit - rebase events",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events \"before each\" hook in \"#deposit - rebase events\"",
                      "timedOut": false,
                      "duration": 109,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = hardhat_1.default.users.userThree;\narbitraryUserDiamond = hardhat_1.default.Diamond.connect(arbitraryUser);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.krAsset = this.krAssets.find(k => k.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.operator).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait arbitraryUserDiamond.mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await arbitraryUserDiamond.kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "6c28b631-24d3-4fc0-8658-f4859197e8e1",
                      "parentUUID": "e708d364-3d64-4ec5-95c7-50f73753e75b",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "3bd3266b-0e0e-43a4-8c29-5fd02f786543",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 55,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(expectedDepositsAfter);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "12c2b342-1662-43a3-8de9-477a02eb1044",
                          "parentUUID": "3bd3266b-0e0e-43a4-8c29-5fd02f786543",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 54,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmountAfterRebase);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "b48798af-a29a-4112-b5b8-849d5ccbbd6c",
                          "parentUUID": "3bd3266b-0e0e-43a4-8c29-5fd02f786543",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 50,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "06d4ab55-90a0-4ef3-90a0-f69dbdb3378a",
                          "parentUUID": "3bd3266b-0e0e-43a4-8c29-5fd02f786543",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 48,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "4008b7b5-ef05-4047-a036-9d89f09caac0",
                          "parentUUID": "3bd3266b-0e0e-43a4-8c29-5fd02f786543",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 65,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "ecb6f148-4448-4c6b-8e52-74be8d51240f",
                          "parentUUID": "3bd3266b-0e0e-43a4-8c29-5fd02f786543",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 63,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get deposits after\nconst depositsAfterRebase = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfterRebase).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "60fefec2-649f-4c05-9874-9ab1b76f7ad6",
                          "parentUUID": "3bd3266b-0e0e-43a4-8c29-5fd02f786543",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "12c2b342-1662-43a3-8de9-477a02eb1044",
                        "b48798af-a29a-4112-b5b8-849d5ccbbd6c",
                        "06d4ab55-90a0-4ef3-90a0-f69dbdb3378a",
                        "4008b7b5-ef05-4047-a036-9d89f09caac0",
                        "ecb6f148-4448-4c6b-8e52-74be8d51240f",
                        "60fefec2-649f-4c05-9874-9ab1b76f7ad6"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 335,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "d5d6c341-db27-40e8-a674-b3db58ee739d",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 68,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get collateral value of account after\nconst valueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(valueBefore.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "57a32039-2c6a-4af4-9133-58717ebe2d50",
                          "parentUUID": "d5d6c341-db27-40e8-a674-b3db58ee739d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 60,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get collateral value of account after\nconst valueAfter = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(valueBefore.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "fc13c515-a8db-480d-85af-2a646eda1a8a",
                          "parentUUID": "d5d6c341-db27-40e8-a674-b3db58ee739d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 54,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "7c164e3b-72d9-4a1a-914c-81c2883daee3",
                          "parentUUID": "d5d6c341-db27-40e8-a674-b3db58ee739d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 49,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfter.rawValue);",
                          "err": {},
                          "uuid": "7cb127d9-2550-4773-9f3c-be689214d61e",
                          "parentUUID": "d5d6c341-db27-40e8-a674-b3db58ee739d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 78,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(finalValue.rawValue).to.bignumber.equal(expectedValueAfterSecondDeposit.rawValue);",
                          "err": {},
                          "uuid": "acee01fb-4526-4366-add5-a95ef3c347dd",
                          "parentUUID": "d5d6c341-db27-40e8-a674-b3db58ee739d",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 80,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(finalValue.rawValue).to.bignumber.equal(expectedValueAfterSecondDeposit.rawValue);",
                          "err": {},
                          "uuid": "a720a20f-ef99-41b2-bb5a-3c9625871f7d",
                          "parentUUID": "d5d6c341-db27-40e8-a674-b3db58ee739d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "57a32039-2c6a-4af4-9133-58717ebe2d50",
                        "fc13c515-a8db-480d-85af-2a646eda1a8a",
                        "7c164e3b-72d9-4a1a-914c-81c2883daee3",
                        "7cb127d9-2550-4773-9f3c-be689214d61e",
                        "acee01fb-4526-4366-add5-a95ef3c347dd",
                        "a720a20f-ef99-41b2-bb5a-3c9625871f7d"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 389,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "220609f4-8f79-4ae5-aee9-78da30b80c20",
                  "title": "#withdraw - rebase events",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events \"before each\" hook in \"#withdraw - rebase events\"",
                      "timedOut": false,
                      "duration": 111,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = hardhat_1.default.users.userThree;\narbitraryUserDiamond = hardhat_1.default.Diamond.connect(arbitraryUser);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.krAsset = this.krAssets.find(k => k.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.operator).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait arbitraryUserDiamond.mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await arbitraryUserDiamond.kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "0712b657-8963-436f-adab-d5c70666c6df",
                      "parentUUID": "220609f4-8f79-4ae5-aee9-78da30b80c20",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "ae67a4ec-1ee2-4d7b-a3c4-0401e0e00b9b",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before positiveing rebase",
                          "timedOut": false,
                          "duration": 107,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "2d08edf4-db84-40b2-a754-dcd307409754",
                          "parentUUID": "ae67a4ec-1ee2-4d7b-a3c4-0401e0e00b9b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 103,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "42e852e1-25e0-4dec-87fa-babcf61549d7",
                          "parentUUID": "ae67a4ec-1ee2-4d7b-a3c4-0401e0e00b9b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 95,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "63ad803d-8d1c-4fb5-a316-3f5513eee7d9",
                          "parentUUID": "ae67a4ec-1ee2-4d7b-a3c4-0401e0e00b9b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 95,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "d00b5362-c901-403c-a48c-6160d47810c6",
                          "parentUUID": "ae67a4ec-1ee2-4d7b-a3c4-0401e0e00b9b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 123,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "6c0ef7d0-58ad-43bc-85d3-5c8eaa6d1e66",
                          "parentUUID": "ae67a4ec-1ee2-4d7b-a3c4-0401e0e00b9b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 121,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, chai_1.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await hardhat_1.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, chai_1.expect)(finalDeposits).to.equal(0);\n(0, chai_1.expect)(finalBalance).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "d5f07d92-3ad4-4f45-ae26-86b09d4fed6f",
                          "parentUUID": "ae67a4ec-1ee2-4d7b-a3c4-0401e0e00b9b",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 78,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, lib_1.toBig)(10);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await this.collateral.contract.balanceOf(arbitraryUser.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "0bb1a31c-2509-4f0f-9a7e-bce1c4fc47e9",
                          "parentUUID": "ae67a4ec-1ee2-4d7b-a3c4-0401e0e00b9b",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "2d08edf4-db84-40b2-a754-dcd307409754",
                        "42e852e1-25e0-4dec-87fa-babcf61549d7",
                        "63ad803d-8d1c-4fb5-a316-3f5513eee7d9",
                        "d00b5362-c901-403c-a48c-6160d47810c6",
                        "6c0ef7d0-58ad-43bc-85d3-5c8eaa6d1e66",
                        "d5f07d92-3ad4-4f45-ae26-86b09d4fed6f",
                        "0bb1a31c-2509-4f0f-9a7e-bce1c4fc47e9"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 722,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "71f28f82-7633-4952-bb3e-54512406868f",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before positiveing rebase",
                          "timedOut": false,
                          "duration": 91,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "73c059ac-0060-4135-b265-e55149786d20",
                          "parentUUID": "71f28f82-7633-4952-bb3e-54512406868f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 91,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "cc8488c3-3642-4fc8-a101-6397fdbbc210",
                          "parentUUID": "71f28f82-7633-4952-bb3e-54512406868f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 91,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "a2ba7dc0-0d53-4529-ad09-80ada84659cc",
                          "parentUUID": "71f28f82-7633-4952-bb3e-54512406868f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 94,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "66ab26a7-1736-44ca-9cbf-b93adf1f0acc",
                          "parentUUID": "71f28f82-7633-4952-bb3e-54512406868f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 129,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "bd63cefa-f7fe-468f-8643-9d12422ddb39",
                          "parentUUID": "71f28f82-7633-4952-bb3e-54512406868f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 133,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Get value after\nconst [valueAfterRebase] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, chai_1.expect)(expectedValue.rawValue).to.bignumber.equal(valueAfterRebase.rawValue);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(0);\n(0, chai_1.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "20c9e689-5bb8-4207-8850-00dc0ec54bf7",
                          "parentUUID": "71f28f82-7633-4952-bb3e-54512406868f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 152,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, lib_1.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, lib_1.toBig)(10);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [nrcValueBefore] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.collateral.address);\nconst [withdrawValue] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\nconst expectedNrcValueAfter = nrcValueBefore.rawValue.sub(withdrawValue.rawValue);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst cIndex = await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\nconst finalAccountValue = await hardhat_1.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [finalValue] = await hardhat_1.default.Diamond.getAccountSingleCollateralValueAndRealValue(arbitraryUser.address, this.collateral.address);\n(0, chai_1.expect)(finalValue.rawValue).to.equal(expectedNrcValueAfter);\n(0, chai_1.expect)(finalAccountValue.rawValue).to.bignumber.equal(accountValueBefore.rawValue.sub(withdrawValue.rawValue));",
                          "err": {},
                          "uuid": "02283c34-8c92-467f-9829-5f6b4e8834cc",
                          "parentUUID": "71f28f82-7633-4952-bb3e-54512406868f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "73c059ac-0060-4135-b265-e55149786d20",
                        "cc8488c3-3642-4fc8-a101-6397fdbbc210",
                        "a2ba7dc0-0d53-4529-ad09-80ada84659cc",
                        "66ab26a7-1736-44ca-9cbf-b93adf1f0acc",
                        "bd63cefa-f7fe-468f-8643-9d12422ddb39",
                        "20c9e689-5bb8-4207-8850-00dc0ec54bf7",
                        "02283c34-8c92-467f-9829-5f6b4e8834cc"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 781,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "7f8aae51-f831-4ddd-8bb2-ecd8d248bc60",
          "title": "Minter",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "6d81b77f-55a5-4ea9-8ef3-dda696faf722",
              "parentUUID": "7f8aae51-f831-4ddd-8bb2-ecd8d248bc60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 116,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// -------------------------------- Set up mock assets --------------------------------\nconst collateralArgs = {\n    name: \"CollateralAsset\",\n    price: 10,\n    factor: 1,\n    decimals: 18,\n};\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.collateral = await this.collateral.update(collateralArgs);\nthis.collateral.setPrice(collateralArgs.price);\n// Set up mock KreskoAsset\nconst krAssetArgs = {\n    name: \"KreskoAsset\",\n    price: 11,\n    factor: 1,\n    supplyLimit: 100000000,\n    closeFee: _test_utils_1.defaultCloseFee,\n    openFee: _test_utils_1.defaultOpenFee,\n};\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\nthis.krAsset.setPrice(krAssetArgs.price);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.operator).addCollateralAsset(this.krAsset.contract.address, this.krAsset.anchor.address, hardhat_1.default.toBig(1), assetInfo.oracle, assetInfo.oracle);\n// -------------------------------- Set up userOne deposit/debt --------------------------------\nawait this.collateral.setBalance(hardhat_1.default.users.liquidator, hardhat_1.default.toBig(100000000));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.liquidator.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(100000000),\n    },\n});\n// Deposit collateral\nthis.defaultDepositAmount = 20; // 20 * $10 = $200 in collateral asset value\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount),\n    },\n});\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount,\n    asset: this.collateral,\n});\n// // Mint KrAsset\nthis.defaultMintAmount = 10; // 10 * $11 = $110 in debt value\nawait (0, krassets_1.mintKrAsset)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultMintAmount,\n    asset: this.krAsset,\n});",
              "err": {},
              "uuid": "3682487f-9542-404b-91d3-47c057caddb9",
              "parentUUID": "7f8aae51-f831-4ddd-8bb2-ecd8d248bc60",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7305115d-0cb6-41e6-a0ad-682cdbd390e9",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#maxLiquidatableValue\"",
                  "fullTitle": "Minter #maxLiquidatableValue \"before each\" hook in \"#maxLiquidatableValue\"",
                  "timedOut": false,
                  "duration": 910,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "user = hardhat_1.default.users.userOne;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount * 100));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount * 100),\n    },\n});\nnewCollateral = await (0, collaterals_1.addMockCollateralAsset)({ name: \"Coll\", decimals: 8, price: 10, factor: 0.9 });\nawait newCollateral.setBalance(hardhat_1.default.users.userOne, hardhat_1.default.toBig(this.defaultDepositAmount * 100, 8));\nawait newCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: hardhat_1.default.toBig(this.defaultDepositAmount * 100, 8),\n    },\n});",
                  "err": {},
                  "uuid": "a4313901-e46d-4849-88f0-58107b396516",
                  "parentUUID": "7305115d-0cb6-41e6-a0ad-682cdbd390e9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct max liquidation with single market cdp",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct max liquidation with single market cdp",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral,\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, this.collateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, this.collateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValue).to.equal(maxLiquidatableValue.rawValue);",
                  "err": {},
                  "uuid": "90b49f99-9b1b-4bc7-9fdc-9130f927431e",
                  "parentUUID": "7305115d-0cb6-41e6-a0ad-682cdbd390e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct max liquidation with multiple cdps",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct max liquidation with multiple cdps",
                  "timedOut": false,
                  "duration": 235,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral,\n});\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.userOne,\n    amount: (0, lib_1.toBig)(0.1, 8),\n    asset: newCollateral,\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, this.collateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, this.collateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValue).to.equal(maxLiquidatableValue.rawValue);\nconst expectedMaxLiquidatableValueNewCollateral = await (0, liquidations_1.calcExpectedMaxLiquidatableValue)(user, this.krAsset, newCollateral);\n(0, chai_1.expect)(expectedMaxLiquidatableValueNewCollateral.gt(0)).to.be.true;\nconst maxLiquidatableValueNewCollateral = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(user.address, this.krAsset.address, newCollateral.address);\n(0, chai_1.expect)(expectedMaxLiquidatableValueNewCollateral).to.equal(maxLiquidatableValueNewCollateral.rawValue);",
                  "err": {},
                  "uuid": "90a556df-721f-4a38-93f1-da86b73f2608",
                  "parentUUID": "7305115d-0cb6-41e6-a0ad-682cdbd390e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90b49f99-9b1b-4bc7-9fdc-9130f927431e",
                "90a556df-721f-4a38-93f1-da86b73f2608"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 332,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "bb6b52a1-7b16-4b2f-aa39-c3366d906b36",
              "title": "#liquidation",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "78a8c54a-a721-48e0-8b15-13659a31e441",
                  "title": "#isAccountLiquidatable",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should identify accounts below their liquidation threshold",
                      "fullTitle": "Minter #liquidation #isAccountLiquidatable should identify accounts below their liquidation threshold",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that current amount is under min collateral value\nconst liquidationThreshold = await hardhat_1.default.Diamond.liquidationThreshold();\nconst minCollateralUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, liquidationThreshold);\n(0, chai_1.expect)(this.defaultDepositAmount * this.collateral.deployArgs.price >\n    hardhat_1.default.fromBig(minCollateralUSD.rawValue, 8));\n// The account should be NOT liquidatable as collateral value ($200) >= min collateral value ($154)\nconst initialCanLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(initialCanLiquidate).to.equal(false);\n// Update collateral price to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);\nconst [, newCollateralOraclePrice] = await hardhat_1.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, hardhat_1.default.toBig(1), true);\n(0, chai_1.expect)(hardhat_1.default.fromBig(newCollateralOraclePrice.rawValue, 8)).to.equal(newCollateralPrice);\n// The account should be liquidatable as collateral value ($140) < min collateral value ($154)\nconst secondaryCanLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(secondaryCanLiquidate).to.equal(true);",
                      "err": {},
                      "uuid": "76af583c-7c43-4c77-b1b0-2cc21e1815a7",
                      "parentUUID": "78a8c54a-a721-48e0-8b15-13659a31e441",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "76af583c-7c43-4c77-b1b0-2cc21e1815a7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 57,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "39ff14b1-5723-4f04-a439-9c918da780c2",
                  "title": "#liquidate",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userTwo tokens to use for liquidation\nawait this.krAsset.mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userTwo.address]: hardhat_1.default.toBig(10000),\n});\n// Update collateral price from $10 to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);",
                      "err": {},
                      "uuid": "1378ab08-c033-45cd-8d62-caa6c7a8a63a",
                      "parentUUID": "39ff14b1-5723-4f04-a439-9c918da780c2",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 185,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm we can liquidate this account\nconst canLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(canLiquidate).to.equal(true);\n// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\nconst beforeUserOneDebtAmount = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst beforeUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userTwo.address);\nconst beforeUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userTwo.address);\nconst beforeKreskoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n// Liquidate userOne\nconst maxLiq = await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(hardhat_1.default.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst maxRepayAmount = hardhat_1.default.toBig(Number(maxLiq.rawValue.div(await this.krAsset.getPrice())));\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, maxRepayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst afterUserOneDebtAmount = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(afterUserOneDebtAmount.eq(beforeUserOneDebtAmount.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst afterUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(afterUserOneCollateralAmount.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\nconst afterUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userTwo.address);\n(0, chai_1.expect)(afterUserTwoKreskoAssetBalance.eq(beforeUserTwoKreskoAssetBalance.sub(maxRepayAmount)));\n// Confirm that userTwo has received some collateral from the contract\nconst afterUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.users.userTwo.address);\n(0, chai_1.expect)(afterUserTwoCollateralBalance).gt(beforeUserTwoCollateralBalance);\n// Confirm that Kresko contract's collateral balance has decreased.\nconst afterKreskoCollateralBalance = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(afterKreskoCollateralBalance).lt(beforeKreskoCollateralBalance);",
                      "err": {},
                      "uuid": "40071937-8baa-4c80-ac0f-b2979a4fc3a7",
                      "parentUUID": "39ff14b1-5723-4f04-a439-9c918da780c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 85,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt liquidation\nconst repayAmount = 10; // userTwo holds Kresko assets that can be used to repay userOne's loan\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, typechain_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userTwo), \"LiquidationOccurred\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.liquidator).to.equal(hardhat_1.default.users.userTwo.address);\n(0, chai_1.expect)(event.repayKreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.repayAmount).to.equal(repayAmount);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);",
                      "err": {},
                      "uuid": "aed8e503-81ef-4be2-8edb-a9a5448d5bd5",
                      "parentUUID": "39ff14b1-5723-4f04-a439-9c918da780c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Update collateral price from $5 to $10\nconst newCollateralPrice = 10;\nthis.collateral.setPrice(newCollateralPrice);\n// Confirm that the account has sufficient collateral to not be liquidated\nconst liquidationThreshold = await hardhat_1.default.Diamond.liquidationThreshold();\nconst minimumCollateralUSDValueRequired = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, liquidationThreshold);\nconst currUserOneCollateralAmount = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n(0, chai_1.expect)(hardhat_1.default.fromBig(currUserOneCollateralAmount) * newCollateralPrice >\n    hardhat_1.default.fromBig(minimumCollateralUSDValueRequired.rawValue, 8));\nconst canLiquidate = await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(canLiquidate).to.equal(false);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "2ea08bd4-ef67-426c-a700-80bfda9d9490",
                      "parentUUID": "39ff14b1-5723-4f04-a439-9c918da780c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.ZERO_REPAY);",
                      "err": {},
                      "uuid": "8f0f93bf-09c1-4947-b8f8-275f7132c092",
                      "parentUUID": "39ff14b1-5723-4f04-a439-9c918da780c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add(hardhat_1.default.toBig(1));\n// Liquidation should fail\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.KRASSET_BURN_AMOUNT_OVERFLOW);",
                      "err": {},
                      "uuid": "1de75990-4828-48e0-a9d9-154314fc59b9",
                      "parentUUID": "39ff14b1-5723-4f04-a439-9c918da780c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const maxLiquidation = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.calculateMaxLiquidatableValueForAssets(hardhat_1.default.users.userOne.address, this.krAsset.address, this.collateral.address)).rawValue, 8);\nconst repaymentAmount = hardhat_1.default.toBig((maxLiquidation + 1) / this.krAsset.deployArgs.price);\n// Ensure liquidation cannot happen\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repaymentAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.LIQUIDATION_OVERFLOW);",
                      "err": {},
                      "uuid": "f80111c6-58ed-435c-bb46-202593858006",
                      "parentUUID": "39ff14b1-5723-4f04-a439-9c918da780c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 80,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.collateral.setPrice(this.collateral.deployArgs.price);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address)).to.be.false;\nconst minCollateralUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, await hardhat_1.default.Diamond.minimumCollateralizationRatio());\nconst liquidationThresholdUSD = await hardhat_1.default.Diamond.getAccountMinimumCollateralValueAtRatio(hardhat_1.default.users.userOne.address, await hardhat_1.default.Diamond.liquidationThreshold());\nthis.collateral.setPrice(this.collateral.deployArgs.price * 0.775);\nconst accountCollateralValue = await hardhat_1.default.Diamond.getAccountCollateralValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(accountCollateralValue.rawValue.lt(minCollateralUSD.rawValue)).to.be.true;\n(0, chai_1.expect)(accountCollateralValue.rawValue.gt(liquidationThresholdUSD.rawValue)).to.be.true;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(hardhat_1.default.users.userOne.address)).to.be.false;",
                      "err": {},
                      "uuid": "d6a551af-bcbf-4787-b261-129fd1321519",
                      "parentUUID": "39ff14b1-5723-4f04-a439-9c918da780c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "fullTitle": "Minter #liquidation #liquidate should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(0);\n// Liquidation should succeed despite lack of token approval\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\n// Confirm that liquidator's token approval is still 0\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "7cedd79b-9dae-44e9-942d-2d8c09322cad",
                      "parentUUID": "39ff14b1-5723-4f04-a439-9c918da780c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 93,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidator increases contract's token approval\nconst repayAmount = 10;\nawait this.krAsset.contract.connect(hardhat_1.default.users.userTwo).approve(hardhat_1.default.Diamond.address, repayAmount);\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(repayAmount);\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userTwo).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, chai_1.expect)(await this.krAsset.contract.allowance(hardhat_1.default.users.userTwo.address, hardhat_1.default.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "eaeac5c5-bd0f-41e8-9b58-7179f0bfa270",
                      "parentUUID": "39ff14b1-5723-4f04-a439-9c918da780c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).liquidate(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(errors_1.Error.SELF_LIQUIDATION);",
                      "err": {},
                      "uuid": "2612e24d-d3a2-4d7b-b852-8b69f74fc0d0",
                      "parentUUID": "39ff14b1-5723-4f04-a439-9c918da780c2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "40071937-8baa-4c80-ac0f-b2979a4fc3a7",
                    "aed8e503-81ef-4be2-8edb-a9a5448d5bd5",
                    "2ea08bd4-ef67-426c-a700-80bfda9d9490",
                    "8f0f93bf-09c1-4947-b8f8-275f7132c092",
                    "1de75990-4828-48e0-a9d9-154314fc59b9",
                    "f80111c6-58ed-435c-bb46-202593858006",
                    "d6a551af-bcbf-4787-b261-129fd1321519",
                    "7cedd79b-9dae-44e9-942d-2d8c09322cad",
                    "eaeac5c5-bd0f-41e8-9b58-7179f0bfa270",
                    "2612e24d-d3a2-4d7b-b852-8b69f74fc0d0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 744,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "9c1dd774-6034-4d38-a974-0375479def42",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 665,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "userToLiquidate = hardhat_1.default.users.userThree;\nuserToLiquidateTwo = hardhat_1.default.users.userFour;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\n// Deposit collateral for liquidator\nawait (0, collaterals_1.depositCollateral)({\n    user: hardhat_1.default.users.liquidator,\n    asset: this.collateral,\n    amount: liquidatorAmounts.collateralDeposits,\n});\nawait (0, _test_utils_1.leverageKrAsset)(userToLiquidate, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nawait (0, _test_utils_1.leverageKrAsset)(userToLiquidateTwo, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\n// 1.5 = collateral value === debt value * MCR\n(0, chai_1.expect)(await (0, _test_utils_1.getHealthFactor)(userToLiquidate)).to.lessThanOrEqual(1.51);\n(0, chai_1.expect)(await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo)).to.lessThanOrEqual(1.51);\n// not liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.false;",
                      "err": {},
                      "uuid": "5d927c0d-12b5-4848-9865-30a555cdae30",
                      "parentUUID": "9c1dd774-6034-4d38-a974-0375479def42",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 109,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address))).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "4d62db9f-73f8-495e-b6a6-9092cdbbe002",
                      "parentUUID": "9c1dd774-6034-4d38-a974-0375479def42",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 84,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hardhat_1.default.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address))).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "bd0b5f60-2d99-4816-be38-c349a08be672",
                      "parentUUID": "9c1dd774-6034-4d38-a974-0375479def42",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 360,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.collateral.setPrice(5);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.collateral);",
                      "err": {},
                      "uuid": "b4722c76-f400-47f7-92ac-2c2365a35fc1",
                      "parentUUID": "9c1dd774-6034-4d38-a974-0375479def42",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 709,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.krAsset.setPrice(rebasePrice * 2);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, chai_1.expect)((0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.collateral)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "9bbc6c1e-253f-4c2b-85d1-53dc2711e47e",
                      "parentUUID": "9c1dd774-6034-4d38-a974-0375479def42",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 815,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0,\n};\n// Get values for a liquidation that happens before rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidate.address)).rawValue, 8);\nresults.userOneHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidate);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidateTwo.address)).rawValue, 8);\nresults.userTwoHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo);\n(0, chai_1.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.collateralSeized * denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.debtRepaid * denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "58e99c6b-6ba7-4f26-a0e5-f2b3deb89d1a",
                      "parentUUID": "9c1dd774-6034-4d38-a974-0375479def42",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 1056,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0,\n};\n// Get values for a liquidation that happens before rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidate.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidate.address)).rawValue, 8);\nresults.userOneHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidate);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile (await hardhat_1.default.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)) {\n    const values = await (0, liquidations_1.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = hardhat_1.default.fromBig((await hardhat_1.default.Diamond.getAccountCollateralValue(userToLiquidateTwo.address)).rawValue, 8);\nresults.userTwoHFAfter = await (0, _test_utils_1.getHealthFactor)(userToLiquidateTwo);\n(0, chai_1.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.collateralSeized / denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.debtRepaid / denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, chai_1.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "0edf8270-46a7-4f7c-9791-880326a00151",
                      "parentUUID": "9c1dd774-6034-4d38-a974-0375479def42",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4d62db9f-73f8-495e-b6a6-9092cdbbe002",
                    "bd0b5f60-2d99-4816-be38-c349a08be672",
                    "b4722c76-f400-47f7-92ac-2c2365a35fc1",
                    "9bbc6c1e-253f-4c2b-85d1-53dc2711e47e",
                    "58e99c6b-6ba7-4f26-a0e5-f2b3deb89d1a",
                    "0edf8270-46a7-4f7c-9791-880326a00151"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3133,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "081c1f6a-1693-4af0-8a1a-5c0591344e35",
          "title": "Minter",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "80764ed6-856f-422b-abcb-97a0a504a06c",
              "parentUUID": "081c1f6a-1693-4af0-8a1a-5c0591344e35",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 44,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find(c => c.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.krAsset = this.krAssets.find(c => c.deployArgs.name === _test_utils_1.defaultKrAssetArgs.name);\nawait this.krAsset.contract.grantRole(_test_utils_1.Role.OPERATOR, hardhat_1.default.users.deployer.address);\nthis.krAsset.setPrice(this.krAsset.deployArgs.price);\nthis.krAsset.setMarketOpen(this.krAsset.deployArgs.marketOpen);\n// Load account with collateral\nthis.initialBalance = (0, lib_1.toBig)(100000);\nawait this.collateral.setBalance(hardhat_1.default.users.userOne, this.initialBalance);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userOne.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\nthis.collateral.setPrice(this.collateral.deployArgs.price);\n// User deposits 10,000 collateral\nawait (0, collaterals_1.depositCollateral)({ amount: 10000, user: hardhat_1.default.users.userOne, asset: this.collateral });",
              "err": {},
              "uuid": "76dbba45-d6fb-465c-8c10-ec710c1a7b4f",
              "parentUUID": "081c1f6a-1693-4af0-8a1a-5c0591344e35",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "14693497-01fe-4d5b-b1a5-a83d82cfdb41",
              "title": "#mint+burn",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                  "title": "#mint",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 83,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await this.krAsset.mocks.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "789361f7-35d4-45a1-b5d3-efccde9b274f",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 148,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, lib_1.toBig)(5);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, lib_1.toBig)(5);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsFinal).to.deep.equal([this.krAsset.address]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "d1d4421e-833f-4487-a278-8d25b7fc7a86",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 1778,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Add second mock krAsset to protocol\nconst secondKrAssetArgs = {\n    name: \"SecondKreskoAsset\",\n    symbol: \"SecondKreskoAsset\",\n    price: 5,\n    marketOpen: true,\n    factor: 1,\n    supplyLimit: 100000,\n    closeFee: _test_utils_1.defaultCloseFee,\n    openFee: 0,\n};\nconst { contract: secondKreskoAsset } = await (0, krassets_1.addMockKreskoAsset)(secondKrAssetArgs);\n// Mint Kresko asset\nconst secondMintAmount = (0, lib_1.toBig)(2);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, secondKreskoAsset.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsFinal).to.deep.equal([this.krAsset.address, secondKreskoAsset.address]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, secondKreskoAsset.address);\n(0, chai_1.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await secondKreskoAsset.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await secondKreskoAsset.totalSupply();\n(0, chai_1.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "b52b3355-fa20-4c34-a56d-8da82b2ae116",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 77,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, lib_1.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await hardhat_1.default.Diamond.minimumDebtValue();\n(0, chai_1.expect)((0, lib_1.fromBig)(mintAmountUSDValue.rawValue, 8)).to.equal(Number(currMinimumDebtValue) / 10 ** 8);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "f7fa8fa7-3d50-4278-9ada-6c5d418a9ecc",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 85,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).grantRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address)).to.equal(true);\n// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, lib_1.toBig)(1);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userOneDebtFromUserThreeMint = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userOneDebtFromUserThreeMint).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "2bcecd39-cb92-457b-b8a6-22a842afbbdf",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mintAmount = (0, lib_1.toBig)(500);\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userOne), \"KreskoAssetMinted\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.amount).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "d84e5b63-bd18-4f75-bdc2-bc6f39ef4d7b",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 40,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, lib_1.toBig)(1);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userTwo.address, this.krAsset.address, mintAmount)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userOne.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "f72d0340-43a7-439a-97dc-a6e6db6de327",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 50,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is below the contract's current minimum debt value\nconst minAmount = 100000000; // 8 decimals\nconst mintAmount = minAmount - 1;\nconst mintAmountUSDValue = await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await hardhat_1.default.Diamond.minimumDebtValue();\n(0, chai_1.expect)(Number(mintAmountUSDValue)).to.be.lessThan(Number(currMinimumDebtValue));\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(errors_1.Error.KRASSET_MINT_AMOUNT_LOW);",
                      "err": {},
                      "uuid": "cd6352b2-778f-424e-9de1-3d0e0a70dfc4",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, \"0x0000000000000000000000000000000000000002\", (0, lib_1.toBig)(1))).to.be.revertedWith(errors_1.Error.KRASSET_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "491236bc-0368-485d-ab7a-8572b765fb20",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 31,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// We can ignore price and collateral factor as both this.collateral and this.krAsset both\n// have the same price ($10) and same collateral factor (1)\nconst collateralAmountDeposited = await hardhat_1.default.Diamond.collateralDeposits(hardhat_1.default.users.userOne.address, this.collateral.address);\n// Apply 150% MCR and increase deposit amount to be above the maximum allowed by MCR\nconst mcrAmount = (0, lib_1.fromBig)(collateralAmountDeposited) / 1.5;\nconst mintAmount = (0, lib_1.toBig)(mcrAmount + 1);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(errors_1.Error.KRASSET_COLLATERAL_LOW);",
                      "err": {},
                      "uuid": "78c2fba3-ee7c-40c4-b4b6-4f5a97244479",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 32,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).depositCollateral(hardhat_1.default.users.userOne.address, this.collateral.address, (0, lib_1.toBig)(10000))).not.to.be.reverted;\nconst krAsset = await hardhat_1.default.Diamond.kreskoAsset(this.krAsset.address);\nconst overSupplyLimit = (0, lib_1.fromBig)(krAsset.supplyLimit) + 1;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(overSupplyLimit))).to.be.revertedWith(errors_1.Error.KRASSET_MAX_SUPPLY_REACHED);",
                      "err": {},
                      "uuid": "35d68316-2243-4e2a-8a62-d999a5233f2d",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.krAsset.setMarketOpen(false);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(1))).to.be.revertedWith(errors_1.Error.KRASSET_MARKET_CLOSED);\n// Confirm that the user has no minted krAssets\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Confirm that opening the market makes krAsset mintable again\nthis.krAsset.setMarketOpen(true);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, (0, lib_1.toBig)(1));\n// Confirm the array of the user's minted Kresko assets has been pushed to\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);",
                      "err": {},
                      "uuid": "be592db3-0def-4bf7-beb5-40d45f909ff0",
                      "parentUUID": "1dcd10ce-9247-4410-bc98-af70f08c3c73",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "789361f7-35d4-45a1-b5d3-efccde9b274f",
                    "d1d4421e-833f-4487-a278-8d25b7fc7a86",
                    "b52b3355-fa20-4c34-a56d-8da82b2ae116",
                    "f7fa8fa7-3d50-4278-9ada-6c5d418a9ecc",
                    "2bcecd39-cb92-457b-b8a6-22a842afbbdf",
                    "d84e5b63-bd18-4f75-bdc2-bc6f39ef4d7b",
                    "f72d0340-43a7-439a-97dc-a6e6db6de327",
                    "cd6352b2-778f-424e-9de1-3d0e0a70dfc4",
                    "491236bc-0368-485d-ab7a-8572b765fb20",
                    "78c2fba3-ee7c-40c4-b4b6-4f5a97244479",
                    "35d68316-2243-4e2a-8a62-d999a5233f2d",
                    "be592db3-0def-4bf7-beb5-40d45f909ff0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2464,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "e17b6708-db29-4ee7-9157-5434347907eb",
                  "title": "#mint - rebase events",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "0b0325e7-3fca-4061-a397-43ca13f4f8d9",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 76,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "295bd1b8-84c4-493d-afbf-47f70f9d72eb",
                          "parentUUID": "0b0325e7-3fca-4061-a397-43ca13f4f8d9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 81,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "d25d4fa0-1f14-4913-b37a-5a6bbd6e7ccb",
                          "parentUUID": "0b0325e7-3fca-4061-a397-43ca13f4f8d9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 75,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "07910ef2-7c55-4cd6-941c-15761374b067",
                          "parentUUID": "0b0325e7-3fca-4061-a397-43ca13f4f8d9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 84,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\n(0, chai_1.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, chai_1.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "33f0f655-c837-49f7-b462-84562db5dec1",
                          "parentUUID": "0b0325e7-3fca-4061-a397-43ca13f4f8d9",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "295bd1b8-84c4-493d-afbf-47f70f9d72eb",
                        "d25d4fa0-1f14-4913-b37a-5a6bbd6e7ccb",
                        "07910ef2-7c55-4cd6-941c-15761374b067",
                        "33f0f655-c837-49f7-b462-84562db5dec1"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 316,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "5ffea6ce-8c14-4d23-ad75-cf7427f35bf1",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 110,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "b53eed48-40eb-4e76-81fb-525dbd3027cc",
                          "parentUUID": "5ffea6ce-8c14-4d23-ad75-cf7427f35bf1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 95,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "15e6c656-2793-4487-95db-6862e676ad01",
                          "parentUUID": "5ffea6ce-8c14-4d23-ad75-cf7427f35bf1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 89,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice, 8) / denominator);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "ad903ba5-d185-485f-b5ee-01b6dc3c6aad",
                          "parentUUID": "5ffea6ce-8c14-4d23-ad75-cf7427f35bf1",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 114,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPrice.mul(denominator), 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(valueAfterRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));",
                          "err": {},
                          "uuid": "6af07000-7346-49f4-a986-1ffa5c688e63",
                          "parentUUID": "5ffea6ce-8c14-4d23-ad75-cf7427f35bf1",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b53eed48-40eb-4e76-81fb-525dbd3027cc",
                        "15e6c656-2793-4487-95db-6862e676ad01",
                        "ad903ba5-d185-485f-b5ee-01b6dc3c6aad",
                        "6af07000-7346-49f4-a986-1ffa5c688e63"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 408,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "4df11520-a484-48b0-8c13-421b581784c9",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 244,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Assert\n(0, chai_1.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, chai_1.expect)(valueBeforeRebase.rawValue).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n// Adjust price and rebase\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterFirstRebase.rawValue, this.krAsset)).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterFirstRebase.rawValue, this.krAsset)).to.bignumber.equal(valueBeforeRebase.rawValue);\n// Mint after rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterSecondMint).to.bignumber.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(await (0, calculations_1.fromScaledAmount)(debtValueAfterSecondMint.rawValue, this.krAsset)).to.bignumber.closeTo(debtValueAfterFirstMint.rawValue.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(valueBeforeRebase.rawValue.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "4ee537ee-c3fb-4f3c-9c0a-27044ce271a2",
                          "parentUUID": "4df11520-a484-48b0-8c13-421b581784c9",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 239,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n// Assert\n(0, chai_1.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, chai_1.expect)(valueBeforeRebase.rawValue).to.bignumber.equal(debtValueAfterFirstMint.rawValue);\n// Adjust price and rebase\nthis.krAsset.setPrice(hardhat_1.default.fromBig(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, krassets_1.getDebtIndexAdjustedBalance)(hardhat_1.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, chai_1.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(debtValueAfterFirstRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(debtValueAfterFirstMint.rawValue, this.krAsset));\n(0, chai_1.expect)(debtValueAfterFirstRebase.rawValue).to.bignumber.equal(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue, this.krAsset));\n// Mint after rebase\nawait userOne.mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(await (0, calculations_1.toScaledAmount)(debtValueAfterFirstMint.rawValue.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);\n(0, chai_1.expect)(debtValueAfterSecondMint.rawValue).to.bignumber.closeTo(await (0, calculations_1.toScaledAmount)(valueBeforeRebase.rawValue.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "0ab87e26-c4e9-49a0-b28a-7a6eae7937c6",
                          "parentUUID": "4df11520-a484-48b0-8c13-421b581784c9",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "4ee537ee-c3fb-4f3c-9c0a-27044ce271a2",
                        "0ab87e26-c4e9-49a0-b28a-7a6eae7937c6"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 483,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "80d912c5-8a70-405c-bc11-465be11a3d08",
                  "title": "#burn",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 113,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Create userOne debt position\nthis.mintAmount = (0, lib_1.toBig)(2);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Load userThree with Kresko Assets\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [hardhat_1.default.users.userThree.address]: this.initialBalance,\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hardhat_1.default.users.userThree.address]: {\n        [hardhat_1.default.Diamond.address]: this.initialBalance,\n    },\n});\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(hardhat_1.default.users.userThree.address)).to.equal(this.initialBalance);\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).depositCollateral(hardhat_1.default.users.userThree.address, this.collateral.address, (0, lib_1.toBig)(10000))).not.to.be.reverted;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).mintKreskoAsset(hardhat_1.default.users.userThree.address, this.krAsset.address, this.mintAmount);",
                      "err": {},
                      "uuid": "2ce282ae-0fe6-42e6-9050-f9dbe680d7c0",
                      "parentUUID": "80d912c5-8a70-405c-bc11-465be11a3d08",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 78,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, lib_1.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "f706d67b-5106-416f-b617-a5ee306946ea",
                      "parentUUID": "80d912c5-8a70-405c-bc11-465be11a3d08",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "62cccd45-7033-4725-b089-e5c4321f973c",
                      "parentUUID": "80d912c5-8a70-405c-bc11-465be11a3d08",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 111,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.deployer).grantRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.hasRole(_test_utils_1.Role.MANAGER, hardhat_1.default.users.userThree.address)).to.equal(true);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, lib_1.toBig)(1);\nconst kreskoAssetIndex = 0;\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(userOneBalance).to.equal(this.mintAmount);\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userThree.address);\n(0, chai_1.expect)(userThreeBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(userOneDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "2fe8ec58-865f-41d2-8d95-f1db89172a0d",
                      "parentUUID": "80d912c5-8a70-405c-bc11-465be11a3d08",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "4017b329-4360-4916-9e2e-e7c1d02f5595",
                      "parentUUID": "80d912c5-8a70-405c-bc11-465be11a3d08",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst minDebtValue = (0, lib_1.fromBig)((await hardhat_1.default.Diamond.minimumDebtValue()).rawValue, 8);\nconst oraclePrice = this.krAsset.deployArgs.price;\nconst burnAmount = hardhat_1.default.toBig((0, lib_1.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, chai_1.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, chai_1.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter).to.deep.equal([this.krAsset.address]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "a9fc37f8-a5ea-4882-9281-688807b9243d",
                      "parentUUID": "80d912c5-8a70-405c-bc11-465be11a3d08",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 53,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, this.mintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userOne), \"KreskoAssetBurned\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, chai_1.expect)(event.amount).to.equal(this.mintAmount.div(5));",
                      "err": {},
                      "uuid": "2fd8f0e2-f089-4459-ba14-30dacf3681bc",
                      "parentUUID": "80d912c5-8a70-405c-bc11-465be11a3d08",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = this.mintAmount.add(secondMintAmount);\nawait hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, secondMintAmount);\nconst kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.not.reverted;",
                      "err": {},
                      "uuid": "80a459fc-330c-4c4f-a71a-b293c5ce9c3d",
                      "parentUUID": "80d912c5-8a70-405c-bc11-465be11a3d08",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, 0, kreskoAssetIndex)).to.be.revertedWith(errors_1.Error.ZERO_BURN);",
                      "err": {},
                      "uuid": "5c1cb846-11d0-4b0d-9a36-1fdf6bdabc4c",
                      "parentUUID": "80d912c5-8a70-405c-bc11-465be11a3d08",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 19,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userThree).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${hardhat_1.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "2acc8ef0-23b6-4693-a82c-438a2987b271",
                      "parentUUID": "80d912c5-8a70-405c-bc11-465be11a3d08",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 25,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst burnAmount = debt.add(hardhat_1.default.toBig(1));\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "0137962a-19c4-46a0-8d98-7659f926b1af",
                      "parentUUID": "80d912c5-8a70-405c-bc11-465be11a3d08",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "059101ba-178a-4ca0-b1cf-377f08131a44",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 134,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01;\nconst openFeeBig = (0, lib_1.toBig)(openFee); // use toBig() to emulate closeFee's 18 decimals on contract\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\nawait this.krAsset.update({\n    ..._test_utils_1.defaultKrAssetArgs,\n    openFee,\n});\nconst mintAmount = (0, lib_1.toBig)(1);\nconst mintValue = mintAmount.mul(this.krAsset.deployArgs.price);\nconst expectedFeeValue = mintValue.mul(openFeeBig);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Mint Kresko asset\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).mintKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, chai_1.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, lib_1.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, chai_1.expect)(feeRecipientBalanceIncrease).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userOne), \"OpenFeePaid\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.paymentAmount).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, lib_1.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst feeRes = await hardhat_1.default.Diamond.calcExpectedFee(hardhat_1.default.users.userOne.address, this.krAsset.address, mintAmount, _test_utils_1.Fee.OPEN);\nconst output = feeRes.toString().split(\",\");\nconst openFeeAmount = Number(output[1]) / 10 ** 18;\n(0, chai_1.expect)(openFeeAmount).eq(normalizedExpectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "e123686b-1925-4960-9df5-ee3acdf03647",
                          "parentUUID": "059101ba-178a-4ca0-b1cf-377f08131a44",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "e123686b-1925-4960-9df5-ee3acdf03647"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 134,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "31755e14-3a4c-4ed3-8ab7-38ad941d8017",
                      "title": "Protocol close fee",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 78,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, lib_1.toBig)(1);\nconst burnValue = burnAmount.mul(this.krAsset.deployArgs.price);\nconst closeFee = (0, lib_1.toBig)(this.krAsset.deployArgs.closeFee); // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.mul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne).burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(hardhat_1.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await hardhat_1.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, chai_1.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, lib_1.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, chai_1.expect)(feeRecipientBalanceIncrease).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userOne), \"CloseFeePaid\");\n(0, chai_1.expect)(event.account).to.equal(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)(event.paymentAmount).to.equal((0, lib_1.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, lib_1.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);",
                          "err": {},
                          "uuid": "b9092e48-4e4a-4abb-94fe-14d6d6ef61e2",
                          "parentUUID": "31755e14-3a4c-4ed3-8ab7-38ad941d8017",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 289,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, krassets_1.mintKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: hardhat_1.default.toBig(mintAmount),\n});\nawait (0, collaterals_1.withdrawCollateral)({ user: hardhat_1.default.users.userThree, asset: this.collateral, amount: wAmount });\nconst event = await (0, protocol_ts_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({ user: hardhat_1.default.users.userThree, asset: this.krAsset, amount: burnAmount }), types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userThree), \"CloseFeePaid\");\n(0, chai_1.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nconst priceAfter = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst burnAmountRebase = burnAmount * denominator;\nawait (0, collaterals_1.withdrawCollateral)({ user: hardhat_1.default.users.userThree, asset: this.collateral, amount: wAmount });\nconst eventAfterRebase = await (0, protocol_ts_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({ user: hardhat_1.default.users.userThree, asset: this.krAsset, amount: burnAmountRebase }), types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userOne), \"CloseFeePaid\");\n(0, chai_1.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, chai_1.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "6473a6cb-e419-474b-b9ff-8e0b99eab659",
                          "parentUUID": "31755e14-3a4c-4ed3-8ab7-38ad941d8017",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 290,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = hardhat_1.default.toBig(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, krassets_1.mintKrAsset)({\n    user: hardhat_1.default.users.userThree,\n    asset: this.krAsset,\n    amount: hardhat_1.default.toBig(mintAmount),\n});\nawait (0, collaterals_1.withdrawCollateral)({ user: hardhat_1.default.users.userThree, asset: this.collateral, amount: wAmount });\nconst event = await (0, protocol_ts_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({ user: hardhat_1.default.users.userThree, asset: this.krAsset, amount: burnAmount }), types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userThree), \"CloseFeePaid\");\n(0, chai_1.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = hardhat_1.default.fromBig(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nconst burnAmountRebase = burnAmount / denominator;\nawait (0, collaterals_1.withdrawCollateral)({ user: hardhat_1.default.users.userThree, asset: this.collateral, amount: wAmount });\nconst eventAfterRebase = await (0, protocol_ts_1.getInternalEvent)(await (0, krassets_1.burnKrAsset)({ user: hardhat_1.default.users.userThree, asset: this.krAsset, amount: burnAmountRebase }), types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userOne), \"CloseFeePaid\");\n(0, chai_1.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, chai_1.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, chai_1.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "d2cf89d9-3725-4095-970c-184a5b252036",
                          "parentUUID": "31755e14-3a4c-4ed3-8ab7-38ad941d8017",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b9092e48-4e4a-4abb-94fe-14d6d6ef61e2",
                        "6473a6cb-e419-474b-b9ff-8e0b99eab659",
                        "d2cf89d9-3725-4095-970c-184a5b252036"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 657,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [
                    "f706d67b-5106-416f-b617-a5ee306946ea",
                    "2fe8ec58-865f-41d2-8d95-f1db89172a0d",
                    "a9fc37f8-a5ea-4882-9281-688807b9243d",
                    "2fd8f0e2-f089-4459-ba14-30dacf3681bc",
                    "80a459fc-330c-4c4f-a71a-b293c5ce9c3d",
                    "5c1cb846-11d0-4b0d-9a36-1fdf6bdabc4c",
                    "2acc8ef0-23b6-4693-a82c-438a2987b271",
                    "0137962a-19c4-46a0-8d98-7659f926b1af"
                  ],
                  "failures": [],
                  "pending": [
                    "62cccd45-7033-4725-b089-e5c4321f973c",
                    "4017b329-4360-4916-9e2e-e7c1d02f5595"
                  ],
                  "skipped": [],
                  "duration": 477,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "45f3d67e-ff2c-4b65-8188-d32643bf1d6d",
                  "title": "#burn - rebase events",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase events\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase events \"before each\" hook in \"#burn - rebase events\"",
                      "timedOut": false,
                      "duration": 42,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, krassets_1.mintKrAsset)({ asset: this.krAsset, amount: mintAmountInt, user: hardhat_1.default.users.userOne });",
                      "err": {},
                      "uuid": "bcacf8fb-c8b8-465b-9deb-461bdf6c7f8f",
                      "parentUUID": "45f3d67e-ff2c-4b65-8188-d32643bf1d6d",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "06401298-1998-41bf-a244-5a2b5e2bb269",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 88,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(0);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = hardhat_1.default.fromBig(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address));\n(0, chai_1.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.closeTo(hardhat_1.default.toBig(expectedBalanceAfterBurn / denominator), 100000); // WEI",
                          "err": {},
                          "uuid": "c0573344-6472-4d72-8a09-6c685c5f451e",
                          "parentUUID": "06401298-1998-41bf-a244-5a2b5e2bb269",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 288,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "4bb7ab39-9c27-4857-ab23-8e9e839eb167",
                          "parentUUID": "06401298-1998-41bf-a244-5a2b5e2bb269",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 88,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = hardhat_1.default.fromBig(await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address));\n(0, chai_1.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(hardhat_1.default.toBig(expectedBalanceAfterBurn * denominator)); // WEI",
                          "err": {},
                          "uuid": "6e805936-efb0-43b5-a178-7c8d9309f4af",
                          "parentUUID": "06401298-1998-41bf-a244-5a2b5e2bb269",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 91,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, chai_1.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "1ca2dbdf-500b-4fca-b784-55b2d71de1ed",
                          "parentUUID": "06401298-1998-41bf-a244-5a2b5e2bb269",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c0573344-6472-4d72-8a09-6c685c5f451e",
                        "4bb7ab39-9c27-4857-ab23-8e9e839eb167",
                        "6e805936-efb0-43b5-a178-7c8d9309f4af",
                        "1ca2dbdf-500b-4fca-b784-55b2d71de1ed"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 555,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "15519362-d623-4d3e-af39-57ab6d214849",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 80,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n(0, chai_1.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "32f484cf-b4c2-4d92-b92e-84f830b0d800",
                          "parentUUID": "15519362-d623-4d3e-af39-57ab6d214849",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 111,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false))\n    .rawValue;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsBeforeBurn).to.contain(this.krAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, chai_1.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "f0e8bd1e-16f3-4bcc-96ab-4bc8522154af",
                          "parentUUID": "15519362-d623-4d3e-af39-57ab6d214849",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 79,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n(0, chai_1.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "cb49cefc-fb88-43ed-9bab-e819bc5be74a",
                          "parentUUID": "15519362-d623-4d3e-af39-57ab6d214849",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 102,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = hardhat_1.default.Diamond.connect(hardhat_1.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false))\n    .rawValue;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = hardhat_1.default.fromBig(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase(hardhat_1.default.toBig(denominator), positive);\n// Pay half of debt\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(hardhat_1.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(hardhat_1.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false))\n    .rawValue;\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, chai_1.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await hardhat_1.default.Diamond.getMintedKreskoAssets(hardhat_1.default.users.userOne.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "f13850c8-a906-4df5-b8fc-65078cf30cb0",
                          "parentUUID": "15519362-d623-4d3e-af39-57ab6d214849",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "32f484cf-b4c2-4d92-b92e-84f830b0d800",
                        "f0e8bd1e-16f3-4bcc-96ab-4bc8522154af",
                        "cb49cefc-fb88-43ed-9bab-e819bc5be74a",
                        "f13850c8-a906-4df5-b8fc-65078cf30cb0"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 372,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "79bba302-dd17-44d2-a7b6-4e627d08e954",
          "title": "Flux Pricefeed",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/oracle/00-pricefeed.ts",
          "file": "/src/test/oracle/00-pricefeed.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before each\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "3b254d01-9421-4dcc-9640-ef9651ed1ca1",
              "parentUUID": "79bba302-dd17-44d2-a7b6-4e627d08e954",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before each\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 58,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Deploy one price feed\nconst name = \"TEST\";\nconst decimals = 8;\nconst descriptionFeed = \"Test description\";\nconst feed = await hardhat_1.default.run(\"deployone:fluxpricefeed\", {\n    name,\n    decimals,\n    description: descriptionFeed,\n    log: false,\n});\nthis.pricefeed = feed;",
              "err": {},
              "uuid": "9b2c0d12-ee97-4e79-9974-19eed4323b6a",
              "parentUUID": "79bba302-dd17-44d2-a7b6-4e627d08e954",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ce23788d-8a86-45bf-99e0-5921729a2837",
              "title": "functionality",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/oracle/00-pricefeed.ts",
              "file": "/src/test/oracle/00-pricefeed.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize timestamp value once the initial answer is submitted",
                  "fullTitle": "Flux Pricefeed functionality should initialize timestamp value once the initial answer is submitted",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.latestTimestamp()).to.equal(0);\nawait this.pricefeed.transmit(TEST_VALUE, true, { from: hardhat_1.default.addr.deployer });\n(0, chai_1.expect)(Number(await this.pricefeed.latestTimestamp())).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "bf6729a4-0773-4338-8ca0-e906bb7a8b97",
                  "parentUUID": "ce23788d-8a86-45bf-99e0-5921729a2837",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestAnswer once it's changed",
                  "fullTitle": "Flux Pricefeed functionality should return latestAnswer once it's changed",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.latestAnswer()).to.equal(0);\nawait this.pricefeed.transmit(TEST_VALUE, true, { from: hardhat_1.default.addr.deployer });\n(0, chai_1.expect)(await this.pricefeed.latestAnswer()).to.equal(TEST_VALUE);",
                  "err": {},
                  "uuid": "29d69cc2-b48e-41e6-a309-cb421f83167c",
                  "parentUUID": "ce23788d-8a86-45bf-99e0-5921729a2837",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen once it's changed",
                  "fullTitle": "Flux Pricefeed functionality should return marketOpen once it's changed",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.latestMarketOpen()).to.equal(false);\nawait this.pricefeed.transmit(0, true, { from: hardhat_1.default.addr.deployer });\n(0, chai_1.expect)(await this.pricefeed.latestMarketOpen()).to.equal(true);",
                  "err": {},
                  "uuid": "844bd222-f881-48b5-8782-0f9b4774ef88",
                  "parentUUID": "ce23788d-8a86-45bf-99e0-5921729a2837",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-validator to change values",
                  "fullTitle": "Flux Pricefeed functionality should not allow non-validator to change values",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.latestAnswer()).to.equal(0);\ntry {\n    await this.pricefeed.transmit(TEST_VALUE, true, { from: hardhat_1.default.addr.userOne });\n}\ncatch (e) {\n    if (!(e instanceof Error))\n        return;\n    (0, chai_1.expect)(e.message).to.equal('Contract with a Signer cannot override from (operation=\"overrides.from\", code=UNSUPPORTED_OPERATION, version=contracts/5.7.0)');\n    (0, chai_1.expect)(await this.pricefeed.latestAnswer()).to.equal(0);\n    (0, chai_1.expect)(await this.pricefeed.latestMarketOpen()).to.equal(false);\n}",
                  "err": {},
                  "uuid": "db43a105-e461-4015-b9d0-7a91ead04d7c",
                  "parentUUID": "ce23788d-8a86-45bf-99e0-5921729a2837",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return description",
                  "fullTitle": "Flux Pricefeed functionality should return description",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.description()).to.equal(\"Test description\");",
                  "err": {},
                  "uuid": "71b6b403-006b-4a29-95fa-37e13ec51d15",
                  "parentUUID": "ce23788d-8a86-45bf-99e0-5921729a2837",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return decimals",
                  "fullTitle": "Flux Pricefeed functionality should return decimals",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, chai_1.expect)(await this.pricefeed.decimals()).to.equal(8);",
                  "err": {},
                  "uuid": "d2963dcb-a4f4-46c8-876a-bb3e93be5144",
                  "parentUUID": "ce23788d-8a86-45bf-99e0-5921729a2837",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRoundData correctly",
                  "fullTitle": "Flux Pricefeed functionality should return latestRoundData correctly",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, { from: hardhat_1.default.addr.deployer });\nconst roundDataCall = await this.pricefeed.latestRoundData();\nconst roundData = {\n    roundId: roundDataCall[0].toNumber(),\n    answer: roundDataCall[1].toNumber(),\n    marketOpen: roundDataCall[2].valueOf(),\n    startedAt: roundDataCall[3].toNumber(),\n    updatedAt: roundDataCall[4].toNumber(),\n    answeredInRound: roundDataCall[5].toNumber(),\n};\n(0, chai_1.expect)(roundData.roundId).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.equal(roundData.updatedAt);\n(0, chai_1.expect)(roundData.answeredInRound).to.equal(roundData.roundId);\n(0, chai_1.expect)(roundData.answer).to.equal(TEST_VALUE);\n(0, chai_1.expect)(roundData.marketOpen).to.equal(true);",
                  "err": {},
                  "uuid": "138d45ec-ad4b-4fd2-a18c-db09713afb25",
                  "parentUUID": "ce23788d-8a86-45bf-99e0-5921729a2837",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getRoundData correctly",
                  "fullTitle": "Flux Pricefeed functionality should return getRoundData correctly",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, { from: hardhat_1.default.addr.deployer });\nconst roundDataCall = await this.pricefeed.getRoundData(1);\nconst roundData = {\n    roundId: roundDataCall[0].toNumber(),\n    answer: roundDataCall[1].toNumber(),\n    marketOpen: roundDataCall[2].valueOf(),\n    startedAt: roundDataCall[3].toNumber(),\n    updatedAt: roundDataCall[4].toNumber(),\n    answeredInRound: roundDataCall[5].toNumber(),\n};\n(0, chai_1.expect)(roundData.roundId).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.gt(0);\n(0, chai_1.expect)(roundData.startedAt).to.equal(roundData.updatedAt);\n(0, chai_1.expect)(roundData.answeredInRound).to.equal(roundData.roundId);\n(0, chai_1.expect)(roundData.answer).to.equal(TEST_VALUE);\n(0, chai_1.expect)(roundData.marketOpen).to.equal(true);",
                  "err": {},
                  "uuid": "0b010943-3042-46f3-96e5-a187b3f6ecb1",
                  "parentUUID": "ce23788d-8a86-45bf-99e0-5921729a2837",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getAnswer correctly",
                  "fullTitle": "Flux Pricefeed functionality should return getAnswer correctly",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, { from: hardhat_1.default.addr.deployer });\n(0, chai_1.expect)(await this.pricefeed.getAnswer(1)).to.equal(TEST_VALUE);",
                  "err": {},
                  "uuid": "c2d198c4-b251-4de1-9ac7-0993d35e4c28",
                  "parentUUID": "ce23788d-8a86-45bf-99e0-5921729a2837",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen correctly",
                  "fullTitle": "Flux Pricefeed functionality should return marketOpen correctly",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, { from: hardhat_1.default.addr.deployer });\n(0, chai_1.expect)(await this.pricefeed.getMarketOpen(1)).to.equal(true);",
                  "err": {},
                  "uuid": "bb3e9b90-47ff-4d1a-a7fb-f6c6a54ac203",
                  "parentUUID": "ce23788d-8a86-45bf-99e0-5921729a2837",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRound correctly",
                  "fullTitle": "Flux Pricefeed functionality should return latestRound correctly",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, { from: hardhat_1.default.addr.deployer });\n(0, chai_1.expect)(await this.pricefeed.latestRound()).to.equal(1);",
                  "err": {},
                  "uuid": "051bbc4a-1859-48e8-a16e-f1cab92e26f1",
                  "parentUUID": "ce23788d-8a86-45bf-99e0-5921729a2837",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf6729a4-0773-4338-8ca0-e906bb7a8b97",
                "29d69cc2-b48e-41e6-a309-cb421f83167c",
                "844bd222-f881-48b5-8782-0f9b4774ef88",
                "db43a105-e461-4015-b9d0-7a91ead04d7c",
                "71b6b403-006b-4a29-95fa-37e13ec51d15",
                "d2963dcb-a4f4-46c8-876a-bb3e93be5144",
                "138d45ec-ad4b-4fd2-a18c-db09713afb25",
                "0b010943-3042-46f3-96e5-a187b3f6ecb1",
                "c2d198c4-b251-4de1-9ac7-0993d35e4c28",
                "bb3e9b90-47ff-4d1a-a7fb-f6c6a54ac203",
                "051bbc4a-1859-48e8-a16e-f1cab92e26f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ed29af8d-eefc-472a-b13e-e7a34ece335f",
          "title": "Safety Council",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "cfd2cb40-4a3e-425e-8292-65d269383aa0",
              "parentUUID": "ed29af8d-eefc-472a-b13e-e7a34ece335f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = hardhat_1.default.collaterals.find(asset => asset.deployArgs.name === _test_utils_1.defaultCollateralArgs.name);\nthis.krAsset = hardhat_1.default.krAssets.find(asset => asset.deployArgs.symbol === _test_utils_1.defaultKrAssetArgs.symbol);\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer, devTwo, extOne, extTwo, extThree } = await hardhat_1.default.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devTwo = devTwo;\nthis.extOne = extOne;\nthis.extTwo = extTwo;\nthis.extThree = extThree;",
              "err": {},
              "uuid": "5110338e-2e58-4cd4-b404-82f0c5f41e01",
              "parentUUID": "ed29af8d-eefc-472a-b13e-e7a34ece335f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bf7ff5f1-3a24-40fc-9bb9-ed73b17662d8",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "caa3741a-1dc3-4599-86c9-32cf5c593a3b",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 43,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "cdedae02-107b-4e4e-a187-4e0cd580ef31",
                      "parentUUID": "caa3741a-1dc3-4599-86c9-32cf5c593a3b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne, this.extTwo]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "e7d6f3de-77ff-4b5d-8a3f-b368a43bb1a6",
                      "parentUUID": "caa3741a-1dc3-4599-86c9-32cf5c593a3b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 36,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne, this.extTwo, this.extThree]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "49bbc7da-466a-49e4-b323-e976c6f53eab",
                      "parentUUID": "caa3741a-1dc3-4599-86c9-32cf5c593a3b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 25,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, chai_1.expect)((0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo])).to.be.revertedWith(\"\");\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "6cf2f77a-0168-443b-bfb3-25056d789376",
                      "parentUUID": "caa3741a-1dc3-4599-86c9-32cf5c593a3b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cdedae02-107b-4e4e-a187-4e0cd580ef31",
                    "e7d6f3de-77ff-4b5d-8a3f-b368a43bb1a6",
                    "49bbc7da-466a-49e4-b323-e976c6f53eab",
                    "6cf2f77a-0168-443b-bfb3-25056d789376"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 139,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "6e9324ea-3dde-40fd-9601-3044d4d42d8e",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "81a1e3d6-1e5c-4aba-824b-f3e70cee9278",
                      "parentUUID": "6e9324ea-3dde-40fd-9601-3044d4d42d8e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 30,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.krAsset.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.krAsset.address);\n(0, chai_1.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "b5085024-2ad9-4a91-a47f-4b2166a700b9",
                      "parentUUID": "6e9324ea-3dde-40fd-9601-3044d4d42d8e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 64,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = hardhat_1.default.ethers.utils.computeAddress(\"0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d\");\nawait (0, chai_1.expect)((0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[randomAddr], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne])).to.be.revertedWith(\"\");\nconst isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), randomAddr);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "63d93f6b-567b-46fa-a0fb-ba6364272b0e",
                      "parentUUID": "6e9324ea-3dde-40fd-9601-3044d4d42d8e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "81a1e3d6-1e5c-4aba-824b-f3e70cee9278",
                    "b5085024-2ad9-4a91-a47f-4b2166a700b9",
                    "63d93f6b-567b-46fa-a0fb-ba6364272b0e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 129,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "5fbd5133-e4c9-4159-8fc4-672763b82539",
                  "title": "duration based pausing",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, duration], [this.deployer, this.devTwo, this.extOne]);\nconst depositSafetyState = await hardhat_1.default.Diamond.safetyStateFor(this.collateral.address, _test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, chai_1.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "29b4defd-6da3-4d38-aaaa-4393e484a6e2",
                      "parentUUID": "5fbd5133-e4c9-4159-8fc4-672763b82539",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "timedOut": false,
                      "duration": 43,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000;\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, true, duration], [this.deployer, this.devTwo, this.extOne]);\nconst depositSafetyState = await hardhat_1.default.Diamond.safetyStateFor(this.collateral.address, _test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, chai_1.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);\n// Confirm that the current blocktime is within the pause action's duration\nconst blockNumBefore = await hardhat_1.default.ethers.provider.getBlockNumber();\nconst blockBefore = await hardhat_1.default.ethers.provider.getBlock(blockNumBefore);\nconst timestampBefore = blockBefore.timestamp;\n(0, chai_1.expect)(Number(depositSafetyState[0].timestamp1)).to.be.greaterThan(timestampBefore);\n// Increase time by seven days\nconst sevenDays = 7 * 24 * 60 * 60;\nawait hardhat_1.default.ethers.provider.send(\"evm_increaseTime\", [sevenDays]);\nawait hardhat_1.default.ethers.provider.send(\"evm_mine\", []);\n// Confirm that block time has increased as expected\nconst blockNumAfter = await hardhat_1.default.ethers.provider.getBlockNumber();\nconst blockAfter = await hardhat_1.default.ethers.provider.getBlock(blockNumAfter);\nconst timestampAfter = blockAfter.timestamp;\n(0, chai_1.expect)(blockNumAfter).to.be.equal(blockNumBefore + 1);\n(0, chai_1.expect)(timestampAfter).to.be.equal(timestampBefore + sevenDays);\n// Confirm that the current blocktime is after the pause action's duration\n(0, chai_1.expect)(timestampAfter).to.be.greaterThan(Number(depositSafetyState[0].timestamp1));\n// NOTE: now we can test any functionality that should have now expired",
                      "err": {},
                      "uuid": "115baab7-82d8-4074-a3b8-2aaa30f7bbb7",
                      "parentUUID": "5fbd5133-e4c9-4159-8fc4-672763b82539",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "29b4defd-6da3-4d38-aaaa-4393e484a6e2",
                    "115baab7-82d8-4074-a3b8-2aaa30f7bbb7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 80,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "01a1a814-36d2-432b-9858-78261ed45def",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 64,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.DEPOSIT.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "3124bbd9-7fb6-4033-a47f-e1e2a4e74ee3",
                      "parentUUID": "01a1a814-36d2-432b-9858-78261ed45def",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.WITHDRAW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.WITHDRAW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.WITHDRAW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.WITHDRAW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "d07b30d4-d66d-4009-9368-740571f9e1ce",
                      "parentUUID": "01a1a814-36d2-432b-9858-78261ed45def",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 80,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.REPAY, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.REPAY.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "7b7e622b-620f-4573-9980-1a199e59a4f8",
                      "parentUUID": "01a1a814-36d2-432b-9858-78261ed45def",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 66,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.BORROW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.BORROW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.BORROW, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.BORROW.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "478cd8fa-8350-4fd7-ac83-08ac9419988f",
                      "parentUUID": "01a1a814-36d2-432b-9858-78261ed45def",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.LIQUIDATION, false, 0], [this.deployer, this.devTwo, this.extOne]);\nlet isPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(true);\nawait (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.LIQUIDATION, false, 0], [this.deployer, this.devTwo, this.extOne]);\nisPaused = await hardhat_1.default.Diamond.assetActionPaused(_test_utils_1.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, chai_1.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "c8861977-2469-43dc-b9a3-8bd215b55964",
                      "parentUUID": "01a1a814-36d2-432b-9858-78261ed45def",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3124bbd9-7fb6-4033-a47f-e1e2a4e74ee3",
                    "d07b30d4-d66d-4009-9368-740571f9e1ce",
                    "7b7e622b-620f-4573-9980-1a199e59a4f8",
                    "478cd8fa-8350-4fd7-ac83-08ac9419988f",
                    "c8861977-2469-43dc-b9a3-8bd215b55964"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 348,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "b3621726-0e38-4d7b-9b09-c775c7484120",
                  "title": "event emission",
                  "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 34,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, execution_1.executeContractCallWithSigners)(hardhat_1.default.Multisig, hardhat_1.default.Diamond, \"toggleAssetsPaused\", [[this.collateral.address], _test_utils_1.Action.DEPOSIT, false, 0], [this.deployer, this.devTwo, this.extOne]);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, types_1.MinterEvent__factory.connect(hardhat_1.default.Diamond.address, hardhat_1.default.users.userOne), \"SafetyStateChange\");\n(0, chai_1.expect)(event.action).to.equal(_test_utils_1.Action.DEPOSIT);\n(0, chai_1.expect)(event.asset).to.equal(this.collateral.address);\n// @ts-ignore\n(0, chai_1.expect)(event.description.hash).to.equal(hardhat_1.default.ethers.utils.keccak256(hardhat_1.default.ethers.utils.toUtf8Bytes(\"paused\")));",
                      "err": {},
                      "uuid": "58390eb9-5539-4000-9ecc-8eb08ae3cbb5",
                      "parentUUID": "b3621726-0e38-4d7b-9b09-c775c7484120",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "58390eb9-5539-4000-9ecc-8eb08ae3cbb5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 34,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "a62b686d-96d5-4f69-bd27-f5547d538372",
          "title": "Interest Rates",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/00-init.ts",
          "file": "/src/test/stability-rate/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "8f048c94-9163-4978-9555-91090579f87d",
              "parentUUID": "a62b686d-96d5-4f69-bd27-f5547d538372",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.krAsset = this.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);",
              "err": {},
              "uuid": "8b148775-0389-428a-b46d-c77d684c087c",
              "parentUUID": "a62b686d-96d5-4f69-bd27-f5547d538372",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e79dce90-8474-49ad-81eb-d23d37503d08",
              "title": "#init",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/00-init.ts",
              "file": "/src/test/stability-rate/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "initializes correct stability rates",
                  "fullTitle": "Interest Rates #init initializes correct stability rates",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = await hardhat_1.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, chai_1.expect)(config.debtIndex).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.stabilityRate).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, chai_1.expect)(config.rateSlope1).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.rateSlope1);\n(0, chai_1.expect)(config.rateSlope2).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.rateSlope2);\n(0, chai_1.expect)(config.stabilityRateBase).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.stabilityRateBase);\n(0, chai_1.expect)(config.optimalPriceRate).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.optimalPriceRate);\n(0, chai_1.expect)(config.priceRateDelta).to.bignumber.equal(test_1.defaultKrAssetArgs.stabilityRates.priceRateDelta);",
                  "err": {},
                  "uuid": "d51b5791-9476-406d-b726-a207a11ed564",
                  "parentUUID": "e79dce90-8474-49ad-81eb-d23d37503d08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures correct stability rates",
                  "fullTitle": "Interest Rates #init configures correct stability rates",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    stabilityRateBase: lib_1.oneRay,\n    rateSlope1: lib_1.oneRay.mul(10),\n    rateSlope2: lib_1.oneRay.mul(50),\n    optimalPriceRate: lib_1.oneRay.div(2),\n    priceRateDelta: lib_1.oneRay.div(100).mul(10),\n};\nawait hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, configuration);\nconst config = await hardhat_1.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, chai_1.expect)(config.debtIndex).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.stabilityRate).to.bignumber.equal(lib_1.oneRay);\n(0, chai_1.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, chai_1.expect)(config.rateSlope1).to.bignumber.equal(configuration.rateSlope1);\n(0, chai_1.expect)(config.rateSlope2).to.bignumber.equal(configuration.rateSlope2);\n(0, chai_1.expect)(config.stabilityRateBase).to.bignumber.equal(configuration.stabilityRateBase);\n(0, chai_1.expect)(config.optimalPriceRate).to.bignumber.equal(configuration.optimalPriceRate);\n(0, chai_1.expect)(config.priceRateDelta).to.bignumber.equal(configuration.priceRateDelta);",
                  "err": {},
                  "uuid": "91f28065-d18e-4b66-b459-c1a8da587f66",
                  "parentUUID": "e79dce90-8474-49ad-81eb-d23d37503d08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant set incorrect values",
                  "fullTitle": "Interest Rates #init cant set incorrect values",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectOptimalRate = {\n    stabilityRateBase: lib_1.oneRay,\n    rateSlope1: lib_1.oneRay.mul(10),\n    rateSlope2: lib_1.oneRay.mul(50),\n    optimalPriceRate: lib_1.oneRay.add(1),\n    priceRateDelta: lib_1.oneRay.div(100).mul(10),\n};\nconst incorrectExcessRate = {\n    stabilityRateBase: lib_1.oneRay,\n    rateSlope1: lib_1.oneRay.mul(10),\n    rateSlope2: lib_1.oneRay.mul(50),\n    optimalPriceRate: lib_1.oneRay,\n    priceRateDelta: lib_1.oneRay.add(1),\n};\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.setupStabilityRateParams(this.krAsset.address, test_1.defaultKrAssetArgs.stabilityRates))\n    .to.be.reverted;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectOptimalRate)).to.be\n    .reverted;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectExcessRate)).to.be\n    .reverted;",
                  "err": {},
                  "uuid": "65100bbf-750d-4988-9029-2609b6557aca",
                  "parentUUID": "e79dce90-8474-49ad-81eb-d23d37503d08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d51b5791-9476-406d-b726-a207a11ed564",
                "91f28065-d18e-4b66-b459-c1a8da587f66",
                "65100bbf-750d-4988-9029-2609b6557aca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "71f020f6-fb37-4dff-b217-9fb6496084e3",
          "title": "Stability Rates",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
          "file": "/src/test/stability-rate/01-rates.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "ce02ad4b-14e3-4f2d-84ce-38c91596f789",
              "parentUUID": "71f020f6-fb37-4dff-b217-9fb6496084e3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 265,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userOne = hardhat_1.default.users.deployer;\nthis.krAsset = this.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\n[UniMath] = await hardhat_1.default.deploy(\"UniswapMath\", {\n    from: hardhat_1.default.users.deployer.address,\n    args: [hardhat_1.default.UniV2Factory.address, hardhat_1.default.UniV2Router.address],\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, lib_1.toBig)(1000);\nconst kLiq = (0, lib_1.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne,\n});\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: kLiq });\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: userOne,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "39c5813c-c360-4367-9c92-5b0f9d907446",
              "parentUUID": "71f020f6-fb37-4dff-b217-9fb6496084e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0613db28-123e-40c3-9e1a-1541d1933635",
              "title": "#no-amm-prices",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct rates and debt when there is no amm price",
                  "fullTitle": "Stability Rates #no-amm-prices calculates correct rates and debt when there is no amm price",
                  "timedOut": false,
                  "duration": 3341,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const krAssetAmount = (0, lib_1.toBig)(1);\nconst krAssetNoBaseRate = await (0, krassets_1.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: ethers_1.BigNumber.from(0),\n    price: 10,\n    supplyLimit: 2000,\n});\nconst krAssetWithBaseRate = await (0, krassets_1.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: test_1.BASIS_POINT.mul(20),\n    price: 10,\n    supplyLimit: 2000,\n});\n// Asset\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: krAssetNoBaseRate, amount: krAssetAmount });\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: krAssetWithBaseRate, amount: krAssetAmount });\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nawait hardhat_network_helpers_1.time.increase(+lib_2.ONE_YEAR);\n// asset with no base rate and no amm price\nconst debtIndexNoBaseRate = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetNoBaseRate.address);\nconst debtScaledNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebt(userOne.address, krAssetNoBaseRate.address);\nconst debtPrincipalNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetNoBaseRate.address);\nconst debtInterestNoBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetNoBaseRate.address);\n(0, chai_1.expect)(debtIndexNoBaseRate).to.equal(lib_2.oneRay);\n(0, chai_1.expect)(debtScaledNoBaseRate).to.equal(debtPrincipalNoBaseRate);\n(0, chai_1.expect)(debtInterestNoBaseRate.kissAmount).to.equal(0);\n(0, chai_1.expect)(debtInterestNoBaseRate.assetAmount).to.equal(0);\n// asset with base rate and no amm price\nconst debtIndexWithBaseRate = await hardhat_1.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nconst debtScaledWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebt(userOne.address, krAssetWithBaseRate.address);\nconst debtPrincipalWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetWithBaseRate.address);\nconst debtInterestWithBaseRate = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetWithBaseRate.address);\nconst expectedScaledDebt = await (0, calculations_1.toScaledAmount)(debtPrincipalWithBaseRate, krAssetWithBaseRate);\nconst expectedDebtIndex = await (0, calculations_1.calcDebtIndex)(krAssetWithBaseRate, debtIndexBefore, lastUpdateTimestamp);\nconst expectedAssetInterest = debtScaledWithBaseRate.sub(debtPrincipalWithBaseRate);\nconst expectedKissInterestAmount = await (0, calculations_1.oraclePriceToWad)(hardhat_1.default.Diamond.getKrAssetValue(krAssetWithBaseRate.address, expectedAssetInterest, true));\n(0, chai_1.expect)(debtIndexWithBaseRate).to.equal(expectedDebtIndex);\n(0, chai_1.expect)(debtScaledWithBaseRate).to.equal(expectedScaledDebt);\n(0, chai_1.expect)(debtInterestWithBaseRate.assetAmount).to.equal(expectedAssetInterest);\n(0, chai_1.expect)(debtInterestWithBaseRate.kissAmount).to.equal(expectedKissInterestAmount);",
                  "err": {},
                  "uuid": "c279d328-f61e-4939-adb1-33ef272e3e5e",
                  "parentUUID": "0613db28-123e-40c3-9e1a-1541d1933635",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c279d328-f61e-4939-adb1-33ef272e3e5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3341,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "76a86988-b3ab-4f77-b9cb-e668b8eb1729",
              "title": "#price-rate",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct price rates when amm == oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm == oracle",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst ammPricesOptimal = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammPricesOptimal.price0).to.be.closeTo(10, 0.05);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.equal(lib_2.oneRay);",
                  "err": {},
                  "uuid": "eacd7170-e0d8-4905-81a5-c8f905c67373",
                  "parentUUID": "76a86988-b3ab-4f77-b9cb-e668b8eb1729",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm > oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm > oracle",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 105; // 105% eg. 5% premium\nconst expectedPriceRate = lib_2.oneRay.div(100).mul(premiumPercentage);\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nconst ammPricesUpPremium = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammPricesUpPremium.price0).to.be.closeTo(10.5, 0.05);\nawait updateTWAP();\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, lib_2.oneRay.div(100));",
                  "err": {},
                  "uuid": "8065a17c-ebfe-4534-b2f4-d9caaabbaf21",
                  "parentUUID": "76a86988-b3ab-4f77-b9cb-e668b8eb1729",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm < oracle ",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 207,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 95; // 95% eg. 5% below oracle price\nconst expectedPriceRate = lib_2.oneRay.div(100).mul(premiumPercentage);\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nconst ammRates = await (0, amm_1.getAMMPrices)(this.collateral, this.krAsset);\n(0, chai_1.expect)(ammRates.price0).to.be.closeTo(9.5, 0.05);\nawait updateTWAP();\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, lib_2.oneRay.div(100));",
                  "err": {},
                  "uuid": "4e4fe327-863d-4e52-9758-a5bcca6ea8ee",
                  "parentUUID": "76a86988-b3ab-4f77-b9cb-e668b8eb1729",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eacd7170-e0d8-4905-81a5-c8f905c67373",
                "8065a17c-ebfe-4534-b2f4-d9caaabbaf21",
                "4e4fe327-863d-4e52-9758-a5bcca6ea8ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 376,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b0171ef1-3622-415a-b462-f12d28f51211",
              "title": "#stability-rate",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct stability rates when amm == oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm == oracle",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal((0, calculations_1.calcExpectedStabilityRateNoPremium)(priceRate, test_1.defaultKrAssetArgs));",
                  "err": {},
                  "uuid": "c96f0262-7fad-4eaa-9cfc-a7f7402d8037",
                  "parentUUID": "b0171ef1-3622-415a-b462-f12d28f51211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rates when amm > oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm > oracle",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal((0, calculations_1.calcExpectedStabilityRateHighPremium)(priceRate, test_1.defaultKrAssetArgs));",
                  "err": {},
                  "uuid": "899444ad-dc4c-4b1d-9159-fb74e1bb562c",
                  "parentUUID": "b0171ef1-3622-415a-b462-f12d28f51211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rates when amm < oracle ",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 247,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst stabilityRate = await hardhat_1.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await hardhat_1.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, chai_1.expect)(stabilityRate).to.bignumber.equal((0, calculations_1.calcExpectedStabilityRateLowPremium)(priceRate, test_1.defaultKrAssetArgs));",
                  "err": {},
                  "uuid": "db3149c4-2ee9-4246-886e-976d1e1cff29",
                  "parentUUID": "b0171ef1-3622-415a-b462-f12d28f51211",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c96f0262-7fad-4eaa-9cfc-a7f7402d8037",
                "899444ad-dc4c-4b1d-9159-fb74e1bb562c",
                "db3149c4-2ee9-4246-886e-976d1e1cff29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 437,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "f50a2442-581f-46b5-b9a5-b5ea74a7ea09",
              "title": "#debt-index",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt index after a year when amm price > oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year when amm price > oracle",
                  "timedOut": false,
                  "duration": 228,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+lib_2.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "2869cfd7-e35c-449e-8903-2828666cd09d",
                  "parentUUID": "f50a2442-581f-46b5-b9a5-b5ea74a7ea09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after year when amm price < oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after year when amm price < oracle",
                  "timedOut": false,
                  "duration": 230,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 90; // 90% eg. -10% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+lib_2.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "d7a76775-60e2-48b5-b4c8-02dd94ecd6ce",
                  "parentUUID": "f50a2442-581f-46b5-b9a5-b5ea74a7ea09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 269,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, calculations_1.getBlockTimestamp)();\nawait hardhat_network_helpers_1.time.increase(+lib_2.ONE_YEAR);\nconst debtIndexAfter = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, chai_1.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, calculations_1.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "d16998d9-d0bf-440e-b8f4-e21fd9676c80",
                  "parentUUID": "f50a2442-581f-46b5-b9a5-b5ea74a7ea09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2869cfd7-e35c-449e-8903-2828666cd09d",
                "d7a76775-60e2-48b5-b4c8-02dd94ecd6ce",
                "d16998d9-d0bf-440e-b8f4-e21fd9676c80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 727,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "cc80de02-d98a-459e-9faa-b4cfadfd306d",
          "title": "Stability Rates",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
          "file": "/src/test/stability-rate/02-debt.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "f020fc96-d338-44e0-8964-b0669aa6fa68",
              "parentUUID": "cc80de02-d98a-459e-9faa-b4cfadfd306d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 324,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userOne = hardhat_1.default.users.deployer;\nuserTwo = hardhat_1.default.users.userTwo;\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\n[UniMath] = await hardhat_1.default.deploy(\"UniswapMath\", {\n    from: hardhat_1.default.users.deployer.address,\n    args: [hardhat_1.default.UniV2Factory.address, hardhat_1.default.UniV2Router.address],\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, lib_1.toBig)(1000);\nconst kLiq = (0, lib_1.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: userOne,\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: userOne,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "07975900-23e6-479a-949c-2ba23cf460f7",
              "parentUUID": "cc80de02-d98a-459e-9faa-b4cfadfd306d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aa5826c0-a186-4801-a5c1-0ec6235625b5",
              "title": "#debt calculation - mint",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - mint\"",
                  "fullTitle": "Stability Rates #debt calculation - mint \"before each\" hook in \"#debt calculation - mint\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "3b4fcf00-d524-4381-9380-9951c7d584f6",
                  "parentUUID": "aa5826c0-a186-4801-a5c1-0ec6235625b5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 336,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.not.bignumber.equal(debt);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "57a6aab3-cc93-40de-afaa-acba1773e842",
                  "parentUUID": "aa5826c0-a186-4801-a5c1-0ec6235625b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt amount when amm price < oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price < oracle",
                  "timedOut": false,
                  "duration": 393,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "e4d978c6-7417-4b45-8a4d-b3bec66fdb62",
                  "parentUUID": "aa5826c0-a186-4801-a5c1-0ec6235625b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 150,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(+calculations_1.ONE_YEAR);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(lib_2.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterYear).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "af8db8c5-f31b-4ab7-8964-1700c4566248",
                  "parentUUID": "aa5826c0-a186-4801-a5c1-0ec6235625b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57a6aab3-cc93-40de-afaa-acba1773e842",
                "e4d978c6-7417-4b45-8a4d-b3bec66fdb62",
                "af8db8c5-f31b-4ab7-8964-1700c4566248"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 879,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "2b659876-914c-4043-a114-ec8955645b74",
              "title": "#debt calculation - repay",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay\"",
                  "fullTitle": "Stability Rates #debt calculation - repay \"before each\" hook in \"#debt calculation - repay\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "ace9145e-7778-4043-8cbc-e50d3694fae9",
                  "parentUUID": "2b659876-914c-4043-a114-ec8955645b74",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 262,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 102; // 102% eg. 2% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\n// buy asset, increases price\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.collateral.address, this.krAsset.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.equal(await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalBefore = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst burnAmount = mintAmount.div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: burnAmount,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalAfter = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(principalAfter).to.equal(principalBefore.sub(burnAmount));\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(burnAmount), hardhat_1.default.ethers.utils.parseUnits(\"10\", \"gwei\"));",
                  "err": {},
                  "uuid": "d0f95c8d-be3b-4467-879b-5dc711243ea1",
                  "parentUUID": "2b659876-914c-4043-a114-ec8955645b74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 381,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 98; // 101% eg. 1% premium\nconst krAssetAmount = (0, lib_1.toBig)(1);\nconst collateralAmount = (0, lib_1.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, krassets_1.mintKrAsset)({ user: userOne, asset: this.krAsset, amount: amountIn });\n// dump asset, decreases price\nawait (0, amm_1.swap)({\n    amount: amountIn,\n    route: [this.krAsset.address, this.collateral.address],\n    router: hardhat_1.default.UniV2Router,\n    user: userOne,\n});\nawait updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait hardhat_network_helpers_1.time.increase(year);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(lib_2.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), lib_2.oneRay.div(10000));",
                  "err": {},
                  "uuid": "714df7c9-cc63-4443-9385-1cc89ea066b7",
                  "parentUUID": "2b659876-914c-4043-a114-ec8955645b74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 202,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait hardhat_1.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait hardhat_network_helpers_1.time.increase(year);\nconst debtIndex = await hardhat_1.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, chai_1.expect)(debtIndex.gt(lib_2.oneRay)).to.be.true;\nconst debtAfterYear = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, krassets_1.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo,\n});\nconst debtAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), lib_2.oneRay.div(10000));",
                  "err": {},
                  "uuid": "7f98a1a4-e520-40ad-9b44-7fe83ff59953",
                  "parentUUID": "2b659876-914c-4043-a114-ec8955645b74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0f95c8d-be3b-4467-879b-5dc711243ea1",
                "714df7c9-cc63-4443-9385-1cc89ea066b7",
                "7f98a1a4-e520-40ad-9b44-7fe83ff59953"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 845,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "7ff2edb3-4428-4141-b795-727b4232cb93",
              "title": "#debt calculation - repay interest",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay interest\"",
                  "fullTitle": "Stability Rates #debt calculation - repay interest \"before each\" hook in \"#debt calculation - repay interest\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "20d7b087-b7f7-476a-b353-79f84414ca2a",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can view account principal debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account principal debt for asset",
                  "timedOut": false,
                  "duration": 185,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst expectedPrincipalDebt = mintAmount.mul(2);\nconst principalDebtAfterOneYear = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(principalDebtAfterOneYear).to.bignumber.equal(expectedPrincipalDebt);",
                  "err": {},
                  "uuid": "97b6e9d0-bf5d-46d5-bebe-48894289c780",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view account scaled debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account scaled debt for asset",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst expectedScaledDebt = principalDebt.add(accruedInterest.assetAmount);\nconst scaledDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(scaledDebt).to.bignumber.equal(expectedScaledDebt);",
                  "err": {},
                  "uuid": "8c255800-6d9e-4826-891d-750bc503a578",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view accrued interest in KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view accrued interest in KISS",
                  "timedOut": false,
                  "duration": 180,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst scaledDebt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst expectedValue = (await hardhat_1.default.Diamond.getKrAssetValue(this.krAsset.address, scaledDebt.sub(principalDebt), true)).rawValue;\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// 8 decimals\n(0, chai_1.expect)(accruedInterest.kissAmount).to.bignumber.equal(expectedValue.mul(10 ** 10));",
                  "err": {},
                  "uuid": "68adf365-90d3-4a03-8e29-29942d4560d1",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay full interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay full interest with KISS",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\n// get the principal before repayment\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// get values after repayment\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(accruedInterest.assetAmount).to.bignumber.eq(0);\n(0, chai_1.expect)(debt).to.bignumber.eq(principalDebt);",
                  "err": {},
                  "uuid": "67460ac4-178b-4ae3-8037-f53a8635b324",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay partial interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay partial interest with KISS",
                  "timedOut": false,
                  "duration": 233,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nconst accruedInterestBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// get the principal before repayment\nconst debtBefore = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst repaymentAmount = accruedInterestBefore.kissAmount.div(5);\nconst repaymentAmountAsset = accruedInterestBefore.assetAmount.div(5);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayStabilityRateInterestPartial(userTwo.address, this.krAsset.address, repaymentAmount);\n// get values after repayment\nconst debtAfter = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterestAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// TODO: calc exact values instead of closeTo\n(0, chai_1.expect)(accruedInterestAfter.kissAmount).to.be.closeTo(accruedInterestBefore.kissAmount.sub(repaymentAmount), RATE_DELTA);\n(0, chai_1.expect)(debtAfter).to.be.closeTo(debtBefore.sub(repaymentAmountAsset), RATE_DELTA);",
                  "err": {},
                  "uuid": "8ff74bb9-68b5-4990-89c5-6724dd5c21fa",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest for multiple assets in batch",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest for multiple assets in batch",
                  "timedOut": false,
                  "duration": 4917,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo,\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nconst totalInterestInKISSBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map(asset => hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c) => a.add(c.kissAmount), ethers_1.BigNumber.from(0));\nconst totalInterestInKISSAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, chai_1.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nconst KISSMinAmount = (0, lib_1.toBig)(10);\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: KISSMinAmount,\n    user: userTwo,\n});\nawait hardhat_1.default.Diamond.connect(userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSAfterRepay).to.equal(0);",
                  "err": {},
                  "uuid": "c2d576bf-637e-4237-ba18-89789f15f704",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest and principal for a single asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest and principal for a single asset",
                  "timedOut": false,
                  "duration": 370,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst accruedInterestBeforeBurn = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\nconst accruedInterestAfterBurn = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Ensure burning does not wipe interest accrued\n(0, chai_1.expect)(accruedInterestAfterBurn.assetAmount.gt(accruedInterestBeforeBurn.assetAmount)).to.be.true;\n(0, chai_1.expect)(accruedInterestAfterBurn.kissAmount.gt(accruedInterestBeforeBurn.kissAmount)).to.be.true;\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore.length).to.equal(2);\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter.length).to.equal(1);\nconst accruedInterestAfterRepayment = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst principalDebt = await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n// Ensure debt actually gets wiped\n(0, chai_1.expect)(principalDebt).to.equal(0);\n(0, chai_1.expect)(accruedInterestAfterRepayment.assetAmount).to.equal(0);\n(0, chai_1.expect)(accruedInterestAfterRepayment.kissAmount).to.equal(0);\n(0, chai_1.expect)(debt).to.equal(0);\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst accruedInterestYearAfterRepayment = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Sanity check with another year of time that there is no interest accrual\n(0, chai_1.expect)(accruedInterestYearAfterRepayment.assetAmount).to.equal(0);\n(0, chai_1.expect)(accruedInterestYearAfterRepayment.kissAmount).to.equal(0);\n// Get kr asset value, should be only KISS minted that remains\nconst krAssetValue = (await hardhat_1.default.Diamond.getAccountKrAssetValue(userTwo.address)).rawValue;\n(0, chai_1.expect)(krAssetValue).to.equal((0, lib_1.toBig)(10, 8));",
                  "err": {},
                  "uuid": "1b6ed0e8-2887-47e9-ac11-de5b44ab29ce",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch repay interest and all debt",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can batch repay interest and all debt",
                  "timedOut": false,
                  "duration": 4874,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nconst totalInterestInKISSBefore = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map(asset => hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c) => a.add(c.kissAmount), ethers_1.BigNumber.from(0));\nconst totalInterestInKISSAfter = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, chai_1.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nawait Promise.all(krAssets.map(async (asset) => hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, asset.address, hardhat_1.default.ethers.constants.MaxUint256, await hardhat_1.default.Diamond.getMintedKreskoAssetsIndex(userTwo.address, asset.address))));\nconst mintedKreskoAssetsBefore = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsBefore.length).to.equal(4);\nawait hardhat_1.default.Diamond.connect(userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(totalInterestInKISSAfterRepay).to.equal(0);\nconst mintedKreskoAssetsAfter = await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, chai_1.expect)(mintedKreskoAssetsAfter.length).to.equal(1);",
                  "err": {},
                  "uuid": "9cc1ee03-4420-4706-9746-1c04d19aa110",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can open up a new debt positions after wiping all debt + interest",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can open up a new debt positions after wiping all debt + interest",
                  "timedOut": false,
                  "duration": 613,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst expectedDebtAfterOneYear = await (0, calculations_1.toScaledAmountUser)(userTwo, mintAmount, this.krAsset);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(expectedDebtAfterOneYear);\n// Wipe debt\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\nconst accruedInterest = (await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address))\n    .assetAmount;\n// Mint again, before interest repayment\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\n// Ensure debt is principal + interest\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.closeTo(mintAmount.add(accruedInterest), RATE_DELTA);\n// Burn all assets\nawait hardhat_1.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, hardhat_1.default.ethers.constants.MaxUint256, 0);\n// Ensure debt is equal to interest\nconst accruedInterestAfterBurn = (await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address)).assetAmount;\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(accruedInterestAfterBurn);\n// Repay all interest\nawait hardhat_1.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// Debt should be wiped\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n// Mint again\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\n// Scaled should be equal to principal\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(mintAmount);\n// Advance time\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n// Ensure accrual is the same as the previous year with the same position\nconst debt = await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(debt).to.eq(expectedDebtAfterOneYear);",
                  "err": {},
                  "uuid": "4b2ad581-7bca-43ab-9a65-81ceccb23dec",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close a position in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close a position in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 403,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userOne,\n});\nawait KISS.connect(userOne).transfer(userTwo.address, minDebtAmount);\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo,\n});\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nawait hardhat_1.default.Diamond.connect(userTwo).closeKrAssetDebtPosition(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address)).to.eq(0);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, chai_1.expect)(accruedInterest.assetAmount).to.eq(0);\n(0, chai_1.expect)(accruedInterest.kissAmount).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "43a36e56-518c-45da-a6cf-292afc4bc32c",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close all positions and interest in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close all positions and interest in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 4412,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(userTwo).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nconst kissAmount = (await hardhat_1.default.Diamond.minimumDebtValue()).rawValue.mul(10 ** 10).mul(2);\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: kissAmount,\n    user: userOne,\n});\nawait KISS.connect(userOne).transfer(userTwo.address, kissAmount);\nconst krAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmountSmall,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n// ~1M gas with 8 krAssets\n// console.log(+(await tx.wait()).gasUsed);\nawait hardhat_1.default.Diamond.connect(userTwo).batchCloseKrAssetDebtPositions(userTwo.address);\nconst accruedInterest = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, chai_1.expect)(accruedInterest).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getAccountKrAssetValue(userTwo.address)).rawValue).to.eq(0);\n(0, chai_1.expect)((await hardhat_1.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "17da57bc-3ab1-4356-ab98-84dbb97621c0",
                  "parentUUID": "7ff2edb3-4428-4141-b795-727b4232cb93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97b6e9d0-bf5d-46d5-bebe-48894289c780",
                "8c255800-6d9e-4826-891d-750bc503a578",
                "68adf365-90d3-4a03-8e29-29942d4560d1",
                "67460ac4-178b-4ae3-8037-f53a8635b324",
                "8ff74bb9-68b5-4990-89c5-6724dd5c21fa",
                "c2d576bf-637e-4237-ba18-89789f15f704",
                "1b6ed0e8-2887-47e9-ac11-de5b44ab29ce",
                "9cc1ee03-4420-4706-9746-1c04d19aa110",
                "4b2ad581-7bca-43ab-9a65-81ceccb23dec",
                "43a36e56-518c-45da-a6cf-292afc4bc32c",
                "17da57bc-3ab1-4356-ab98-84dbb97621c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16574,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "9821a9ae-e558-4f70-a70c-5323914caf0b",
          "title": "Stability Rates",
          "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
          "file": "/src/test/stability-rate/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await hre.deployments.createFixture(async (hre) => {\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.ethers.getContractAt(\"Kresko\", result.Diamond.address);\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets,\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "0cc3a333-6e8f-4c3b-9be0-5a96693bf044",
              "parentUUID": "9821a9ae-e558-4f70-a70c-5323914caf0b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 424,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "liquidator = hardhat_1.default.users.deployer;\nuserTwo = hardhat_1.default.users.userTwo;\nthis.krAsset = hardhat_1.default.krAssets.find(c => c.deployArgs.name === test_1.defaultKrAssetArgs.name);\nthis.collateral = hardhat_1.default.collaterals.find(c => c.deployArgs.name === test_1.defaultCollateralArgs.name);\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, lib_1.toBig)(1000);\nconst kLiq = (0, lib_1.toBig)(100);\nawait this.collateral.setBalance(liquidator, cLiq.mul(2));\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: liquidator,\n});\nawait (0, krassets_1.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: liquidator,\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(hardhat_1.default.Diamond.address);\n(0, chai_1.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, amm_1.addLiquidity)({\n    user: liquidator,\n    router: hardhat_1.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset,\n});\nupdateTWAP = (0, amm_1.getTWAPUpdaterFor)(pair.address);\nawait hardhat_1.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "cfef226e-45e1-4f77-b1ae-2305c7a15987",
              "parentUUID": "9821a9ae-e558-4f70-a70c-5323914caf0b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5fbd502d-4813-4b84-aad9-ab31371270ad",
              "title": "#stability rate - liquidation",
              "fullFile": "/Users/pk/Projects/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
              "file": "/src/test/stability-rate/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#stability rate - liquidation\"",
                  "fullTitle": "Stability Rates #stability rate - liquidation \"before each\" hook in \"#stability rate - liquidation\"",
                  "timedOut": false,
                  "duration": 3917,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Create few krAssets\nkrAssets = await Promise.all([\"krasset2\", \"krasset3\", \"krasset4\"].map(async (name) => await (0, krassets_1.addMockKreskoAsset)({\n    name: name,\n    symbol: name,\n    marketOpen: true,\n    factor: 1.1,\n    closeFee: 0,\n    openFee: 0,\n    price: 10,\n    supplyLimit: 2000,\n    stabilityRateBase: test_1.BASIS_POINT.mul(1000), // 10%\n})));",
                  "err": {},
                  "uuid": "bccec4c5-bf1d-4336-a538-ab0d289bf01a",
                  "parentUUID": "5fbd502d-4813-4b84-aad9-ab31371270ad",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 408,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\nconst krAsset = krAssets[0];\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "c9c82cb1-0ad7-4a88-96e1-2088df674f92",
                  "parentUUID": "5fbd502d-4813-4b84-aad9-ab31371270ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot batch liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot batch liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 447,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR);\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, chai_1.expect)(hardhat_1.default.Diamond.connect(liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address)).to.be.revertedWith(errors_1.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "7009bd4c-0165-48b9-9407-413ae532b1d6",
                  "parentUUID": "5fbd502d-4813-4b84-aad9-ab31371270ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 1081,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(liquidator).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map(asset => asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR * 4);\n// should be liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\n// Asset to liquidate\nconst krAsset = krAssets[0];\nconst interestUSDTotal = await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// Liquidator mints KISS\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: interestUSDTotal.add((0, lib_1.toBig)(1)),\n    user: liquidator,\n});\n// liquidatable value total before\nconst accruedKissInterest = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address)).kissAmount);\nconst accountCollateralBefore = await hardhat_1.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, lib_1.toBig)(0));\n// Liquidate\nconst tx = await hardhat_1.default.Diamond.connect(liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address);\n// Should all be wiped\nconst interestAccruedAfterLiq = await hardhat_1.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address);\n(0, chai_1.expect)(interestAccruedAfterLiq.kissAmount).to.eq(0);\n(0, chai_1.expect)(interestAccruedAfterLiq.assetAmount).to.eq(0);\nconst accountCollateralAfter = await hardhat_1.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, (0, events_1.EventContract)(), \"InterestLiquidationOccurred\");\n// validate interest accrual changes\n(0, chai_1.expect)(accountCollateralAfter).to.equal(accountCollateralBefore.sub(event.collateralSent));\nconst liquidationIncentive = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue);\nconst expectedCollateral = (accruedKissInterest / (0, hardhat_1.fromBig)(await this.collateral.getPrice(), 8)) * liquidationIncentive;\n// event validation\n(0, chai_1.expect)(event.account).to.equal(userTwo.address);\n(0, chai_1.expect)(event.liquidator).to.equal(liquidator.address);\n(0, chai_1.expect)(event.repayKreskoAsset).to.equal(krAsset.address);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.collateralSent).toFixed(6)).to.equal(expectedCollateral.toFixed(6));\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.repayUSD)).to.closeTo(accruedKissInterest, 0.0001);\n// liquidator received collateral\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "ce2421eb-3fdd-4e3d-9f68-e746b78103c0",
                  "parentUUID": "5fbd502d-4813-4b84-aad9-ab31371270ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can batch liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 1616,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await hardhat_1.default.ethers.getContract(\"KISS\");\nawait KISS.connect(liquidator).approve(hardhat_1.default.Diamond.address, hardhat_1.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, collaterals_1.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo,\n});\n// mint each krasset\nawait Promise.all(krAssets.map(krAsset => (0, krassets_1.mintKrAsset)({\n    asset: krAsset,\n    amount: mintAmount,\n    user: userTwo,\n})));\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map(asset => asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait hardhat_network_helpers_1.time.increase(calculations_1.ONE_YEAR * 4);\n// should be liquidatable\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\nconst interestKissTotal = (0, hardhat_1.fromBig)(await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n// Liquidator mints KISS\nawait (0, krassets_1.mintKrAsset)({\n    asset: KISS,\n    amount: interestKissTotal + 1,\n    user: liquidator,\n});\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, lib_1.toBig)(0));\n// Liquidate\nconst tx = await hardhat_1.default.Diamond.connect(liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address);\nconst interestKissTotalAfter = (0, hardhat_1.fromBig)(await hardhat_1.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n(0, chai_1.expect)(await hardhat_1.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nconst event = await (0, protocol_ts_1.getInternalEvent)(tx, (0, events_1.EventContract)(), \"BatchInterestLiquidationOccurred\");\nconst repayUSD = (0, hardhat_1.fromBig)(event.repayUSD);\n// interest accrued changes\n(0, chai_1.expect)(interestKissTotalAfter).to.closeTo(interestKissTotal - (0, hardhat_1.fromBig)(event.repayUSD), 0.0001);\nconst liquidationIncentive = (0, hardhat_1.fromBig)((await hardhat_1.default.Diamond.liquidationIncentiveMultiplier()).rawValue);\nconst expectedCollateral = (repayUSD / (0, hardhat_1.fromBig)(await this.collateral.getPrice(), 8)) * liquidationIncentive;\n// event validation\n(0, chai_1.expect)(event.account).to.equal(userTwo.address);\n(0, chai_1.expect)(event.liquidator).to.equal(liquidator.address);\n(0, chai_1.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, chai_1.expect)((0, hardhat_1.fromBig)(event.collateralSent)).to.closeTo(expectedCollateral, 0.0001);\n(0, chai_1.expect)(repayUSD).to.closeTo(interestKissTotal - interestKissTotalAfter, 0.0001);\n// liquidator received collateral\n(0, chai_1.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "70e9e4f2-4e12-48cb-b126-cc44932a13d6",
                  "parentUUID": "5fbd502d-4813-4b84-aad9-ab31371270ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9c82cb1-0ad7-4a88-96e1-2088df674f92",
                "7009bd4c-0165-48b9-9407-413ae532b1d6",
                "ce2421eb-3fdd-4e3d-9f68-e746b78103c0",
                "70e9e4f2-4e12-48cb-b126-cc44932a13d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3552,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}