{
  "stats": {
    "suites": 90,
    "tests": 265,
    "passes": 257,
    "pending": 8,
    "failures": 0,
    "start": "2023-05-19T12:56:09.278Z",
    "end": "2023-05-19T12:58:54.658Z",
    "duration": 165380,
    "testsRegistered": 265,
    "passPercent": 100,
    "pendingPercent": 3.018867924528302,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6ca884cd-bb0d-4e8e-a038-35aedbebfae5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4c313dc2-a564-4e1b-9d7f-9a5c1314950a",
          "title": "Asset Amounts & Values",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
          "file": "/src/test/asset-values/00-asset-values.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "e8d59c77-8e9d-48e2-97a7-92897ff00806",
              "parentUUID": "4c313dc2-a564-4e1b-9d7f-9a5c1314950a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Asset Amounts & Values\"",
              "fullTitle": "Asset Amounts & Values \"before each\" hook in \"Asset Amounts & Values\"",
              "timedOut": false,
              "duration": 3067,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "user = _hardhat.default.users.testUserSeven;\noracleDecimals = await _hardhat.default.Diamond.extOracleDecimals();\nKreskoAsset = await (0, _krassets.addMockKreskoAsset)({\n    name: \"KreskoAssetPrice10USD\",\n    price: collateralPrice,\n    symbol: \"KreskoAssetPrice10USD\",\n    closeFee: 0.1,\n    openFee: 0.1,\n    marketOpen: true,\n    factor: 2,\n    supplyLimit: 10\n});\nCollateralAsset = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral18Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 18\n});\nCollateralAsset8Dec = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral8Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 8\n});\nCollateralAsset21Dec = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral21Dec\",\n    price: kreskoAssetPrice,\n    factor: 0.5,\n    decimals: 21\n});\nawait CollateralAsset.setBalance(user, (0, _lib.toBig)(startingBalance));\nawait CollateralAsset8Dec.setBalance(user, (0, _lib.toBig)(startingBalance, 8));\nawait CollateralAsset21Dec.setBalance(user, (0, _lib.toBig)(startingBalance, 21));\nawait CollateralAsset.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait CollateralAsset8Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait CollateralAsset21Dec.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);",
              "err": {},
              "uuid": "effcbc07-decf-428c-978c-f92c322c8c28",
              "parentUUID": "4c313dc2-a564-4e1b-9d7f-9a5c1314950a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "00fa7448-7a72-490c-96a7-f483ad2438d1",
              "title": "#Collateral Deposit Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit value with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with 18 decimals",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "b4fc838e-7d73-4ede-a702-8563756c363d",
                  "parentUUID": "00fa7448-7a72-490c-96a7-f483ad2438d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with less than 18 decimals",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "9db48f14-c8c6-4b2a-a6cd-df03a7f4f20d",
                  "parentUUID": "00fa7448-7a72-490c-96a7-f483ad2438d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nconst expectedDepositValue = (0, _lib.toBig)(50, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10\nawait _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "9aeb323b-a26a-4978-92e3-b6b89a4a3589",
                  "parentUUID": "00fa7448-7a72-490c-96a7-f483ad2438d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value combination of different decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Values should return the correct deposit value combination of different decimals",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset.address, (0, _lib.toBig)(10));\nawait _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset8Dec.address, (0, _lib.toBig)(10, 8));\nawait _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset21Dec.address, (0, _lib.toBig)(10, 21));\nconst expectedDepositValue = (0, _lib.toBig)(150, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 30\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);",
                  "err": {},
                  "uuid": "6f2c32b1-d229-4912-8d0b-2a1c5c7da0b1",
                  "parentUUID": "00fa7448-7a72-490c-96a7-f483ad2438d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4fc838e-7d73-4ede-a702-8563756c363d",
                "9db48f14-c8c6-4b2a-a6cd-df03a7f4f20d",
                "9aeb323b-a26a-4978-92e3-b6b89a4a3589",
                "6f2c32b1-d229-4912-8d0b-2a1c5c7da0b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "e2b70c0b-37a3-468f-8048-1a0a04398904",
              "title": "#Collateral Deposit Amount",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct deposit amount with 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with 18 decimals",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait _hardhat.default.Diamond.connect(user).withdrawCollateral(user.address, CollateralAsset.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance));",
                  "err": {},
                  "uuid": "8efde66f-a2d6-456a-9487-c125d7163662",
                  "parentUUID": "e2b70c0b-37a3-468f-8048-1a0a04398904",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit amount with less than 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit amount with less than 18 decimals",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset8Dec.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset8Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait _hardhat.default.Diamond.connect(user).withdrawCollateral(user.address, CollateralAsset8Dec.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset8Dec.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance, 8));",
                  "err": {},
                  "uuid": "c308ef9a-7160-43d4-9d2f-d0d6a95a3cef",
                  "parentUUID": "e2b70c0b-37a3-468f-8048-1a0a04398904",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct deposit value with over 18 decimals",
                  "fullTitle": "Asset Amounts & Values #Collateral Deposit Amount should return the correct deposit value with over 18 decimals",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst withdrawIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(user.address, CollateralAsset21Dec.address);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(user.address, CollateralAsset21Dec.address);\n(0, _chai.expect)(deposits).to.equal(depositAmount);\nawait _hardhat.default.Diamond.connect(user).withdrawCollateral(user.address, CollateralAsset21Dec.address, depositAmount, withdrawIndex);\nconst balance = await CollateralAsset21Dec.contract.balanceOf(user.address);\n(0, _chai.expect)(balance).to.equal((0, _lib.toBig)(startingBalance, 21));",
                  "err": {},
                  "uuid": "4d9b44ca-9d04-4bdb-b296-e91304384c99",
                  "parentUUID": "e2b70c0b-37a3-468f-8048-1a0a04398904",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8efde66f-a2d6-456a-9487-c125d7163662",
                "c308ef9a-7160-43d4-9d2f-d0d6a95a3cef",
                "4d9b44ca-9d04-4bdb-b296-e91304384c99"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 150,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "50e991fc-5314-4248-9c93-8a1e9de25bb6",
              "title": "#Kresko Asset Debt Values",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/asset-values/00-asset-values.ts",
              "file": "/src/test/asset-values/00-asset-values.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the correct debt value (+CR) with 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with 18 decimal collateral",
                  "timedOut": false,
                  "duration": 142,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10);\nawait _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait _hardhat.default.Diamond.connect(user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "abf43b1b-b16b-4f85-ad4b-2b9275b2f9e9",
                  "parentUUID": "50e991fc-5314-4248-9c93-8a1e9de25bb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with less than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 154,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 8);\nawait _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset8Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait _hardhat.default.Diamond.connect(user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "ffe47332-3b2e-484a-9758-9cfa96e226f4",
                  "parentUUID": "50e991fc-5314-4248-9c93-8a1e9de25bb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "fullTitle": "Asset Amounts & Values #Kresko Asset Debt Values should return the correct debt value (+CR) with more than 18 decimal collateral",
                  "timedOut": false,
                  "duration": 166,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmount = (0, _lib.toBig)(10, 21);\nawait _hardhat.default.Diamond.connect(user).depositCollateral(user.address, CollateralAsset21Dec.address, depositAmount);\nconst mintAmount = (0, _lib.toBig)(1);\nconst expectedMintValue = (0, _lib.toBig)(20, oracleDecimals); // kFactor = 2, krAssetPrice = 10, mintAmount = 1, openFee = 0.1\nawait _hardhat.default.Diamond.connect(user).mintKreskoAsset(user.address, KreskoAsset.address, mintAmount);\nconst expectedDepositValue = (0, _lib.toBig)(49.5, oracleDecimals); // cfactor = 0.5, collateralPrice = 10, depositAmount = 10, openFee = 0.1\nconst depositValue = await _hardhat.default.Diamond.getAccountCollateralValue(user.address);\n(0, _chai.expect)(depositValue).to.equal(expectedDepositValue);\nconst mintValue = await _hardhat.default.Diamond.getAccountKrAssetValue(user.address);\n(0, _chai.expect)(mintValue).to.equal(expectedMintValue);\nconst assetValue = await _hardhat.default.Diamond.getKrAssetValue(KreskoAsset.address, mintAmount, true);\nconst kFactor = (await _hardhat.default.Diamond.kreskoAsset(KreskoAsset.address)).kFactor;\n(0, _chai.expect)(assetValue).to.equal(expectedMintValue.wadDiv(kFactor));\nconst collateralRatio = await (0, _liquidations.getCR)(user.address, true); // big\n(0, _chai.expect)(collateralRatio).to.equal(expectedDepositValue.wadDiv(expectedMintValue)); // 2.475",
                  "err": {},
                  "uuid": "5a263223-f63e-4bbf-bbc0-79a161928664",
                  "parentUUID": "50e991fc-5314-4248-9c93-8a1e9de25bb6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abf43b1b-b16b-4f85-ad4b-2b9275b2f9e9",
                "ffe47332-3b2e-484a-9758-9cfa96e226f4",
                "5a263223-f63e-4bbf-bbc0-79a161928664"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 462,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "a9de474a-57ee-4985-b263-a10b3307f15b",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
          "file": "/src/test/diamond/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "e027d280-55fc-4cdf-a0b0-1352ec41aad1",
              "parentUUID": "a9de474a-57ee-4985-b263-a10b3307f15b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7f67b5d5-f0c9-4996-920b-35ddb890100b",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/00-init.ts",
              "file": "/src/test/diamond/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct state",
                  "fullTitle": "Diamond #initialization sets correct state",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.users.deployer.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);",
                  "err": {},
                  "uuid": "92981dc7-fd3d-412c-846c-8d118196b816",
                  "parentUUID": "7f67b5d5-f0c9-4996-920b-35ddb890100b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets standard facet addresses",
                  "fullTitle": "Diamond #initialization sets standard facet addresses",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetAddressesOnChain = (await _hardhat.default.Diamond.facets()).map((f)=>f.facetAddress);\nconst facetAddressesArtifact = this.facets.map((f)=>f.facetAddress);\n(0, _chai.expect)(facetAddressesOnChain.length).to.equal(facetAddressesArtifact.length);\n(0, _chai.expect)(facetAddressesOnChain).to.have.members(facetAddressesArtifact);",
                  "err": {},
                  "uuid": "2a593c07-95f3-4580-99da-d3d67aea6350",
                  "parentUUID": "7f67b5d5-f0c9-4996-920b-35ddb890100b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets selectors of standard facets",
                  "fullTitle": "Diamond #initialization sets selectors of standard facets",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsSelectorsOnChain = (await _hardhat.default.Diamond.facets()).flatMap((f)=>f.functionSelectors);\nconst facetSelectorsOnArtifact = this.facets.flatMap((f)=>f.functionSelectors);\n(0, _chai.expect)(facetsSelectorsOnChain.length).to.equal(facetSelectorsOnArtifact.length);\n(0, _chai.expect)(facetsSelectorsOnChain).to.have.members(facetSelectorsOnArtifact);",
                  "err": {},
                  "uuid": "83369d74-fc58-4f63-bdc2-68b0094c3645",
                  "parentUUID": "7f67b5d5-f0c9-4996-920b-35ddb890100b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92981dc7-fd3d-412c-846c-8d118196b816",
                "2a593c07-95f3-4580-99da-d3d67aea6350",
                "83369d74-fc58-4f63-bdc2-68b0094c3645"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "258bdd16-9575-4048-a96e-ac0ab6a3fc40",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
          "file": "/src/test/diamond/01-ownership.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "dc99de14-5cdc-40bd-a99e-79bce649bb9a",
              "parentUUID": "258bdd16-9575-4048-a96e-ac0ab6a3fc40",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5daaa1a6-7406-4189-bbb0-dd34136b0dcf",
              "title": "#ownership",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/01-ownership.ts",
              "file": "/src/test/diamond/01-ownership.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct owner",
                  "fullTitle": "Diamond #ownership sets correct owner",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(_hardhat.default.addr.deployer);",
                  "err": {},
                  "uuid": "518d78f1-2923-46ca-97a6-9bbc268ffeeb",
                  "parentUUID": "5daaa1a6-7406-4189-bbb0-dd34136b0dcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct default admin role",
                  "fullTitle": "Diamond #ownership sets correct default admin role",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);",
                  "err": {},
                  "uuid": "839f0324-5ee9-4e37-85da-26e95b2da885",
                  "parentUUID": "5daaa1a6-7406-4189-bbb0-dd34136b0dcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets a new pending owner",
                  "fullTitle": "Diamond #ownership sets a new pending owner",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = _hardhat.default.users.userOne;\nawait _hardhat.default.Diamond.transferOwnership(pendingOwner.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.pendingOwner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "918782c5-10a5-462f-97da-f7b9dc7f4cc1",
                  "parentUUID": "5daaa1a6-7406-4189-bbb0-dd34136b0dcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets the pending owner as new owner",
                  "fullTitle": "Diamond #ownership sets the pending owner as new owner",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const pendingOwner = _hardhat.default.users.userOne;\nawait _hardhat.default.Diamond.transferOwnership(pendingOwner.address);\nawait _hardhat.default.Diamond.connect(pendingOwner).acceptOwnership();\n(0, _chai.expect)(await _hardhat.default.Diamond.owner()).to.equal(pendingOwner.address);",
                  "err": {},
                  "uuid": "aaaf5eca-5b4a-4926-979c-4f267f2067b8",
                  "parentUUID": "5daaa1a6-7406-4189-bbb0-dd34136b0dcf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "518d78f1-2923-46ca-97a6-9bbc268ffeeb",
                "839f0324-5ee9-4e37-85da-26e95b2da885",
                "918782c5-10a5-462f-97da-f7b9dc7f4cc1",
                "aaaf5eca-5b4a-4926-979c-4f267f2067b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 52,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "97a329e8-f1ba-4c69-bc4f-580c6a13ebc2",
          "title": "Diamond",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
          "file": "/src/test/diamond/02-upgrades.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Diamond\"",
              "fullTitle": "Diamond \"before each\" hook in \"Diamond\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "82be2bdf-6809-497a-9507-ac2291cca615",
              "parentUUID": "97a329e8-f1ba-4c69-bc4f-580c6a13ebc2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "84f46e4a-f07d-41cc-a044-cfc7fb429f0f",
              "title": "#upgrades",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/diamond/02-upgrades.ts",
              "file": "/src/test/diamond/02-upgrades.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can add a new facet",
                  "fullTitle": "Diamond #upgrades can add a new facet",
                  "timedOut": false,
                  "duration": 330,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await _hardhat.default.deploy(\"SmockInit\");\nconst signatures = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(_hardhat.default.addr.userOne);\nawait _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst TEST_OPERATOR_ROLE = _hardhat.default.ethers.utils.id(\"kresko.test.operator\");\nconst isTestOperator = await _hardhat.default.Diamond.hasRole(TEST_OPERATOR_ROLE, _hardhat.default.addr.userOne);\n// Succesfully added the new operator through the initialization contract\n(0, _chai.expect)(isTestOperator).to.equal(true);\nconst Facet = await _hardhat.default.ethers.getContractAt([\n    ..._typechain.SmockFacet__factory.abi\n], _hardhat.default.Diamond.address);\n// Ensure facet has it's own storage\nconst operatorFromNewStorage = await Facet.operator(); // Retrieved from SmockStorage\n(0, _chai.expect)(operatorFromNewStorage).to.equal(_hardhat.default.addr.userOne);",
                  "err": {},
                  "uuid": "3c589f4f-ad35-4f3c-9f61-045daf012ec9",
                  "parentUUID": "84f46e4a-f07d-41cc-a044-cfc7fb429f0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a facet",
                  "fullTitle": "Diamond #upgrades can remove a facet",
                  "timedOut": false,
                  "duration": 448,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const NewFacet = await (0, _addfacet.addFacet)({\n    name: \"SmockFacet\",\n    initializerName: \"SmockInit\",\n    initializerArgs: _hardhat.default.addr.userOne\n});\nconst facetsBefore = await _hardhat.default.Diamond.facets();\n(0, _chai.expect)(facetsBefore.filter((f)=>f.facetAddress === NewFacet.address).length).to.equal(1);\nawait (0, _removefacet.removeFacet)({\n    name: \"SmockFacet\"\n});\nconst facetsAfter = await _hardhat.default.Diamond.facets();\n(0, _chai.expect)(facetsBefore.length - facetsAfter.length).to.equal(1);\n(0, _chai.expect)(facetsAfter).to.not.deep.contain(NewFacet.address);",
                  "err": {},
                  "uuid": "e7fe838f-4c95-462c-a331-6b99f6b5cbce",
                  "parentUUID": "84f46e4a-f07d-41cc-a044-cfc7fb429f0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can remove a function",
                  "fullTitle": "Diamond #upgrades can remove a function",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Delete acceptOwnership from DiamondOwnershipFacet\n// Check there is no pending owner\nlet pendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(_hardhat.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = _hardhat.default.addr.nonadmin;\nawait _hardhat.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = _hardhat.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = _hardhat.default.ethers.utils.Interface.getSighash(functionFragment);\nconst facetAddress = await _hardhat.default.Diamond.facetAddress(signature);\nconst functions = await _hardhat.default.Diamond.facetFunctionSelectors(facetAddress);\nconst Cut = {\n    facetAddress: _hardhat.default.ethers.constants.AddressZero,\n    action: _types.FacetCutAction.Remove,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = _hardhat.default.addr.userOne;\nconst initData = await _hardhat.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure rest of the functions remain\nconst functionsAfterCut = await _hardhat.default.Diamond.facetFunctionSelectors(facetAddress);\n(0, _chai.expect)(functionsAfterCut.length).to.equal(functions.length - 1);\n// Ensure delegatecall did set the correct pending owner with the cut\nconst filter = _hardhat.default.Diamond.filters[\"PendingOwnershipTransfer(address,address)\"](_hardhat.default.addr.deployer, correctOwner);\nconst [event] = await _hardhat.default.Diamond.queryFilter(filter);\nconst { previousOwner , newOwner  } = event.args;\n(0, _chai.expect)(previousOwner).to.equal(_hardhat.default.addr.deployer);\n(0, _chai.expect)(newOwner).to.equal(correctOwner);\n// Ensure there is no function to accept the ownership\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_FUNCTION_SIGNATURE);",
                  "err": {},
                  "uuid": "52c6506f-5ad8-4987-b08e-9e4002a564a4",
                  "parentUUID": "84f46e4a-f07d-41cc-a044-cfc7fb429f0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can replace a function",
                  "fullTitle": "Diamond #upgrades can replace a function",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Same as above but instead replace the function\n// Check there is no pending owner\nlet pendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(_hardhat.default.ethers.constants.AddressZero);\n// Transfer to eg. wrong address\nconst wrongOwner = _hardhat.default.addr.nonadmin;\nawait _hardhat.default.Diamond.transferOwnership(wrongOwner);\n// Ensure\npendingOwner = await _hardhat.default.Diamond.pendingOwner();\n(0, _chai.expect)(pendingOwner).to.equal(wrongOwner);\n// Fragment and signature for acceptOwnersip\nconst functionFragment = _hardhat.default.Diamond.interface.functions[\"acceptOwnership()\"];\nconst signature = _hardhat.default.ethers.utils.Interface.getSighash(functionFragment);\nconst OldOwnershipFacet = await _hardhat.default.Diamond.facetAddress(signature);\nconst [NewOwnershipFacet, allOwnershipFacetSignatures] = await _hardhat.default.deploy(\"DiamondOwnershipFacet\", {\n    deploymentName: \"DiamondOwnershipFacet2\"\n});\n// Only replace a single function, we could replace all of them\nconst Cut = {\n    facetAddress: NewOwnershipFacet.address,\n    action: _types.FacetCutAction.Replace,\n    functionSelectors: [\n        signature\n    ]\n};\n// We will set a correct owner with delegatecall into the Diamond itself with the cut transaction\nconst correctOwner = _hardhat.default.addr.userOne;\nconst initData = await _hardhat.default.Diamond.populateTransaction.transferOwnership(correctOwner);\nconst tx = await _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nawait tx.wait();\n// Ensure function exists and revert is for invalid address instead of missing function\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.nonadmin).acceptOwnership()).to.be.revertedWith(_test.Error.DIAMOND_INVALID_PENDING_OWNER);\n// Ensure one function is contained in the new facet\nconst functionsNewFacet = await _hardhat.default.Diamond.facetFunctionSelectors(NewOwnershipFacet.address);\n(0, _chai.expect)(functionsNewFacet.length).to.equal(1);\n(0, _chai.expect)(functionsNewFacet).to.have.members([\n    signature\n]);\n// Ensure rest are in the previous one\nconst functionsOldFacet = await _hardhat.default.Diamond.facetFunctionSelectors(OldOwnershipFacet);\n(0, _chai.expect)(functionsOldFacet).to.not.have.members([\n    signature\n]);\n(0, _chai.expect)(functionsOldFacet.length).to.equal(allOwnershipFacetSignatures.length - 1);\n// Ensure correct owner can now accept the ownership\n(0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).acceptOwnership());\nconst currentOwner = await _hardhat.default.Diamond.owner();\n(0, _chai.expect)(currentOwner).to.equal(correctOwner);",
                  "err": {},
                  "uuid": "ec17b278-a762-40fd-8ff1-c559940b2988",
                  "parentUUID": "84f46e4a-f07d-41cc-a044-cfc7fb429f0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can upgrade state",
                  "fullTitle": "Diamond #upgrades can upgrade state",
                  "timedOut": false,
                  "duration": 386,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);\nconst Factory = await _smock.smock.mock(\"SmockInit\");\nconst SmockInit = await Factory.deploy();\nconst tx = await SmockInit.populateTransaction.upgradeState();\nawait _hardhat.default.Diamond.upgradeState(tx.to, tx.data);\n(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(false);",
                  "err": {},
                  "uuid": "46296c3d-fdf4-41df-bbe7-a073723197d7",
                  "parentUUID": "84f46e4a-f07d-41cc-a044-cfc7fb429f0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can preserve old state when extending storage layout",
                  "fullTitle": "Diamond #upgrades can preserve old state when extending storage layout",
                  "timedOut": false,
                  "duration": 713,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.initialized()).to.equal(true);\n// Add the first facet\nconst Factory = await _smock.smock.mock(\"SmockFacet\");\nconst SmockFacet = await Factory.deploy();\nconst [SmockInitializer] = await _hardhat.default.deploy(\"SmockInit\");\nconst signatures = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet__factory.abi\n]);\nconst Cut = {\n    facetAddress: SmockFacet.address,\n    functionSelectors: signatures,\n    action: _types.FacetCutAction.Add\n};\nconst initData = await SmockInitializer.populateTransaction.initialize(_hardhat.default.addr.userOne);\nawait _hardhat.default.Diamond.diamondCut([\n    Cut\n], initData.to, initData.data);\nconst Diamond = await _hardhat.default.ethers.getContractAt(\"SmockFacet\", _hardhat.default.Diamond.address);\nconst isInitialized = await Diamond.smockInitialized();\n(0, _chai.expect)(isInitialized).to.equal(true);\n// Add facet with extended state\n// Add the first facet\nconst Factory2 = await _smock.smock.mock(\"SmockFacet2\");\nconst SmockFacet2 = await Factory2.deploy();\nconst signatures2 = _hardhat.default.getSignatures([\n    ..._typechain.SmockFacet2__factory.abi\n]);\nconst Cut2 = {\n    facetAddress: SmockFacet2.address,\n    functionSelectors: signatures2,\n    action: _types.FacetCutAction.Add\n};\n// Initializer only sets the new extended value, does not touch old storage\nconst initData2 = await SmockFacet2.populateTransaction.initialize();\nawait _hardhat.default.Diamond.diamondCut([\n    Cut2\n], initData2.to, initData2.data);\n// Here we have appended the storage layout with the `extended` bool property.\nconst DiamondExtended = await _hardhat.default.ethers.getContractAt(\"SmockFacet2\", _hardhat.default.Diamond.address);\nconst initializedAfterExtend = await DiamondExtended.getOldStructValueFromExtended();\nconst extendedValue = await DiamondExtended.getNewStructValueFromExtended();\n// Old values remain\n(0, _chai.expect)(initializedAfterExtend).to.equal(true);\n// And we get new ones\n(0, _chai.expect)(extendedValue).to.equal(true);",
                  "err": {},
                  "uuid": "f4808bc2-de53-4980-b7a6-8209af13f2b1",
                  "parentUUID": "84f46e4a-f07d-41cc-a044-cfc7fb429f0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c589f4f-ad35-4f3c-9f61-045daf012ec9",
                "e7fe838f-4c95-462c-a331-6b99f6b5cbce",
                "52c6506f-5ad8-4987-b08e-9e4002a564a4",
                "ec17b278-a762-40fd-8ff1-c559940b2988",
                "46296c3d-fdf4-41df-bbe7-a073723197d7",
                "f4808bc2-de53-4980-b7a6-8209af13f2b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2043,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f72734d9-dcdf-4633-b60e-25d2f424ceab",
          "title": "Forking",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
          "file": "/src/test/forking/00-setup.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4e0ca4d5-fa24-46c8-b43b-3c12225533c1",
              "title": "#setup",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get Kresko from the companion network locally",
                  "fullTitle": "Forking #setup should get Kresko from the companion network locally",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "05109e48-f457-4156-b7fa-e19d5a96dc69",
                  "parentUUID": "4e0ca4d5-fa24-46c8-b43b-3c12225533c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "05109e48-f457-4156-b7fa-e19d5a96dc69"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "ab5bda7c-4462-4864-bd56-47ef21c87059",
              "title": "#rate-upgrade-11-04-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be able to deploy facets",
                  "fullTitle": "Forking #rate-upgrade-11-04-2023 should be able to deploy facets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "2de0b33f-5568-4000-b7fd-e2d759990f86",
                  "parentUUID": "ab5bda7c-4462-4864-bd56-47ef21c87059",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "2de0b33f-5568-4000-b7fd-e2d759990f86"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "6bf0d7a3-64e4-457c-9bb8-acc76a8759dc",
              "title": "#facet-upgrade-16-05-2023",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/forking/00-setup.ts",
              "file": "/src/test/forking/00-setup.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works",
                  "fullTitle": "Forking #facet-upgrade-16-05-2023 works",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ff3ce159-10ce-4bc5-bf20-5d82335e06e7",
                  "parentUUID": "6bf0d7a3-64e4-457c-9bb8-acc76a8759dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "ff3ce159-10ce-4bc5-bf20-5d82335e06e7"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "2d05c2f8-a98a-4a34-b9e5-2913ba106437",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
          "file": "/src/test/krasset/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "ef1aed72-ff29-4190-9e9c-bdebe6b6f3f2",
              "parentUUID": "2d05c2f8-a98a-4a34-b9e5-2913ba106437",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "77e76460-e55f-4aa5-b62c-4a9e5577ba63",
              "title": "#initialization - anchor",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - anchor\"",
                  "fullTitle": "KreskoAsset #initialization - anchor \"before each\" hook in \"#initialization - anchor\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = this.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "907c275d-b116-4d0b-adc7-2cb0d089548b",
                  "parentUUID": "77e76460-e55f-4aa5-b62c-4a9e5577ba63",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize twice",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAsset.initialize(name, symbol, 18, _hardhat.default.addr.deployer, _hardhat.default.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "0ab342aa-1363-41dc-b7d1-a51d6b20fd21",
                  "parentUUID": "77e76460-e55f-4aa5-b62c-4a9e5577ba63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - anchor cant initialize implementation",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await _hardhat.default.deployments.get(symbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(_hardhat.default.ethers.constants.AddressZero);\nconst KreskoAssetImpl = await _hardhat.default.ethers.getContractAt(\"KreskoAsset\", implementationAddress);\nawait (0, _chai.expect)(KreskoAssetImpl.initialize(name, symbol, 18, _hardhat.default.addr.deployer, _hardhat.default.Diamond.address)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "0aecb689-918c-4df9-bcd2-1f15b62d9453",
                  "parentUUID": "77e76460-e55f-4aa5-b62c-4a9e5577ba63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - anchor sets correct state",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAsset.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(symbol);\n(0, _chai.expect)(await KreskoAsset.kresko()).to.equal(_hardhat.default.Diamond.address);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.hasRole(_test.Role.OPERATOR, _hardhat.default.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(\"200000000000000000000\");\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "16542c59-9e74-4c53-a905-61ac35b70b36",
                  "parentUUID": "77e76460-e55f-4aa5-b62c-4a9e5577ba63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - anchor can reinitialize metadata",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAsset.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAsset.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAsset.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "760a2087-7a10-4c33-8909-c10eae0d172e",
                  "parentUUID": "77e76460-e55f-4aa5-b62c-4a9e5577ba63",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ab342aa-1363-41dc-b7d1-a51d6b20fd21",
                "0aecb689-918c-4df9-bcd2-1f15b62d9453",
                "16542c59-9e74-4c53-a905-61ac35b70b36",
                "760a2087-7a10-4c33-8909-c10eae0d172e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "1811d9da-72d0-4b6f-8876-f98a4890c951",
              "title": "#initialization - wrapped",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/00-init.ts",
              "file": "/src/test/krasset/00-init.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#initialization - wrapped\"",
                  "fullTitle": "KreskoAsset #initialization - wrapped \"before each\" hook in \"#initialization - wrapped\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = _hardhat.default.krAssets.find((k)=>k.deployArgs.name === name);\nKreskoAsset = deployment.contract;\nKreskoAssetAnchor = deployment.anchor;",
                  "err": {},
                  "uuid": "4c160f80-d56b-419b-bbc9-7bdda010f2b7",
                  "parentUUID": "1811d9da-72d0-4b6f-8876-f98a4890c951",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cant initialize twice",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize twice",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(KreskoAssetAnchor.initialize(KreskoAsset.address, name, symbol, _hardhat.default.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "c8d42612-ef15-4cd0-ba4a-3e7259adccef",
                  "parentUUID": "1811d9da-72d0-4b6f-8876-f98a4890c951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize implementation",
                  "fullTitle": "KreskoAsset #initialization - wrapped cant initialize implementation",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const deployment = await _hardhat.default.deployments.get(_shared.anchorTokenPrefix + symbol);\nconst implementationAddress = deployment.implementation;\n(0, _chai.expect)(implementationAddress).to.not.equal(_hardhat.default.ethers.constants.AddressZero);\nconst KreskoAssetAnchorImpl = await _hardhat.default.ethers.getContractAt(\"KreskoAssetAnchor\", implementationAddress);\nawait (0, _chai.expect)(KreskoAssetAnchorImpl.initialize(KreskoAsset.address, name, symbol, _hardhat.default.addr.deployer)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);",
                  "err": {},
                  "uuid": "12444c3a-f818-4719-8666-af2b5c17e1a0",
                  "parentUUID": "1811d9da-72d0-4b6f-8876-f98a4890c951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can reinitialize metadata",
                  "fullTitle": "KreskoAsset #initialization - wrapped can reinitialize metadata",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newName = \"foo\";\nconst newSymbol = \"bar\";\nawait (0, _chai.expect)(KreskoAssetAnchor.reinitializeERC20(newName, newSymbol, 2)).to.not.be.revertedWith(_test.Error.ALREADY_INITIALIZED_OZ);\n(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(newName);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(newSymbol);",
                  "err": {},
                  "uuid": "75a40165-fb3c-4732-86a9-20f830cc2067",
                  "parentUUID": "1811d9da-72d0-4b6f-8876-f98a4890c951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sets correct state",
                  "fullTitle": "KreskoAsset #initialization - wrapped sets correct state",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await KreskoAssetAnchor.name()).to.equal(name);\n(0, _chai.expect)(await KreskoAssetAnchor.symbol()).to.equal(_shared.anchorTokenPrefix + symbol);\n(0, _chai.expect)(await KreskoAssetAnchor.asset()).to.equal(KreskoAsset.address);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.ADMIN, _hardhat.default.addr.deployer)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.hasRole(_test.Role.OPERATOR, _hardhat.default.Diamond.address)).to.equal(true);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(\"200000000000000000000\");\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(await KreskoAsset.totalSupply());\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).to.equal(0);\n(0, _chai.expect)(rebaseInfo.positive).to.equal(false);",
                  "err": {},
                  "uuid": "8de4fe50-eace-4c97-8d72-22ed0bae67fc",
                  "parentUUID": "1811d9da-72d0-4b6f-8876-f98a4890c951",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8d42612-ef15-4cd0-ba4a-3e7259adccef",
                "12444c3a-f818-4719-8666-af2b5c17e1a0",
                "75a40165-fb3c-4732-86a9-20f830cc2067",
                "8de4fe50-eace-4c97-8d72-22ed0bae67fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c6b07f4d-3123-4e63-87af-9cb426c428a9",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
          "file": "/src/test/krasset/01-erc20.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "4c879f15-c514-4350-8a72-d97ab4632bdd",
              "parentUUID": "c6b07f4d-3123-4e63-87af-9cb426c428a9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.owner = _hardhat.default.users.deployer;\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol);\nthis.mintAmount = 125;\nawait this.krAsset.contract.grantRole(_test.Role.OPERATOR, this.owner.address);",
              "err": {},
              "uuid": "a2c52999-3063-4f20-b5c8-65d15a4cb265",
              "parentUUID": "c6b07f4d-3123-4e63-87af-9cb426c428a9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8a9bc1ff-9145-4ba7-bdbf-d34bab6b39f8",
              "title": "#mint",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to mint to their own address",
                  "fullTitle": "KreskoAsset #mint should allow the owner to mint to their own address",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(this.owner.address, this.mintAmount);\n// Check total supply and owner's balances increased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "d5addc55-3a71-479e-9b89-1cf8f839eaa2",
                  "parentUUID": "8a9bc1ff-9145-4ba7-bdbf-d34bab6b39f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the asset owner to mint to another address",
                  "fullTitle": "KreskoAsset #mint should allow the asset owner to mint to another address",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);\nawait this.krAsset.contract.connect(this.owner).mint(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances increased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "0700b000-bff7-401b-9ab5-a803ecb0f58b",
                  "parentUUID": "8a9bc1ff-9145-4ba7-bdbf-d34bab6b39f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-owner addresses to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow non-owner addresses to mint tokens",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\nawait (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.userOne).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userOne.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and all account balances unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "516d4fcb-1079-4bfd-a2f9-ea3f5762be5b",
                  "parentUUID": "8a9bc1ff-9145-4ba7-bdbf-d34bab6b39f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow admin to mint tokens",
                  "fullTitle": "KreskoAsset #mint should not allow admin to mint tokens",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.renounceRole(_test.Role.OPERATOR, this.owner.address);\nawait (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.admin).mint(this.owner.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.admin.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);",
                  "err": {},
                  "uuid": "2a6edc90-3127-4f07-83b4-902e2c386ef3",
                  "parentUUID": "8a9bc1ff-9145-4ba7-bdbf-d34bab6b39f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5addc55-3a71-479e-9b89-1cf8f839eaa2",
                "0700b000-bff7-401b-9ab5-a803ecb0f58b",
                "516d4fcb-1079-4bfd-a2f9-ea3f5762be5b",
                "2a6edc90-3127-4f07-83b4-902e2c386ef3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 153,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "417bf1b4-5853-430b-8872-0affe4bf8e52",
              "title": "#burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/01-erc20.ts",
              "file": "/src/test/krasset/01-erc20.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#burn\"",
                  "fullTitle": "KreskoAsset #burn \"before each\" hook in \"#burn\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.mintAmount = 250;\nawait this.krAsset.contract.connect(this.owner).mint(_hardhat.default.users.userOne.address, this.mintAmount);",
                  "err": {},
                  "uuid": "e08167bf-1708-42fc-8368-6ddb51e0fba2",
                  "parentUUID": "417bf1b4-5853-430b-8872-0affe4bf8e52",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow the owner to burn tokens from user's address (without token allowance)",
                  "fullTitle": "KreskoAsset #burn should allow the owner to burn tokens from user's address (without token allowance)",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);",
                  "err": {},
                  "uuid": "9c68c9ed-2c10-4704-866a-2da23b4782be",
                  "parentUUID": "417bf1b4-5853-430b-8872-0affe4bf8e52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the operator to burn tokens from user's address without changing existing allowances",
                  "fullTitle": "KreskoAsset #burn should allow the operator to burn tokens from user's address without changing existing allowances",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.krAsset.contract.connect(this.owner).approve(_hardhat.default.users.userOne.address, this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.allowance(this.owner.address, _hardhat.default.users.userOne.address)).to.equal(this.mintAmount);\nawait this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, this.mintAmount);\n// Check total supply and user's balances decreased\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(0);\n// Confirm that owner doesn't hold any tokens\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(this.owner.address)).to.equal(0);\n// Confirm that token allowances are unchanged\n(0, _chai.expect)(await this.krAsset.contract.allowance(this.owner.address, _hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "60152d66-ca45-4f61-a38c-e867f7d016f3",
                  "parentUUID": "417bf1b4-5853-430b-8872-0affe4bf8e52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow the operator to burn more tokens than user holds",
                  "fullTitle": "KreskoAsset #burn should not allow the operator to burn more tokens than user holds",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst overUserBalance = Number(userBalance) + 1;\nawait (0, _chai.expect)(this.krAsset.contract.connect(this.owner).burn(_hardhat.default.users.userOne.address, overUserBalance)).to.be.reverted;\n// Check total supply and user's balances are unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "f942481f-a90b-4175-be4c-363229242168",
                  "parentUUID": "417bf1b4-5853-430b-8872-0affe4bf8e52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-operator addresses to burn tokens",
                  "fullTitle": "KreskoAsset #burn should not allow non-operator addresses to burn tokens",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _chai.expect)(this.krAsset.contract.connect(_hardhat.default.users.userTwo).burn(_hardhat.default.users.userOne.address, this.mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userTwo.address.toLowerCase()} is missing role 0x112e48a576fb3a75acc75d9fcf6e0bc670b27b1dbcd2463502e10e68cf57d6fd`);\n// Check total supply and user's balances unchanged\n(0, _chai.expect)(await this.krAsset.contract.totalSupply()).to.equal(this.mintAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address)).to.equal(this.mintAmount);",
                  "err": {},
                  "uuid": "26583b44-48e6-4cf0-a0da-27ae5d815f22",
                  "parentUUID": "417bf1b4-5853-430b-8872-0affe4bf8e52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c68c9ed-2c10-4704-866a-2da23b4782be",
                "60152d66-ca45-4f61-a38c-e867f7d016f3",
                "f942481f-a90b-4175-be4c-363229242168",
                "26583b44-48e6-4cf0-a0da-27ae5d815f22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 176,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ba16d772-9b45-4ace-b55a-e3a1b98e96f9",
          "title": "KreskoAsset",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
          "file": "/src/test/krasset/02-krasset.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "f7e887a3-d26c-4eff-806e-85bf7e4e0110",
              "parentUUID": "ba16d772-9b45-4ace-b55a-e3a1b98e96f9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAsset\"",
              "fullTitle": "KreskoAsset \"before each\" hook in \"KreskoAsset\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = hre.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol).contract;\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer);",
              "err": {},
              "uuid": "837c0fce-4d66-45aa-8228-a3944e4ca5a5",
              "parentUUID": "ba16d772-9b45-4ace-b55a-e3a1b98e96f9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c4966f5a-d589-44ee-ad31-fb25ed218b70",
              "title": "#rebase",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
              "file": "/src/test/krasset/02-krasset.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can set a positive rebase",
                  "fullTitle": "KreskoAsset #rebase can set a positive rebase",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = true;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(true);",
                  "err": {},
                  "uuid": "a24af9d0-d901-4994-b1a1-eb81174995a2",
                  "parentUUID": "c4966f5a-d589-44ee-ad31-fb25ed218b70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can set a negative rebase",
                  "fullTitle": "KreskoAsset #rebase can set a negative rebase",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(\"1.525\");\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(true);\nconst rebaseInfo = await KreskoAsset.rebaseInfo();\n(0, _chai.expect)(rebaseInfo.denominator).equal(denominator);\n(0, _chai.expect)(rebaseInfo.positive).equal(false);",
                  "err": {},
                  "uuid": "9ea92198-d7c9-4d88-9171-043a4fb9a37b",
                  "parentUUID": "c4966f5a-d589-44ee-ad31-fb25ed218b70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can be disabled by setting the denominator to 1 ether",
                  "fullTitle": "KreskoAsset #rebase can be disabled by setting the denominator to 1 ether",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const denominator = (0, _lib.toBig)(1);\nconst positive = false;\nawait (0, _chai.expect)(KreskoAsset.rebase(denominator, positive, [])).to.not.be.reverted;\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);",
                  "err": {},
                  "uuid": "21af71b4-f78c-472c-b5bf-3d08113751cc",
                  "parentUUID": "c4966f5a-d589-44ee-ad31-fb25ed218b70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "4a7ee12d-9da3-4d65-918a-92ba19acb7f9",
                  "title": "#balance + supply",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has no effect when not enabled",
                      "fullTitle": "KreskoAsset #rebase #balance + supply has no effect when not enabled",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAsset.isRebased()).to.equal(false);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);",
                      "err": {},
                      "uuid": "06fc66e0-3b7f-4ba8-b9f3-0128ba123b36",
                      "parentUUID": "4a7ee12d-9da3-4d65-918a-92ba19acb7f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 2",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "51a47788-daad-44dd-8ff3-bbedd393d66c",
                      "parentUUID": "4a7ee12d-9da3-4d65-918a-92ba19acb7f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase @ 3",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "0a95529f-4540-4f68-beed-0c75be4dda98",
                      "parentUUID": "4a7ee12d-9da3-4d65-918a-92ba19acb7f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "increases balance and supply with positive rebase  @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply increases balance and supply with positive rebase  @ 100",
                      "timedOut": false,
                      "duration": 36,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = true;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.mul(denominator));",
                      "err": {},
                      "uuid": "25b5d044-61da-4dc8-82f4-2ca10cd1b99b",
                      "parentUUID": "4a7ee12d-9da3-4d65-918a-92ba19acb7f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 2",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 2",
                      "timedOut": false,
                      "duration": 37,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 2;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "1a0060ed-bc67-4a6a-90bd-aa2923ab8089",
                      "parentUUID": "4a7ee12d-9da3-4d65-918a-92ba19acb7f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 3",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 3",
                      "timedOut": false,
                      "duration": 33,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 3;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "2e371a91-d859-41ed-abef-622c21c1c1db",
                      "parentUUID": "4a7ee12d-9da3-4d65-918a-92ba19acb7f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "reduces balance and supply with negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #balance + supply reduces balance and supply with negative rebase @ 100",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const denominator = 100;\nconst positive = false;\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount.div(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(_test.defaultMintAmount.div(denominator));",
                      "err": {},
                      "uuid": "619c216b-a1ec-4ca8-8706-b8fbb89dae44",
                      "parentUUID": "4a7ee12d-9da3-4d65-918a-92ba19acb7f9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "06fc66e0-3b7f-4ba8-b9f3-0128ba123b36",
                    "51a47788-daad-44dd-8ff3-bbedd393d66c",
                    "0a95529f-4540-4f68-beed-0c75be4dda98",
                    "25b5d044-61da-4dc8-82f4-2ca10cd1b99b",
                    "1a0060ed-bc67-4a6a-90bd-aa2923ab8089",
                    "2e371a91-d859-41ed-abef-622c21c1c1db",
                    "619c216b-a1ec-4ca8-8706-b8fbb89dae44"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 232,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "cd19e196-636d-49a3-bc04-636fabb12e29",
                  "title": "#transfer",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/02-krasset.ts",
                  "file": "/src/test/krasset/02-krasset.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "has default transfer behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 65,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "bfaf1abf-da86-4aed-b4b2-23f190146e68",
                      "parentUUID": "cd19e196-636d-49a3-bc04-636fabb12e29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transfer behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transfer behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.transfer(hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));",
                      "err": {},
                      "uuid": "d63248bc-d665-43bf-ad64-d54affe1432d",
                      "parentUUID": "cd19e196-636d-49a3-bc04-636fabb12e29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase",
                      "timedOut": false,
                      "duration": 130,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "051843c2-7125-4274-b0d0-dd599881aefb",
                      "parentUUID": "cd19e196-636d-49a3-bc04-636fabb12e29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after positive rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after positive rebase @ 100",
                      "timedOut": false,
                      "duration": 130,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.mul(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "3fab25a8-610c-429a-b3ae-4bd8a91f31f0",
                      "parentUUID": "cd19e196-636d-49a3-bc04-636fabb12e29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase",
                      "timedOut": false,
                      "duration": 132,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "10d42f67-c121-401b-a91c-290bd48c526b",
                      "parentUUID": "cd19e196-636d-49a3-bc04-636fabb12e29",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "has default transferFrom behaviour after negative rebase @ 100",
                      "fullTitle": "KreskoAsset #rebase #transfer has default transferFrom behaviour after negative rebase @ 100",
                      "timedOut": false,
                      "duration": 137,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transferAmount = (0, _lib.toBig)(1);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.mint(hre.addr.userOne, _test.defaultMintAmount);\nconst denominator = 100;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nawait KreskoAsset.approve(hre.addr.userOne, transferAmount);\nconst rebaseInfodDefaultMintAMount = _test.defaultMintAmount.div(denominator);\nawait KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.userOne)).to.equal(rebaseInfodDefaultMintAMount.add(transferAmount));\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebaseInfodDefaultMintAMount.sub(transferAmount));\nawait (0, _chai.expect)(KreskoAsset.connect(hre.users.userOne).transferFrom(hre.addr.deployer, hre.addr.userOne, transferAmount)).to.be.revertedWith(_test.Error.NOT_ENOUGH_ALLOWANCE);\n(0, _chai.expect)(await KreskoAsset.allowance(hre.addr.deployer, hre.addr.userOne)).to.equal(0);",
                      "err": {},
                      "uuid": "f154dc92-a723-443c-a8d8-eae5daf2da3b",
                      "parentUUID": "cd19e196-636d-49a3-bc04-636fabb12e29",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bfaf1abf-da86-4aed-b4b2-23f190146e68",
                    "d63248bc-d665-43bf-ad64-d54affe1432d",
                    "051843c2-7125-4274-b0d0-dd599881aefb",
                    "3fab25a8-610c-429a-b3ae-4bd8a91f31f0",
                    "10d42f67-c121-401b-a91c-290bd48c526b",
                    "f154dc92-a723-443c-a8d8-eae5daf2da3b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 656,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "a24af9d0-d901-4994-b1a1-eb81174995a2",
                "9ea92198-d7c9-4d88-9171-043a4fb9a37b",
                "21af71b4-f78c-472c-b5bf-3d08113751cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 99,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "a041124c-d524-4d71-accc-645cc64fd6ea",
          "title": "KreskoAssetAnchor",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
          "file": "/src/test/krasset/03-krasset-anchor.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "4d3542e1-b9ab-4ac4-abce-eda32415ef10",
              "parentUUID": "a041124c-d524-4d71-accc-645cc64fd6ea",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"KreskoAssetAnchor\"",
              "fullTitle": "KreskoAssetAnchor \"before each\" hook in \"KreskoAssetAnchor\"",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const asset = hre.krAssets.find((asset)=>asset.deployArgs.symbol === _test.defaultKrAssetArgs.symbol);\nKreskoAsset = asset.contract;\nKreskoAssetAnchor = asset.anchor;\n// Grant minting rights for test deployer\nawait Promise.all([\n    KreskoAsset.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAssetAnchor.grantRole(_test.Role.OPERATOR, hre.addr.deployer),\n    KreskoAsset.approve(KreskoAssetAnchor.address, hre.ethers.constants.MaxUint256)\n]);",
              "err": {},
              "uuid": "b026b181-6b8a-4551-a023-e3f3d591cf19",
              "parentUUID": "a041124c-d524-4d71-accc-645cc64fd6ea",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9ffc9310-0144-4e32-94e9-2ff9ff6a73cf",
              "title": "#minting and burning",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
              "file": "/src/test/krasset/03-krasset-anchor.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "tracks the supply of underlying",
                  "fullTitle": "KreskoAssetAnchor #minting and burning tracks the supply of underlying",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);\nawait KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(_test.defaultMintAmount.add(_test.defaultMintAmount));\n(0, _chai.expect)(await KreskoAssetAnchor.totalSupply()).to.equal(0);",
                  "err": {},
                  "uuid": "340c25cb-e8e0-49c6-a83f-c431029ad2b8",
                  "parentUUID": "9ffc9310-0144-4e32-94e9-2ff9ff6a73cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mints 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning mints 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.mint(_test.defaultMintAmount, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);",
                  "err": {},
                  "uuid": "6ce43aab-8d67-444e-a6df-ea8d6d5c57d1",
                  "parentUUID": "9ffc9310-0144-4e32-94e9-2ff9ff6a73cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deposits 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning deposits 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(_test.defaultMintAmount, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);",
                  "err": {},
                  "uuid": "a8e5e413-cc26-479e-903c-a5e6cfdcb47d",
                  "parentUUID": "9ffc9310-0144-4e32-94e9-2ff9ff6a73cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "redeems 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning redeems 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 250,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.mint(_test.defaultMintAmount, hre.addr.deployer);\nawait KreskoAssetAnchor.redeem(_test.defaultMintAmount, hre.addr.deployer, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);",
                  "err": {},
                  "uuid": "080595ac-2f44-478b-9a16-d30717aa5d54",
                  "parentUUID": "9ffc9310-0144-4e32-94e9-2ff9ff6a73cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "withdraws 1:1 with no rebases",
                  "fullTitle": "KreskoAssetAnchor #minting and burning withdraws 1:1 with no rebases",
                  "timedOut": false,
                  "duration": 239,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(_test.defaultMintAmount, hre.addr.deployer);\nawait KreskoAssetAnchor.withdraw(_test.defaultMintAmount, hre.addr.deployer, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(KreskoAssetAnchor.address)).to.equal(0);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);",
                  "err": {},
                  "uuid": "19b7aab5-19e6-4fb0-ab9b-f674ca339048",
                  "parentUUID": "9ffc9310-0144-4e32-94e9-2ff9ff6a73cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "08374943-228d-41f2-be06-4bffd995f334",
                  "title": "#rebases",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                  "file": "/src/test/krasset/03-krasset-anchor.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "24c1b6a3-61ea-4b15-be5b-5194e7337361",
                      "title": "#conversions",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/03-krasset-anchor.ts",
                      "file": "/src/test/krasset/03-krasset-anchor.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 277,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.mint(_test.defaultMintAmount, hre.addr.deployer);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedAmount = _test.defaultMintAmount.mul(denominator);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(_test.defaultMintAmount, hre.addr.deployer, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebasedAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "f83cfa2d-d7eb-421b-b666-55fbc47b0f4e",
                          "parentUUID": "24c1b6a3-61ea-4b15-be5b-5194e7337361",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:2 after 1:2 rebase",
                          "timedOut": false,
                          "duration": 269,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(_test.defaultMintAmount, hre.addr.deployer);\nconst denominator = 2;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedAmount = _test.defaultMintAmount.mul(denominator);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hre.addr.deployer, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebasedAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "73838617-5e28-43cf-b386-daa242f704b0",
                          "parentUUID": "24c1b6a3-61ea-4b15-be5b-5194e7337361",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 276,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.mint(_test.defaultMintAmount, hre.addr.deployer);\nconst denominator = 6;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedAmount = _test.defaultMintAmount.mul(denominator);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(_test.defaultMintAmount, hre.addr.deployer, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebasedAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "eb0841c8-2bfb-4258-8dc2-e05d52ca7693",
                          "parentUUID": "24c1b6a3-61ea-4b15-be5b-5194e7337361",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 1:6 after 1:6 rebase",
                          "timedOut": false,
                          "duration": 279,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(_test.defaultMintAmount, hre.addr.deployer);\nconst denominator = 6;\nconst positive = true;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedAmount = _test.defaultMintAmount.mul(denominator);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hre.addr.deployer, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebasedAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "b004f519-f186-4fc7-970f-97078f8bf1ab",
                          "parentUUID": "24c1b6a3-61ea-4b15-be5b-5194e7337361",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 274,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.mint(_test.defaultMintAmount, hre.addr.deployer);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedAmount = _test.defaultMintAmount.div(denominator);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(_test.defaultMintAmount, hre.addr.deployer, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebasedAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "30b7536d-e17b-4e89-ac69-27c9a92cb34b",
                          "parentUUID": "24c1b6a3-61ea-4b15-be5b-5194e7337361",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 2:1 after 2:1 rebase",
                          "timedOut": false,
                          "duration": 265,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(_test.defaultMintAmount, hre.addr.deployer);\nconst denominator = 2;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedAmount = _test.defaultMintAmount.div(denominator);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hre.addr.deployer, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebasedAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "f35bdb9f-6f76-4b5a-97b4-df21ee345e63",
                          "parentUUID": "24c1b6a3-61ea-4b15-be5b-5194e7337361",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions mints 1:1 and redeems 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 273,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.mint(_test.defaultMintAmount, hre.addr.deployer);\nconst denominator = 6;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedAmount = _test.defaultMintAmount.div(denominator);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.redeem(_test.defaultMintAmount, hre.addr.deployer, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebasedAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "7398f2b0-c587-4fb1-90cb-3923ab383db9",
                          "parentUUID": "24c1b6a3-61ea-4b15-be5b-5194e7337361",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "fullTitle": "KreskoAssetAnchor #minting and burning #rebases #conversions deposits 1:1 and withdraws 6:1 after 6:1 rebase",
                          "timedOut": false,
                          "duration": 270,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await KreskoAsset.mint(hre.addr.deployer, _test.defaultMintAmount);\nawait KreskoAssetAnchor.deposit(_test.defaultMintAmount, hre.addr.deployer);\nconst denominator = 6;\nconst positive = false;\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst rebasedAmount = _test.defaultMintAmount.div(denominator);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(_test.defaultMintAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.totalAssets()).to.equal(rebasedAmount);\nawait KreskoAssetAnchor.withdraw(rebasedAmount, hre.addr.deployer, hre.addr.deployer);\n(0, _chai.expect)(await KreskoAsset.balanceOf(hre.addr.deployer)).to.equal(rebasedAmount);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(hre.addr.deployer)).to.equal(0);\n(0, _chai.expect)(await KreskoAssetAnchor.balanceOf(KreskoAsset.address)).to.equal(0);",
                          "err": {},
                          "uuid": "5ff039a4-0e1a-4610-8441-74e375a8e00d",
                          "parentUUID": "24c1b6a3-61ea-4b15-be5b-5194e7337361",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f83cfa2d-d7eb-421b-b666-55fbc47b0f4e",
                        "73838617-5e28-43cf-b386-daa242f704b0",
                        "eb0841c8-2bfb-4258-8dc2-e05d52ca7693",
                        "b004f519-f186-4fc7-970f-97078f8bf1ab",
                        "30b7536d-e17b-4e89-ac69-27c9a92cb34b",
                        "f35bdb9f-6f76-4b5a-97b4-df21ee345e63",
                        "7398f2b0-c587-4fb1-90cb-3923ab383db9",
                        "5ff039a4-0e1a-4610-8441-74e375a8e00d"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2183,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [
                "340c25cb-e8e0-49c6-a83f-c431029ad2b8",
                "6ce43aab-8d67-444e-a6df-ea8d6d5c57d1",
                "a8e5e413-cc26-479e-903c-a5e6cfdcb47d",
                "080595ac-2f44-478b-9a16-d30717aa5d54",
                "19b7aab5-19e6-4fb0-ab9b-f674ca339048"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 771,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f4a9f2c7-b9e9-474d-a079-26eafae2d6eb",
          "title": "Test KreskoAsset with Rebase and sync",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/krasset/04-krasset-sync-rebase.ts",
          "file": "/src/test/krasset/04-krasset-sync-rebase.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "fullTitle": "Test KreskoAsset with Rebase and sync \"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "0c3d0fa1-528a-4162-be3f-e3ea342aaccd",
              "parentUUID": "f4a9f2c7-b9e9-474d-a079-26eafae2d6eb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "fullTitle": "Test KreskoAsset with Rebase and sync \"before each\" hook in \"Test KreskoAsset with Rebase and sync\"",
              "timedOut": false,
              "duration": 56,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "KreskoAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === \"krETH\").contract;\nconst KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nconst Pair = await (await _hardhat.default.getContractOrFork(\"UniswapV2Factory\")).getPair(KreskoAsset.address, KISS.address);\n// address of KISS-krETH pool\nthis.pool = await _hardhat.ethers.getContractAt(\"UniswapV2Pair\", Pair);\n// Grant minting rights for test deployer\nawait KreskoAsset.grantRole(_test.Role.OPERATOR, _hardhat.default.addr.deployer);",
              "err": {},
              "uuid": "c252a783-abdb-4d89-b7e1-8bbdfece9192",
              "parentUUID": "f4a9f2c7-b9e9-474d-a079-26eafae2d6eb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with no sync of uniswap pools - Reserves not updated",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const denominator = 2;\nconst positive = true;\nconst beforeTotalSupply = await KreskoAsset.totalSupply();\nconst [beforeReserve0, beforeReserve1, beforeTimestamp] = await this.pool.getReserves();\nawait KreskoAsset.mint(_hardhat.default.addr.deployer, _test.defaultMintAmount);\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, []);\nconst [afterReserve0, afterReserve1, afterTimestamp] = await this.pool.getReserves();\n(0, _chai.expect)(await KreskoAsset.balanceOf(_hardhat.default.addr.deployer)).to.equal(_test.defaultMintAmount.mul(denominator));\n(0, _chai.expect)(await KreskoAsset.totalSupply()).to.equal(beforeTotalSupply.add(_test.defaultMintAmount).mul(denominator));\n(0, _chai.expect)(afterReserve0).to.equal(beforeReserve0);\n(0, _chai.expect)(afterReserve1).to.equal(beforeReserve1);\n(0, _chai.expect)(beforeTimestamp).to.equal(afterTimestamp);",
              "err": {},
              "uuid": "d4936057-32c6-4358-9381-b72254e9c6fb",
              "parentUUID": "f4a9f2c7-b9e9-474d-a079-26eafae2d6eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "fullTitle": "Test KreskoAsset with Rebase and sync Rebases the asset with sync of uniswap pools - Reserve should be updated",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const denominator = 2;\nconst positive = true;\nconst [beforeReserve0, beforeReserve1, beforeTimestamp] = await this.pool.getReserves();\nawait KreskoAsset.rebase((0, _lib.toBig)(denominator), positive, [\n    this.pool.address\n]);\nconst [afterReserve0, afterReserve1, afterTimestamp] = await this.pool.getReserves();\nif (beforeReserve0.eq(afterReserve0)) {\n    (0, _chai.expect)(afterReserve1).to.equal(beforeReserve1.mul(denominator));\n} else {\n    (0, _chai.expect)(afterReserve0).to.equal(beforeReserve0.mul(denominator));\n}\n(0, _chai.expect)(afterTimestamp).to.gt(beforeTimestamp);",
              "err": {},
              "uuid": "ce282612-1885-4f2d-b760-b3a4bef92da9",
              "parentUUID": "f4a9f2c7-b9e9-474d-a079-26eafae2d6eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d4936057-32c6-4358-9381-b72254e9c6fb",
            "ce282612-1885-4f2d-b760-b3a4bef92da9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 65,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "1bd47134-3fc9-4952-b342-c3051ecaf8f5",
          "title": "Minter - Init",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
          "file": "/src/test/minter/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Init\"",
              "fullTitle": "Minter - Init \"before each\" hook in \"Minter - Init\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "5431dd4c-c9a8-4b32-a58a-6816becad7a8",
              "parentUUID": "1bd47134-3fc9-4952-b342-c3051ecaf8f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5b417345-3153-4e18-8ce0-1652cd14af1a",
              "title": "#initialization",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/00-init.ts",
              "file": "/src/test/minter/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sets correct initial state",
                  "fullTitle": "Minter - Init #initialization sets correct initial state",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.minterInitializations()).to.equal(1);\nconst { args  } = await (0, _shared.getMinterInitializer)(_hardhat.default);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.ADMIN, args.admin)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_test.Role.SAFETY_COUNCIL, _hardhat.default.Multisig.address)).to.equal(true);\n(0, _chai.expect)(await _hardhat.default.Diamond.feeRecipient()).to.equal(args.treasury);\n(0, _chai.expect)(await _hardhat.default.Diamond.liquidationIncentiveMultiplier()).to.equal(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.minimumCollateralizationRatio()).to.equal(args.minimumCollateralizationRatio);\n(0, _chai.expect)(await _hardhat.default.Diamond.minimumDebtValue()).to.equal(args.minimumDebtValue);",
                  "err": {},
                  "uuid": "4531df0a-0e3e-4c58-89d9-88730a230fe7",
                  "parentUUID": "5b417345-3153-4e18-8ce0-1652cd14af1a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant initialize twice",
                  "fullTitle": "Minter - Init #initialization cant initialize twice",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await _hardhat.default.Diamond.minterInitializations()).to.equal(1);\nconst initializer = await (0, _shared.getMinterInitializer)(_hardhat.default);\nconst initializerContract = await _hardhat.default.getContractOrFork(initializer.name);\nconst tx = await initializerContract.populateTransaction.initialize(initializer.args);\nawait (0, _chai.expect)(_hardhat.default.Diamond.upgradeState(tx.to, tx.data)).to.be.revertedWith(_test.Error.ALREADY_INITIALIZED);",
                  "err": {},
                  "uuid": "b73df404-ac41-45ca-a31d-1f4a59671758",
                  "parentUUID": "5b417345-3153-4e18-8ce0-1652cd14af1a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures all facets correctly",
                  "fullTitle": "Minter - Init #initialization configures all facets correctly",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const facetsOnChain = (await _hardhat.default.Diamond.facets()).map(([facetAddress, functionSelectors])=>({\n        facetAddress,\n        functionSelectors\n    }));\nconst expectedFacets = await Promise.all([\n    ..._shared.minterFacets,\n    ..._shared.diamondFacets\n].map(async (name)=>{\n    const deployment = await _hardhat.default.deployments.get(name);\n    return {\n        facetAddress: deployment.address,\n        functionSelectors: facetsOnChain.find((f)=>f.facetAddress === deployment.address).functionSelectors\n    };\n}));\n(0, _chai.expect)(facetsOnChain).to.have.deep.members(expectedFacets);",
                  "err": {},
                  "uuid": "af8223e1-a4db-4ed2-8c32-8362010349b5",
                  "parentUUID": "5b417345-3153-4e18-8ce0-1652cd14af1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4531df0a-0e3e-4c58-89d9-88730a230fe7",
                "b73df404-ac41-45ca-a31d-1f4a59671758",
                "af8223e1-a4db-4ed2-8c32-8362010349b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 126,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "e1b28953-0185-4053-8c26-df07bd760381",
          "title": "Minter - Configuration",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
          "file": "/src/test/minter/01-configuration.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Configuration\"",
              "fullTitle": "Minter - Configuration \"before each\" hook in \"Minter - Configuration\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "96fee890-382e-4c23-ac1d-f311bb65a819",
              "parentUUID": "e1b28953-0185-4053-8c26-df07bd760381",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c104a3dc-67cc-41f0-8f88-dbda47abd170",
              "title": "#configuration",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/01-configuration.ts",
              "file": "/src/test/minter/01-configuration.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can modify all parameters",
                  "fullTitle": "Minter - Configuration #configuration can modify all parameters",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const Diamond = hre.Diamond.connect(hre.users.deployer);\nconst update = (0, _test.getNewMinterParams)(hre.users.treasury.address);\nawait (0, _chai.expect)(Diamond.updateMinimumCollateralizationRatio(update.minimumCollateralizationRatio)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateMinimumDebtValue(update.minimumDebtValue)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateLiquidationThreshold(update.liquidationThreshold)).to.not.be.reverted;\nawait (0, _chai.expect)(Diamond.updateFeeRecipient(update.feeRecipient)).to.not.be.reverted;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationMultiplier(update.MLM)).to.not.be.reverted;\nconst { minimumCollateralizationRatio , minimumDebtValue , feeRecipient  } = await hre.Diamond.getAllParams();\n(0, _chai.expect)(update.minimumCollateralizationRatio.toBigInt()).to.equal(minimumCollateralizationRatio);\n(0, _chai.expect)(update.minimumDebtValue.toBigInt()).to.equal(minimumDebtValue);\n(0, _chai.expect)(update.feeRecipient).to.equal(feeRecipient);",
                  "err": {},
                  "uuid": "ef64aab4-0b3f-49cb-880d-292894cec030",
                  "parentUUID": "c104a3dc-67cc-41f0-8f88-dbda47abd170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a collateral asset",
                  "fullTitle": "Minter - Configuration #configuration can add a collateral asset",
                  "timedOut": false,
                  "duration": 738,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _collaterals.addMockCollateralAsset)(_test.defaultCollateralArgs);\n(0, _chai.expect)(await hre.Diamond.collateralExists(contract.address)).to.equal(true);\nconst [, oraclePrice] = await hre.Diamond.getCollateralValueAndOraclePrice(contract.address, (0, _lib.toBig)(1), true);\n(0, _chai.expect)(Number(oraclePrice)).to.equal((0, _lib.toBig)(_test.defaultCollateralArgs.price, 8));",
                  "err": {},
                  "uuid": "b7274290-8ba5-402e-9f9c-d200e578a223",
                  "parentUUID": "c104a3dc-67cc-41f0-8f88-dbda47abd170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can add a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can add a kresko asset",
                  "timedOut": false,
                  "duration": 1136,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract , kresko  } = await (0, _krassets.addMockKreskoAsset)();\nconst values = await kresko();\nconst kreskoPriceAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(await hre.Diamond.krAssetExists(contract.address)).to.equal(true);\n(0, _chai.expect)(values.exists).to.equal(true);\n(0, _chai.expect)(values.kFactor).to.equal((0, _lib.toBig)(_test.defaultKrAssetArgs.factor));\n(0, _chai.expect)(kreskoPriceAnswer).to.equal(_test.defaultKrAssetArgs.price);\n(0, _chai.expect)((0, _lib.fromBig)(values.supplyLimit)).to.equal(_test.defaultKrAssetArgs.supplyLimit);\n(0, _chai.expect)((0, _lib.fromBig)(values.closeFee)).to.equal(_test.defaultKrAssetArgs.closeFee);\n(0, _chai.expect)((0, _lib.fromBig)(values.openFee)).to.equal(_test.defaultKrAssetArgs.openFee);",
                  "err": {},
                  "uuid": "2907673d-47ea-44a6-a2a1-4f6973eae14d",
                  "parentUUID": "c104a3dc-67cc-41f0-8f88-dbda47abd170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update AMM oracle",
                  "fullTitle": "Minter - Configuration #configuration can update AMM oracle",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ammOracle = await _smock.smock.fake(\"UniswapV2Oracle\");\nawait hre.Diamond.updateAMMOracle(ammOracle.address);\n(0, _chai.expect)(await hre.Diamond.ammOracle()).to.equal(ammOracle.address);",
                  "err": {},
                  "uuid": "65f1df61-11af-4e0a-8705-95b1b41b85cf",
                  "parentUUID": "c104a3dc-67cc-41f0-8f88-dbda47abd170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update external oracle decimals",
                  "fullTitle": "Minter - Configuration #configuration can update external oracle decimals",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decimals = 8;\nawait hre.Diamond.updateExtOracleDecimals(decimals);\n(0, _chai.expect)(await hre.Diamond.extOracleDecimals()).to.equal(decimals);",
                  "err": {},
                  "uuid": "a27fd87e-8d96-4f7b-9dc6-e159ad2ef7ec",
                  "parentUUID": "c104a3dc-67cc-41f0-8f88-dbda47abd170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update max liquidatable multiplier",
                  "fullTitle": "Minter - Configuration #configuration can update max liquidatable multiplier",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const currentMLM = await hre.Diamond.maxLiquidationMultiplier();\nconst newMLM = (0, _lib.toBig)(1.0002);\n(0, _chai.expect)(currentMLM.eq(newMLM)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateMaxLiquidationMultiplier(newMLM)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.maxLiquidationMultiplier()).eq(newMLM)).to.be.true;",
                  "err": {},
                  "uuid": "1b6fb6b9-00e2-4e74-a57e-28c1b8a4af9b",
                  "parentUUID": "c104a3dc-67cc-41f0-8f88-dbda47abd170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update kFactor of a kresko asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update kFactor of a kresko asset separately",
                  "timedOut": false,
                  "duration": 1016,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _krassets.addMockKreskoAsset)();\nconst oldRatio = (await hre.Diamond.kreskoAsset(contract.address)).kFactor;\nconst newRatio = (0, _lib.toBig)(1.2);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateKFactor(contract.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.kreskoAsset(contract.address)).kFactor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "9a903cd3-8c34-4fea-930e-1b733a8bcbfa",
                  "parentUUID": "c104a3dc-67cc-41f0-8f88-dbda47abd170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update cFactor of a collateral asset separately",
                  "fullTitle": "Minter - Configuration #configuration can update cFactor of a collateral asset separately",
                  "timedOut": false,
                  "duration": 683,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract  } = await (0, _collaterals.addMockCollateralAsset)();\nconst oldRatio = (await hre.Diamond.collateralAsset(contract.address)).factor;\nconst newRatio = (0, _lib.toBig)(0.9);\n(0, _chai.expect)(oldRatio.eq(newRatio)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.updateCFactor(contract.address, newRatio)).to.not.be.reverted;\n(0, _chai.expect)((await hre.Diamond.collateralAsset(contract.address)).factor.eq(newRatio)).to.be.true;",
                  "err": {},
                  "uuid": "b593b113-ce81-4d00-aac8-3038804fa3c7",
                  "parentUUID": "c104a3dc-67cc-41f0-8f88-dbda47abd170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can update values of a kresko asset",
                  "fullTitle": "Minter - Configuration #configuration can update values of a kresko asset",
                  "timedOut": false,
                  "duration": 1469,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { contract , anchor , priceFeed  } = await (0, _krassets.addMockKreskoAsset)();\nconst oracleAnswer = (0, _lib.fromBig)(await priceFeed.latestAnswer(), 8);\nconst kreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(oracleAnswer).to.equal(kreskoAnswer);\n(0, _chai.expect)(oracleAnswer).to.equal(_test.defaultKrAssetArgs.price);\nconst update = {\n    factor: (0, _lib.toBig)(1.2),\n    supplyLimit: 12000,\n    price: 20,\n    closeFee: (0, _lib.toBig)(0.02),\n    openFee: (0, _lib.toBig)(0.02)\n};\nconst [newPriceFeed] = await (0, _oracle.getMockOracleFor)(await contract.name(), update.price);\nawait hre.Diamond.connect(hre.users.deployer).updateKreskoAsset(contract.address, await (0, _krassets.getKrAssetConfig)(anchor.address, update.factor, newPriceFeed.address, newPriceFeed.address, (0, _lib.toBig)(update.supplyLimit), update.closeFee, update.openFee));\nconst newValues = await hre.Diamond.kreskoAsset(contract.address);\nconst updatedOracleAnswer = (0, _lib.fromBig)(await newPriceFeed.latestAnswer(), 8);\nconst newKreskoAnswer = (0, _lib.fromBig)(await hre.Diamond.getKrAssetValue(contract.address, (0, _lib.toBig)(1), true), 8);\n(0, _chai.expect)(newValues.exists).to.equal(true);\n(0, _chai.expect)(Number(newValues.kFactor)).to.equal(Number(update.factor));\n(0, _chai.expect)((0, _lib.fromBig)(newValues.supplyLimit)).to.equal(update.supplyLimit);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(newKreskoAnswer);\n(0, _chai.expect)(updatedOracleAnswer).to.equal(update.price);",
                  "err": {},
                  "uuid": "cf036818-d2e5-4a71-8bef-cd6e5a02fb5a",
                  "parentUUID": "c104a3dc-67cc-41f0-8f88-dbda47abd170",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef64aab4-0b3f-49cb-880d-292894cec030",
                "b7274290-8ba5-402e-9f9c-d200e578a223",
                "2907673d-47ea-44a6-a2a1-4f6973eae14d",
                "65f1df61-11af-4e0a-8705-95b1b41b85cf",
                "a27fd87e-8d96-4f7b-9dc6-e159ad2ef7ec",
                "1b6fb6b9-00e2-4e74-a57e-28c1b8a4af9b",
                "9a903cd3-8c34-4fea-930e-1b733a8bcbfa",
                "b593b113-ce81-4d00-aac8-3038804fa3c7",
                "cf036818-d2e5-4a71-8bef-cd6e5a02fb5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5148,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "cde2d449-d81f-4e7a-a3e9-28430f178197",
          "title": "Minter - Deposit Withdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
          "file": "/src/test/minter/02-deposit-withdraw.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "3b8e0aab-3dff-47cf-bc1a-f81d20c5b51c",
              "parentUUID": "cde2d449-d81f-4e7a-a3e9-28430f178197",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter - Deposit Withdraw\"",
              "fullTitle": "Minter - Deposit Withdraw \"before each\" hook in \"Minter - Deposit Withdraw\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.initialBalance = (0, _lib.toBig)(100000);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n// expect(await this.collateral.contract.balanceOf(hre.users.userOne.address)).to.equal(this.initialBalance);\nthis.depositArgs = {\n    user: _hardhat.default.users.userOne,\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(10000)\n};",
              "err": {},
              "uuid": "aec302dd-54d2-4040-86bb-94f71874dfc8",
              "parentUUID": "cde2d449-d81f-4e7a-a3e9-28430f178197",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7873d3dc-00a5-4a05-ae07-b7312b0e8337",
              "title": "#collateral",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
              "file": "/src/test/minter/02-deposit-withdraw.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "d0877a07-9c8b-4c54-b924-84cf8ddf3aa7",
                  "title": "#deposit",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow an account to deposit whitelisted collateral",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit whitelisted collateral",
                      "timedOut": false,
                      "duration": 47,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Account has no deposited assets\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Account now has deposited assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Account's collateral deposit balances have increased\n(0, _chai.expect)(await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address)).to.equal(this.depositArgs.amount);\n// Kresko contract's collateral balance has increased\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address)).to.equal(this.depositArgs.amount);\n// Account's collateral balance has decreased\n(0, _chai.expect)((0, _lib.fromBig)(await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address))).to.equal((0, _lib.fromBig)(this.initialBalance) - (0, _lib.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "8718f267-82b7-4db6-b8cc-f550a3626bcc",
                      "parentUUID": "d0877a07-9c8b-4c54-b924-84cf8ddf3aa7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an arbitrary account to deposit whitelisted collateral on behalf of another account",
                      "timedOut": false,
                      "duration": 41,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load arbitrary user with sufficient collateral for testing purposes\nconst arbitraryUser = _hardhat.default.users.userThree;\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n// Initially, the array of the user's deposited collateral assets should be empty.\nconst depositedCollateralAssetsBefore = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsBefore).to.deep.equal([]);\n// Deposit collateral\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userThree).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets has been pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositArgs.amount);\n// Confirm the amount as been transferred from the user into Kresko.sol\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositArgs.amount);\n// Confirm the depositor's (arbitraryUser) wallet balance has been adjusted accordingly\nconst depositorBalanceAfter = await this.collateral.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)((0, _lib.fromBig)(depositorBalanceAfter)).to.equal((0, _lib.fromBig)(this.initialBalance) - (0, _lib.fromBig)(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "b79d4b7a-7dc9-4d9b-ba2c-dd66029129bb",
                      "parentUUID": "d0877a07-9c8b-4c54-b924-84cf8ddf3aa7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to deposit more collateral to an existing deposit",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to deposit more collateral to an existing deposit",
                      "timedOut": false,
                      "duration": 42,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit first batch of collateral\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit second batch of collateral\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets hasn't been double-pushed to.\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address\n]);\n// Confirm the amount deposited is recorded for the user.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(this.depositArgs.user.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositArgs.amount.add(this.depositArgs.amount));",
                      "err": {},
                      "uuid": "174d84da-3afb-43da-9a53-a12bbe686c01",
                      "parentUUID": "d0877a07-9c8b-4c54-b924-84cf8ddf3aa7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow an account to have deposited multiple collateral assets",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should allow an account to have deposited multiple collateral assets",
                      "timedOut": false,
                      "duration": 709,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Load user account with a different type of collateral\nconst collateralArgs = {\n    name: \"SecondCollateral\",\n    price: _testutils.defaultOraclePrice,\n    factor: 1,\n    decimals: _testutils.defaultDecimals\n};\nconst { contract , mocks  } = await (0, _collaterals.addMockCollateralAsset)(collateralArgs);\nawait mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userOne.address]: this.initialBalance\n});\nawait mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n// Deposit batch of first collateral type\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount)).not.to.be.reverted;\n// Deposit batch of second collateral type\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, contract.address, this.depositArgs.amount)).not.to.be.reverted;\n// Confirm the array of the user's deposited collateral assets contains both collateral assets\nconst depositedCollateralAssetsAfter = await _hardhat.default.Diamond.getDepositedCollateralAssets(this.depositArgs.user.address);\n(0, _chai.expect)(depositedCollateralAssetsAfter).to.deep.equal([\n    this.collateral.address,\n    contract.address\n]);",
                      "err": {},
                      "uuid": "eb7f9da4-9445-4994-b99d-ddc68f81099f",
                      "parentUUID": "d0877a07-9c8b-4c54-b924-84cf8ddf3aa7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit CollateralDeposited event",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should emit CollateralDeposited event",
                      "timedOut": false,
                      "duration": 18,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await _hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, this.depositArgs.amount);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralDeposited\");\n(0, _chai.expect)(event.account).to.equal(this.depositArgs.user.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.amount).to.equal(this.depositArgs.amount);",
                      "err": {},
                      "uuid": "30a09f34-2461-4d04-b306-e237ade3c281",
                      "parentUUID": "d0877a07-9c8b-4c54-b924-84cf8ddf3aa7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing collateral that has not been whitelisted",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing collateral that has not been whitelisted",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(_hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, \"0x0000000000000000000000000000000000000001\", this.depositArgs.amount)).to.be.revertedWith(_errors.Error.COLLATERAL_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "59aa88eb-22f8-4086-a720-d3abeea511f1",
                      "parentUUID": "d0877a07-9c8b-4c54-b924-84cf8ddf3aa7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if depositing an amount of 0",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if depositing an amount of 0",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)(_hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "dff77671-2c3d-41c4-87fe-a6a911d8c1e8",
                      "parentUUID": "d0877a07-9c8b-4c54-b924-84cf8ddf3aa7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if collateral is not depositable",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit should revert if collateral is not depositable",
                      "timedOut": false,
                      "duration": 67,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { deployer , devTwo , extOne  } = await _hardhat.default.ethers.getNamedSigners();\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    0\n], [\n    deployer,\n    devTwo,\n    extOne\n]);\nconst isDepositPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isDepositPaused).to.equal(true);\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, 0)).to.be.revertedWith(_errors.Error.ZERO_DEPOSIT);",
                      "err": {},
                      "uuid": "a17f74e5-5b06-46a6-948f-ac823bc2130e",
                      "parentUUID": "d0877a07-9c8b-4c54-b924-84cf8ddf3aa7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8718f267-82b7-4db6-b8cc-f550a3626bcc",
                    "b79d4b7a-7dc9-4d9b-ba2c-dd66029129bb",
                    "174d84da-3afb-43da-9a53-a12bbe686c01",
                    "eb7f9da4-9445-4994-b99d-ddc68f81099f",
                    "30a09f34-2461-4d04-b306-e237ade3c281",
                    "59aa88eb-22f8-4086-a720-d3abeea511f1",
                    "dff77671-2c3d-41c4-87fe-a6a911d8c1e8",
                    "a17f74e5-5b06-46a6-948f-ac823bc2130e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 949,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "44f023c6-42f8-4542-9941-2ddec2d164d6",
                  "title": "#withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw \"before each\" hook in \"#withdraw\"",
                      "timedOut": false,
                      "duration": 17,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Deposit collateral\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(this.depositArgs.user).depositCollateral(this.depositArgs.user.address, this.collateral.contract.address, this.depositArgs.amount)).not.to.be.reverted;\nthis.collateral = this.collaterals[0];\nthis.depositAmount = this.depositArgs.amount;",
                      "err": {},
                      "uuid": "2fb62eec-ce30-4b87-8ee3-3dcc8efe686a",
                      "parentUUID": "44f023c6-42f8-4542-9941-2ddec2d164d6",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "5f24ee22-7974-40c0-8a73-a9999de0fd52",
                      "title": "when the account's minimum collateral value is 0",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should allow an account to withdraw their entire deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw their entire deposit",
                          "timedOut": false,
                          "duration": 54,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\n// Ensure that the collateral asset is removed from the account's deposited collateral\n// assets array.\nconst depositedCollateralAssetsPostWithdraw = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssetsPostWithdraw).to.deep.equal([]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(0);\n// Ensure the amount transferred is correct\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(0);\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance);",
                          "err": {},
                          "uuid": "938dbd0b-4401-400a-a0f2-9f38df274a03",
                          "parentUUID": "5f24ee22-7974-40c0-8a73-a9999de0fd52",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow an account to withdraw a portion of their deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow an account to withdraw a portion of their deposit",
                          "timedOut": false,
                          "duration": 45,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const withdrawAmount = this.depositAmount.div(2);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance.sub(amountDeposited));",
                          "err": {},
                          "uuid": "2be7323b-7ba4-4de1-8339-b1724001caf3",
                          "parentUUID": "5f24ee22-7974-40c0-8a73-a9999de0fd52",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should allow trusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should allow trusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 55,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Grant userThree the MANAGER role\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\nconst collateralBefore = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userThree).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0)).to.not.be.reverted;\nconst collateralAfter = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n// Ensure that collateral was withdrawn\n(0, _chai.expect)(collateralAfter).to.equal(collateralBefore.sub(this.depositAmount));",
                          "err": {},
                          "uuid": "be1c88ff-092c-4178-9f94-354060ff5806",
                          "parentUUID": "5f24ee22-7974-40c0-8a73-a9999de0fd52",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should emit CollateralWithdrawn event",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should emit CollateralWithdrawn event",
                          "timedOut": false,
                          "duration": 27,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const tx = await _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.depositAmount, 0);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CollateralWithdrawn\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.collateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.amount).to.equal(this.depositAmount);",
                          "err": {},
                          "uuid": "be50f679-de67-4171-8fbb-0625cb137e29",
                          "parentUUID": "5f24ee22-7974-40c0-8a73-a9999de0fd52",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should not allow untrusted address to withdraw another accounts deposit",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 should not allow untrusted address to withdraw another accounts deposit",
                          "timedOut": false,
                          "duration": 19,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userThree).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, this.initialBalance, 0)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                          "err": {},
                          "uuid": "2d180066-81c9-45bb-818e-f79542a9be0b",
                          "parentUUID": "5f24ee22-7974-40c0-8a73-a9999de0fd52",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [
                        {
                          "uuid": "f14ff591-ea19-4047-be49-4eb5cdb914a9",
                          "title": "when the account's minimum collateral value is > 0",
                          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                          "file": "/src/test/minter/02-deposit-withdraw.ts",
                          "beforeHooks": [
                            {
                              "title": "\"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 \"before each\" hook in \"when the account's minimum collateral value is > 0\"",
                              "timedOut": false,
                              "duration": 68,
                              "state": null,
                              "speed": null,
                              "pass": false,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "this.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\n// userOne mints some kr assets\nthis.mintAmount = (0, _lib.toBig)(100);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Mint amount differs from deposited amount due to open fee\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\nthis.initialUserOneDeposited = amountDeposited;\nthis.mcr = await _hardhat.default.Diamond.minimumCollateralizationRatio();",
                              "err": {},
                              "uuid": "619f7bce-8a1b-4438-b271-de41699ea70f",
                              "parentUUID": "f14ff591-ea19-4047-be49-4eb5cdb914a9",
                              "isHook": true,
                              "skipped": false
                            }
                          ],
                          "afterHooks": [],
                          "tests": [
                            {
                              "title": "should allow an account to withdraw their deposit if it does not violate the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow an account to withdraw their deposit if it does not violate the health factor",
                              "timedOut": false,
                              "duration": 115,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = (0, _lib.toBig)(10);\n// Ensure that the withdrawal would not put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).gte(accountMinCollateralValue)).to.be.true;\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0);\n// Ensure that the collateral asset is still in the account's deposited collateral\n// assets array.\nconst depositedCollateralAssets = await _hardhat.default.Diamond.getDepositedCollateralAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(depositedCollateralAssets).to.deep.equal([\n    this.collateral.address\n]);\n// Ensure the change in the user's deposit is recorded.\nconst amountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(amountDeposited).to.equal(this.depositAmount.sub(withdrawAmount));\n// Check the balances of the contract and user\nconst kreskoBalance = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(kreskoBalance).to.equal(this.depositAmount.sub(withdrawAmount));\nconst userOneBalance = await this.collateral.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.initialBalance.sub(this.depositAmount.sub(withdrawAmount)));\n// Ensure the account's minimum collateral value is <= the account collateral value\nconst accountMinCollateralValueAfter = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(accountMinCollateralValueAfter.lte(accountCollateralValueAfter)).to.be.true;",
                              "err": {},
                              "uuid": "9d8a9714-aaa1-429e-8ee7-f64e8dd7f1b4",
                              "parentUUID": "f14ff591-ea19-4047-be49-4eb5cdb914a9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should allow withdraws that exceed deposits and only send the user total deposit available",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should allow withdraws that exceed deposits and only send the user total deposit available",
                              "timedOut": false,
                              "duration": 96,
                              "state": "passed",
                              "speed": "slow",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const user = _hardhat.default.users.userFour;\nawait this.collateral.setBalance(user, _ethers.BigNumber.from(0));\nawait this.collateral.setBalance(user, (0, _lib.toBig)(1000));\nawait this.collateral.contract.connect(user).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(1000),\n    user\n});\nawait (0, _collaterals.withdrawCollateral)({\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(1010),\n    user\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(user.address)).to.equal((0, _lib.toBig)(1000));",
                              "err": {},
                              "uuid": "9108e81d-a10b-4e5e-b5c6-91cdf5546b71",
                              "parentUUID": "f14ff591-ea19-4047-be49-4eb5cdb914a9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if withdrawing an amount of 0",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if withdrawing an amount of 0",
                              "timedOut": false,
                              "duration": 11,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = 0;\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, 0, withdrawAmount)).to.be.revertedWith(_errors.Error.ZERO_WITHDRAW);",
                              "err": {},
                              "uuid": "b51b8d0a-58da-49ef-ad32-bb10031e0b57",
                              "parentUUID": "f14ff591-ea19-4047-be49-4eb5cdb914a9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the withdrawal violates the health factor",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the withdrawal violates the health factor",
                              "timedOut": false,
                              "duration": 62,
                              "state": "passed",
                              "speed": "medium",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "// userOne has a debt position, so attempting to withdraw the entire collateral deposit should be impossible\nconst withdrawAmount = this.initialBalance;\n// Ensure that the withdrawal would in fact put the account's collateral value\n// less than the account's minimum collateral value:\nconst accountMinCollateralValue = await _hardhat.default.Diamond.getAccountMinimumCollateralValueAtRatio(_hardhat.default.users.userOne.address, this.mcr);\nconst accountCollateralValue = await _hardhat.default.Diamond.getAccountCollateralValue(_hardhat.default.users.userOne.address);\nconst [withdrawnCollateralValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\n(0, _chai.expect)(accountCollateralValue.sub(withdrawnCollateralValue).lt(accountMinCollateralValue)).to.be.true;\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 0)).to.be.revertedWith(_errors.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                              "err": {},
                              "uuid": "094b3cfe-e2a6-47b2-9aae-b2574558bedd",
                              "parentUUID": "f14ff591-ea19-4047-be49-4eb5cdb914a9",
                              "isHook": false,
                              "skipped": false
                            },
                            {
                              "title": "should revert if the depositedCollateralAssetIndex is incorrect",
                              "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw when the account's minimum collateral value is 0 when the account's minimum collateral value is > 0 should revert if the depositedCollateralAssetIndex is incorrect",
                              "timedOut": false,
                              "duration": 11,
                              "state": "passed",
                              "speed": "fast",
                              "pass": true,
                              "fail": false,
                              "pending": false,
                              "context": null,
                              "code": "const withdrawAmount = this.depositAmount.div(2);\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).withdrawCollateral(_hardhat.default.users.userOne.address, this.collateral.address, withdrawAmount, 1)).to.be.revertedWith(_errors.Error.ARRAY_OUT_OF_BOUNDS);",
                              "err": {},
                              "uuid": "449fef65-bd68-42fb-8b0a-4357f275430a",
                              "parentUUID": "f14ff591-ea19-4047-be49-4eb5cdb914a9",
                              "isHook": false,
                              "skipped": false
                            }
                          ],
                          "suites": [],
                          "passes": [
                            "9d8a9714-aaa1-429e-8ee7-f64e8dd7f1b4",
                            "9108e81d-a10b-4e5e-b5c6-91cdf5546b71",
                            "b51b8d0a-58da-49ef-ad32-bb10031e0b57",
                            "094b3cfe-e2a6-47b2-9aae-b2574558bedd",
                            "449fef65-bd68-42fb-8b0a-4357f275430a"
                          ],
                          "failures": [],
                          "pending": [],
                          "skipped": [],
                          "duration": 295,
                          "root": false,
                          "rootEmpty": false,
                          "_timeout": 15000
                        }
                      ],
                      "passes": [
                        "938dbd0b-4401-400a-a0f2-9f38df274a03",
                        "2be7323b-7ba4-4de1-8339-b1724001caf3",
                        "be1c88ff-092c-4178-9f94-354060ff5806",
                        "be50f679-de67-4171-8fbb-0625cb137e29",
                        "2d180066-81c9-45bb-818e-f79542a9be0b"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 200,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "b5e1c61f-b991-4f8c-a86b-b1d54308e698",
                  "title": "#deposit - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#deposit - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events \"before each\" hook in \"#deposit - rebase events\"",
                      "timedOut": false,
                      "duration": 142,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = _hardhat.default.users.userThree;\narbitraryUserDiamond = _hardhat.default.Diamond.connect(arbitraryUser);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.krAsset = this.krAssets.find((k)=>k.deployArgs.name === _testutils.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle, assetInfo.oracle));\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait arbitraryUserDiamond.mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await arbitraryUserDiamond.kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "f938c7f5-d857-454a-8a16-04ae4b42a782",
                      "parentUUID": "b5e1c61f-b991-4f8c-a86b-b1d54308e698",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "2250d929-d5cf-4c6b-a17f-9466b9a137a8",
                      "title": "deposit amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before positive rebase",
                          "timedOut": false,
                          "duration": 86,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst expectedDepositsAfter = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(expectedDepositsAfter);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "81eaed7f-dab7-4dd4-a924-2a7f40aa210c",
                          "parentUUID": "2250d929-d5cf-4c6b-a17f-9466b9a137a8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 80,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmountAfterRebase = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmountAfterRebase);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "8da1d46e-003c-4463-91a5-52056ebdaeab",
                          "parentUUID": "2250d929-d5cf-4c6b-a17f-9466b9a137a8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 77,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "2032a52a-b4a8-4a15-b0ce-26e96e80324d",
                          "parentUUID": "2250d929-d5cf-4c6b-a17f-9466b9a137a8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 76,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\nconst depositsBefore = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsBefore).to.not.bignumber.equal(finalDeposits);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(depositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "1d849d39-d2fe-4d44-b2a0-438722202785",
                          "parentUUID": "2250d929-d5cf-4c6b-a17f-9466b9a137a8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 92,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "2063cace-7a5c-4f47-a32e-4d0b761fd612",
                          "parentUUID": "2250d929-d5cf-4c6b-a17f-9466b9a137a8",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit amounts are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 221,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get deposits after\nconst depositsAfterRebase = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfterRebase).to.bignumber.equal(halfDepositAfterRebase);\n// Deposit second time\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalDeposits).to.bignumber.equal(fullDepositAmount);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(0);",
                          "err": {},
                          "uuid": "0a87302b-990d-465c-b419-efd48dde6532",
                          "parentUUID": "2250d929-d5cf-4c6b-a17f-9466b9a137a8",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "81eaed7f-dab7-4dd4-a924-2a7f40aa210c",
                        "8da1d46e-003c-4463-91a5-52056ebdaeab",
                        "2032a52a-b4a8-4a15-b0ce-26e96e80324d",
                        "1d849d39-d2fe-4d44-b2a0-438722202785",
                        "2063cace-7a5c-4f47-a32e-4d0b761fd612",
                        "0a87302b-990d-465c-b419-efd48dde6532"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 632,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "e5dc346c-4960-455e-ac1a-49c27427bebb",
                      "title": "deposit usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when deposit is made before positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before positiveing rebase",
                          "timedOut": false,
                          "duration": 86,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "b9ce74c8-7d78-481d-82a4-fa70a1b028c9",
                          "parentUUID": "e5dc346c-4960-455e-ac1a-49c27427bebb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before negative rebase",
                          "timedOut": false,
                          "duration": 89,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "await arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst valueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(newPrice);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get collateral value of account after\nconst valueAfter = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(valueBefore).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "5958a7fb-f15b-4568-b52c-09429ae9b27b",
                          "parentUUID": "e5dc346c-4960-455e-ac1a-49c27427bebb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 70,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "c4884ceb-9ac0-41be-8b52-6462a171c0fd",
                          "parentUUID": "e5dc346c-4960-455e-ac1a-49c27427bebb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made after an negative rebase",
                          "timedOut": false,
                          "duration": 67,
                          "state": "passed",
                          "speed": "medium",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Get expected value before rebase and deposit\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, this.krAssetCollateralAmount, false);\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\n// Get collateral value of account after\nconst [valueAfter] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, depositAmount, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfter);",
                          "err": {},
                          "uuid": "d781fd14-abac-4b87-8c5f-9be99a75025d",
                          "parentUUID": "e5dc346c-4960-455e-ac1a-49c27427bebb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a positiveing rebase",
                          "timedOut": false,
                          "duration": 120,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "99ec7eef-8d41-44c1-859e-486818d861e7",
                          "parentUUID": "e5dc346c-4960-455e-ac1a-49c27427bebb",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when deposit is made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #deposit - rebase events deposit usd values are calculated correctly when deposit is made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 112,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst halfDepositBeforeRebase = this.krAssetCollateralAmount.div(2);\nconst halfDepositAfterRebase = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositBeforeRebase);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositBeforeRebase, false);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, halfDepositAfterRebase, false);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Calculate added value since price adjusted in the rebase\nconst [expectedValueAfterSecondDeposit] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.krAsset.address, fullDepositAmount, false);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, halfDepositAfterRebase);\n// Get deposits after\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(finalValue).to.bignumber.equal(expectedValueAfterSecondDeposit);",
                          "err": {},
                          "uuid": "eadd59cc-55f0-4673-ab92-dd45d6504eab",
                          "parentUUID": "e5dc346c-4960-455e-ac1a-49c27427bebb",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b9ce74c8-7d78-481d-82a4-fa70a1b028c9",
                        "5958a7fb-f15b-4568-b52c-09429ae9b27b",
                        "c4884ceb-9ac0-41be-8b52-6462a171c0fd",
                        "d781fd14-abac-4b87-8c5f-9be99a75025d",
                        "99ec7eef-8d41-44c1-859e-486818d861e7",
                        "eadd59cc-55f0-4673-ab92-dd45d6504eab"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 544,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "8d49f5a1-25e6-417a-a5bb-6a213b72e857",
                  "title": "#withdraw - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                  "file": "/src/test/minter/02-deposit-withdraw.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#withdraw - rebase events\"",
                      "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events \"before each\" hook in \"#withdraw - rebase events\"",
                      "timedOut": false,
                      "duration": 144,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "arbitraryUser = _hardhat.default.users.userThree;\narbitraryUserDiamond = _hardhat.default.Diamond.connect(arbitraryUser);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [arbitraryUser.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [arbitraryUser.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.krAsset = this.krAssets.find((k)=>k.deployArgs.name === _testutils.defaultKrAssetArgs.name);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle, assetInfo.oracle));\n// Allowance for Kresko\nawait this.krAsset.contract.connect(arbitraryUser).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\n// Deposit some collateral\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.collateral.address, this.depositArgs.amount);\n// Mint some krAssets\nawait arbitraryUserDiamond.mintKreskoAsset(arbitraryUser.address, this.krAsset.address, mintAmount);\n// Deposit all debt on tests\nthis.krAssetCollateralAmount = await arbitraryUserDiamond.kreskoAssetDebt(arbitraryUser.address, this.krAsset.address);",
                      "err": {},
                      "uuid": "867d149c-660f-4e84-8562-c6cf7b80e142",
                      "parentUUID": "8d49f5a1-25e6-417a-a5bb-6a213b72e857",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "a42e3ced-f276-4d18-baf5-7d9b6b09990f",
                      "title": "withdraw amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 138,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit collateral before rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "6d0625cb-3c63-47d9-8a64-479a9bb5f105",
                          "parentUUID": "a42e3ced-f276-4d18-baf5-7d9b6b09990f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 142,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit collateral before rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is adjusted by the rebase\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "aa296f9f-6ba8-44ad-92d4-b33221e0cf78",
                          "parentUUID": "a42e3ced-f276-4d18-baf5-7d9b6b09990f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an positive rebase",
                          "timedOut": false,
                          "duration": 259,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "f348eb25-d4fc-4055-a57d-8ef8fd619846",
                          "parentUUID": "a42e3ced-f276-4d18-baf5-7d9b6b09990f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 143,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral balance is what was deposited as no rebases occured after\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(rebasedDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "0b90c3b5-30b1-4c04-bde1-79f58f63679d",
                          "parentUUID": "a42e3ced-f276-4d18-baf5-7d9b6b09990f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 171,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Deposit before the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "9f855184-524d-49a3-8cc6-68629433788f",
                          "parentUUID": "a42e3ced-f276-4d18-baf5-7d9b6b09990f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 170,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Deposit half before, half (rebase adjusted) after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).div(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit before the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Get deposits before\nconst depositsFirst = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(depositsFirst).to.bignumber.equal(firstDepositAmount);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit after the rebase\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\n// Get collateral deposits after\nconst depositsAfter = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\n// Ensure deposit balance matches expected\n(0, _chai.expect)(depositsAfter).to.bignumber.equal(fullDepositAmount);\n// Withdraw rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\nconst finalDeposits = await _hardhat.default.Diamond.collateralDeposits(arbitraryUser.address, this.krAsset.address);\nconst finalBalance = await this.krAsset.contract.balanceOf(arbitraryUser.address);\n(0, _chai.expect)(finalDeposits).to.equal(0);\n(0, _chai.expect)(finalBalance).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "aaa34ffe-21f1-487c-ae45-bd92e52c7e1e",
                          "parentUUID": "a42e3ced-f276-4d18-baf5-7d9b6b09990f",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw amounts are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 103,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst nrcBalanceBefore = await this.collateral.contract.balanceOf(arbitraryUser.address);\nconst expectedNrcBalanceAfter = nrcBalanceBefore.add(withdrawAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(expectedNrcBalanceAfter);",
                          "err": {},
                          "uuid": "618772d0-15a3-4b90-919e-0d846ac9136e",
                          "parentUUID": "a42e3ced-f276-4d18-baf5-7d9b6b09990f",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "6d0625cb-3c63-47d9-8a64-479a9bb5f105",
                        "aa296f9f-6ba8-44ad-92d4-b33221e0cf78",
                        "f348eb25-d4fc-4055-a57d-8ef8fd619846",
                        "0b90c3b5-30b1-4c04-bde1-79f58f63679d",
                        "9f855184-524d-49a3-8cc6-68629433788f",
                        "aaa34ffe-21f1-487c-ae45-bd92e52c7e1e",
                        "618772d0-15a3-4b90-919e-0d846ac9136e"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1126,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "e7d4f877-4589-46bf-bbb7-2cb39ccf7710",
                      "title": "withdraw usd values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/02-deposit-withdraw.ts",
                      "file": "/src/test/minter/02-deposit-withdraw.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when withdrawing a deposit made before positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before positive rebase",
                          "timedOut": false,
                          "duration": 124,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "93752949-bf8c-44d1-8335-cdc1b155578e",
                          "parentUUID": "e7d4f877-4589-46bf-bbb7-2cb39ccf7710",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before negative rebase",
                          "timedOut": false,
                          "duration": 126,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst rebasedDepositAmount = this.krAssetCollateralAmount.div(denominator);\n// Deposit\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, rebasedDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(rebasedDepositAmount);",
                          "err": {},
                          "uuid": "5cd0db76-150e-4715-bc6b-05a0527617c5",
                          "parentUUID": "e7d4f877-4589-46bf-bbb7-2cb39ccf7710",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrwaing a deposit made after an positiveing rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrwaing a deposit made after an positiveing rebase",
                          "timedOut": false,
                          "duration": 260,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst depositAmount = this.krAssetCollateralAmount.mul(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "4d84ab83-1ea0-46b7-9c9e-4026f2539b6b",
                          "parentUUID": "e7d4f877-4589-46bf-bbb7-2cb39ccf7710",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made after an negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made after an negative rebase",
                          "timedOut": false,
                          "duration": 131,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nconst depositAmount = this.krAssetCollateralAmount.div(denominator);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Deposit rebased amount after\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, depositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, depositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(depositAmount);",
                          "err": {},
                          "uuid": "c8d1f95d-0e12-47ef-8cd2-4eb09bac7b9e",
                          "parentUUID": "e7d4f877-4589-46bf-bbb7-2cb39ccf7710",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a positive rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a positive rebase",
                          "timedOut": false,
                          "duration": 192,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(2).mul(denominator);\nconst fullDepositAmount = this.krAssetCollateralAmount.mul(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "954ee7a8-1bd9-446d-8f28-f9c918556a9d",
                          "parentUUID": "e7d4f877-4589-46bf-bbb7-2cb39ccf7710",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a deposit made before and after a negative rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a deposit made before and after a negative rebase",
                          "timedOut": false,
                          "duration": 184,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\n// Deposit half before, half after\nconst firstDepositAmount = this.krAssetCollateralAmount.div(2);\nconst secondDepositAmount = this.krAssetCollateralAmount.div(denominator).div(2);\nconst fullDepositAmount = this.krAssetCollateralAmount.div(denominator);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, firstDepositAmount);\nconst [expectedValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Get value after\nconst [valueAfterRebase] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n// Ensure that the collateral value stays the same\n(0, _chai.expect)(expectedValue).to.bignumber.equal(valueAfterRebase);\n// Deposit more\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, secondDepositAmount);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.krAsset.address);\n// Withdraw the full rebased amount\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.krAsset.address, fullDepositAmount, cIndex);\n// Get value\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.krAsset.address);\n(0, _chai.expect)(finalValue).to.equal(0);\n(0, _chai.expect)(await this.krAsset.contract.balanceOf(arbitraryUser.address)).to.bignumber.equal(fullDepositAmount);",
                          "err": {},
                          "uuid": "33186105-8ba2-48af-9322-3b6959ec4e35",
                          "parentUUID": "e7d4f877-4589-46bf-bbb7-2cb39ccf7710",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when withdrawing a non-rebased collateral after a rebase",
                          "fullTitle": "Minter - Deposit Withdraw #collateral #withdraw - rebase events withdraw usd values are calculated correctly when withdrawing a non-rebased collateral after a rebase",
                          "timedOut": false,
                          "duration": 162,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst newPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nconst withdrawAmount = (0, _lib.toBig)(10);\nawait arbitraryUserDiamond.depositCollateral(arbitraryUser.address, this.krAsset.address, this.krAssetCollateralAmount);\nconst accountValueBefore = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [nrcValueBefore] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.collateral.address);\nconst [withdrawValue] = await _hardhat.default.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, withdrawAmount, false);\nconst expectedNrcValueAfter = nrcValueBefore.sub(withdrawValue);\n// Rebase the asset according to params\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst cIndex = await _hardhat.default.Diamond.getDepositedCollateralAssetIndex(arbitraryUser.address, this.collateral.address);\nawait arbitraryUserDiamond.withdrawCollateral(arbitraryUser.address, this.collateral.address, withdrawAmount, cIndex);\nconst finalAccountValue = await _hardhat.default.Diamond.getAccountCollateralValue(arbitraryUser.address);\nconst [finalValue] = await _hardhat.default.Diamond.getCollateralAdjustedAndRealValue(arbitraryUser.address, this.collateral.address);\n(0, _chai.expect)(finalValue).to.equal(expectedNrcValueAfter);\n(0, _chai.expect)(finalAccountValue).to.bignumber.equal(accountValueBefore.sub(withdrawValue));",
                          "err": {},
                          "uuid": "6cd7fa4b-6e7d-4061-bf9e-b62ebe74baee",
                          "parentUUID": "e7d4f877-4589-46bf-bbb7-2cb39ccf7710",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "93752949-bf8c-44d1-8335-cdc1b155578e",
                        "5cd0db76-150e-4715-bc6b-05a0527617c5",
                        "4d84ab83-1ea0-46b7-9c9e-4026f2539b6b",
                        "c8d1f95d-0e12-47ef-8cd2-4eb09bac7b9e",
                        "954ee7a8-1bd9-446d-8f28-f9c918556a9d",
                        "33186105-8ba2-48af-9322-3b6959ec4e35",
                        "6cd7fa4b-6e7d-4061-bf9e-b62ebe74baee"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1179,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "72dd965c-e6f4-45c9-b4eb-fb803485ea3e",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
          "file": "/src/test/minter/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "54cbcf95-6f77-403e-a8ed-71a73d19420e",
              "parentUUID": "72dd965c-e6f4-45c9-b4eb-fb803485ea3e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 182,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// -------------------------------- Set up mock assets --------------------------------\nconst collateralArgs = {\n    name: \"CollateralAsset\",\n    price: 10,\n    factor: 1,\n    decimals: 18\n};\nthis.collateral = hre.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.collateral = await this.collateral.update(collateralArgs);\nthis.collateral.setPrice(collateralArgs.price);\n// Set up mock KreskoAsset\nconst krAssetArgs = {\n    name: \"KreskoAsset\",\n    price: 11,\n    factor: 1,\n    supplyLimit: 100000000,\n    closeFee: _testutils.defaultCloseFee,\n    openFee: _testutils.defaultOpenFee\n};\nthis.krAsset = hre.krAssets.find((c)=>c.deployArgs.name === _testutils.defaultKrAssetArgs.name);\nthis.krAsset.setPrice(krAssetArgs.price);\n// grant operator role to deployer for rebases\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, hre.users.deployer.address);\nconst assetInfo = await this.krAsset.kresko();\n// Add krAsset as a collateral with anchor and cFactor of 1\nawait hre.Diamond.connect(hre.users.deployer).addCollateralAsset(this.krAsset.contract.address, await (0, _collaterals.getCollateralConfig)(this.krAsset.contract, this.krAsset.anchor.address, (0, _lib.toBig)(1), (0, _lib.toBig)(1.05), assetInfo.oracle, assetInfo.oracle));\n// -------------------------------- Set up userOne deposit/debt --------------------------------\nawait this.collateral.setBalance(hre.users.liquidator, (0, _lib.toBig)(100000000));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.liquidator.address]: {\n        [hre.Diamond.address]: (0, _lib.toBig)(100000000)\n    }\n});\n// Deposit collateral\nthis.defaultDepositAmount = 20; // 20 * $10 = $200 in collateral asset value\nawait this.collateral.setBalance(hre.users.userOne, (0, _lib.toBig)(this.defaultDepositAmount));\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: (0, _lib.toBig)(this.defaultDepositAmount)\n    }\n});\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount,\n    asset: this.collateral\n});\n// Mint KrAsset\nthis.defaultMintAmount = 10; // 10 * $11 = $110 in debt value\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.userOne,\n    amount: this.defaultMintAmount,\n    asset: this.krAsset\n});",
              "err": {},
              "uuid": "f881fdb4-84e2-49cf-b910-6591f27e6032",
              "parentUUID": "72dd965c-e6f4-45c9-b4eb-fb803485ea3e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f9b4f4a2-dd8c-4f1b-a3f2-f485c07aba57",
              "title": "#maxLiquidatableValue",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#maxLiquidatableValue\"",
                  "fullTitle": "Minter #maxLiquidatableValue \"before each\" hook in \"#maxLiquidatableValue\"",
                  "timedOut": false,
                  "duration": 721,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const depositAmountBig18 = (0, _lib.toBig)(this.defaultDepositAmount * 100);\nconst depositAmountBig8 = (0, _lib.toBig)(this.defaultDepositAmount * 100, 8);\nuser = hre.users.userOne;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\nawait this.collateral.setBalance(hre.users.userOne, depositAmountBig18);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: depositAmountBig18\n    }\n});\nnewCollateral = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Coll\",\n    decimals: 8,\n    price: 10,\n    factor: 0.9\n});\nawait newCollateral.setBalance(hre.users.userOne, depositAmountBig8);\nawait newCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [hre.users.userOne.address]: {\n        [hre.Diamond.address]: depositAmountBig8\n    }\n});",
                  "err": {},
                  "uuid": "7b0df5a2-185e-440a-a2a3-dc057fddb63d",
                  "parentUUID": "f9b4f4a2-dd8c-4f1b-a3f2-f485c07aba57",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 1",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 1",
                  "timedOut": false,
                  "duration": 287,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [deposits, borrows] = [\n    (0, _lib.toBig)(20),\n    (0, _lib.toBig)(10)\n];\nawait this.collateral.setBalance(hre.users.userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: hre.users.userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userThree.address)).to.be.false;\n(0, _chai.expect)(await (0, _liquidations.getCR)(hre.users.userThree.address)).to.be.equal(2);\nthis.collateral.setPrice(5);\n(0, _chai.expect)(await (0, _liquidations.getCR)(hre.users.userThree.address)).to.be.equal(1);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userThree.address)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(hre.users.userThree.address, this.krAsset.address, this.collateral.address);\nconst MLCalc = await (0, _liquidations.getExpectedMaxLiq)(hre.users.userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(MLCalc).to.be.closeTo(maxLiquidatableValue, USD_DELTA);",
                  "err": {},
                  "uuid": "07ff64ad-a211-4e6c-a4a1-7233653d7946",
                  "parentUUID": "f9b4f4a2-dd8c-4f1b-a3f2-f485c07aba57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct MLV when kFactor = 1, cFactor = 0.25",
                  "timedOut": false,
                  "duration": 2133,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await hre.Diamond.updateMinimumDebtValue(0);\nconst userThree = hre.users.userThree;\nconst [deposits1, deposits2] = [\n    (0, _lib.toBig)(10),\n    (0, _lib.toBig)(10)\n];\nconst borrows = (0, _lib.toBig)(10);\nconst collateralPrice = 10;\nthis.collateral.setPrice(collateralPrice);\nconst collateral2 = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral2\",\n    decimals: 18,\n    factor: 1,\n    price: 10\n});\nawait this.collateral.setBalance(userThree, deposits1);\nawait collateral2.setBalance(userThree, deposits2);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits2,\n    asset: collateral2\n});\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits1,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\nconst cr = await (0, _liquidations.getCR)(userThree.address);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\n(0, _chai.expect)(cr).to.be.equal(2);\nawait this.collateral.update({\n    factor: 0.25,\n    name: \"updated\"\n});\nthis.collateral.setPrice(5);\nconst expectedCR = 1.125;\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(expectedCR, CR_DELTA);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nconst maxLiquidatableValueC1 = await hre.Diamond.getMaxLiquidation(userThree.address, this.krAsset.address, this.collateral.address);\nconst MLCalcC1 = await (0, _liquidations.getExpectedMaxLiq)(userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(MLCalcC1).to.be.closeTo(maxLiquidatableValueC1, USD_DELTA);\nconst maxLiquidatableValueC2 = await hre.Diamond.getMaxLiquidation(userThree.address, this.krAsset.address, collateral2.address);\nconst MLCalcC2 = await (0, _liquidations.getExpectedMaxLiq)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(MLCalcC2).to.be.closeTo(maxLiquidatableValueC2, USD_DELTA);\n(0, _chai.expect)(maxLiquidatableValueC2.gt(maxLiquidatableValueC1)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.lessThan(1.4);\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.greaterThan(1.4);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                  "err": {},
                  "uuid": "19ff3cad-0812-4e34-9488-0d4ae7c9b3cb",
                  "parentUUID": "f9b4f4a2-dd8c-4f1b-a3f2-f485c07aba57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with single market cdp",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct MLV with single market cdp",
                  "timedOut": false,
                  "duration": 148,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral\n});\nthis.collateral.setPrice(collateralPriceAfter * 0.7);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, this.collateral);\n(0, _chai.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, this.collateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValue).to.be.closeTo(maxLiquidatableValue, USD_DELTA);",
                  "err": {},
                  "uuid": "cbd5b901-decf-4bb2-9429-8374ed708ddd",
                  "parentUUID": "f9b4f4a2-dd8c-4f1b-a3f2-f485c07aba57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct MLV with multiple cdps",
                  "fullTitle": "Minter #maxLiquidatableValue calculates correct MLV with multiple cdps",
                  "timedOut": false,
                  "duration": 303,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: this.defaultDepositAmount * 49,\n    asset: this.collateral\n});\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.userOne,\n    amount: (0, _lib.toBig)(0.1, 8),\n    asset: newCollateral\n});\nthis.collateral.setPrice(collateralPriceAfter);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(user.address)).to.be.true;\nconst expectedMaxLiquidatableValue = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, this.collateral);\n(0, _chai.expect)(expectedMaxLiquidatableValue.gt(0)).to.be.true;\nconst maxLiquidatableValue = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, this.collateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValue).to.be.closeTo(maxLiquidatableValue, USD_DELTA);\nconst expectedMaxLiquidatableValueNewCollateral = await (0, _liquidations.getExpectedMaxLiq)(user, this.krAsset, newCollateral);\n(0, _chai.expect)(expectedMaxLiquidatableValueNewCollateral.gt(0)).to.be.true;\nconst maxLiquidatableValueNewCollateral = await hre.Diamond.getMaxLiquidation(user.address, this.krAsset.address, newCollateral.address);\n(0, _chai.expect)(expectedMaxLiquidatableValueNewCollateral).to.be.closeTo(maxLiquidatableValueNewCollateral, USD_DELTA);",
                  "err": {},
                  "uuid": "6821e61c-f94c-49ae-a229-877090f5d4e7",
                  "parentUUID": "f9b4f4a2-dd8c-4f1b-a3f2-f485c07aba57",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07ff64ad-a211-4e6c-a4a1-7233653d7946",
                "19ff3cad-0812-4e34-9488-0d4ae7c9b3cb",
                "cbd5b901-decf-4bb2-9429-8374ed708ddd",
                "6821e61c-f94c-49ae-a229-877090f5d4e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2871,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "25ac309a-618d-48ba-b932-da13ab8740f2",
              "title": "#liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
              "file": "/src/test/minter/03-liquidation.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "55feedd5-3716-4d0f-9462-4f319d6e7a15",
                  "title": "#isAccountLiquidatable",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should identify accounts below their liquidation threshold",
                      "fullTitle": "Minter #liquidation #isAccountLiquidatable should identify accounts below their liquidation threshold",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that current amount is under min collateral value\nconst liquidationThreshold = await hre.Diamond.liquidationThreshold();\nconst minCollateralUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, liquidationThreshold);\n(0, _chai.expect)(this.defaultDepositAmount * this.collateral.deployArgs.price > (0, _lib.fromBig)(minCollateralUSD, 8));\n// The account should be NOT liquidatable as collateral value ($200) >= min collateral value ($154)\nconst initialCanLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(initialCanLiquidate).to.equal(false);\n// Update collateral price to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);\nconst [, newCollateralOraclePrice] = await hre.Diamond.getCollateralValueAndOraclePrice(this.collateral.address, (0, _lib.toBig)(1), true);\n(0, _chai.expect)((0, _lib.fromBig)(newCollateralOraclePrice, 8)).to.equal(newCollateralPrice);\n// The account should be liquidatable as collateral value ($140) < min collateral value ($154)\nconst secondaryCanLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(secondaryCanLiquidate).to.equal(true);",
                      "err": {},
                      "uuid": "4da052a5-5249-4426-837e-5d6e209b6b83",
                      "parentUUID": "55feedd5-3716-4d0f-9462-4f319d6e7a15",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4da052a5-5249-4426-837e-5d6e209b6b83"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 74,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                  "title": "#liquidate",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate\"",
                      "fullTitle": "Minter #liquidation #liquidate \"before each\" hook in \"#liquidate\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userTwo tokens to use for liquidation\nawait this.krAsset.mocks.contract.setVariable(\"_balances\", {\n    [hre.users.userTwo.address]: (0, _lib.toBig)(10000)\n});\n// Update collateral price from $10 to $7.5\nconst newCollateralPrice = 7.5;\nthis.collateral.setPrice(newCollateralPrice);",
                      "err": {},
                      "uuid": "e13104de-b425-4c75-a5b5-72933b62fd91",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow unhealthy accounts to be liquidated",
                      "fullTitle": "Minter #liquidation #liquidate should allow unhealthy accounts to be liquidated",
                      "timedOut": false,
                      "duration": 219,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm we can liquidate this account\nconst canLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(canLiquidate).to.equal(true);\n// Fetch pre-liquidation state for users and contracts\nconst beforeUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\nconst beforeUserOneDebtAmount = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\nconst beforeUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hre.users.userTwo.address);\nconst beforeUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hre.users.userTwo.address);\nconst beforeKreskoCollateralBalance = await this.collateral.contract.balanceOf(hre.Diamond.address);\n// Liquidate userOne\nconst maxLiq = await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst maxRepayAmount = (0, _lib.toBig)(Number(maxLiq.div(await this.krAsset.getPrice())));\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait hre.Diamond.connect(hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, maxRepayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\n// Confirm that the liquidated user's debt amount has decreased by the repaid amount\nconst afterUserOneDebtAmount = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(afterUserOneDebtAmount.eq(beforeUserOneDebtAmount.sub(maxRepayAmount)));\n// Confirm that some of the liquidated user's collateral has been seized\nconst afterUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\n(0, _chai.expect)(afterUserOneCollateralAmount.lt(beforeUserOneCollateralAmount));\n// Confirm that userTwo's kresko asset balance has decreased by the repaid amount\nconst afterUserTwoKreskoAssetBalance = await this.krAsset.contract.balanceOf(hre.users.userTwo.address);\n(0, _chai.expect)(afterUserTwoKreskoAssetBalance.eq(beforeUserTwoKreskoAssetBalance.sub(maxRepayAmount)));\n// Confirm that userTwo has received some collateral from the contract\nconst afterUserTwoCollateralBalance = await this.collateral.contract.balanceOf(hre.users.userTwo.address);\n(0, _chai.expect)(afterUserTwoCollateralBalance).gt(beforeUserTwoCollateralBalance);\n// Confirm that Kresko contract's collateral balance has decreased.\nconst afterKreskoCollateralBalance = await this.collateral.contract.balanceOf(hre.Diamond.address);\n(0, _chai.expect)(afterKreskoCollateralBalance).lt(beforeKreskoCollateralBalance);",
                      "err": {},
                      "uuid": "a245a242-98a3-4e22-a173-d072ff9121dd",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to LT with a single CDP",
                      "fullTitle": "Minter #liquidation #liquidate should liquidate up to LT with a single CDP",
                      "timedOut": false,
                      "duration": 534,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userThree = hre.users.userThree;\nconst deposits = (0, _lib.toBig)(15);\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait this.collateral.setBalance(userThree, deposits);\nawait (0, _collaterals.depositCollateral)({\n    user: userThree,\n    amount: deposits,\n    asset: this.collateral\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userThree,\n    amount: borrows,\n    asset: this.krAsset\n});\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\nthis.collateral.setPrice(7.5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral);\nconst MLM = (0, _lib.fromBig)(await hre.Diamond.maxLiquidationMultiplier(), 18);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(1.4 * MLM, CR_DELTA);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                      "err": {},
                      "uuid": "b0ab2457-bcb6-40fe-8511-c138a2d1b994",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate up to LT with multiple CDPs",
                      "fullTitle": "Minter #liquidation #liquidate should liquidate up to LT with multiple CDPs",
                      "timedOut": false,
                      "duration": 1913,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const collateral2 = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"Collateral2\",\n    decimals: 18,\n    factor: 1,\n    price: 10\n});\nconst userThree = hre.users.userThree;\nconst [deposits1, deposits2] = [\n    (0, _lib.toBig)(10),\n    (0, _lib.toBig)(5)\n];\nconst borrows = (0, _lib.toBig)(10);\nthis.collateral.setPrice(10);\nthis.krAsset.setPrice(10);\nawait Promise.all([\n    await this.collateral.setBalance(userThree, deposits1),\n    await collateral2.setBalance(userThree, deposits2),\n    await (0, _collaterals.depositCollateral)({\n        user: userThree,\n        amount: deposits1,\n        asset: this.collateral\n    }),\n    await (0, _collaterals.depositCollateral)({\n        user: userThree,\n        amount: deposits2,\n        asset: collateral2\n    }),\n    await (0, _krassets.mintKrAsset)({\n        user: userThree,\n        amount: borrows,\n        asset: this.krAsset\n    })\n]);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;\n// seemingly random order of updates to test that the liquidation works regardless\nthis.collateral.setPrice(6.25);\nawait collateral2.update({\n    factor: 0.975,\n    name: \"updated\"\n});\nawait this.krAsset.update({\n    factor: 1.05,\n    name: \"updated\",\n    closeFee: 0.02,\n    openFee: 0,\n    supplyLimit: 1000000\n});\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.greaterThan(1.05);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, this.collateral);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.lessThan(1.4);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.true;\nawait (0, _liquidations.liquidate)(userThree, this.krAsset, collateral2);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userThree.address)).to.be.closeTo(1.4, CR_DELTA);\n            // expect(await hre.Diamond.isAccountLiquidatable(userThree.address)).to.be.false;",
                      "err": {},
                      "uuid": "8bbf11fc-9070-47b4-96d9-cb896d78403b",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit LiquidationOccurred event",
                      "fullTitle": "Minter #liquidation #liquidate should emit LiquidationOccurred event",
                      "timedOut": false,
                      "duration": 183,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt liquidation\nconst collateralIndex = await hre.Diamond.getDepositedCollateralAssetIndex(hre.users.userOne.address, this.collateral.address);\nawait this.krAsset.update({\n    name: \"jesus\",\n    factor: 1.5,\n    supplyLimit: 10000000,\n    closeFee: 0.05,\n    openFee: 0\n});\nconst mintedKreskoAssetIndex = await hre.Diamond.getMintedKreskoAssetsIndex(hre.users.userOne.address, this.krAsset.address);\nconst maxLiqValue = await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address);\nconst repayAmount = maxLiqValue.wadDiv(await this.krAsset.getPrice());\nconst tx = await hre.Diamond.connect(hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, collateralIndex);\nconst event = await (0, _lib.getInternalEvent)(tx, hre.Diamond, \"LiquidationOccurred\");\n(0, _chai.expect)(event.account).to.equal(hre.users.userOne.address);\n(0, _chai.expect)(event.liquidator).to.equal(hre.users.userTwo.address);\n(0, _chai.expect)(event.repayKreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.repayAmount).to.equal(repayAmount);\n(0, _chai.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);",
                      "err": {},
                      "uuid": "1d3bdd53-510f-4764-a6d4-9bc3fee4af66",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations of healthy accounts",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations of healthy accounts",
                      "timedOut": false,
                      "duration": 81,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Update collateral price from $5 to $10\nconst newCollateralPrice = 10;\nthis.collateral.setPrice(newCollateralPrice);\n// Confirm that the account has sufficient collateral to not be liquidated\nconst liquidationThreshold = await hre.Diamond.liquidationThreshold();\nconst minimumCollateralUSDValueRequired = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, liquidationThreshold);\nconst currUserOneCollateralAmount = await hre.Diamond.collateralDeposits(hre.users.userOne.address, this.collateral.address);\n(0, _chai.expect)((0, _lib.fromBig)(currUserOneCollateralAmount) * newCollateralPrice > (0, _lib.fromBig)(minimumCollateralUSDValueRequired, 8));\nconst canLiquidate = await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address);\n(0, _chai.expect)(canLiquidate).to.equal(false);\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)(hre.Diamond.connect(hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "1880061f-1051-4b2a-b11d-16d093a9428d",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations if repayment amount is 0",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations if repayment amount is 0",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 0;\nawait (0, _chai.expect)(hre.Diamond.connect(hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(_errors.Error.ZERO_REPAY);",
                      "err": {},
                      "uuid": "c602d037-d7ef-47c5-8b74-c2e9964fbf62",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations with krAsset amount greater than krAsset debt of user",
                      "timedOut": false,
                      "duration": 49,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Get user's debt for this kresko asset\nconst krAssetDebtUserOne = await hre.Diamond.kreskoAssetDebt(hre.users.userOne.address, this.krAsset.address);\n// Ensure we are repaying more than debt\nconst repayAmount = krAssetDebtUserOne.add((0, _lib.toBig)(1));\n// Liquidation should fail\nawait (0, _chai.expect)(hre.Diamond.connect(hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(_errors.Error.KRASSET_BURN_AMOUNT_OVERFLOW);",
                      "err": {},
                      "uuid": "2a9fd1ba-68b8-40f4-8f17-9c9edddc0bf4",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations with USD value greater than the USD value required for regaining healthy position",
                      "timedOut": false,
                      "duration": 89,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const maxLiquidation = (0, _lib.fromBig)(await hre.Diamond.getMaxLiquidation(hre.users.userOne.address, this.krAsset.address, this.collateral.address), 8);\nconst repaymentAmount = (0, _lib.toBig)((maxLiquidation + 1) / this.krAsset.deployArgs.price);\n// Ensure liquidation cannot happen\nawait (0, _chai.expect)(hre.Diamond.connect(hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repaymentAmount, this.collateral.address, 0, 0)).to.be.revertedWith(_errors.Error.LIQUIDATION_OVERFLOW);",
                      "err": {},
                      "uuid": "cc7a9ae3-ed22-4e9b-9096-3259c292875c",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "fullTitle": "Minter #liquidation #liquidate should not allow liquidations when account is under MCR but not under liquidation threshold",
                      "timedOut": false,
                      "duration": 120,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.collateral.setPrice(this.collateral.deployArgs.price);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address)).to.be.false;\nconst minCollateralUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, await hre.Diamond.minimumCollateralizationRatio());\nconst liquidationThresholdUSD = await hre.Diamond.getAccountMinimumCollateralValueAtRatio(hre.users.userOne.address, await hre.Diamond.liquidationThreshold());\nthis.collateral.setPrice(this.collateral.deployArgs.price * 0.775);\nconst accountCollateralValue = await hre.Diamond.getAccountCollateralValue(hre.users.userOne.address);\n(0, _chai.expect)(accountCollateralValue.lt(minCollateralUSD)).to.be.true;\n(0, _chai.expect)(accountCollateralValue.gt(liquidationThresholdUSD)).to.be.true;\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(hre.users.userOne.address)).to.be.false;",
                      "err": {},
                      "uuid": "892d674b-93d0-4b9e-9dea-ac0e638abac5",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "fullTitle": "Minter #liquidation #liquidate should allow liquidations without liquidator approval of Kresko assets to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 114,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Check that liquidator's token approval to Kresko.sol contract is 0\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(0);\n// Liquidation should succeed despite lack of token approval\nconst repayAmount = 10;\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait hre.Diamond.connect(hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex);\n// Confirm that liquidator's token approval is still 0\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(0);",
                      "err": {},
                      "uuid": "6af7ae56-adc1-41ab-8e59-9476c33acb19",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not change liquidator's existing token approvals during a successful liquidation",
                      "fullTitle": "Minter #liquidation #liquidate should not change liquidator's existing token approvals during a successful liquidation",
                      "timedOut": false,
                      "duration": 132,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidator increases contract's token approval\nconst repayAmount = 10;\nawait this.krAsset.contract.connect(hre.users.userTwo).approve(hre.Diamond.address, repayAmount);\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(repayAmount);\nconst mintedKreskoAssetIndex = 0;\nconst depositedCollateralAssetIndex = 0;\nawait (0, _chai.expect)(hre.Diamond.connect(hre.users.userTwo).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, mintedKreskoAssetIndex, depositedCollateralAssetIndex)).not.to.be.reverted;\n// Confirm that liquidator's token approval is unchanged\n(0, _chai.expect)(await this.krAsset.contract.allowance(hre.users.userTwo.address, hre.Diamond.address)).to.equal(repayAmount);",
                      "err": {},
                      "uuid": "48cbf0da-776b-4ebc-a3ff-6d5cb6959874",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow borrowers to liquidate themselves",
                      "fullTitle": "Minter #liquidation #liquidate should not allow borrowers to liquidate themselves",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Liquidation should fail\nconst repayAmount = 5;\nawait (0, _chai.expect)(hre.Diamond.connect(hre.users.userOne).liquidate(hre.users.userOne.address, this.krAsset.address, repayAmount, this.collateral.address, 0, 0)).to.be.revertedWith(_errors.Error.SELF_LIQUIDATION);",
                      "err": {},
                      "uuid": "892acae5-3292-4267-b1fe-59fffb7c67f7",
                      "parentUUID": "7bc0f945-7c81-4637-8084-4f1e99bceb4d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a245a242-98a3-4e22-a173-d072ff9121dd",
                    "b0ab2457-bcb6-40fe-8511-c138a2d1b994",
                    "8bbf11fc-9070-47b4-96d9-cb896d78403b",
                    "1d3bdd53-510f-4764-a6d4-9bc3fee4af66",
                    "1880061f-1051-4b2a-b11d-16d093a9428d",
                    "c602d037-d7ef-47c5-8b74-c2e9964fbf62",
                    "2a9fd1ba-68b8-40f4-8f17-9c9edddc0bf4",
                    "cc7a9ae3-ed22-4e9b-9096-3259c292875c",
                    "892d674b-93d0-4b9e-9dea-ac0e638abac5",
                    "6af7ae56-adc1-41ab-8e59-9476c33acb19",
                    "48cbf0da-776b-4ebc-a3ff-6d5cb6959874",
                    "892acae5-3292-4267-b1fe-59fffb7c67f7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3458,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "ce3a7a91-5a96-475c-95a6-de68afd79d54",
                  "title": "#liquidate - rebasing events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/03-liquidation.ts",
                  "file": "/src/test/minter/03-liquidation.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#liquidate - rebasing events\"",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events \"before each\" hook in \"#liquidate - rebasing events\"",
                      "timedOut": false,
                      "duration": 873,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "userToLiquidate = hre.users.testUserEight;\nuserToLiquidateTwo = hre.users.testUserNine;\nthis.collateral.setPrice(collateralPrice);\nthis.krAsset.setPrice(krAssetPrice);\n// Deposit collateral for liquidator\nawait (0, _collaterals.depositCollateral)({\n    user: hre.users.liquidator,\n    asset: this.collateral,\n    amount: liquidatorAmounts.collateralDeposits\n});\nawait (0, _testutils.leverageKrAsset)(userToLiquidate, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nawait (0, _testutils.leverageKrAsset)(userToLiquidateTwo, this.krAsset, this.collateral, userToLiquidateAmounts.krAssetCollateralDeposits);\nconst mcr = (0, _lib.fromBig)(await hre.Diamond.minimumCollateralizationRatio(), 8);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userToLiquidate.address)).to.lessThanOrEqual(mcr);\n(0, _chai.expect)(await (0, _liquidations.getCR)(userToLiquidateTwo.address)).to.lessThanOrEqual(mcr);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.false;",
                      "err": {},
                      "uuid": "aab7c151-9e47-46d6-83f7-73a94bc4d246",
                      "parentUUID": "ce3a7a91-5a96-475c-95a6-de68afd79d54",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow liquidation of healthy accounts after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 103,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.connect(hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address))).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "2c1de312-7f26-4381-838e-31e4cdfa9bbb",
                      "parentUUID": "ce3a7a91-5a96-475c-95a6-de68afd79d54",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow liquidation of healthy accounts after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should not allow liquidation of healthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 102,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nawait (0, _chai.expect)(hre.Diamond.connect(hre.users.liquidator).liquidate(userToLiquidate.address, this.krAsset.address, 1, this.collateral.address, await hre.Diamond.getMintedKreskoAssetsIndex(userToLiquidate.address, this.krAsset.address), await hre.Diamond.getDepositedCollateralAssetIndex(userToLiquidate.address, this.collateral.address))).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                      "err": {},
                      "uuid": "ad7364ce-f687-4600-b4ef-495670d2c94b",
                      "parentUUID": "ce3a7a91-5a96-475c-95a6-de68afd79d54",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a positive rebase",
                      "timedOut": false,
                      "duration": 560,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.collateral.setPrice(5);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.collateral)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "6542100c-a2f2-4d93-a462-ad07919ea35d",
                      "parentUUID": "ce3a7a91-5a96-475c-95a6-de68afd79d54",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow liquidations of unhealthy accounts after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should allow liquidations of unhealthy accounts after a negative rebase",
                      "timedOut": false,
                      "duration": 523,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.false;\nthis.krAsset.setPrice(rebasePrice * 2);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)).to.be.true;\nawait (0, _chai.expect)((0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.collateral)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "edee4399-156b-455e-bf33-edbeef32cc4b",
                      "parentUUID": "ce3a7a91-5a96-475c-95a6-de68afd79d54",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of krAssets after a positive rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should liquidate correct amount of krAssets after a positive rebase",
                      "timedOut": false,
                      "duration": 2740,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidate.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(userToLiquidate.address);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst rebasePrice = newPrice / denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidateTwo.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(userToLiquidateTwo.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.collateralSeized * denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.debtRepaid * denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "e1d33c63-c432-4b3a-9384-d97aca4f666f",
                      "parentUUID": "ce3a7a91-5a96-475c-95a6-de68afd79d54",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should liquidate correct amount of assets after a negative rebase",
                      "fullTitle": "Minter #liquidation #liquidate - rebasing events should liquidate correct amount of assets after a negative rebase",
                      "timedOut": false,
                      "duration": 2695,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Change price to make user position unhealthy\nconst startingPrice = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8);\nconst newPrice = startingPrice * 2;\nthis.krAsset.setPrice(newPrice);\nconst results = {\n    collateralSeized: 0,\n    debtRepaid: 0,\n    userOneValueAfter: 0,\n    userOneHFAfter: 0,\n    collateralSeizedRebase: 0,\n    debtRepaidRebase: 0,\n    userTwoValueAfter: 0,\n    userTwoHFAfter: 0\n};\n// Get values for a liquidation that happens before rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidate.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidate, this.krAsset, this.krAsset);\n    results.collateralSeized += values.collateralSeized;\n    results.debtRepaid += values.debtRepaid;\n}\nresults.userOneValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidate.address), 8);\nresults.userOneHFAfter = await (0, _liquidations.getCR)(userToLiquidate.address);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst rebasePrice = newPrice * denominator;\n// Rebase\nthis.krAsset.setPrice(rebasePrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n(0, _chai.expect)(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)).to.be.true;\n// Get values for a liquidation that happens after a rebase\nwhile(await hre.Diamond.isAccountLiquidatable(userToLiquidateTwo.address)){\n    const values = await (0, _liquidations.liquidate)(userToLiquidateTwo, this.krAsset, this.krAsset);\n    results.collateralSeizedRebase += values.collateralSeized;\n    results.debtRepaidRebase += values.debtRepaid;\n}\nresults.userTwoValueAfter = (0, _lib.fromBig)(await hre.Diamond.getAccountCollateralValue(userToLiquidateTwo.address), 8);\nresults.userTwoHFAfter = await (0, _liquidations.getCR)(userToLiquidateTwo.address);\n(0, _chai.expect)(results.userTwoHFAfter).to.closeTo(results.userOneHFAfter, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.collateralSeized / denominator).to.closeTo(results.collateralSeizedRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.debtRepaid / denominator).to.closeTo(results.debtRepaidRebase, INTEREST_RATE_DELTA);\n(0, _chai.expect)(results.userOneValueAfter).to.closeTo(results.userTwoValueAfter, INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "8a818683-5303-43c2-be36-3678e35e1194",
                      "parentUUID": "ce3a7a91-5a96-475c-95a6-de68afd79d54",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2c1de312-7f26-4381-838e-31e4cdfa9bbb",
                    "ad7364ce-f687-4600-b4ef-495670d2c94b",
                    "6542100c-a2f2-4d93-a462-ad07919ea35d",
                    "edee4399-156b-455e-bf33-edbeef32cc4b",
                    "e1d33c63-c432-4b3a-9384-d97aca4f666f",
                    "8a818683-5303-43c2-be36-3678e35e1194"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6723,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "d4733517-25ce-453a-b243-51cfa32cbdb9",
          "title": "Minter",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
          "file": "/src/test/minter/04-mint-repay.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "d6e993b7-826a-4b14-8024-02dd412e5467",
              "parentUUID": "d4733517-25ce-453a-b243-51cfa32cbdb9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Minter\"",
              "fullTitle": "Minter \"before each\" hook in \"Minter\"",
              "timedOut": false,
              "duration": 62,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.krAsset = this.krAssets.find((c)=>c.deployArgs.name === _testutils.defaultKrAssetArgs.name);\nawait this.krAsset.contract.grantRole(_testutils.Role.OPERATOR, _hardhat.default.users.deployer.address);\nthis.krAsset.setPrice(this.krAsset.deployArgs.price);\nthis.krAsset.setMarketOpen(this.krAsset.deployArgs.marketOpen);\n// Load account with collateral\nthis.initialBalance = (0, _lib.toBig)(100000);\nawait this.collateral.setBalance(_hardhat.default.users.userOne, this.initialBalance);\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userOne.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\nthis.collateral.setPrice(this.collateral.deployArgs.price);\n// User deposits 10,000 collateral\nawait (0, _collaterals.depositCollateral)({\n    amount: 10000,\n    user: _hardhat.default.users.userOne,\n    asset: this.collateral\n});",
              "err": {},
              "uuid": "00445d47-9a06-4ed5-acdd-a9afa0029059",
              "parentUUID": "d4733517-25ce-453a-b243-51cfa32cbdb9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a4745693-4c20-4f69-b1de-0c714cd3ff69",
              "title": "#mint+burn",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
              "file": "/src/test/minter/04-mint-repay.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                  "title": "#mint",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to mint whitelisted Kresko assets backed by collateral",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint whitelisted Kresko assets backed by collateral",
                      "timedOut": false,
                      "duration": 119,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _lib.toBig)(1);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMinted = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMinted).to.equal(mintAmount);\n// Confirm the user's Kresko asset balance has increased\nconst userBalance = await this.krAsset.mocks.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalance).to.equal(mintAmount);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter.eq(kreskoAssetTotalSupplyBefore.add(mintAmount)));",
                      "err": {},
                      "uuid": "1c58ed9d-df8c-4d27-8013-92087423e345",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow successive, valid mints of the same Kresko asset",
                      "fullTitle": "Minter #mint+burn #mint should allow successive, valid mints of the same Kresko asset",
                      "timedOut": false,
                      "duration": 361,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(5);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(5);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, secondMintAmount);\n// Confirm the array of the user's minted Kresko assets is unchanged\nconst mintedKreskoAssetsFinal = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedFinal = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedFinal).to.closeTo(firstMintAmount.add(secondMintAmount), INTEREST_RATE_DELTA);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceFinal).to.closeTo(amountMintedFinal, INTEREST_RATE_DELTA);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyFinal = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyFinal).to.closeTo(kreskoAssetTotalSupplyAfter.add(secondMintAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "9e5c8345-7f54-49ff-a550-269c3bddbf24",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint multiple different Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint multiple different Kresko assets",
                      "timedOut": false,
                      "duration": 1384,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyInitial = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyInitial).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsInitial = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsInitial).to.deep.equal([]);\n// Mint Kresko asset\nconst firstMintAmount = (0, _lib.toBig)(1);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, firstMintAmount);\n// Confirm the array of the user's minted Kresko assets has been pushed to.\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the amount minted is recorded for the user.\nconst amountMintedAfter = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(amountMintedAfter).to.equal(firstMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceAfter = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceAfter).to.equal(amountMintedAfter);\n// Confirm that the Kresko asset's total supply increased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyInitial.add(firstMintAmount));\n// ------------------------ Second mint ------------------------\n// Add second mock krAsset to protocol\nconst secondKrAssetArgs = {\n    name: \"SecondKreskoAsset\",\n    symbol: \"SecondKreskoAsset\",\n    price: 5,\n    marketOpen: true,\n    factor: 1,\n    supplyLimit: 100000,\n    closeFee: _testutils.defaultCloseFee,\n    openFee: 0\n};\nconst { contract: secondKreskoAsset  } = await (0, _krassets.addMockKreskoAsset)(secondKrAssetArgs);\n// Mint Kresko asset\nconst secondMintAmount = (0, _lib.toBig)(2);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, secondKreskoAsset.address, secondMintAmount);\n// Confirm that the second address has been pushed to the array of the user's minted Kresko assets\nconst mintedKreskoAssetsFinal = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsFinal).to.deep.equal([\n    this.krAsset.address,\n    secondKreskoAsset.address\n]);\n// Confirm the second mint amount is recorded for the user\nconst amountMintedAssetTwo = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, secondKreskoAsset.address);\n(0, _chai.expect)(amountMintedAssetTwo).to.equal(secondMintAmount);\n// Confirm the Kresko Asset as been minted to the user from Kresko.sol\nconst userBalanceFinal = await secondKreskoAsset.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalanceFinal).to.equal(amountMintedAssetTwo);\n// Confirm that the Kresko asset's total supply increased as expected\nconst secondKreskoAssetTotalSupply = await secondKreskoAsset.totalSupply();\n(0, _chai.expect)(secondKreskoAssetTotalSupply).to.equal(secondMintAmount);",
                      "err": {},
                      "uuid": "643b409c-190f-4041-abc0-490398311bf6",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should allow users to mint Kresko assets with USD value equal to the minimum debt value",
                      "timedOut": false,
                      "duration": 111,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is equal to the contract's current minimum debt value\nconst mintAmount = (0, _lib.toBig)(1); // 1 * $10 = $10\nconst mintAmountUSDValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await _hardhat.default.Diamond.minimumDebtValue();\n(0, _chai.expect)((0, _lib.fromBig)(mintAmountUSDValue, 8)).to.equal(Number(currMinimumDebtValue) / 10 ** 8);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Confirm that the mint was successful and user's balances have increased\nconst finalKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(finalKreskoAssetDebt).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "d053fb61-47e2-42dd-9ea5-0b3bd546c9a3",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow a trusted address to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should allow a trusted address to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 125,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\n// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// userThree (trusted contract) mints Kresko asset for userOne\nconst mintAmount = (0, _lib.toBig)(1);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userThree).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Check that debt exists now for userOne\nconst userOneDebtFromUserThreeMint = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userOneDebtFromUserThreeMint).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "4cf0617a-430f-4526-9cdd-5f221d065701",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetMinted event",
                      "fullTitle": "Minter #mint+burn #mint should emit KreskoAssetMinted event",
                      "timedOut": false,
                      "duration": 73,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mintAmount = (0, _lib.toBig)(500);\nconst tx = await _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"KreskoAssetMinted\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.amount).to.equal(mintAmount);",
                      "err": {},
                      "uuid": "f05832d8-6c65-45b0-a201-c13f7bfd60da",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #mint should not allow untrusted account to mint Kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 35,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Initially the Kresko asset's total supply should be 0\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyBefore).to.equal(0);\n// Initially, the array of the user's minted kresko assets should be empty.\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Mint Kresko asset\nconst mintAmount = (0, _lib.toBig)(1);\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userTwo.address, this.krAsset.address, mintAmount)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userOne.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "236b958a-acbb-4cbb-827e-ab31a790a833",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets if the resulting position's USD value is less than the minimum debt value",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Confirm that the user does not have an existing debt position for this Kresko asset\nconst initialKreskoAssetDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(initialKreskoAssetDebt).to.equal(0);\n// Confirm that the mint amount's USD value is below the contract's current minimum debt value\nconst minAmount = 100000000; // 8 decimals\nconst mintAmount = minAmount - 1;\nconst mintAmountUSDValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\nconst currMinimumDebtValue = await _hardhat.default.Diamond.minimumDebtValue();\n(0, _chai.expect)(Number(mintAmountUSDValue)).to.be.lessThan(Number(currMinimumDebtValue));\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_MINT_AMOUNT_LOW);",
                      "err": {},
                      "uuid": "e43d1ca3-ff26-4978-9f55-6bfc790d7170",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint non-whitelisted Kresko assets",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint non-whitelisted Kresko assets",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Attempt to mint a non-deployed, non-whitelisted Kresko asset\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, \"0x0000000000000000000000000000000000000002\", (0, _lib.toBig)(1))).to.be.revertedWith(_errors.Error.KRASSET_DOESNT_EXIST);",
                      "err": {},
                      "uuid": "72144826-5e48-4d4c-8653-762974fc5846",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow users to mint Kresko assets over their collateralization ratio limit",
                      "timedOut": false,
                      "duration": 33,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// We can ignore price and collateral factor as both this.collateral and this.krAsset both\n// have the same price ($10) and same collateral factor (1)\nconst collateralAmountDeposited = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userOne.address, this.collateral.address);\n// Apply 150% MCR and increase deposit amount to be above the maximum allowed by MCR\nconst mcrAmount = (0, _lib.fromBig)(collateralAmountDeposited) / 1.5;\nconst mintAmount = (0, _lib.toBig)(mcrAmount + 1);\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount)).to.be.revertedWith(_errors.Error.KRASSET_COLLATERAL_LOW);",
                      "err": {},
                      "uuid": "f1d3b56b-48da-4db4-8752-7aa1c83c3c1c",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of any Kresko asset amount over its maximum limit",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of any Kresko asset amount over its maximum limit",
                      "timedOut": false,
                      "duration": 41,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// User deposits another 10,000 collateral tokens, enabling mints of up to 20,000/1.5 = ~13,333 kresko asset tokens\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).depositCollateral(_hardhat.default.users.userOne.address, this.collateral.address, (0, _lib.toBig)(10000))).not.to.be.reverted;\nconst krAsset = await _hardhat.default.Diamond.kreskoAsset(this.krAsset.address);\nconst overSupplyLimit = (0, _lib.fromBig)(krAsset.supplyLimit) + 1;\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, (0, _lib.toBig)(overSupplyLimit))).to.be.revertedWith(_errors.Error.KRASSET_MAX_SUPPLY_REACHED);",
                      "err": {},
                      "uuid": "97f82031-5f0f-4b36-8c26-ede32a62bdfb",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow the minting of kreskoAssets if the market is closed",
                      "fullTitle": "Minter #mint+burn #mint should not allow the minting of kreskoAssets if the market is closed",
                      "timedOut": false,
                      "duration": 88,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "this.krAsset.setMarketOpen(false);\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, (0, _lib.toBig)(1))).to.be.revertedWith(_errors.Error.KRASSET_MARKET_CLOSED);\n// Confirm that the user has no minted krAssets\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore).to.deep.equal([]);\n// Confirm that opening the market makes krAsset mintable again\nthis.krAsset.setMarketOpen(true);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, (0, _lib.toBig)(1));\n// Confirm the array of the user's minted Kresko assets has been pushed to\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);",
                      "err": {},
                      "uuid": "89bbdb1d-c8ab-4992-83e2-90f0afa4d647",
                      "parentUUID": "fc37a5ca-d057-474d-aad2-f0fc335090b1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1c58ed9d-df8c-4d27-8013-92087423e345",
                    "9e5c8345-7f54-49ff-a550-269c3bddbf24",
                    "643b409c-190f-4041-abc0-490398311bf6",
                    "d053fb61-47e2-42dd-9ea5-0b3bd546c9a3",
                    "4cf0617a-430f-4526-9cdd-5f221d065701",
                    "f05832d8-6c65-45b0-a201-c13f7bfd60da",
                    "236b958a-acbb-4cbb-827e-ab31a790a833",
                    "e43d1ca3-ff26-4978-9f55-6bfc790d7170",
                    "72144826-5e48-4d4c-8653-762974fc5846",
                    "f1d3b56b-48da-4db4-8752-7aa1c83c3c1c",
                    "97f82031-5f0f-4b36-8c26-ede32a62bdfb",
                    "89bbdb1d-c8ab-4992-83e2-90f0afa4d647"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2436,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "7f61fae1-d0ae-48b5-b41d-b3e0e4e3dd62",
                  "title": "#mint - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "23fe23f1-c515-4513-a2fe-76f8d0599e21",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before positive rebase",
                          "timedOut": false,
                          "duration": 108,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "6ce6588e-d302-464d-a513-5f0ba73dd5eb",
                          "parentUUID": "23fe23f1-c515-4513-a2fe-76f8d0599e21",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted before negative rebase",
                          "timedOut": false,
                          "duration": 109,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjsuted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "9d22a219-4a1a-4d49-aae2-8e8c71b3eb61",
                          "parentUUID": "23fe23f1-c515-4513-a2fe-76f8d0599e21",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 108,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.mul(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "d308c3c4-f81a-4a0c-8974-43e3b662a0f3",
                          "parentUUID": "23fe23f1-c515-4513-a2fe-76f8d0599e21",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt amounts are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 112,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst balanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the minted balance is adjusted by the rebase\nconst [balanceAfter, balanceAfterAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\n(0, _chai.expect)(balanceAfter).to.bignumber.equal(mintAmount.div(denominator));\n(0, _chai.expect)(balanceBefore).to.not.bignumber.equal(balanceAfter);\n// Ensure that debt amount is also adjusted by the rebase\nconst debtAmount = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterAdjusted).to.bignumber.equal(debtAmount);",
                          "err": {},
                          "uuid": "848568c8-9d8e-455f-940e-958a284c4955",
                          "parentUUID": "23fe23f1-c515-4513-a2fe-76f8d0599e21",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "6ce6588e-d302-464d-a513-5f0ba73dd5eb",
                        "9d22a219-4a1a-4d49-aae2-8e8c71b3eb61",
                        "d308c3c4-f81a-4a0c-8974-43e3b662a0f3",
                        "848568c8-9d8e-455f-940e-958a284c4955"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 437,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "fffe893d-4a31-41f8-8dda-5988a0cbd510",
                      "title": "debt values are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when mint is made before positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before positive rebase",
                          "timedOut": false,
                          "duration": 127,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.div(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "991de010-6cbd-4f19-a522-90d684954d68",
                          "parentUUID": "fffe893d-4a31-41f8-8dda-5988a0cbd510",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when mint is made before negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when mint is made before negative rebase",
                          "timedOut": false,
                          "duration": 132,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\nconst valueBeforeRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Adjust price accordingly\nconst assetPrice = await this.krAsset.getPrice();\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\n// Rebase the asset according to params\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure that the value inside protocol matches the value before rebase\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "b6bec56c-2722-41d5-84cf-221e56480991",
                          "parentUUID": "fffe893d-4a31-41f8-8dda-5988a0cbd510",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after positive rebase",
                          "timedOut": false,
                          "duration": 117,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.mul(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice, 8) / denominator);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "05c5ff97-dcd6-430b-acf7-73a36b10b3d7",
                          "parentUUID": "fffe893d-4a31-41f8-8dda-5988a0cbd510",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted after negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values are calculated correctly when minted after negative rebase",
                          "timedOut": false,
                          "duration": 119,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Equal value after rebase\nconst equalMintAmount = mintAmount.div(denominator);\nconst assetPrice = await this.krAsset.getPrice();\n// Get value of the future mint before rebase\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price accordingly\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPrice.mul(denominator), 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, equalMintAmount);\n// Ensure that value after mint matches what is expected\nconst valueAfterRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(valueAfterRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));",
                          "err": {},
                          "uuid": "b2ca9ad8-d2bd-4b7b-9994-f09f860efe40",
                          "parentUUID": "fffe893d-4a31-41f8-8dda-5988a0cbd510",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "991de010-6cbd-4f19-a522-90d684954d68",
                        "b6bec56c-2722-41d5-84cf-221e56480991",
                        "05c5ff97-dcd6-430b-acf7-73a36b10b3d7",
                        "b2ca9ad8-d2bd-4b7b-9994-f09f860efe40"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 495,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "53c91977-751b-4099-8cbe-2d537c583307",
                      "title": "debt values and amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when minted before and after a positive rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a positive rebase",
                          "timedOut": false,
                          "duration": 305,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintAmountAfterRebase = mintAmount.mul(denominator);\nconst assetPriceRebase = assetPrice.div(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, this.krAsset)).to.bignumber.equal(debtValueAfterFirstMint);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterFirstRebase, this.krAsset)).to.bignumber.equal(valueBeforeRebase);\n// Mint after rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt amounts and balances match\nconst balanceAfterSecondMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// Ensure balance matches\nconst expectedBalanceAfterSecondMint = balanceAfterFirstRebase.add(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterSecondMint).to.bignumber.equal(expectedBalanceAfterSecondMint);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(await (0, _calculations.fromScaledAmount)(debtValueAfterSecondMint, this.krAsset)).to.bignumber.closeTo(debtValueAfterFirstMint.mul(2), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(valueBeforeRebase.mul(2), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "78092985-dc4c-425c-834f-48d682c9596d",
                          "parentUUID": "53c91977-751b-4099-8cbe-2d537c583307",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when minted before and after a negative rebase",
                          "fullTitle": "Minter #mint+burn #mint - rebase events debt values and amounts are calculated correctly when minted before and after a negative rebase",
                          "timedOut": false,
                          "duration": 302,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\nconst assetPrice = await this.krAsset.getPrice();\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintAmountAfterRebase = mintAmount.div(denominator);\nconst assetPriceRebase = assetPrice.mul(denominator);\n// Get value of the future mint\nconst valueBeforeRebase = await userOne.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Mint before rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get results\nconst balanceAfterFirstMint = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst debtAmountAfterFirstMint = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfterFirstMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n// Assert\n(0, _chai.expect)(balanceAfterFirstMint).to.bignumber.equal(debtAmountAfterFirstMint);\n(0, _chai.expect)(valueBeforeRebase).to.bignumber.equal(debtValueAfterFirstMint);\n// Adjust price and rebase\nthis.krAsset.setPrice((0, _lib.fromBig)(assetPriceRebase, 8));\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Ensure debt amounts and balances match\nconst [balanceAfterFirstRebase, balanceAfterFirstRebaseAdjusted] = await (0, _krassets.getDebtIndexAdjustedBalance)(_hardhat.default.users.userOne, this.krAsset);\nconst debtAmountAfterFirstRebase = await userOne.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(balanceAfterFirstRebase).to.bignumber.equal(mintAmountAfterRebase);\n(0, _chai.expect)(balanceAfterFirstRebaseAdjusted).to.bignumber.equal(debtAmountAfterFirstRebase);\n// Ensure debt usd values match\nconst debtValueAfterFirstRebase = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint, this.krAsset));\n(0, _chai.expect)(debtValueAfterFirstRebase).to.bignumber.equal(await (0, _calculations.toScaledAmount)(valueBeforeRebase, this.krAsset));\n// Mint after rebase\nawait userOne.mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmountAfterRebase);\n// Ensure debt usd values match\nconst debtValueAfterSecondMint = await userOne.getAccountKrAssetValue(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(debtValueAfterFirstMint.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);\n(0, _chai.expect)(debtValueAfterSecondMint).to.bignumber.closeTo(await (0, _calculations.toScaledAmount)(valueBeforeRebase.mul(2), this.krAsset), INTEREST_RATE_PRICE_DELTA);",
                          "err": {},
                          "uuid": "b96017c9-e8db-4ec7-8d88-a7639ef7acfd",
                          "parentUUID": "53c91977-751b-4099-8cbe-2d537c583307",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "78092985-dc4c-425c-834f-48d682c9596d",
                        "b96017c9-e8db-4ec7-8d88-a7639ef7acfd"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 607,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                  "title": "#burn",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn\"",
                      "fullTitle": "Minter #mint+burn #burn \"before each\" hook in \"#burn\"",
                      "timedOut": false,
                      "duration": 152,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Create userOne debt position\nthis.mintAmount = (0, _lib.toBig)(2);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount);\n// Load userThree with Kresko Assets\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userThree.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userThree.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.users.userThree.address)).to.equal(this.initialBalance);\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userThree).depositCollateral(_hardhat.default.users.userThree.address, this.collateral.address, (0, _lib.toBig)(10000))).not.to.be.reverted;\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userThree).mintKreskoAsset(_hardhat.default.users.userThree.address, this.krAsset.address, this.mintAmount);",
                      "err": {},
                      "uuid": "e7e28892-b19d-4f1e-8f79-8b4e891a7b3b",
                      "parentUUID": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow users to burn some of their Kresko asset balances",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn some of their Kresko asset balances",
                      "timedOut": false,
                      "duration": 98,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user no long holds the burned Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "8929f996-0be9-4b4e-b278-0b4872df82d3",
                      "parentUUID": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn their full balance of a Kresko asset",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn their full balance of a Kresko asset",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "652e4fba-cc7f-4fa0-bdd2-7f3acac7eeff",
                      "parentUUID": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn its own Kresko asset balances on behalf of another user",
                      "timedOut": false,
                      "duration": 123,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// Grant userThree the MANAGER role\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.deployer).grantRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.hasRole(_testutils.Role.MANAGER, _hardhat.default.users.userThree.address)).to.equal(true);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Burn Kresko asset\nconst burnAmount = (0, _lib.toBig)(1);\nconst kreskoAssetIndex = 0;\n// User three burns it's KreskoAsset to reduce userOnes debt\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userThree).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;\n// Confirm the userOne had no effect on it's kreskoAsset balance\nconst userOneBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(userOneBalance).to.equal(this.mintAmount);\n// Confirm the userThree no long holds the burned Kresko asset amount\nconst userThreeBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userThree.address);\n(0, _chai.expect)(userThreeBalance).to.equal(this.mintAmount.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).to.equal(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst userOneDebt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(userOneDebt).to.closeTo(this.mintAmount.sub(burnAmount), INTEREST_RATE_DELTA);",
                      "err": {},
                      "uuid": "67b00ed5-5882-41ff-95a5-5c4e3260441d",
                      "parentUUID": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "fullTitle": "Minter #mint+burn #burn should allow trusted address to burn the full balance of its Kresko asset on behalf another user",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "10b0e94d-54bb-40d2-9697-134842e3ddad",
                      "parentUUID": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "fullTitle": "Minter #mint+burn #burn should burn up to the minimum debt position amount if the requested burn would result in a position under the minimum debt value",
                      "timedOut": false,
                      "duration": 125,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const userBalanceBefore = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\nconst kreskoAssetTotalSupplyBefore = await this.krAsset.contract.totalSupply();\n// Calculate actual burn amount\nconst userOneDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst minDebtValue = (0, _lib.fromBig)(await _hardhat.default.Diamond.minimumDebtValue(), 8);\nconst oraclePrice = this.krAsset.deployArgs.price;\nconst burnAmount = (0, _lib.toBig)((0, _lib.fromBig)(userOneDebt) - minDebtValue / oraclePrice);\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Confirm the user holds the expected Kresko asset amount\nconst userBalance = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n// expect(fromBig(userBalance)).to.equal(fromBig(userBalanceBefore.sub(burnAmount)));\n(0, _chai.expect)(userBalance).eq(userBalanceBefore.sub(burnAmount));\n// Confirm that the Kresko asset's total supply decreased as expected\nconst kreskoAssetTotalSupplyAfter = await this.krAsset.contract.totalSupply();\n(0, _chai.expect)(kreskoAssetTotalSupplyAfter).eq(kreskoAssetTotalSupplyBefore.sub(burnAmount));\n// Confirm the array of the user's minted Kresko assets still contains the asset's address\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter).to.deep.equal([\n    this.krAsset.address\n]);\n// Confirm the user's minted kresko asset amount has been updated\nconst newUserDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(newUserDebt).to.be.equal(userOneDebt.sub(burnAmount));",
                      "err": {},
                      "uuid": "f6b5a179-596a-4fba-bd95-29cd30fc0a4d",
                      "parentUUID": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should emit KreskoAssetBurned event",
                      "fullTitle": "Minter #mint+burn #burn should emit KreskoAssetBurned event",
                      "timedOut": false,
                      "duration": 64,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst tx = await _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, this.mintAmount.div(5), kreskoAssetIndex);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"KreskoAssetBurned\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.kreskoAsset).to.equal(this.krAsset.address);\n(0, _chai.expect)(event.amount).to.equal(this.mintAmount.div(5));",
                      "err": {},
                      "uuid": "3fa7f360-c7ed-402c-8e7e-22a0a0038a35",
                      "parentUUID": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "fullTitle": "Minter #mint+burn #burn should allow users to burn Kresko assets without giving token approval to Kresko.sol contract",
                      "timedOut": false,
                      "duration": 141,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const secondMintAmount = 1;\nconst burnAmount = this.mintAmount.add(secondMintAmount);\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, secondMintAmount)).to.not.be.reverted;\nconst kreskoAssetIndex = 0;\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.not.be.reverted;",
                      "err": {},
                      "uuid": "69852214-5d78-45a8-add4-eb237abbe54b",
                      "parentUUID": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn an amount of 0",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn an amount of 0",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, 0, kreskoAssetIndex)).to.be.revertedWith(_errors.Error.ZERO_BURN);",
                      "err": {},
                      "uuid": "09ead1ec-4888-4302-a1b5-4da0fd682079",
                      "parentUUID": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "fullTitle": "Minter #mint+burn #burn should not allow untrusted address to burn any kresko assets on behalf of another user",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userThree).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, 100, kreskoAssetIndex)).to.be.revertedWith(`AccessControl: account ${_hardhat.default.users.userThree.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "40bf4530-250b-43c3-9d3f-dbf562f70636",
                      "parentUUID": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow users to burn more kresko assets than they hold as debt",
                      "fullTitle": "Minter #mint+burn #burn should not allow users to burn more kresko assets than they hold as debt",
                      "timedOut": false,
                      "duration": 33,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const kreskoAssetIndex = 0;\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst burnAmount = debt.add((0, _lib.toBig)(1));\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(_hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex)).to.be.reverted;",
                      "err": {},
                      "uuid": "c18d6283-9cec-4fd6-a29c-2d30e8f4a07b",
                      "parentUUID": "226d9084-5bfe-416d-b1a1-3c06efd597a5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "68ac9d4e-7b4e-42b4-8d6c-d7afee93763d",
                      "title": "Protocol open fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol open fee should charge the protocol open fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 198,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const openFee = 0.01;\nconst openFeeBig = (0, _lib.toBig)(openFee); // use toBig() to emulate closeFee's 18 decimals on contract\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\nawait this.krAsset.update({\n    ..._testutils.defaultKrAssetArgs,\n    openFee\n});\nconst mintAmount = (0, _lib.toBig)(1);\nconst mintValue = mintAmount.mul(this.krAsset.deployArgs.price);\nconst expectedFeeValue = mintValue.mul(openFeeBig);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Mint Kresko asset\nconst tx = await _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).mintKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"OpenFeePaid\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);\n// Now verify that calcExpectedFee function returns accurate fee amount\nconst feeRes = await _hardhat.default.Diamond.calcExpectedFee(_hardhat.default.users.userOne.address, this.krAsset.address, mintAmount, _testutils.Fee.OPEN);\nconst output = feeRes.toString().split(\",\");\nconst openFeeAmount = Number(output[1]) / 10 ** 18;\n(0, _chai.expect)(openFeeAmount).eq(normalizedExpectedCollateralFeeAmount);",
                          "err": {},
                          "uuid": "8299313b-d008-4963-b7eb-667f71492499",
                          "parentUUID": "68ac9d4e-7b4e-42b4-8d6c-d7afee93763d",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "8299313b-d008-4963-b7eb-667f71492499"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 198,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "80de9595-be81-4627-9d2c-f0e5e90a7afe",
                      "title": "Protocol close fee",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge the protocol close fee with a single collateral asset if the deposit amount is sufficient and emit CloseFeePaid event",
                          "timedOut": false,
                          "duration": 95,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const burnAmount = (0, _lib.toBig)(1);\nconst burnValue = burnAmount.mul(this.krAsset.deployArgs.price);\nconst closeFee = (0, _lib.toBig)(this.krAsset.deployArgs.closeFee); // use toBig() to emulate closeFee's 18 decimals on contract\nconst expectedFeeValue = burnValue.mul(closeFee);\nconst expectedCollateralFeeAmount = expectedFeeValue.div(this.collateral.deployArgs.price);\n// Get the balances prior to the fee being charged.\nconst kreskoCollateralAssetBalanceBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceBefore = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Burn Kresko asset\nconst kreskoAssetIndex = 0;\nconst tx = await _hardhat.default.Diamond.connect(_hardhat.default.users.userOne).burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, burnAmount, kreskoAssetIndex);\n// Get the balances after the fees have been charged.\nconst kreskoCollateralAssetBalanceAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nconst feeRecipientCollateralBalanceAfter = await this.collateral.contract.balanceOf(await _hardhat.default.Diamond.feeRecipient());\n// Ensure the amount gained / lost by the kresko contract and the fee recipient are as expected\nconst feeRecipientBalanceIncrease = feeRecipientCollateralBalanceAfter.sub(feeRecipientCollateralBalanceBefore);\n(0, _chai.expect)(kreskoCollateralAssetBalanceBefore.sub(kreskoCollateralAssetBalanceAfter)).to.equal(feeRecipientBalanceIncrease);\n// Normalize expected amount because protocol closeFee has 10**18 decimals\nconst normalizedExpectedCollateralFeeAmount = (0, _lib.fromBig)(expectedCollateralFeeAmount) / 10 ** 18;\n(0, _chai.expect)(feeRecipientBalanceIncrease).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\n// Ensure the emitted event is as expected.\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.account).to.equal(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(event.paymentCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)(event.paymentAmount).to.equal((0, _lib.toBig)(normalizedExpectedCollateralFeeAmount));\nconst expectedFeeValueNormalizedA = expectedFeeValue.div(10 ** 10); // Normalize krAsset price's 10**10 decimals on contract\nconst expectedFeeValueNormalizedB = (0, _lib.fromBig)(expectedFeeValueNormalizedA); // Normalize closeFee's 10**18 decimals on contract\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValueNormalizedB);",
                          "err": {},
                          "uuid": "d3cf6a63-5432-45c2-a5c7-42088131bdf5",
                          "parentUUID": "80de9595-be81-4627-9d2c-f0e5e90a7afe",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a positive rebase",
                          "timedOut": false,
                          "duration": 368,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, _krassets.mintKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: (0, _lib.toBig)(mintAmount)\n});\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = true;\nconst priceAfter = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) / denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount * denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "cbda0d7e-d34c-42ac-881e-c5004ef06ebd",
                          "parentUUID": "80de9595-be81-4627-9d2c-f0e5e90a7afe",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should charge correct protocol close fee after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn Protocol close fee should charge correct protocol close fee after a negative rebase",
                          "timedOut": false,
                          "duration": 377,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const mintAmount = 10;\nconst wAmount = 1;\nconst burnAmount = 1;\nconst expectedFeeAmount = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.closeFee);\nconst expectedFeeValue = (0, _lib.toBig)(burnAmount * this.krAsset.deployArgs.price * this.krAsset.deployArgs.closeFee, 8);\nawait (0, _krassets.mintKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: (0, _lib.toBig)(mintAmount)\n});\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst event = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmount\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(event.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(event.paymentValue).to.equal(expectedFeeValue);\n// rebase params\nconst denominator = 4;\nconst positive = false;\nconst priceAfter = (0, _lib.fromBig)(await this.krAsset.getPrice(), 8) * denominator;\nthis.krAsset.setPrice(priceAfter);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nconst burnAmountRebase = burnAmount / denominator;\nawait (0, _collaterals.withdrawCollateral)({\n    user: _hardhat.default.users.userThree,\n    asset: this.collateral,\n    amount: wAmount\n});\nconst eventAfterRebase = await (0, _lib.getInternalEvent)(await (0, _krassets.burnKrAsset)({\n    user: _hardhat.default.users.userThree,\n    asset: this.krAsset,\n    amount: burnAmountRebase\n}), _hardhat.default.Diamond, \"CloseFeePaid\");\n(0, _chai.expect)(eventAfterRebase.paymentCollateralAsset).to.equal(event.paymentCollateralAsset);\n(0, _chai.expect)(eventAfterRebase.paymentAmount).to.equal(expectedFeeAmount);\n(0, _chai.expect)(eventAfterRebase.paymentValue).to.equal(expectedFeeValue);",
                          "err": {},
                          "uuid": "d1bf0b35-56df-4bb6-b1c7-1917900d911d",
                          "parentUUID": "80de9595-be81-4627-9d2c-f0e5e90a7afe",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "d3cf6a63-5432-45c2-a5c7-42088131bdf5",
                        "cbda0d7e-d34c-42ac-881e-c5004ef06ebd",
                        "d1bf0b35-56df-4bb6-b1c7-1917900d911d"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 840,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [
                    "8929f996-0be9-4b4e-b278-0b4872df82d3",
                    "67b00ed5-5882-41ff-95a5-5c4e3260441d",
                    "f6b5a179-596a-4fba-bd95-29cd30fc0a4d",
                    "3fa7f360-c7ed-402c-8e7e-22a0a0038a35",
                    "69852214-5d78-45a8-add4-eb237abbe54b",
                    "09ead1ec-4888-4302-a1b5-4da0fd682079",
                    "40bf4530-250b-43c3-9d3f-dbf562f70636",
                    "c18d6283-9cec-4fd6-a29c-2d30e8f4a07b"
                  ],
                  "failures": [],
                  "pending": [
                    "652e4fba-cc7f-4fa0-bdd2-7f3acac7eeff",
                    "10b0e94d-54bb-40d2-9697-134842e3ddad"
                  ],
                  "skipped": [],
                  "duration": 614,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "57782cfa-7421-4185-b40d-c11e09f2fd59",
                  "title": "#burn - rebase events",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                  "file": "/src/test/minter/04-mint-repay.ts",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"#burn - rebase events\"",
                      "fullTitle": "Minter #mint+burn #burn - rebase events \"before each\" hook in \"#burn - rebase events\"",
                      "timedOut": false,
                      "duration": 64,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmountInt,\n    user: _hardhat.default.users.userOne\n});",
                      "err": {},
                      "uuid": "b0422f02-90df-46b9-a605-2038a1eed218",
                      "parentUUID": "57782cfa-7421-4185-b40d-c11e09f2fd59",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "8b7cd5f0-9cea-4b2d-a956-aadd589ad0e0",
                      "title": "debt amounts are calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 165,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(0);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _lib.fromBig)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.closeTo((0, _lib.toBig)(expectedBalanceAfterBurn / denominator), 100000); // WEI",
                          "err": {},
                          "uuid": "2db665ef-75d3-4267-a2d4-bc03c4d75e65",
                          "parentUUID": "8b7cd5f0-9cea-4b2d-a956-aadd589ad0e0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 132,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).mul(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.mul(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.div(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "7e0ad755-e26a-4855-9f6b-aa5ac77f4e89",
                          "parentUUID": "8b7cd5f0-9cea-4b2d-a956-aadd589ad0e0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 312,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt;\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = 0;\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\nconst expectedBalanceAfterBurn = 0;\nconst balanceAfterBurn = (0, _lib.fromBig)(await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address));\n(0, _chai.expect)(balanceAfterBurn).to.equal(expectedBalanceAfterBurn);\n// Anchor krAssets should equal balance * denominator\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal((0, _lib.toBig)(expectedBalanceAfterBurn * denominator)); // WEI",
                          "err": {},
                          "uuid": "e94c98a5-c92b-43cd-baa0-d4eaa20fab52",
                          "parentUUID": "8b7cd5f0-9cea-4b2d-a956-aadd589ad0e0",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt amounts are calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 127,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst repayAmount = debt.div(2);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, repayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\n// Calc expected value with last update\nconst expectedDebt = mintAmount.div(2).div(denominator);\n(0, _chai.expect)(debtAfter).to.bignumber.equal(expectedDebt);\n// Should be all burned\nconst expectedBalanceAfter = mintAmount.div(denominator).sub(repayAmount);\nconst balanceAfterBurn = await this.krAsset.contract.balanceOf(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(balanceAfterBurn).to.bignumber.equal(expectedBalanceAfter);\n// All wkrAssets should be burned\nconst expectedwkrBalance = mintAmount.sub(repayAmount.mul(denominator));\nconst wkrAssetBalanceKresko = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(wkrAssetBalanceKresko).to.equal(expectedwkrBalance);",
                          "err": {},
                          "uuid": "425a01df-d457-4239-b505-f8b53045bf08",
                          "parentUUID": "8b7cd5f0-9cea-4b2d-a956-aadd589ad0e0",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "2db665ef-75d3-4267-a2d4-bc03c4d75e65",
                        "7e0ad755-e26a-4855-9f6b-aa5ac77f4e89",
                        "e94c98a5-c92b-43cd-baa0-d4eaa20fab52",
                        "425a01df-d457-4239-b505-f8b53045bf08"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 736,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    },
                    {
                      "uuid": "1728203a-a42d-4ea8-8040-9f2ebadea153",
                      "title": "debt value and mintedKreskoAssets book-keeping is calculated correctly",
                      "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/04-mint-repay.ts",
                      "file": "/src/test/minter/04-mint-repay.ts",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "when repaying all debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a positive rebase",
                          "timedOut": false,
                          "duration": 253,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst fullRepayAmount = mintAmount.mul(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "0d3ea7fa-5acc-4b4e-97e8-931de2c11e5b",
                          "parentUUID": "1728203a-a42d-4ea8-8040-9f2ebadea153",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a positive rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a positive rebase",
                          "timedOut": false,
                          "duration": 161,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = true;\nconst mintValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.div(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Should contain minted krAsset\nconst mintedKreskoAssetsBeforeBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsBeforeBurn).to.contain(this.krAsset.address);\n// Burn assets\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "947e8f51-82f1-4424-871a-05f698c0767f",
                          "parentUUID": "1728203a-a42d-4ea8-8040-9f2ebadea153",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying all debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying all debt after a negative rebase",
                          "timedOut": false,
                          "duration": 119,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst fullRepayAmount = mintAmount.div(denominator);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, fullRepayAmount, 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n(0, _chai.expect)(debtValueAfter).to.equal(0);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "eaf25970-48dd-4094-9e77-ca5acf4b21c1",
                          "parentUUID": "1728203a-a42d-4ea8-8040-9f2ebadea153",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "when repaying partial debt after a negative rebase",
                          "fullTitle": "Minter #mint+burn #burn - rebase events debt value and mintedKreskoAssets book-keeping is calculated correctly when repaying partial debt after a negative rebase",
                          "timedOut": false,
                          "duration": 147,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const userOne = _hardhat.default.Diamond.connect(_hardhat.default.users.userOne);\n// Rebase params\nconst denominator = 4;\nconst positive = false;\nconst mintValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, mintAmount, false);\n// Adjust price according to rebase params\nconst assetPrice = await this.krAsset.getPrice();\nconst newPrice = (0, _lib.fromBig)(assetPrice.mul(denominator), 8);\nthis.krAsset.setPrice(newPrice);\nawait this.krAsset.contract.rebase((0, _lib.toBig)(denominator), positive, []);\n// Pay half of debt\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nawait userOne.burnKreskoAsset(_hardhat.default.users.userOne.address, this.krAsset.address, debt.div(2), 0);\n// Debt value after half repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(_hardhat.default.users.userOne.address, this.krAsset.address);\nconst debtValueAfter = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, debtAfter, false);\n// Calc expected value with last update\nconst expectedValue = mintValue.div(2);\n(0, _chai.expect)(debtValueAfter).to.equal(expectedValue);\n// Should still contain minted krAsset\nconst mintedKreskoAssetsAfterBurn = await _hardhat.default.Diamond.getMintedKreskoAssets(_hardhat.default.users.userOne.address);\n(0, _chai.expect)(mintedKreskoAssetsAfterBurn).to.contain(this.krAsset.address);",
                          "err": {},
                          "uuid": "e72e75f4-da0d-4975-83df-3da64025ac77",
                          "parentUUID": "1728203a-a42d-4ea8-8040-9f2ebadea153",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0d3ea7fa-5acc-4b4e-97e8-931de2c11e5b",
                        "947e8f51-82f1-4424-871a-05f698c0767f",
                        "eaf25970-48dd-4094-9e77-ca5acf4b21c1",
                        "e72e75f4-da0d-4975-83df-3da64025ac77"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 680,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 15000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "147a7885-f373-4335-9a39-98f4b61f3b92",
          "title": "CollateralReceiver - UncheckedCollateralWithdraw",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
          "file": "/src/test/minter/05-collateral-receiver.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "5b4d077a-a687-4182-9eb5-2a51682f9117",
              "parentUUID": "147a7885-f373-4335-9a39-98f4b61f3b92",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw \"before each\" hook in \"CollateralReceiver - UncheckedCollateralWithdraw\"",
              "timedOut": false,
              "duration": 783,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.secondCollateral = await (0, _collaterals.addMockCollateralAsset)({\n    name: \"SecondCollateral\",\n    price: 1,\n    factor: 1,\n    decimals: 18\n});\nthis.collateral = this.collaterals.find((c)=>c.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.krAsset = this.krAssets.find((c)=>c.deployArgs.name === _mocks.defaultKrAssetArgs.name);\nthis.krAsset.setPrice(10);\nthis.initialBalance = (0, _lib.toBig)(100000);\nawait this.collateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userFive.address]: this.initialBalance\n});\nawait this.collateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userFive.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance\n    }\n});\n(0, _chai.expect)(await this.collateral.contract.balanceOf(_hardhat.default.users.userFive.address)).to.equal(this.initialBalance);\nthis.depositArgs = {\n    user: _hardhat.default.users.userFive,\n    asset: this.collateral,\n    amount: (0, _lib.toBig)(10000)\n};\nthis.mintArgs = {\n    user: _hardhat.default.users.userFive,\n    asset: this.krAsset,\n    amount: (0, _lib.toBig)(2000)\n};\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userFive).depositCollateral(_hardhat.default.users.userFive.address, this.depositArgs.asset.address, this.depositArgs.amount);\nawait _hardhat.default.Diamond.connect(_hardhat.default.users.userFive).mintKreskoAsset(_hardhat.default.users.userFive.address, this.mintArgs.asset.address, this.mintArgs.amount);",
              "err": {},
              "uuid": "6acccccf-dcc2-4f21-b8c1-0b52fb2cf3cb",
              "parentUUID": "147a7885-f373-4335-9a39-98f4b61f3b92",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "72655aeb-061c-4722-ab08-875db8974b99",
              "title": "#unchecked-collateral-withdrawal",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
              "file": "/src/test/minter/05-collateral-receiver.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "52749dbe-9e21-4cf7-afd6-55d8a0abd90f",
                  "title": "#unchecked-withdraw",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should withdraw correct amount",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should withdraw correct amount",
                      "timedOut": false,
                      "duration": 468,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const withdrawalAmount = 42069;\nconst Receiver = (await getReceiver(_hardhat.default.Diamond)).connect(_hardhat.default.users.userFive);\nawait (0, _chai.expect)(Receiver.testWithdrawalAmount(this.collateral.address, withdrawalAmount)).to.not.be.revertedWith(\"wront amount received\");\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(withdrawalAmount);",
                      "err": {},
                      "uuid": "16aae96e-832b-4dd8-bcd8-4f717f56692c",
                      "parentUUID": "52749dbe-9e21-4cf7-afd6-55d8a0abd90f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should send correct values to the callback",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should send correct values to the callback",
                      "timedOut": false,
                      "duration": 349,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (await getReceiver(_hardhat.default.Diamond)).connect(_hardhat.default.users.userFive);\nconst balKreskoBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nawait Receiver.test(this.collateral.address, 1);\n(0, _chai.expect)(await Receiver.collateralAsset()).to.equal(this.collateral.address);\n(0, _chai.expect)(await Receiver.account()).to.equal(_hardhat.default.users.userFive.address);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(1);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(1);\nconst balKreskoAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(balKreskoBefore.sub(balKreskoAfter)).to.equal(1);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(1);",
                      "err": {},
                      "uuid": "98be7a84-7f63-45e4-bfc0-eb877d216b45",
                      "parentUUID": "52749dbe-9e21-4cf7-afd6-55d8a0abd90f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw collateral up to MRC without returning it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw collateral up to MRC without returning it",
                      "timedOut": false,
                      "duration": 572,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (await getReceiver(_hardhat.default.Diamond)).connect(_hardhat.default.users.userFive);\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(_hardhat.default.users.userFive.address, this.collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait Receiver.test(this.collateral.address, maxWithdrawAmount);\n(0, _chai.expect)((await Receiver.userData()).val).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(maxWithdrawAmount);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountCollateralRatio(_hardhat.default.users.userFive.address)).to.be.closeTo(15e17.toString(), 1e10.toString());\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, 10e15.toString())).to.be.revertedWith(_testutils.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                      "err": {},
                      "uuid": "3d8cb2cd-0e44-49e7-8f8b-54014231fda1",
                      "parentUUID": "52749dbe-9e21-4cf7-afd6-55d8a0abd90f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and return it",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and return it",
                      "timedOut": false,
                      "duration": 362,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (await getReceiver(_hardhat.default.Diamond)).connect(_hardhat.default.users.userFive);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userFive.address, this.collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\nconst balKreskoBefore = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\nawait Receiver.testRedeposit(this.collateral.address, deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountRequested()).to.equal(deposits);\n(0, _chai.expect)(await Receiver.withdrawalAmountReceived()).to.equal(deposits);\n(0, _chai.expect)(await this.collateral.contract.balanceOf(Receiver.address)).to.equal(0);\nconst balKreskoAfter = await this.collateral.contract.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(balKreskoBefore).to.equal(balKreskoAfter);",
                      "err": {},
                      "uuid": "3e60e5a1-e489-43f6-ba2f-523982166781",
                      "parentUUID": "52749dbe-9e21-4cf7-afd6-55d8a0abd90f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should be able to withdraw full collateral and deposit another asset in its place",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw should be able to withdraw full collateral and deposit another asset in its place",
                      "timedOut": false,
                      "duration": 495,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (await getReceiver(_hardhat.default.Diamond)).connect(_hardhat.default.users.userFive);\nconst deposits = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userFive.address, this.collateral.address);\n(0, _chai.expect)(deposits.gt(0)).to.be.true;\n// set second collateral price to half of the first and balance to twice that\nawait this.secondCollateral.setPrice((0, _lib.fromBig)(await this.collateral.getPrice(), 8));\nawait this.secondCollateral.mocks.contract.setVariable(\"_balances\", {\n    [_hardhat.default.users.userFive.address]: this.initialBalance\n});\nawait this.secondCollateral.mocks.contract.setVariable(\"_allowances\", {\n    [_hardhat.default.users.userFive.address]: {\n        [_hardhat.default.Diamond.address]: this.initialBalance,\n        [Receiver.address]: this.initialBalance\n    }\n});\nawait Receiver.testDepositAlternate(this.collateral.address, deposits, this.secondCollateral.address);\nconst secondCollateralDeposits = await _hardhat.default.Diamond.collateralDeposits(_hardhat.default.users.userFive.address, this.secondCollateral.address);\n(0, _chai.expect)(secondCollateralDeposits.eq(deposits)).to.be.true;",
                      "err": {},
                      "uuid": "9654e603-4a25-4ee2-bb50-cb0c03dbc18a",
                      "parentUUID": "52749dbe-9e21-4cf7-afd6-55d8a0abd90f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "16aae96e-832b-4dd8-bcd8-4f717f56692c",
                    "98be7a84-7f63-45e4-bfc0-eb877d216b45",
                    "3d8cb2cd-0e44-49e7-8f8b-54014231fda1",
                    "3e60e5a1-e489-43f6-ba2f-523982166781",
                    "9654e603-4a25-4ee2-bb50-cb0c03dbc18a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2246,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "91da5199-7bdd-4e6e-adbd-d27e54369c8d",
                  "title": "#unchecked-withdraw-reverts",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/minter/05-collateral-receiver.ts",
                  "file": "/src/test/minter/05-collateral-receiver.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should revert on zero withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert on zero withdrawal",
                      "timedOut": false,
                      "duration": 288,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (await getReceiver(_hardhat.default.Diamond)).connect(_hardhat.default.users.userFive);\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, 0)).to.be.revertedWith(_testutils.Error.ZERO_WITHDRAW);",
                      "err": {},
                      "uuid": "6871ac86-41f0-4607-bdc1-65c2ae1ac7c6",
                      "parentUUID": "91da5199-7bdd-4e6e-adbd-d27e54369c8d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert with no manager role",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert with no manager role",
                      "timedOut": false,
                      "duration": 410,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (await getReceiver(_hardhat.default.Diamond, false)).connect(_hardhat.default.users.userFive);\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, 1)).to.be.revertedWith(`AccessControl: account ${Receiver.address.toLowerCase()} is missing role 0x46925e0f0cc76e485772167edccb8dc449d43b23b55fc4e756b063f49099e6a0`);",
                      "err": {},
                      "uuid": "894abb9d-d079-4c6b-8269-7e027708d344",
                      "parentUUID": "91da5199-7bdd-4e6e-adbd-d27e54369c8d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after withdrawal",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after withdrawal",
                      "timedOut": false,
                      "duration": 371,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (await getReceiver(_hardhat.default.Diamond)).connect(_hardhat.default.users.userFive);\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(_hardhat.default.users.userFive.address, this.collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.test(this.collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.revertedWith(_testutils.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                      "err": {},
                      "uuid": "b66bb29b-d897-488e-91fa-fea409072938",
                      "parentUUID": "91da5199-7bdd-4e6e-adbd-d27e54369c8d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert if under MCR after redeposit",
                      "fullTitle": "CollateralReceiver - UncheckedCollateralWithdraw #unchecked-collateral-withdrawal #unchecked-withdraw-reverts should revert if under MCR after redeposit",
                      "timedOut": false,
                      "duration": 491,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const Receiver = (await getReceiver(_hardhat.default.Diamond)).connect(_hardhat.default.users.userFive);\nconst { maxWithdrawAmount  } = await (0, _collaterals.getMaxWithdrawal)(_hardhat.default.users.userFive.address, this.collateral);\n(0, _chai.expect)(maxWithdrawAmount.gt(0)).to.be.true;\nawait (0, _chai.expect)(Receiver.testInsufficientRedeposit(this.collateral.address, maxWithdrawAmount.add(0.5e18.toString()))).to.be.revertedWith(_testutils.Error.COLLATERAL_INSUFFICIENT_AMOUNT);",
                      "err": {},
                      "uuid": "12ec3e04-eaac-4ef7-8502-0cc8c94a68ec",
                      "parentUUID": "91da5199-7bdd-4e6e-adbd-d27e54369c8d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6871ac86-41f0-4607-bdc1-65c2ae1ac7c6",
                    "894abb9d-d079-4c6b-8269-7e027708d344",
                    "b66bb29b-d897-488e-91fa-fea409072938",
                    "12ec3e04-eaac-4ef7-8502-0cc8c94a68ec"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1560,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f85e40d5-ce4e-42ad-995a-817c97dff462",
          "title": "Flux Pricefeed",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-pricefeed.ts",
          "file": "/src/test/oracle/00-pricefeed.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before each\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "d3682403-0281-48ac-b06c-3feda70400e1",
              "parentUUID": "f85e40d5-ce4e-42ad-995a-817c97dff462",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Flux Pricefeed\"",
              "fullTitle": "Flux Pricefeed \"before each\" hook in \"Flux Pricefeed\"",
              "timedOut": false,
              "duration": 97,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Deploy one price feed\nconst name = \"TEST\";\nconst decimals = 8;\nconst descriptionFeed = \"Test description\";\nconst feed = await _hardhat.default.run(_tasks.TASK_DEPLOY_PRICE_FEED, {\n    name,\n    decimals,\n    description: descriptionFeed,\n    log: false\n});\nthis.deployer = await _hardhat.default.ethers.getNamedSigner(\"deployer\");\nthis.userOne = await _hardhat.default.ethers.getNamedSigner(\"userOne\");\nthis.pricefeed = feed;",
              "err": {},
              "uuid": "3fca06c2-3efd-44e9-a303-c0663c56a160",
              "parentUUID": "f85e40d5-ce4e-42ad-995a-817c97dff462",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "017d0f23-3a1b-41c8-a441-508a46222209",
              "title": "functionality",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/oracle/00-pricefeed.ts",
              "file": "/src/test/oracle/00-pricefeed.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize timestamp value once the initial answer is submitted",
                  "fullTitle": "Flux Pricefeed functionality should initialize timestamp value once the initial answer is submitted",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.pricefeed.latestTimestamp()).to.equal(0);\nawait this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address\n});\n(0, _chai.expect)(Number(await this.pricefeed.latestTimestamp())).to.be.greaterThan(0);",
                  "err": {},
                  "uuid": "44de9543-0cfc-4e28-9cda-a1e209ea5089",
                  "parentUUID": "017d0f23-3a1b-41c8-a441-508a46222209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestAnswer once it's changed",
                  "fullTitle": "Flux Pricefeed functionality should return latestAnswer once it's changed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "75e907af-e705-44f6-8630-3a1b426e3dad",
                  "parentUUID": "017d0f23-3a1b-41c8-a441-508a46222209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen once it's changed",
                  "fullTitle": "Flux Pricefeed functionality should return marketOpen once it's changed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "eab3b989-9e5f-40f1-a0b8-c2ae2925c132",
                  "parentUUID": "017d0f23-3a1b-41c8-a441-508a46222209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow non-validator to change values",
                  "fullTitle": "Flux Pricefeed functionality should not allow non-validator to change values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "30b1fafe-3912-424c-8015-5e4a765fbc75",
                  "parentUUID": "017d0f23-3a1b-41c8-a441-508a46222209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return description",
                  "fullTitle": "Flux Pricefeed functionality should return description",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.pricefeed.description()).to.equal(\"Test description\");",
                  "err": {},
                  "uuid": "742599da-49f5-4015-8797-ab2788a68f01",
                  "parentUUID": "017d0f23-3a1b-41c8-a441-508a46222209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return decimals",
                  "fullTitle": "Flux Pricefeed functionality should return decimals",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, _chai.expect)(await this.pricefeed.decimals()).to.equal(8);",
                  "err": {},
                  "uuid": "d044e9f0-2ee5-4121-9353-bd0f9b835a36",
                  "parentUUID": "017d0f23-3a1b-41c8-a441-508a46222209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRoundData correctly",
                  "fullTitle": "Flux Pricefeed functionality should return latestRoundData correctly",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address\n});\nconst roundDataCall = await this.pricefeed.latestRoundData();\nconst roundData = {\n    roundId: roundDataCall[0].toNumber(),\n    answer: roundDataCall[1].toNumber(),\n    marketOpen: roundDataCall[2].valueOf(),\n    startedAt: roundDataCall[3].toNumber(),\n    updatedAt: roundDataCall[4].toNumber(),\n    answeredInRound: roundDataCall[5].toNumber()\n};\n(0, _chai.expect)(roundData.roundId).to.gt(0);\n(0, _chai.expect)(roundData.startedAt).to.gt(0);\n(0, _chai.expect)(roundData.startedAt).to.equal(roundData.updatedAt);\n(0, _chai.expect)(roundData.answeredInRound).to.equal(roundData.roundId);\n(0, _chai.expect)(roundData.answer).to.equal(TEST_VALUE);\n(0, _chai.expect)(roundData.marketOpen).to.equal(true);",
                  "err": {},
                  "uuid": "f54a8ada-a8f0-4b73-a2f3-2cb0b2e75044",
                  "parentUUID": "017d0f23-3a1b-41c8-a441-508a46222209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getRoundData correctly",
                  "fullTitle": "Flux Pricefeed functionality should return getRoundData correctly",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address\n});\nconst roundDataCall = await this.pricefeed.getRoundData(1);\nconst roundData = {\n    roundId: roundDataCall[0].toNumber(),\n    answer: roundDataCall[1].toNumber(),\n    marketOpen: roundDataCall[2].valueOf(),\n    startedAt: roundDataCall[3].toNumber(),\n    updatedAt: roundDataCall[4].toNumber(),\n    answeredInRound: roundDataCall[5].toNumber()\n};\n(0, _chai.expect)(roundData.roundId).to.gt(0);\n(0, _chai.expect)(roundData.startedAt).to.gt(0);\n(0, _chai.expect)(roundData.startedAt).to.equal(roundData.updatedAt);\n(0, _chai.expect)(roundData.answeredInRound).to.equal(roundData.roundId);\n(0, _chai.expect)(roundData.answer).to.equal(TEST_VALUE);\n(0, _chai.expect)(roundData.marketOpen).to.equal(true);",
                  "err": {},
                  "uuid": "8028968f-04ba-432a-8e49-a09349025536",
                  "parentUUID": "017d0f23-3a1b-41c8-a441-508a46222209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return getAnswer correctly",
                  "fullTitle": "Flux Pricefeed functionality should return getAnswer correctly",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address\n});\n(0, _chai.expect)(await this.pricefeed.getAnswer(1)).to.equal(TEST_VALUE);",
                  "err": {},
                  "uuid": "ecf5e66f-ced6-46fc-8e52-148338436b7b",
                  "parentUUID": "017d0f23-3a1b-41c8-a441-508a46222209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return marketOpen correctly",
                  "fullTitle": "Flux Pricefeed functionality should return marketOpen correctly",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address\n});\n(0, _chai.expect)(await this.pricefeed.getMarketOpen(1)).to.equal(true);",
                  "err": {},
                  "uuid": "270cdecc-ce5f-4c83-b189-64f54ef6300c",
                  "parentUUID": "017d0f23-3a1b-41c8-a441-508a46222209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return latestRound correctly",
                  "fullTitle": "Flux Pricefeed functionality should return latestRound correctly",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.pricefeed.transmit(TEST_VALUE, true, {\n    from: this.deployer.address\n});\n(0, _chai.expect)(await this.pricefeed.latestRound()).to.equal(1);",
                  "err": {},
                  "uuid": "ad159626-dc02-4a35-b99a-9d4faf83c286",
                  "parentUUID": "017d0f23-3a1b-41c8-a441-508a46222209",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44de9543-0cfc-4e28-9cda-a1e209ea5089",
                "742599da-49f5-4015-8797-ab2788a68f01",
                "d044e9f0-2ee5-4121-9353-bd0f9b835a36",
                "f54a8ada-a8f0-4b73-a2f3-2cb0b2e75044",
                "8028968f-04ba-432a-8e49-a09349025536",
                "ecf5e66f-ced6-46fc-8e52-148338436b7b",
                "270cdecc-ce5f-4c83-b189-64f54ef6300c",
                "ad159626-dc02-4a35-b99a-9d4faf83c286"
              ],
              "failures": [],
              "pending": [
                "75e907af-e705-44f6-8630-3a1b426e3dad",
                "eab3b989-9e5f-40f1-a0b8-c2ae2925c132",
                "30b1fafe-3912-424c-8015-5e4a765fbc75"
              ],
              "skipped": [],
              "duration": 146,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "dd7a2111-7b15-4f59-a627-2c88dff171f5",
          "title": "Safety Council",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
          "file": "/src/test/safety/00-council.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "815a7014-1602-4e8f-ab08-a338d5cd3172",
              "parentUUID": "dd7a2111-7b15-4f59-a627-2c88dff171f5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Safety Council\"",
              "fullTitle": "Safety Council \"before each\" hook in \"Safety Council\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.collateral = _hardhat.default.collaterals.find((asset)=>asset.deployArgs.name === _testutils.defaultCollateralArgs.name);\nthis.krAsset = _hardhat.default.krAssets.find((asset)=>asset.deployArgs.symbol === _testutils.defaultKrAssetArgs.symbol);\n// These are the 5 signers on the SafetyCouncil multisig\nconst { deployer , devTwo , extOne , extTwo , extThree  } = await _hardhat.default.ethers.getNamedSigners();\nthis.deployer = deployer;\nthis.devTwo = devTwo;\nthis.extOne = extOne;\nthis.extTwo = extTwo;\nthis.extThree = extThree;",
              "err": {},
              "uuid": "01516259-00f2-4cf5-b592-e09a78636b7f",
              "parentUUID": "dd7a2111-7b15-4f59-a627-2c88dff171f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d2bdb3c1-84b4-4414-acc4-d85e2a2710d1",
              "title": "#toggleAssetsPaused",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
              "file": "/src/test/safety/00-council.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "acb14a1e-b7a5-4bd2-831d-4f2c4f8ee851",
                  "title": "multisig signature threshold",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "multisig transacts successfully with majority of signers (3/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with majority of signers (3/5)",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "e643b722-2057-4610-b116-089e4fca5b44",
                      "parentUUID": "acb14a1e-b7a5-4bd2-831d-4f2c4f8ee851",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with super-majority of signers (4/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with super-majority of signers (4/5)",
                      "timedOut": false,
                      "duration": 52,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne,\n    this.extTwo\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "30763a98-6c6d-4efc-ba20-5429e22fad70",
                      "parentUUID": "acb14a1e-b7a5-4bd2-831d-4f2c4f8ee851",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig transacts successfully with all signers (5/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig transacts successfully with all signers (5/5)",
                      "timedOut": false,
                      "duration": 54,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne,\n    this.extTwo,\n    this.extThree\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "f39e88e2-d3ac-426a-8925-3071c673c4a0",
                      "parentUUID": "acb14a1e-b7a5-4bd2-831d-4f2c4f8ee851",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "multisig should reject transactions signed by a minority of signers (2/5)",
                      "fullTitle": "Safety Council #toggleAssetsPaused multisig signature threshold multisig should reject transactions signed by a minority of signers (2/5)",
                      "timedOut": false,
                      "duration": 34,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo\n])).to.be.revertedWith(\"\");\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "2543d1f5-7bbc-46b6-8878-1c8258c0a7da",
                      "parentUUID": "acb14a1e-b7a5-4bd2-831d-4f2c4f8ee851",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e643b722-2057-4610-b116-089e4fca5b44",
                    "30763a98-6c6d-4efc-ba20-5429e22fad70",
                    "f39e88e2-d3ac-426a-8925-3071c673c4a0",
                    "2543d1f5-7bbc-46b6-8878-1c8258c0a7da"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 202,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "e070abd4-59d0-446f-ba30-5a2c79edbf9e",
                  "title": "toggle actions only for listed assets",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle actions for listed collateral assets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed collateral assets",
                      "timedOut": false,
                      "duration": 53,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "ed0326cd-c4f4-49fe-b154-41ccda73147e",
                      "parentUUID": "e070abd4-59d0-446f-ba30-5a2c79edbf9e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle actions for listed krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets can toggle actions for listed krAssets",
                      "timedOut": false,
                      "duration": 51,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.krAsset.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.krAsset.address);\n(0, _chai.expect)(isPaused).to.equal(true);",
                      "err": {},
                      "uuid": "266a2866-141a-4fa6-809d-7a6a8d5ea7d8",
                      "parentUUID": "e070abd4-59d0-446f-ba30-5a2c79edbf9e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle actions only for listed assets cannot toggle actions for addresses that are not listed collateral assets or krAssets",
                      "timedOut": false,
                      "duration": 53,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const randomAddr = _hardhat.default.ethers.utils.computeAddress(\"0xb976778317b23a1285ec2d483eda6904d9319135b89f1d8eee9f6d2593e2665d\");\nawait (0, _chai.expect)((0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        randomAddr\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n])).to.be.revertedWith(\"\");\nconst isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), randomAddr);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "1db2db2d-60c2-4e76-bdbc-6f36c71229b5",
                      "parentUUID": "e070abd4-59d0-446f-ba30-5a2c79edbf9e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ed0326cd-c4f4-49fe-b154-41ccda73147e",
                    "266a2866-141a-4fa6-809d-7a6a8d5ea7d8",
                    "1db2db2d-60c2-4e76-bdbc-6f36c71229b5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 157,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "a4116b1a-1f58-4de4-a0de-cd9ccebb3245",
                  "title": "duration based pausing",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can optionally set a timeout on a given pause command",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing can optionally set a timeout on a given pause command",
                      "timedOut": false,
                      "duration": 54,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000000;\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await _hardhat.default.Diamond.safetyStateFor(this.collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);",
                      "err": {},
                      "uuid": "c3ed68ae-9a0a-4942-86dd-27839010821c",
                      "parentUUID": "a4116b1a-1f58-4de4-a0de-cd9ccebb3245",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "fullTitle": "Safety Council #toggleAssetsPaused duration based pausing duration based pause functionality should expire after the duration has passed [PLACEHOLDER]",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const duration = 100000;\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    true,\n    duration\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst depositSafetyState = await _hardhat.default.Diamond.safetyStateFor(this.collateral.address, _testutils.Action.DEPOSIT);\n(0, _chai.expect)(depositSafetyState.length).to.equal(1);\n// Blocktime timestamp + duration should be equal to final timestamp\n(0, _chai.expect)(depositSafetyState[0].timestamp0.add(duration)).eq(depositSafetyState[0].timestamp1);\n// Confirm that the current blocktime is within the pause action's duration\nconst blockNumBefore = await _hardhat.default.ethers.provider.getBlockNumber();\nconst blockBefore = await _hardhat.default.ethers.provider.getBlock(blockNumBefore);\nconst timestampBefore = blockBefore.timestamp;\n(0, _chai.expect)(Number(depositSafetyState[0].timestamp1)).to.be.greaterThan(timestampBefore);\n// Increase time by seven days\nconst sevenDays = 7 * 24 * 60 * 60;\nawait _hardhat.default.ethers.provider.send(\"evm_increaseTime\", [\n    sevenDays\n]);\nawait _hardhat.default.ethers.provider.send(\"evm_mine\", []);\n// Confirm that block time has increased as expected\nconst blockNumAfter = await _hardhat.default.ethers.provider.getBlockNumber();\nconst blockAfter = await _hardhat.default.ethers.provider.getBlock(blockNumAfter);\nconst timestampAfter = blockAfter.timestamp;\n(0, _chai.expect)(blockNumAfter).to.be.equal(blockNumBefore + 1);\n(0, _chai.expect)(timestampAfter).to.be.equal(timestampBefore + sevenDays);\n// Confirm that the current blocktime is after the pause action's duration\n(0, _chai.expect)(timestampAfter).to.be.greaterThan(Number(depositSafetyState[0].timestamp1));\n            // NOTE: now we can test any functionality that should have now expired",
                      "err": {},
                      "uuid": "c64ba9ef-d40d-4234-95d2-7a8efe9e28a0",
                      "parentUUID": "a4116b1a-1f58-4de4-a0de-cd9ccebb3245",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c3ed68ae-9a0a-4942-86dd-27839010821c",
                    "c64ba9ef-d40d-4234-95d2-7a8efe9e28a0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 117,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "d7a58fcc-63c6-4fab-948f-7eec22edb083",
                  "title": "toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "can toggle action DEPOSIT pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action DEPOSIT pause status on and off",
                      "timedOut": false,
                      "duration": 99,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.DEPOSIT.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "4df34f13-3490-4b05-b084-deec3590126e",
                      "parentUUID": "d7a58fcc-63c6-4fab-948f-7eec22edb083",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action WITHDRAW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action WITHDRAW pause status on and off",
                      "timedOut": false,
                      "duration": 103,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.WITHDRAW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.WITHDRAW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "3350b19d-0b7c-4e5f-9d29-efb3eadf383b",
                      "parentUUID": "d7a58fcc-63c6-4fab-948f-7eec22edb083",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action REPAY pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action REPAY pause status on and off",
                      "timedOut": false,
                      "duration": 103,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.REPAY,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.REPAY.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "20fcdce6-5fba-4d23-8e0d-bf89f100d3ca",
                      "parentUUID": "d7a58fcc-63c6-4fab-948f-7eec22edb083",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action BORROW pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action BORROW pause status on and off",
                      "timedOut": false,
                      "duration": 105,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.BORROW,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.BORROW.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "93301b6f-ab29-414c-9b88-11695a3e8710",
                      "parentUUID": "d7a58fcc-63c6-4fab-948f-7eec22edb083",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "can toggle action LIQUIDATION pause status on and off",
                      "fullTitle": "Safety Council #toggleAssetsPaused toggle all possible actions: DEPOSIT, WITHDRAW, REPAY, BORROW, LIQUIDATION can toggle action LIQUIDATION pause status on and off",
                      "timedOut": false,
                      "duration": 119,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nlet isPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(true);\nawait (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.LIQUIDATION,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nisPaused = await _hardhat.default.Diamond.assetActionPaused(_testutils.Action.LIQUIDATION.toString(), this.collateral.address);\n(0, _chai.expect)(isPaused).to.equal(false);",
                      "err": {},
                      "uuid": "d7419c5c-7052-4cf5-890f-3b19a929fed3",
                      "parentUUID": "d7a58fcc-63c6-4fab-948f-7eec22edb083",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4df34f13-3490-4b05-b084-deec3590126e",
                    "3350b19d-0b7c-4e5f-9d29-efb3eadf383b",
                    "20fcdce6-5fba-4d23-8e0d-bf89f100d3ca",
                    "93301b6f-ab29-414c-9b88-11695a3e8710",
                    "d7419c5c-7052-4cf5-890f-3b19a929fed3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 529,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                },
                {
                  "uuid": "b36ddf16-1dca-462c-ba0f-ed497dbaf022",
                  "title": "event emission",
                  "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/safety/00-council.ts",
                  "file": "/src/test/safety/00-council.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "fullTitle": "Safety Council #toggleAssetsPaused event emission should emit event MinterEvent.SafetyStateChange on action changed containing action, asset, and description",
                      "timedOut": false,
                      "duration": 49,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tx = await (0, _execution.executeContractCallWithSigners)(_hardhat.default.Multisig, _hardhat.default.Diamond, \"toggleAssetsPaused\", [\n    [\n        this.collateral.address\n    ],\n    _testutils.Action.DEPOSIT,\n    false,\n    0\n], [\n    this.deployer,\n    this.devTwo,\n    this.extOne\n]);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"SafetyStateChange\");\n(0, _chai.expect)(event.action).to.equal(_testutils.Action.DEPOSIT);\n(0, _chai.expect)(event.asset).to.equal(this.collateral.address);\n// @ts-ignore\n(0, _chai.expect)(event.description.hash).to.equal(_hardhat.default.ethers.utils.keccak256(_hardhat.default.ethers.utils.toUtf8Bytes(\"paused\")));",
                      "err": {},
                      "uuid": "adc238b0-8367-49f4-ac92-9428408b925b",
                      "parentUUID": "b36ddf16-1dca-462c-ba0f-ed497dbaf022",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "adc238b0-8367-49f4-ac92-9428408b925b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 49,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 15000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "068f1bec-014a-4217-a48a-f236a83cde73",
          "title": "Interest Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/00-init.ts",
          "file": "/src/test/stability-rate/00-init.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "df1d9e88-db61-42cd-b57c-61e6d0391538",
              "parentUUID": "068f1bec-014a-4217-a48a-f236a83cde73",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Interest Rates\"",
              "fullTitle": "Interest Rates \"before each\" hook in \"Interest Rates\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.krAsset = this.krAssets.find((c)=>c.deployArgs.name === _test.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find((c)=>c.deployArgs.name === _test.defaultCollateralArgs.name);",
              "err": {},
              "uuid": "958156ab-588b-438f-8a5c-121f409aaf78",
              "parentUUID": "068f1bec-014a-4217-a48a-f236a83cde73",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3fa6f6ae-d1ff-4a24-ad29-01452787de13",
              "title": "#init",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/00-init.ts",
              "file": "/src/test/stability-rate/00-init.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "initializes correct stability rates",
                  "fullTitle": "Interest Rates #init initializes correct stability rates",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = await _hardhat.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, _chai.expect)(config.debtIndex).to.bignumber.equal(_lib.oneRay);\n(0, _chai.expect)(config.stabilityRate).to.bignumber.equal(_lib.oneRay);\n(0, _chai.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, _chai.expect)(config.rateSlope1).to.bignumber.equal(_test.defaultKrAssetArgs.stabilityRates.rateSlope1);\n(0, _chai.expect)(config.rateSlope2).to.bignumber.equal(_test.defaultKrAssetArgs.stabilityRates.rateSlope2);\n(0, _chai.expect)(config.stabilityRateBase).to.bignumber.equal(_test.defaultKrAssetArgs.stabilityRates.stabilityRateBase);\n(0, _chai.expect)(config.optimalPriceRate).to.bignumber.equal(_test.defaultKrAssetArgs.stabilityRates.optimalPriceRate);\n(0, _chai.expect)(config.priceRateDelta).to.bignumber.equal(_test.defaultKrAssetArgs.stabilityRates.priceRateDelta);",
                  "err": {},
                  "uuid": "9b72d237-83ee-4f2d-b425-5138e1c13ce6",
                  "parentUUID": "3fa6f6ae-d1ff-4a24-ad29-01452787de13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "configures correct stability rates",
                  "fullTitle": "Interest Rates #init configures correct stability rates",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const configuration = {\n    stabilityRateBase: _lib.oneRay,\n    rateSlope1: _lib.oneRay.mul(10),\n    rateSlope2: _lib.oneRay.mul(50),\n    optimalPriceRate: _lib.oneRay.div(2),\n    priceRateDelta: _lib.oneRay.div(100).mul(10)\n};\nawait _hardhat.default.Diamond.updateStabilityRateParams(this.krAsset.address, configuration);\nconst config = await _hardhat.default.Diamond.getStabilityRateConfigurationForAsset(this.krAsset.address);\n// default values\n(0, _chai.expect)(config.debtIndex).to.bignumber.equal(_lib.oneRay);\n(0, _chai.expect)(config.stabilityRate).to.bignumber.equal(_lib.oneRay);\n(0, _chai.expect)(config.asset).to.equal(this.krAsset.address);\n// configured values\n(0, _chai.expect)(config.rateSlope1).to.bignumber.equal(configuration.rateSlope1);\n(0, _chai.expect)(config.rateSlope2).to.bignumber.equal(configuration.rateSlope2);\n(0, _chai.expect)(config.stabilityRateBase).to.bignumber.equal(configuration.stabilityRateBase);\n(0, _chai.expect)(config.optimalPriceRate).to.bignumber.equal(configuration.optimalPriceRate);\n(0, _chai.expect)(config.priceRateDelta).to.bignumber.equal(configuration.priceRateDelta);",
                  "err": {},
                  "uuid": "4a17e078-f363-4738-92ff-614303f7060c",
                  "parentUUID": "3fa6f6ae-d1ff-4a24-ad29-01452787de13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cant set incorrect values",
                  "fullTitle": "Interest Rates #init cant set incorrect values",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const incorrectOptimalRate = {\n    stabilityRateBase: _lib.oneRay,\n    rateSlope1: _lib.oneRay.mul(10),\n    rateSlope2: _lib.oneRay.mul(50),\n    optimalPriceRate: _lib.oneRay.add(1),\n    priceRateDelta: _lib.oneRay.div(100).mul(10)\n};\nconst incorrectExcessRate = {\n    stabilityRateBase: _lib.oneRay,\n    rateSlope1: _lib.oneRay.mul(10),\n    rateSlope2: _lib.oneRay.mul(50),\n    optimalPriceRate: _lib.oneRay,\n    priceRateDelta: _lib.oneRay.add(1)\n};\nawait (0, _chai.expect)(_hardhat.default.Diamond.setupStabilityRateParams(this.krAsset.address, _test.defaultKrAssetArgs.stabilityRates)).to.be.reverted;\nawait (0, _chai.expect)(_hardhat.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectOptimalRate)).to.be.reverted;\nawait (0, _chai.expect)(_hardhat.default.Diamond.updateStabilityRateParams(this.krAsset.address, incorrectExcessRate)).to.be.reverted;",
                  "err": {},
                  "uuid": "2ba30a74-7b56-499a-ab5e-33e5186d91a6",
                  "parentUUID": "3fa6f6ae-d1ff-4a24-ad29-01452787de13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b72d237-83ee-4f2d-b425-5138e1c13ce6",
                "4a17e078-f363-4738-92ff-614303f7060c",
                "2ba30a74-7b56-499a-ab5e-33e5186d91a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 73,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f0d108bb-983d-4b72-a0e1-c0e654333888",
          "title": "Stability Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
          "file": "/src/test/stability-rate/01-rates.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "e23e4e22-e075-461e-b14f-afe985c85136",
              "parentUUID": "f0d108bb-983d-4b72-a0e1-c0e654333888",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 520,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userOne = _hardhat.default.users.deployer;\nthis.krAsset = this.krAssets.find((c)=>c.deployArgs.name === _test.defaultKrAssetArgs.name);\nthis.collateral = this.collaterals.find((c)=>c.deployArgs.name === _test.defaultCollateralArgs.name);\n[UniMath] = await _hardhat.default.deploy(\"UniswapMath\", {\n    from: _hardhat.default.users.deployer.address,\n    args: [\n        _hardhat.default.UniV2Factory.address,\n        _hardhat.default.UniV2Router.address\n    ]\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, _lib.toBig)(1000);\nconst kLiq = (0, _lib.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: kLiq\n});\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, _amm.addLiquidity)({\n    user: userOne,\n    router: _hardhat.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset\n});\nupdateTWAP = (0, _amm.getTWAPUpdaterFor)(pair.address);\nawait _hardhat.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "6d04d7a1-dd85-43ca-bc45-c7daa4fac146",
              "parentUUID": "f0d108bb-983d-4b72-a0e1-c0e654333888",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "694a327d-3eae-4320-820b-89e5c6cdb455",
              "title": "#no-amm-prices",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct rates and debt when there is no amm price",
                  "fullTitle": "Stability Rates #no-amm-prices calculates correct rates and debt when there is no amm price",
                  "timedOut": false,
                  "duration": 2745,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const krAssetAmount = (0, _lib.toBig)(1);\nconst krAssetNoBaseRate = await (0, _krassets.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: _ethers.BigNumber.from(0),\n    price: 10,\n    supplyLimit: 2000\n});\nconst krAssetWithBaseRate = await (0, _krassets.addMockKreskoAsset)({\n    name: \"krasset2\",\n    symbol: \"krasset2\",\n    marketOpen: true,\n    factor: 1,\n    closeFee: 0,\n    openFee: 0,\n    stabilityRateBase: _test.BASIS_POINT.mul(20),\n    price: 10,\n    supplyLimit: 2000\n});\n// Asset\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: krAssetNoBaseRate,\n    amount: krAssetAmount\n});\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: krAssetWithBaseRate,\n    amount: krAssetAmount\n});\nconst lastUpdateTimestamp = await (0, _calculations.getBlockTimestamp)();\nconst debtIndexBefore = await _hardhat.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nawait _hardhatnetworkhelpers.time.increase(+_lib.ONE_YEAR);\n// asset with no base rate and no amm price\nconst debtIndexNoBaseRate = await _hardhat.default.Diamond.getDebtIndexForAsset(krAssetNoBaseRate.address);\nconst debtScaledNoBaseRate = await _hardhat.default.Diamond.kreskoAssetDebt(userOne.address, krAssetNoBaseRate.address);\nconst debtPrincipalNoBaseRate = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetNoBaseRate.address);\nconst debtInterestNoBaseRate = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetNoBaseRate.address);\n(0, _chai.expect)(debtIndexNoBaseRate).to.equal(_lib.oneRay);\n(0, _chai.expect)(debtScaledNoBaseRate).to.equal(debtPrincipalNoBaseRate);\n(0, _chai.expect)(debtInterestNoBaseRate.kissAmount).to.equal(0);\n(0, _chai.expect)(debtInterestNoBaseRate.assetAmount).to.equal(0);\n// asset with base rate and no amm price\nconst debtIndexWithBaseRate = await _hardhat.default.Diamond.getDebtIndexForAsset(krAssetWithBaseRate.address);\nconst debtScaledWithBaseRate = await _hardhat.default.Diamond.kreskoAssetDebt(userOne.address, krAssetWithBaseRate.address);\nconst debtPrincipalWithBaseRate = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userOne.address, krAssetWithBaseRate.address);\nconst debtInterestWithBaseRate = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userOne.address, krAssetWithBaseRate.address);\nconst expectedScaledDebt = await (0, _calculations.toScaledAmount)(debtPrincipalWithBaseRate, krAssetWithBaseRate);\nconst expectedDebtIndex = await (0, _calculations.calcDebtIndex)(krAssetWithBaseRate, debtIndexBefore, lastUpdateTimestamp);\nconst expectedAssetInterest = debtScaledWithBaseRate.sub(debtPrincipalWithBaseRate);\nconst expectedKissInterestAmount = await (0, _calculations.oraclePriceToWad)(_hardhat.default.Diamond.getKrAssetValue(krAssetWithBaseRate.address, expectedAssetInterest, true));\n(0, _chai.expect)(debtIndexWithBaseRate).to.equal(expectedDebtIndex);\n(0, _chai.expect)(debtScaledWithBaseRate).to.equal(expectedScaledDebt);\n(0, _chai.expect)(debtInterestWithBaseRate.assetAmount).to.equal(expectedAssetInterest);\n(0, _chai.expect)(debtInterestWithBaseRate.kissAmount).to.equal(expectedKissInterestAmount);",
                  "err": {},
                  "uuid": "ac7294e6-a365-48f9-a9ec-7aa38ce6f371",
                  "parentUUID": "694a327d-3eae-4320-820b-89e5c6cdb455",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac7294e6-a365-48f9-a9ec-7aa38ce6f371"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2745,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "f02d9ee4-a522-4fab-906e-1d5eea7ad168",
              "title": "#price-rate",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct price rates when amm == oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm == oracle",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst ammPricesOptimal = await (0, _amm.getAMMPrices)(this.collateral, this.krAsset);\n(0, _chai.expect)(ammPricesOptimal.price0).to.be.closeTo(this.krAsset.deployArgs.price, 0.05);\nconst priceRate = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, _chai.expect)(priceRate).to.bignumber.equal(_lib.oneRay);",
                  "err": {},
                  "uuid": "dc245d5d-8ad2-4a02-aa20-60bb15265fd8",
                  "parentUUID": "f02d9ee4-a522-4fab-906e-1d5eea7ad168",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm > oracle",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm > oracle",
                  "timedOut": false,
                  "duration": 141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 105; // 105% eg. 5% premium\nconst expectedPriceRate = _test.ONE_PERCENT.mul(premiumPercentage).mul(997).div(1000);\nconst expectedPrice = this.krAsset.deployArgs.price * (premiumPercentage / 100);\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.collateral.address,\n        this.krAsset.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nconst ammPricesUpPremium = await (0, _amm.getAMMPrices)(this.collateral, this.krAsset);\n(0, _chai.expect)(ammPricesUpPremium.price0).to.be.closeTo(expectedPrice, 0.05);\nawait updateTWAP();\nconst priceRate = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, _chai.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, _test.BASIS_POINT);",
                  "err": {},
                  "uuid": "9e5b7571-a255-403b-96ae-31aba62c49d1",
                  "parentUUID": "f02d9ee4-a522-4fab-906e-1d5eea7ad168",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct price rates when amm < oracle ",
                  "fullTitle": "Stability Rates #price-rate calculates correct price rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 288,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 95; // 95% eg. 5% below oracle price\nconst expectedPriceRate = _test.ONE_PERCENT.mul(premiumPercentage).mul(1003).div(1000);\nconst expectedPrice = this.krAsset.deployArgs.price * (premiumPercentage / 100);\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nconst ammRates = await (0, _amm.getAMMPrices)(this.collateral, this.krAsset);\n(0, _chai.expect)(ammRates.price0).to.be.closeTo(expectedPrice, 0.05);\nawait updateTWAP();\nconst priceRate = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, _chai.expect)(priceRate).to.bignumber.closeTo(expectedPriceRate, _test.BASIS_POINT);",
                  "err": {},
                  "uuid": "8fb1adc3-ea4b-4cd9-b91b-af6e9d8d5a8d",
                  "parentUUID": "f02d9ee4-a522-4fab-906e-1d5eea7ad168",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc245d5d-8ad2-4a02-aa20-60bb15265fd8",
                "9e5b7571-a255-403b-96ae-31aba62c49d1",
                "8fb1adc3-ea4b-4cd9-b91b-af6e9d8d5a8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 509,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "3dee2581-02cb-4043-90c4-9d525825e41f",
              "title": "#stability-rate",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct stability rate when amm == oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rate when amm == oracle",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nconst stabilityRate = await _hardhat.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\nconst priceRate = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\n(0, _chai.expect)(priceRate).to.bignumber.equal(_lib.oneRay);\n(0, _chai.expect)(stabilityRate).to.bignumber.equal((0, _calculations.getExpectedStabilityRate)(priceRate, _test.defaultKrAssetArgs.stabilityRates));",
                  "err": {},
                  "uuid": "335f1803-1603-4efc-a791-b9df2a332e02",
                  "parentUUID": "3dee2581-02cb-4043-90c4-9d525825e41f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rate when amm > oracle",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rate when amm > oracle",
                  "timedOut": false,
                  "duration": 125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.collateral.address,\n        this.krAsset.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nconst priceRateActual = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\nconst priceRateDecimal = (0, _lib.fromBig)(priceRateActual, 27);\nconst expectedPriceRateDecimal = (0, _lib.fromBig)(_test.ONE_PERCENT.mul(premiumPercentage).mul(997).div(1000), 27);\n(0, _chai.expect)(priceRateDecimal).to.closeTo(expectedPriceRateDecimal, BPS);\nconst expectedStabilityRate = (0, _calculations.getExpectedStabilityRate)(priceRateActual, _test.defaultKrAssetArgs.stabilityRates);\nconst stabilityRate = await _hardhat.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\n(0, _chai.expect)(stabilityRate).to.bignumber.equal(expectedStabilityRate);",
                  "err": {},
                  "uuid": "13e3fae9-0e83-4fbe-80bf-33819e56bb63",
                  "parentUUID": "3dee2581-02cb-4043-90c4-9d525825e41f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct stability rates when amm < oracle ",
                  "fullTitle": "Stability Rates #stability-rate calculates correct stability rates when amm < oracle ",
                  "timedOut": false,
                  "duration": 264,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nconst priceRateActual = await _hardhat.default.Diamond.getPriceRateForAsset(this.krAsset.address);\nconst priceRateDecimal = (0, _lib.fromBig)(priceRateActual, 27);\nconst expectedPriceRateDecimal = (0, _lib.fromBig)(_test.ONE_PERCENT.mul(premiumPercentage).mul(1003).div(1000), 27);\n(0, _chai.expect)(priceRateDecimal).to.closeTo(expectedPriceRateDecimal, BPS);\nconst expectedStabilityRate = (0, _calculations.getExpectedStabilityRate)(priceRateActual, _test.defaultKrAssetArgs.stabilityRates);\nconst stabilityRate = await _hardhat.default.Diamond.getStabilityRateForAsset(this.krAsset.address);\n(0, _chai.expect)(stabilityRate).to.bignumber.equal(expectedStabilityRate);",
                  "err": {},
                  "uuid": "f8c73391-d0a9-44c4-be4a-e0983de99c13",
                  "parentUUID": "3dee2581-02cb-4043-90c4-9d525825e41f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "335f1803-1603-4efc-a791-b9df2a332e02",
                "13e3fae9-0e83-4fbe-80bf-33819e56bb63",
                "f8c73391-d0a9-44c4-be4a-e0983de99c13"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 443,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "8308d4a4-f760-47d4-bd01-0f7a87bc8ffb",
              "title": "#debt-index",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/01-rates.ts",
              "file": "/src/test/stability-rate/01-rates.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt index after a year when amm price > oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year when amm price > oracle",
                  "timedOut": false,
                  "duration": 327,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, _calculations.getBlockTimestamp)();\nawait _hardhatnetworkhelpers.time.increase(+_lib.ONE_YEAR);\nconst debtIndexAfter = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, _chai.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, _calculations.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "1b0eae78-bf4a-479f-922a-ad47cec60d85",
                  "parentUUID": "8308d4a4-f760-47d4-bd01-0f7a87bc8ffb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after year when amm price < oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after year when amm price < oracle",
                  "timedOut": false,
                  "duration": 334,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 90; // 90% eg. -10% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(1).mul(premiumPercentage).div(this.krAsset.deployArgs.price);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, _calculations.getBlockTimestamp)();\nawait _hardhatnetworkhelpers.time.increase(+_lib.ONE_YEAR);\nconst debtIndexAfter = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, _chai.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, _calculations.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "7754d99a-b8ea-4c24-b75d-8b9b27b3eb49",
                  "parentUUID": "8308d4a4-f760-47d4-bd01-0f7a87bc8ffb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt-index calculates correct debt index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debtIndexBefore = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\nconst lastUpdateTimestamp = await (0, _calculations.getBlockTimestamp)();\nawait _hardhatnetworkhelpers.time.increase(+_lib.ONE_YEAR);\nconst debtIndexAfter = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndexAfter).to.not.equal(debtIndexBefore);\n(0, _chai.expect)(debtIndexAfter).to.be.bignumber.equal(await (0, _calculations.calcDebtIndex)(this.krAsset, debtIndexBefore, lastUpdateTimestamp));",
                  "err": {},
                  "uuid": "f4e5ad79-22fc-46db-8d58-61eab2edd1a3",
                  "parentUUID": "8308d4a4-f760-47d4-bd01-0f7a87bc8ffb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b0eae78-bf4a-479f-922a-ad47cec60d85",
                "7754d99a-b8ea-4c24-b75d-8b9b27b3eb49",
                "f4e5ad79-22fc-46db-8d58-61eab2edd1a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 748,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "690eb9cc-245f-40eb-b300-fb2f52069c8c",
          "title": "Stability Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
          "file": "/src/test/stability-rate/02-debt.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "654d4195-7640-422b-b0da-7bb0f4b2b67f",
              "parentUUID": "690eb9cc-245f-40eb-b300-fb2f52069c8c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 405,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userOne = _hardhat.default.users.deployer;\nuserTwo = _hardhat.default.users.userTwo;\nthis.krAsset = _hardhat.default.krAssets.find((c)=>c.deployArgs.name === _test.defaultKrAssetArgs.name);\nthis.collateral = _hardhat.default.collaterals.find((c)=>c.deployArgs.name === _test.defaultCollateralArgs.name);\n[UniMath] = await _hardhat.default.deploy(\"UniswapMath\", {\n    from: _hardhat.default.users.deployer.address,\n    args: [\n        _hardhat.default.UniV2Factory.address,\n        _hardhat.default.UniV2Router.address\n    ]\n});\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, _lib.toBig)(1000);\nconst kLiq = (0, _lib.toBig)(100);\nawait this.collateral.setBalance(userOne, cLiq.mul(2));\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: userOne\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: userOne\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, _amm.addLiquidity)({\n    user: userOne,\n    router: _hardhat.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset\n});\nupdateTWAP = (0, _amm.getTWAPUpdaterFor)(pair.address);\nawait _hardhat.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "aeabb1b3-3f83-467c-bb94-552c9bc6049c",
              "parentUUID": "690eb9cc-245f-40eb-b300-fb2f52069c8c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ba8160db-ae58-4a82-b807-ad947b8092ce",
              "title": "#debt calculation - mint",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - mint\"",
                  "fullTitle": "Stability Rates #debt calculation - mint \"before each\" hook in \"#debt calculation - mint\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "fe60cda3-a2e5-448e-9c22-fbabdcc04e84",
                  "parentUUID": "ba8160db-ae58-4a82-b807-ad947b8092ce",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct debt amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 495,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 105; // 105% eg. 5% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait _hardhatnetworkhelpers.time.increase(+_calculations.ONE_YEAR);\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debtAfterYear).to.not.bignumber.equal(debt);\n(0, _chai.expect)(debtAfterYear).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "9bc773dc-ba80-41ac-b7cf-92a6dd9b20e7",
                  "parentUUID": "ba8160db-ae58-4a82-b807-ad947b8092ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct debt amount when amm price < oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct debt amount when amm price < oracle",
                  "timedOut": false,
                  "duration": 510,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 95; // 95% eg. -5% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait _hardhatnetworkhelpers.time.increase(+_calculations.ONE_YEAR);\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debtAfterYear).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "ece0a65c-75f3-4929-a473-79ed3459191e",
                  "parentUUID": "ba8160db-ae58-4a82-b807-ad947b8092ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - mint calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 265,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait _hardhatnetworkhelpers.time.increase(+_calculations.ONE_YEAR);\nconst debtIndex = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndex.gt(_lib.oneRay)).to.be.true;\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debtAfterYear).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));",
                  "err": {},
                  "uuid": "52a22cd7-5535-42aa-8ff6-a9d77dd0e978",
                  "parentUUID": "ba8160db-ae58-4a82-b807-ad947b8092ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bc773dc-ba80-41ac-b7cf-92a6dd9b20e7",
                "ece0a65c-75f3-4929-a473-79ed3459191e",
                "52a22cd7-5535-42aa-8ff6-a9d77dd0e978"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1270,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "bf822d40-cbd4-4289-9e2a-4f3426379577",
              "title": "#debt calculation - repay",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay\"",
                  "fullTitle": "Stability Rates #debt calculation - repay \"before each\" hook in \"#debt calculation - repay\"",
                  "timedOut": false,
                  "duration": 10,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "df01471c-55c0-49c5-94e7-5403fd13a579",
                  "parentUUID": "bf822d40-cbd4-4289-9e2a-4f3426379577",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 458,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 102; // 102% eg. 2% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait this.collateral.setBalance(userOne, amountIn);\n// buy asset, increases price\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.collateral.address,\n        this.krAsset.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.equal(await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset));\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalBefore = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst burnAmount = mintAmount.div(2);\nawait (0, _krassets.burnKrAsset)({\n    asset: this.krAsset,\n    amount: burnAmount,\n    user: userTwo\n});\nconst debtAfterBurn = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst principalAfter = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(principalAfter).to.equal(principalBefore.sub(burnAmount));\n(0, _chai.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(burnAmount), _hardhat.default.ethers.utils.parseUnits(\"10\", \"gwei\"));",
                  "err": {},
                  "uuid": "87488203-a526-4fb8-ad58-9cce11f80ebf",
                  "parentUUID": "bf822d40-cbd4-4289-9e2a-4f3426379577",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct repay amount when amm price > oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct repay amount when amm price > oracle",
                  "timedOut": false,
                  "duration": 630,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nconst premiumPercentage = 98; // 101% eg. 1% premium\nconst krAssetAmount = (0, _lib.toBig)(1);\nconst collateralAmount = (0, _lib.toBig)(10).div(100).mul(premiumPercentage);\nconst [amountIn] = await UniMath.profitMaximizingTrade(this.collateral.address, this.krAsset.address, collateralAmount, krAssetAmount);\nawait (0, _krassets.mintKrAsset)({\n    user: userOne,\n    asset: this.krAsset,\n    amount: amountIn\n});\n// dump asset, decreases price\nawait (0, _amm.swap)({\n    amount: amountIn,\n    route: [\n        this.krAsset.address,\n        this.collateral.address\n    ],\n    router: _hardhat.default.UniV2Router,\n    user: userOne\n});\nawait updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait _hardhatnetworkhelpers.time.increase(year);\nconst debtIndex = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndex.gt(_lib.oneRay)).to.be.true;\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, _krassets.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo\n});\nconst debtAfterBurn = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), _lib.oneRay.div(10000));",
                  "err": {},
                  "uuid": "1fcc8d6a-0e92-4744-b27b-f17555834cf5",
                  "parentUUID": "bf822d40-cbd4-4289-9e2a-4f3426379577",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calculates correct rate index after a year for amm price == oracle",
                  "fullTitle": "Stability Rates #debt calculation - repay calculates correct rate index after a year for amm price == oracle",
                  "timedOut": false,
                  "duration": 492,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await updateTWAP();\nawait _hardhat.default.Diamond.updateStabilityRateAndIndexForAsset(this.krAsset.address);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.bignumber.closeTo(mintAmount, 10);\nconst year = 60 * 60 * 24 * 365;\nawait _hardhatnetworkhelpers.time.increase(year);\nconst debtIndex = await _hardhat.default.Diamond.getDebtIndexForAsset(this.krAsset.address);\n(0, _chai.expect)(debtIndex.gt(_lib.oneRay)).to.be.true;\nconst debtAfterYear = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst halfBalanceAfterYear = (await this.krAsset.contract.balanceOf(userTwo.address)).div(2);\nawait (0, _krassets.burnKrAsset)({\n    asset: this.krAsset,\n    amount: halfBalanceAfterYear,\n    user: userTwo\n});\nconst debtAfterBurn = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debtAfterBurn).to.bignumber.closeTo(debtAfterYear.sub(halfBalanceAfterYear), _lib.oneRay.div(10000));",
                  "err": {},
                  "uuid": "0c0b5494-ad29-4609-b837-c4b28701a2dd",
                  "parentUUID": "bf822d40-cbd4-4289-9e2a-4f3426379577",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87488203-a526-4fb8-ad58-9cce11f80ebf",
                "1fcc8d6a-0e92-4744-b27b-f17555834cf5",
                "0c0b5494-ad29-4609-b837-c4b28701a2dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1580,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "50acf02f-461d-4db3-8232-2282306be5fd",
              "title": "#debt calculation - repay interest",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/02-debt.ts",
              "file": "/src/test/stability-rate/02-debt.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#debt calculation - repay interest\"",
                  "fullTitle": "Stability Rates #debt calculation - repay interest \"before each\" hook in \"#debt calculation - repay interest\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);",
                  "err": {},
                  "uuid": "fc5b8450-b220-45f8-9be9-4d40a7b739a7",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can view account principal debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account principal debt for asset",
                  "timedOut": false,
                  "duration": 225,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst expectedPrincipalDebt = mintAmount.mul(2);\nconst principalDebtAfterOneYear = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(principalDebtAfterOneYear).to.bignumber.equal(expectedPrincipalDebt);",
                  "err": {},
                  "uuid": "da8cc7ce-f422-4eec-8187-9725ce4bf117",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view account scaled debt for asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view account scaled debt for asset",
                  "timedOut": false,
                  "duration": 275,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst principalDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst accruedInterest = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst expectedScaledDebt = principalDebt.add(accruedInterest.assetAmount);\nconst scaledDebt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(scaledDebt).to.bignumber.equal(expectedScaledDebt);",
                  "err": {},
                  "uuid": "48a822df-1828-45f7-9cea-9bce06ba0b83",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can view accrued interest in KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can view accrued interest in KISS",
                  "timedOut": false,
                  "duration": 456,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nconst principalDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst scaledDebt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst expectedValue = await _hardhat.default.Diamond.getKrAssetValue(this.krAsset.address, scaledDebt.sub(principalDebt), true);\nconst accruedInterest = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// 8 decimals\n(0, _chai.expect)(accruedInterest.kissAmount).to.bignumber.equal(expectedValue.mul(10 ** 10));",
                  "err": {},
                  "uuid": "aa0901ad-97e0-443d-924f-943c0fbcebb1",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay full interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay full interest with KISS",
                  "timedOut": false,
                  "duration": 345,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo\n});\n// get the principal before repayment\nconst principalDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait _hardhat.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// get values after repayment\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterest = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(accruedInterest.assetAmount).to.bignumber.eq(0);\n(0, _chai.expect)(debt).to.bignumber.eq(principalDebt);",
                  "err": {},
                  "uuid": "103dec03-5f76-4c42-a865-bfd8ab11dee7",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay partial interest with KISS",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay partial interest with KISS",
                  "timedOut": false,
                  "duration": 371,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo\n});\nconst accruedInterestBefore = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// get the principal before repayment\nconst debtBefore = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst repaymentAmount = accruedInterestBefore.kissAmount.div(5);\nconst repaymentAmountAsset = accruedInterestBefore.assetAmount.div(5);\n// repay accrued interest\nawait _hardhat.default.Diamond.connect(userTwo).repayStabilityRateInterestPartial(userTwo.address, this.krAsset.address, repaymentAmount);\n// get values after repayment\nconst debtAfter = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\nconst accruedInterestAfter = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// TODO: calc exact values instead of closeTo\n(0, _chai.expect)(accruedInterestAfter.kissAmount).to.be.closeTo(accruedInterestBefore.kissAmount.sub(repaymentAmount), RATE_DELTA);\n(0, _chai.expect)(debtAfter).to.be.closeTo(debtBefore.sub(repaymentAmountAsset), RATE_DELTA);",
                  "err": {},
                  "uuid": "988888b7-1c1f-41b8-9f42-45fc1b8fd4b1",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest for multiple assets in batch",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest for multiple assets in batch",
                  "timedOut": false,
                  "duration": 4561,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\n    \"krasset2\",\n    \"krasset3\",\n    \"krasset4\"\n].map(async (name)=>await (0, _krassets.addMockKreskoAsset)({\n        name: name,\n        symbol: name,\n        marketOpen: true,\n        factor: 1,\n        closeFee: 0,\n        openFee: 0,\n        price: 10,\n        supplyLimit: 2000,\n        stabilityRateBase: _test.BASIS_POINT.mul(1000)\n    })));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmountSmall,\n        user: userTwo\n    })));\nconst totalInterestInKISSBefore = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map((asset)=>_hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c)=>a.add(c.kissAmount), _ethers.BigNumber.from(0));\nconst totalInterestInKISSAfter = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, _chai.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, _chai.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nconst KISSMinAmount = (0, _lib.toBig)(10);\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: KISSMinAmount,\n    user: userTwo\n});\nawait _hardhat.default.Diamond.connect(userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, _chai.expect)(totalInterestInKISSAfterRepay).to.equal(0);",
                  "err": {},
                  "uuid": "43c1ab22-84c2-411a-b323-8ac8a4a4be62",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can repay all interest and principal for a single asset",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can repay all interest and principal for a single asset",
                  "timedOut": false,
                  "duration": 591,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst accruedInterestBeforeBurn = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// repay accrued interest\nawait _hardhat.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, _hardhat.default.ethers.constants.MaxUint256, 0);\nconst accruedInterestAfterBurn = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Ensure burning does not wipe interest accrued\n(0, _chai.expect)(accruedInterestAfterBurn.assetAmount.gt(accruedInterestBeforeBurn.assetAmount)).to.be.true;\n(0, _chai.expect)(accruedInterestAfterBurn.kissAmount.gt(accruedInterestBeforeBurn.kissAmount)).to.be.true;\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore.length).to.equal(2);\nawait _hardhat.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter.length).to.equal(1);\nconst accruedInterestAfterRepayment = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\nconst principalDebt = await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address);\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n// Ensure debt actually gets wiped\n(0, _chai.expect)(principalDebt).to.equal(0);\n(0, _chai.expect)(accruedInterestAfterRepayment.assetAmount).to.equal(0);\n(0, _chai.expect)(accruedInterestAfterRepayment.kissAmount).to.equal(0);\n(0, _chai.expect)(debt).to.equal(0);\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst accruedInterestYearAfterRepayment = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n// Sanity check with another year of time that there is no interest accrual\n(0, _chai.expect)(accruedInterestYearAfterRepayment.assetAmount).to.equal(0);\n(0, _chai.expect)(accruedInterestYearAfterRepayment.kissAmount).to.equal(0);\n// Get kr asset value, should be only KISS minted that remains\nconst krAssetValue = await _hardhat.default.Diamond.getAccountKrAssetValue(userTwo.address);\n(0, _chai.expect)(krAssetValue).to.equal((0, _lib.toBig)(10, 8));",
                  "err": {},
                  "uuid": "604e71d0-6235-42b3-80f6-e762eedb7ad1",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch repay interest and all debt",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can batch repay interest and all debt",
                  "timedOut": false,
                  "duration": 4958,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait this.collateral.setBalance(userTwo, depositAmountBig);\n// Deposit a bit more to cover the mints\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmountBig,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo\n});\n// Create few krAssets\nconst krAssets = await Promise.all([\n    \"krasset2\",\n    \"krasset3\",\n    \"krasset4\"\n].map(async (name)=>await (0, _krassets.addMockKreskoAsset)({\n        name: name,\n        symbol: name,\n        marketOpen: true,\n        factor: 1,\n        closeFee: 0,\n        openFee: 0,\n        price: 10,\n        supplyLimit: 2000,\n        stabilityRateBase: _test.BASIS_POINT.mul(1000)\n    })));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmountSmall,\n        user: userTwo\n    })));\nconst totalInterestInKISSBefore = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// increase time\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst interestAccrued = await Promise.all(krAssets.map((asset)=>_hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, asset.address)));\nconst expectedKissAmount = interestAccrued.reduce((a, c)=>a.add(c.kissAmount), _ethers.BigNumber.from(0));\nconst totalInterestInKISSAfter = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, _chai.expect)(totalInterestInKISSBefore.lt(totalInterestInKISSAfter)).to.be.true;\n(0, _chai.expect)(totalInterestInKISSAfter).to.bignumber.equal(expectedKissAmount);\nawait Promise.all(krAssets.map(async (asset)=>_hardhat.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, asset.address, _hardhat.default.ethers.constants.MaxUint256, await _hardhat.default.Diamond.getMintedKreskoAssetsIndex(userTwo.address, asset.address))));\nconst mintedKreskoAssetsBefore = await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, _chai.expect)(mintedKreskoAssetsBefore.length).to.equal(4);\nawait _hardhat.default.Diamond.connect(userTwo).batchRepayFullStabilityRateInterest(userTwo.address);\nconst totalInterestInKISSAfterRepay = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, _chai.expect)(totalInterestInKISSAfterRepay).to.equal(0);\nconst mintedKreskoAssetsAfter = await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address);\n(0, _chai.expect)(mintedKreskoAssetsAfter.length).to.equal(1);",
                  "err": {},
                  "uuid": "f6c7e045-1159-437d-bc5e-fd6bb10c37d4",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can open up a new debt positions after wiping all debt + interest",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can open up a new debt positions after wiping all debt + interest",
                  "timedOut": false,
                  "duration": 954,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst expectedDebtAfterOneYear = await (0, _calculations.toScaledAmountUser)(userTwo, mintAmount, this.krAsset);\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(expectedDebtAfterOneYear);\n// Wipe debt\nawait _hardhat.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, _hardhat.default.ethers.constants.MaxUint256, 0);\nconst accruedInterest = (await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address)).assetAmount;\n// Mint again, before interest repayment\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\n// Ensure debt is principal + interest\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.closeTo(mintAmount.add(accruedInterest), RATE_DELTA);\n// Burn all assets\nawait _hardhat.default.Diamond.connect(userTwo).burnKreskoAsset(userTwo.address, this.krAsset.address, _hardhat.default.ethers.constants.MaxUint256, 0);\n// Ensure debt is equal to interest\nconst accruedInterestAfterBurn = (await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address)).assetAmount;\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(accruedInterestAfterBurn);\n// Repay all interest\nawait _hardhat.default.Diamond.connect(userTwo).repayFullStabilityRateInterest(userTwo.address, this.krAsset.address);\n// Debt should be wiped\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n// Mint again\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\n// Scaled should be equal to principal\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(mintAmount);\n// Advance time\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\n// Ensure accrual is the same as the previous year with the same position\nconst debt = await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(debt).to.eq(expectedDebtAfterOneYear);",
                  "err": {},
                  "uuid": "8cc6d82c-a500-4e46-81b2-e2e57102aa61",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close a position in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close a position in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 549,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst minDebtAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: minDebtAmount,\n    user: userOne\n});\nawait KISS.connect(userOne).transfer(userTwo.address, minDebtAmount);\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: mintAmount,\n    user: userTwo\n});\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nawait _hardhat.default.Diamond.connect(userTwo).closeKrAssetDebtPosition(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebt(userTwo.address, this.krAsset.address)).to.eq(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.kreskoAssetDebtPrincipal(userTwo.address, this.krAsset.address)).to.eq(0);\nconst accruedInterest = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, this.krAsset.address);\n(0, _chai.expect)(accruedInterest.assetAmount).to.eq(0);\n(0, _chai.expect)(accruedInterest.kissAmount).to.eq(0);\n(0, _chai.expect)((await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "e9221d18-4d75-459c-9d78-cd9f947190ee",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can fully close all positions and interest in single transaction using the helper function",
                  "fullTitle": "Stability Rates #debt calculation - repay interest can fully close all positions and interest in single transaction using the helper function",
                  "timedOut": false,
                  "duration": 4582,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(userTwo).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nconst kissAmount = (await _hardhat.default.Diamond.minimumDebtValue()).mul(10 ** 10).mul(2);\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: kissAmount,\n    user: userOne\n});\nawait KISS.connect(userOne).transfer(userTwo.address, kissAmount);\nconst krAssets = await Promise.all([\n    \"krasset2\",\n    \"krasset3\",\n    \"krasset4\"\n].map(async (name)=>await (0, _krassets.addMockKreskoAsset)({\n        name: name,\n        symbol: name,\n        marketOpen: true,\n        factor: 1,\n        closeFee: 0,\n        openFee: 0,\n        price: 10,\n        supplyLimit: 2000,\n        stabilityRateBase: _test.BASIS_POINT.mul(1000)\n    })));\n// mint small amount of each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmountSmall,\n        user: userTwo\n    })));\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\n// ~1M gas with 8 krAssets\n// console.log(+(await tx.wait()).gasUsed);\nawait _hardhat.default.Diamond.connect(userTwo).batchCloseKrAssetDebtPositions(userTwo.address);\nconst accruedInterest = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n(0, _chai.expect)(accruedInterest).to.eq(0);\n(0, _chai.expect)(await _hardhat.default.Diamond.getAccountKrAssetValue(userTwo.address)).to.eq(0);\n(0, _chai.expect)((await _hardhat.default.Diamond.getMintedKreskoAssets(userTwo.address)).length).to.eq(0);",
                  "err": {},
                  "uuid": "8fc30d12-0fa4-4e9d-9e4d-8a1f54ffc094",
                  "parentUUID": "50acf02f-461d-4db3-8232-2282306be5fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da8cc7ce-f422-4eec-8187-9725ce4bf117",
                "48a822df-1828-45f7-9cea-9bce06ba0b83",
                "aa0901ad-97e0-443d-924f-943c0fbcebb1",
                "103dec03-5f76-4c42-a865-bfd8ab11dee7",
                "988888b7-1c1f-41b8-9f42-45fc1b8fd4b1",
                "43c1ab22-84c2-411a-b323-8ac8a4a4be62",
                "604e71d0-6235-42b3-80f6-e762eedb7ad1",
                "f6c7e045-1159-437d-bc5e-fd6bb10c37d4",
                "8cc6d82c-a500-4e46-81b2-e2e57102aa61",
                "e9221d18-4d75-459c-9d78-cd9f947190ee",
                "8fc30d12-0fa4-4e9d-9e4d-8a1f54ffc094"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17867,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "4259c221-5409-42cd-a2f6-a58e442d44eb",
          "title": "Stability Rates",
          "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
          "file": "/src/test/stability-rate/03-liquidation.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fixture = await _hardhat.default.deployments.createFixture(async (hre)=>{\n    const result = await hre.deployments.fixture(fixtureName);\n    if (result.Diamond) {\n        hre.Diamond = await hre.getContractOrFork(\"Kresko\");\n    }\n    return {\n        facets: result.Diamond ? result.Diamond.facets : [],\n        collaterals: hre.collaterals,\n        krAssets: hre.krAssets\n    };\n})();\nthis.facets = fixture.facets || [];\nthis.collaterals = fixture.collaterals;\nthis.krAssets = fixture.krAssets;",
              "err": {},
              "uuid": "ada21890-2d00-41ca-bcee-1d037abb7edf",
              "parentUUID": "4259c221-5409-42cd-a2f6-a58e442d44eb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Stability Rates\"",
              "fullTitle": "Stability Rates \"before each\" hook in \"Stability Rates\"",
              "timedOut": false,
              "duration": 444,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "liquidator = _hardhat.default.users.deployer;\nuserTwo = _hardhat.default.users.userTwo;\nthis.krAsset = _hardhat.default.krAssets.find((c)=>c.deployArgs.name === _test.defaultKrAssetArgs.name);\nthis.collateral = _hardhat.default.collaterals.find((c)=>c.deployArgs.name === _test.defaultCollateralArgs.name);\nconst krAssetOraclePrice = 10;\nthis.krAsset.setPrice(krAssetOraclePrice);\nconst cLiq = (0, _lib.toBig)(1000);\nconst kLiq = (0, _lib.toBig)(100);\nawait this.collateral.setBalance(liquidator, cLiq.mul(2));\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: cLiq,\n    user: liquidator\n});\nawait (0, _krassets.mintKrAsset)({\n    asset: this.krAsset,\n    amount: kLiq,\n    user: liquidator\n});\nconst anchorBalance = await this.krAsset.anchor.balanceOf(_hardhat.default.Diamond.address);\n(0, _chai.expect)(anchorBalance).to.equal(kLiq);\n// 1000/100 = krAsset amm price 10\nconst pair = await (0, _amm.addLiquidity)({\n    user: liquidator,\n    router: _hardhat.default.UniV2Router,\n    amount0: cLiq,\n    amount1: kLiq,\n    token0: this.collateral,\n    token1: this.krAsset\n});\nupdateTWAP = (0, _amm.getTWAPUpdaterFor)(pair.address);\nawait _hardhat.default.UniV2Oracle.initPair(pair.address, this.krAsset.address, 60 * 60);\nawait updateTWAP();",
              "err": {},
              "uuid": "17997306-249d-48da-941e-a3dfe2ce90d9",
              "parentUUID": "4259c221-5409-42cd-a2f6-a58e442d44eb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ef8ce53d-b70c-497c-b251-a2c92c0d05bd",
              "title": "#stability rate - liquidation",
              "fullFile": "/Users/panukettunen/Projects/kresko-protocol/src/test/stability-rate/03-liquidation.ts",
              "file": "/src/test/stability-rate/03-liquidation.ts",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"#stability rate - liquidation\"",
                  "fullTitle": "Stability Rates #stability rate - liquidation \"before each\" hook in \"#stability rate - liquidation\"",
                  "timedOut": false,
                  "duration": 3719,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Create few krAssets\nkrAssets = await Promise.all([\n    \"krasset2\",\n    \"krasset3\",\n    \"krasset4\"\n].map(async (name)=>await (0, _krassets.addMockKreskoAsset)({\n        name: name,\n        symbol: name,\n        marketOpen: true,\n        factor: 1.1,\n        closeFee: 0,\n        openFee: 0,\n        price: 10,\n        supplyLimit: 2000,\n        stabilityRateBase: _test.BASIS_POINT.mul(1000)\n    })));",
                  "err": {},
                  "uuid": "dfbcce11-6362-4c79-bae5-3284875d2abc",
                  "parentUUID": "ef8ce53d-b70c-497c-b251-a2c92c0d05bd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cannot liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 570,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\n// mint each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmount,\n        user: userTwo\n    })));\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\nconst krAsset = krAssets[0];\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "2e41aa3d-3eb2-428b-8aa2-8be0590cfc63",
                  "parentUUID": "ef8ce53d-b70c-497c-b251-a2c92c0d05bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "cannot batch liquidate accrued interest of healthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation cannot batch liquidate accrued interest of healthy account",
                  "timedOut": false,
                  "duration": 566,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\n// mint each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmount,\n        user: userTwo\n    })));\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR);\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait (0, _chai.expect)(_hardhat.default.Diamond.connect(liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address)).to.be.revertedWith(_errors.Error.NOT_LIQUIDATABLE);",
                  "err": {},
                  "uuid": "8b6661ce-3c05-457b-b9c0-94d8ba332cdf",
                  "parentUUID": "ef8ce53d-b70c-497c-b251-a2c92c0d05bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 1206,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\n// mint each krasset\nawait Promise.all([\n    await KISS.connect(liquidator).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256),\n    await this.collateral.setBalance(userTwo, depositAmount),\n    // Deposit a bit more to cover the mints\n    await (0, _collaterals.depositCollateral)({\n        asset: this.collateral,\n        amount: depositAmount,\n        user: userTwo\n    }),\n    ...krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n            asset: krAsset,\n            amount: mintAmount,\n            user: userTwo\n        }))\n]);\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map((asset)=>asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR * 4);\n// should be liquidatable\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\n// Asset to liquidate\nconst krAsset = krAssets[0];\nconst interestUSDTotal = await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address);\n// Liquidator mints KISS\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: interestUSDTotal.add((0, _lib.toBig)(1)),\n    user: liquidator\n});\n// liquidatable value total before\nconst accruedKissInterest = (0, _lib.fromBig)((await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address)).kissAmount);\nconst accountCollateralBefore = await _hardhat.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, _lib.toBig)(0));\n// Liquidate\nconst tx = await _hardhat.default.Diamond.connect(liquidator).liquidateInterest(userTwo.address, krAsset.address, this.collateral.address);\n// Should all be wiped\nconst interestAccruedAfterLiq = await _hardhat.default.Diamond.kreskoAssetDebtInterest(userTwo.address, krAsset.address);\n(0, _chai.expect)(interestAccruedAfterLiq.kissAmount).to.eq(0);\n(0, _chai.expect)(interestAccruedAfterLiq.assetAmount).to.eq(0);\nconst accountCollateralAfter = await _hardhat.default.Diamond.collateralDeposits(userTwo.address, this.collateral.address);\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"InterestLiquidationOccurred\");\n// validate interest accrual changes\n(0, _chai.expect)(accountCollateralAfter).to.equal(accountCollateralBefore.sub(event.collateralSent));\nconst liquidationIncentive = (0, _lib.fromBig)((await _hardhat.default.Diamond.collateralAsset(this.collateral.address)).liquidationIncentive);\nconst expectedCollateral = accruedKissInterest / (0, _lib.fromBig)(await this.collateral.getPrice(), 8) * liquidationIncentive;\n// event validation\n(0, _chai.expect)(event.account).to.equal(userTwo.address);\n(0, _chai.expect)(event.liquidator).to.equal(liquidator.address);\n(0, _chai.expect)(event.repayKreskoAsset).to.equal(krAsset.address);\n(0, _chai.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)((0, _lib.fromBig)(event.repayUSD)).to.closeTo(accruedKissInterest, 0.0001);\n(0, _chai.expect)((0, _lib.fromBig)(event.collateralSent).toFixed(6)).to.equal(expectedCollateral.toFixed(6));\n// liquidator received collateral\n(0, _chai.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "afb3633d-9deb-4f36-81a1-20d42df8741a",
                  "parentUUID": "ef8ce53d-b70c-497c-b251-a2c92c0d05bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can batch liquidate accrued interest of unhealthy account",
                  "fullTitle": "Stability Rates #stability rate - liquidation can batch liquidate accrued interest of unhealthy account",
                  "timedOut": false,
                  "duration": 1444,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const KISS = await _hardhat.default.getContractOrFork(\"KISS\");\nawait KISS.connect(liquidator).approve(_hardhat.default.Diamond.address, _hardhat.default.ethers.constants.MaxUint256);\nawait this.collateral.setBalance(userTwo, depositAmount);\n// Deposit a bit more to cover the mints\nawait (0, _collaterals.depositCollateral)({\n    asset: this.collateral,\n    amount: depositAmount,\n    user: userTwo\n});\n// mint each krasset\nawait Promise.all(krAssets.map((krAsset)=>(0, _krassets.mintKrAsset)({\n        asset: krAsset,\n        amount: mintAmount,\n        user: userTwo\n    })));\n// Up the asset prices\nconst newPrice = 15;\nkrAssets.map((asset)=>asset.setPrice(newPrice));\n// increase time so account is liquidatable\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nawait _hardhatnetworkhelpers.time.increase(_calculations.ONE_YEAR * 4);\n// should be liquidatable\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.true;\nconst interestKissTotal = (0, _lib.fromBig)(await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n// Liquidator mints KISS\nawait (0, _krassets.mintKrAsset)({\n    asset: KISS,\n    amount: interestKissTotal + 1,\n    user: liquidator\n});\n// Wipe seized collateral balance before liquidation for easy comparison\nawait this.collateral.setBalance(liquidator, (0, _lib.toBig)(0));\n// Liquidate\nconst tx = await _hardhat.default.Diamond.connect(liquidator).batchLiquidateInterest(userTwo.address, this.collateral.address);\nconst interestKissTotalAfter = (0, _lib.fromBig)(await _hardhat.default.Diamond.kreskoAssetDebtInterestTotal(userTwo.address));\n(0, _chai.expect)(await _hardhat.default.Diamond.isAccountLiquidatable(userTwo.address)).to.be.false;\nconst event = await (0, _lib.getInternalEvent)(tx, _hardhat.default.Diamond, \"BatchInterestLiquidationOccurred\");\nconst repayUSD = (0, _lib.fromBig)(event.repayUSD);\n// interest accrued changes\n(0, _chai.expect)(interestKissTotalAfter).to.closeTo(interestKissTotal - (0, _lib.fromBig)(event.repayUSD), 0.0001);\nconst liquidationIncentive = (0, _lib.fromBig)((await _hardhat.default.Diamond.collateralAsset(this.collateral.address)).liquidationIncentive);\nconst expectedCollateral = repayUSD / (0, _lib.fromBig)(await this.collateral.getPrice(), 8) * liquidationIncentive;\n// event validation\n(0, _chai.expect)(event.account).to.equal(userTwo.address);\n(0, _chai.expect)(event.liquidator).to.equal(liquidator.address);\n(0, _chai.expect)(event.seizedCollateralAsset).to.equal(this.collateral.address);\n(0, _chai.expect)((0, _lib.fromBig)(event.collateralSent)).to.closeTo(expectedCollateral, 0.0001);\n(0, _chai.expect)(repayUSD).to.closeTo(interestKissTotal - interestKissTotalAfter, 0.0001);\n// liquidator received collateral\n(0, _chai.expect)(await this.collateral.contract.balanceOf(liquidator.address)).to.equal(event.collateralSent);",
                  "err": {},
                  "uuid": "84c0b91e-1984-4c82-a7c9-dcce31c3b775",
                  "parentUUID": "ef8ce53d-b70c-497c-b251-a2c92c0d05bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e41aa3d-3eb2-428b-8aa2-8be0590cfc63",
                "8b6661ce-3c05-457b-b9c0-94d8ba332cdf",
                "afb3633d-9deb-4f36-81a1-20d42df8741a",
                "84c0b91e-1984-4c82-a7c9-dcce31c3b775"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3786,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}